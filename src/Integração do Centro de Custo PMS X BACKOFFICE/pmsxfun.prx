#include "protheus.ch"
#include "pmsxfun.ch"
#include "dbtree.ch"
#include "pmsicons.ch"
#include "tbiconn.ch"

#DEFINE FILTER_AFN 01
#DEFINE FILTER_AFS 02
#DEFINE FILTER_AFI 03
#DEFINE FILTER_AFU 04
#DEFINE FILTER_AJC 05
#DEFINE FILTER_AFR 06
#DEFINE FILTER_AJE 07
#DEFINE FILTER_AFM 08
#DEFINE FILTER_LENGTH 08

STATIC aCrteProc := {.T.,.T.,.T.,.T.,.T.,.T.,.T.}
STATIC cCrteFSB1 := ""
STATIC cCrteFAE8 := ""
STATIC cCrteFAF9 := ""
STATIC aHeaderAFG := {}
STATIC nQtMaxSC   := 0
STATIC aHeaderAFH := {}
STATIC nQtMaxSA   := 0
STATIC aHeaderAFL := {}
STATIC nQtMaxCP   := 0
STATIC aHeaderAFM := {}
STATIC nQtMaxOP   := 0
STATIC aHeaderAFN := {}
STATIC aHeaderAFZ := {}
STATIC nQtMaxNF   := 0
STATIC aHeaderAFR := {}
STATIC aHeaderAJE := {}
STATIC aHeaderAFT := {}
STATIC aChkExc		:= {}
STATIC nTimeAtu
STATIC nProcAtu
STATIC nEscalaAtu
STATIC nProcRegua := 0
STATIC oBPMSEDT1
STATIC oBPMSEDT2
STATIC oBPMSEDT3
STATIC oBPMSEDT4
STATIC oBPMSTASK1
STATIC oBPMSTASK2
STATIC oBPMSTASK3
STATIC oBPMSTASK4
STATIC oBPMSTASK5

//Static para uso do Template de CCTR
STATIC cCCTRFrente := Space(15)

STATIC lBlockDel := .T. // Criada para o controle de validacao na exclusão da linha na GetDados, pois a getdados executa 2x a função de validacao.
Static lMsgUnica
STATIC lAF8TpCus
STATIC lPmsFilAFM
STATIC lPmsSD3CRTE
STATIC lPmsSD3Qry
STATIC lPMSQRCRTE
STATIC lPmsAFLCP
STATIC lPMSDELAFF
Static __lTopConn	:= .T.
Static lNewCalend
Static _oPMSXFUN1
Static _oPMSXFUN2
Static _oPMSXFUN3
Static _oPMSXFUN4

/*/{Protheus.doc} MaCheckCols
Consiste os campos obrigatorios da linha da GetDados.

IMPORTANTE: Esta é uma funcao generica utilizada por varios modulos. Não deve ser implementado
			ou alterado esta função para tratamentos especificos de um modulo.

@Param aHeaderChk, array, contem a estrutura dos campos a serem validados
@Param aColsChk, array, contem os dados a serem validados
@Param nCheck, numerico, A linha do aCols a ser validado
@Param aCpoSkip, array, Contem os campos do aHeader que não seja validado
@Param lValid, Logico, Se Verdadeiro valida as variaveis de memoria com nome dos campos no aHeader

@Return lRet - trata-se de uma nota de complemento

@author Edson Maricate
@since 09-02-2001
@version 1.0
/*/
Function MaCheckCols(aHeaderChk,aColsChk,nCheck,aCpoSkip, lValid)
Local aArea		:= GetArea()
Local aAreaSX3	:= SX3->(GetArea())
Local aAreaSX2	:= SX2->(GetArea())
Local lRet		:= .T.
Local ny
Local _SaveVar	:= __ReadVar

Default aCpoSkip 	:= {}
Default lValid		:= .F.

For ny := 1 to Len(aHeaderChk)
	If lValid
		__ReadVar := "M->"+aHeaderChk[nY,2]
		&(__ReadVar) := aColsChk[nCheck,nY]
	EndIf
	If aScan( aCpoSkip, { | ExpA1 | PadR(ExpA1,10) == PadR(aHeaderChk[ny,2],10) } ) > 0
		Loop
	EndIf

	If X3Obrigat(aHeaderChk[ny,2]) .And. !aColsChk[nCheck,Len(aColsChk[nCheck])] .And. Empty(aColsChk[nCheck,ny])
		SX3->(dbSetOrder(2))
		SX3->(MsSeek(aHeaderChk[ny,2]))
		SX2->(dbSetOrder(1))
		SX2->(MsSeek(SX3->X3_ARQUIVO))
		HELP("  ",1,"OBRIGAT2",,X2NOME()+CRLF+STR0119+X3DESCRIC()+CRLF+STR0120+Str(nCheck,3,0),3,1) //"Campo: "###"Linha: "
		lRet := .F.
		Exit
	EndIf
	If lValid .And. !Empty(aColsChk[nCheck,ny]) .and. !Empty(aHeaderChk[ny,6]) .and. !&(aHeaderChk[ny,6])
		lRet := .F.
		Exit
	EndIf
Next nY

__ReadVar := _SaveVar
RestArea(aAreaSX2)
RestArea(aAreaSX3)
RestArea(aArea)
Return lRet


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³PmsAtuPrd³ Autor ³ Edson Maricate			³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Executa a atualizacao das datas das tarefas de acordo com as  ³±±
±±³			 ³suas predecessoras.											³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³Generico														³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsAtuPrd(cProjeto,cRevisa,cTarefa,lAtuEDT,aAtuEDT,lReprParc)
Local cHoraF
Local aAuxRet
Local dFinish
Local cCalend
Local nHDurac
Local nRecAF9
Local aArea		:= GetArea()
Local aAreaAFC	:= AFC->(GetArea())
Local aAreaAJ4	:= AJ4->(GetArea())
Local aAreaAFD	:= AFD->(GetArea())
Local aAreaAF9	:= AF9->(GetArea())
Local dStart	:= PMS_MIN_DATE
Local cHoraI	:= PMS_MIN_HOUR
Local lRet 		:= .F.
Local cFilAFD	:= xFilial("AFD")
Local cFilAJ4	:= xFilial("AJ4")

DEFAULT lAtuEDT	:= .T.
DEFAULT aAtuEDT	:= {}
DEFAULT lReprParc := .F.

dbSelectArea("AFC")
dbSetOrder(1)

dbSelectArea("AF9")
dbSetOrder(1)
MsSeek(xFilial("AF9")+cProjeto+cRevisa+cTarefa)
nRecAF9	:= RecNo()
cCalend	:= AF9->AF9_CALEND
nHDurac	:= AF9->AF9_HDURAC

If ( Empty(AF9->AF9_DTATUI) .Or. lReprParc ) .And. Empty(AF9->AF9_DTATUF) .And. AF9->AF9_PRIORI < 1000
	dbSelectArea("AFD")
	dbSetOrder(1)
	MsSeek(cFilAFD+cProjeto+cRevisa+cTarefa)
	While !Eof() .And. cFilAFD+cProjeto+cRevisa+cTarefa==AFD_FILIAL+AFD_PROJET+AFD_REVISA+AFD_TAREFA
		// posiciona na tarefa predecessora
		AF9->(MsSeek(xFilial("AF9")+AFD->AFD_PROJET+AFD->AFD_REVISA+AFD->AFD_PREDEC))
		Do Case
			Case AFD->AFD_TIPO=="1" //Fim no Inicio
				If !Empty(AFD->AFD_HRETAR)
					// Aplica o retardo na predecessora de acordo com o calendario do PROJETO
					aAuxRet := PMSADDHrs(AF9->AF9_FINISH,AF9->AF9_HORAF,AF8->AF8_CALEND,AFD->AFD_HRETAR,AF9->AF9_PROJET,Nil)
					aAuxRet := PMSDTaskF(aAuxRet[1],aAuxRet[2],cCalend,nHDurac,AF9->AF9_PROJET,Nil)
				Else
					aAuxRet := PMSDTaskF(AF9->AF9_FINISH,AF9->AF9_HORAF,cCalend,nHDurac,AF9->AF9_PROJET,Nil)
				EndIf
			Case AFD->AFD_TIPO=="2" //Inicio no Inicio
				If !Empty(AFD->AFD_HRETAR)
					// Aplica o retardo na predecessora de acordo com o calendario do PROJETO
					aAuxRet := PMSADDHrs(AF9->AF9_START,AF9->AF9_HORAI,AF8->AF8_CALEND,AFD->AFD_HRETAR,AF9->AF9_PROJET,Nil)
					aAuxRet := PMSDTaskF(aAuxRet[1],aAuxRet[2],cCalend,nHDurac,AF9->AF9_PROJET,Nil)
				Else
					aAuxRet := PMSDTaskF(AF9->AF9_START,AF9->AF9_HORAI,cCalend,nHDurac,AF9->AF9_PROJET,Nil)
				EndIf
			Case AFD->AFD_TIPO=="3" //Fim no Fim
				If !Empty(AFD->AFD_HRETAR)
					// Aplica o retardo na predecessora de acordo com o calendario do PROJETO
					aAuxRet := PMSADDHrs(AF9->AF9_FINISH,AF9->AF9_HORAF,AF8->AF8_CALEND,AFD->AFD_HRETAR,AF9->AF9_PROJET,Nil)
					aAuxRet := PMSDTaskI(aAuxRet[1],aAuxRet[2],cCalend,nHDurac,AF9->AF9_PROJET,Nil)
				Else
					aAuxRet := PMSDTaskI(AF9->AF9_FINISH,AF9->AF9_HORAF,cCalend,nHDurac,AF9->AF9_PROJET,Nil)
				EndIf
			Case AFD->AFD_TIPO=="4" //Inicio no Fim
				If !Empty(AFD->AFD_HRETAR)
					// Aplica o retardo na predecessora de acordo com o calendario do PROJETO
					aAuxRet := PMSADDHrs(AF9->AF9_START,AF9->AF9_HORAI,AF8->AF8_CALEND,AFD->AFD_HRETAR,AF9->AF9_PROJET,Nil)
					aAuxRet := PMSDTaskI(aAuxRet[1],aAuxRet[2],cCalend,nHDurac,AF9->AF9_PROJET,Nil)
				Else
					aAuxRet := PMSDTaskI(AF9->AF9_START,AF9->AF9_HORAI,cCalend,nHDurac,AF9->AF9_PROJET,Nil)
				EndIf
			EndCase
			If  (aAuxRet[1]==dStart.And.SubStr(aAuxRet[2],1,2)+SubStr(aAuxRet[2],4,2)>SubStr(cHoraI,1,2)+SubStr(cHoraI,4,2)).Or.;
				(aAuxRet[1] > dStart)
				dStart := aAuxRet[1]
				cHoraI := aAuxRet[2]
				dFinish:= aAuxRet[3]
				cHoraF := aAuxRet[4]
			EndIf
		dbSkip()
	EndDo
	dbSelectArea("AJ4")
	dbSetOrder(1)
	MsSeek(cFilAJ4+cProjeto+cRevisa+cTarefa)
	While !Eof() .And. cFilAJ4+cProjeto+cRevisa+cTarefa==AJ4_FILIAL+AJ4_PROJET+AJ4_REVISA+AJ4_TAREFA
		AFC->(MsSeek(xFilial("AFC")+AJ4->AJ4_PROJET+AJ4->AJ4_REVISA+AJ4->AJ4_PREDEC))
		Do Case
			Case AJ4->AJ4_TIPO=="1" //Fim no Inicio
				If !Empty(AJ4->AJ4_HRETAR)
					// Aplica o retardo na predecessora de acordo com o calendario do PROJETO
					aAuxRet := PMSADDHrs(AFC->AFC_FINISH,AFC->AFC_HORAF,AF8->AF8_CALEND,AJ4->AJ4_HRETAR,AFC->AFC_PROJET,Nil)
					aAuxRet := PMSDTaskF(aAuxRet[1],aAuxRet[2],cCalend,nHDurac,AFC->AFC_PROJET,Nil)
				Else
					aAuxRet := PMSDTaskF(AFC->AFC_FINISH,AFC->AFC_HORAF,cCalend,nHDurac,AFC->AFC_PROJET,Nil)
				EndIf
			Case AJ4->AJ4_TIPO=="2" //Inicio no Inicio
				If !Empty(AJ4->AJ4_HRETAR)
					// Aplica o retardo na predecessora de acordo com o calendario do PROJETO
					aAuxRet := PMSADDHrs(AFC->AFC_START,AFC->AFC_HORAI,AF8->AF8_CALEND,AJ4->AJ4_HRETAR,AFC->AFC_PROJET,Nil)
					aAuxRet := PMSDTaskF(aAuxRet[1],aAuxRet[2],cCalend,nHDurac,AFC->AFC_PROJET,Nil)
				Else
					aAuxRet := PMSDTaskF(AFC->AFC_START,AFC->AFC_HORAI,cCalend,nHDurac,AFC->AFC_PROJET,Nil)
				EndIf
			Case AJ4->AJ4_TIPO=="3" //Fim no Fim
				If !Empty(AJ4->AJ4_HRETAR)
					// Aplica o retardo na predecessora de acordo com o calendario do PROJETO
					aAuxRet := PMSADDHrs(AFC->AFC_FINISH,AFC->AFC_HORAF,AF8->AF8_CALEND,AJ4->AJ4_HRETAR,AFC->AFC_PROJET,Nil)
					aAuxRet := PMSDTaskI(aAuxRet[1],aAuxRet[2],cCalend,nHDurac,AFC->AFC_PROJET,Nil)
				Else
					aAuxRet := PMSDTaskI(AFC->AFC_FINISH,AFC->AFC_HORAF,cCalend,nHDurac,AFC->AFC_PROJET,Nil)
				EndIf
			Case AJ4->AJ4_TIPO=="4" //Inicio no Fim
				If !Empty(AJ4->AJ4_HRETAR)
					// Aplica o retardo na predecessora de acordo com o calendario do PROJETO
					aAuxRet := PMSADDHrs(AFC->AFC_START,AFC->AFC_HORAI,AF8->AF8_CALEND,AJ4->AJ4_HRETAR,AFC->AFC_PROJET,Nil)
					aAuxRet := PMSDTaskI(aAuxRet[1],aAuxRet[2],cCalend,nHDurac,AFC->AFC_PROJET,Nil)
				Else
					aAuxRet := PMSDTaskI(AFC->AFC_START,AFC->AFC_HORAI,cCalend,nHDurac,AFC->AFC_PROJET,Nil)
				EndIf
			EndCase
			If  (aAuxRet[1]==dStart.And.SubStr(aAuxRet[2],1,2)+SubStr(aAuxRet[2],4,2)>SubStr(cHoraI,1,2)+SubStr(cHoraI,4,2)).Or.;
				(aAuxRet[1] > dStart)
				dStart := aAuxRet[1]
				cHoraI := aAuxRet[2]
				dFinish:= aAuxRet[3]
				cHoraF := aAuxRet[4]
			EndIf
		dbSkip()
	EndDo
	AF9->(dbGoto(nRecAF9))
	If AF9->AF9_START<>dStart.OR.AF9->AF9_FINISH<>dFinish.OR.AF9->AF9_HORAI<>cHoraI.OR.AF9->AF9_HORAF<>cHoraF
		lRet := .T.
		RecLock("AF9",.F.)
		AF9->AF9_START	:= dStart
		AF9->AF9_FINISH	:= dFinish
		AF9->AF9_HORAI	:= cHoraI
		AF9->AF9_HORAF	:= cHoraF
		MsUnlock()
		PmsAtuNec(AF9_PROJET,AF9_REVISA,AF9_TAREFA)
		AJ4->(dbSetOrder(2))
		If lAtuEDT .Or. (!Empty(AF9->AF9_EDTPAI) .And. AJ4->(MsSeek(xFilial()+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_EDTPAI)))
			ProcAtuEDT(AF9_PROJET,AF9_REVISA,AF9_EDTPAI,aAtuEDT,.T.)
		Else
			If aScan(aAtuEDT,AF9->AF9_EDTPAI) <= 0
				aAdd(aAtuEDT,AF9->AF9_EDTPAI)
			EndIf
		EndIf
	EndIf
EndIf

RestArea(aAreaAFC)
RestArea(aAreaAF9)
RestArea(aAreaAJ4)
RestArea(aAreaAFD)
RestArea(aArea)
Return lRet
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³PmsAtuScsI³ Autor ³ Edson Maricate		³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Executa a atualizacao dos eventos e as datas das tarefas		³±±
±±³			 ³predecessoras a partir da tarefa sucessora.					³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³Generico														³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsAtuScsI(cProjeto,cRevisa,cTarefa,lAtuEDT, nMetodo, aRecsAF9, aAtuEDT,lReprParc)
Local aArea		:= GetArea()
Local aAreaAF9	:= AF9->(GetArea())
Local aAreaAFD	:= AFD->(GetArea())
Local aAreaAFP	:= AFP->(GetArea())
Local cFilAFD		:= xFilial("AFD")
Local cFilAFP		:= xFilial("AFP")

DEFAULT lAtuEDT	:= .T.
DEFAULT aAtuEDT	:= {}
DEFAULT lReprParc := .F.

dbSelectArea("AFD")
dbSetOrder(1) // AFD_FILIAL+AFD_PROJET+AFD_REVISA+AFD_TAREFA+AFD_ITEM
MsSeek(cFilAFD+cProjeto+cRevisa+cTarefa)
While !Eof() .And. cFilAFD+cProjeto+cRevisa+cTarefa == AFD->AFD_FILIAL+AFD->AFD_PROJET+AFD->AFD_REVISA+AFD->AFD_TAREFA
	// Efetua a atualizacao dos Eventos. Excluindo-os
	dbSelectArea("AFP")
	dbSetOrder(1)
	MsSeek(cFilAFP+AFD->AFD_PROJET+AFD->AFD_REVISA+AFD->AFD_PREDEC)
	While !Eof() .And. cFilAFP+AFD->AFD_PROJET+AFD->AFD_REVISA+AFD->AFD_PREDEC == AFP->AFP_FILIAL+AFP->AFP_PROJET+AFP->AFP_REVISA+AFP->AFP_TAREFA
		PmsAvalAFP("AFP",3)
		dbSkip()
	EndDo

	// Atualiza a data da tarefas predecessoras a partir das tarefas sucessora.
	PmsAtuPrdI(AFD->AFD_PROJET,AFD->AFD_REVISA,AFD->AFD_PREDEC,lAtuEDT, nMetodo, aRecsAF9, aAtuEDT,lReprParc)

	// Efetua a atualizacao dos Eventos. Incluindo-os
	dbSelectArea("AFP")
	dbSetOrder(1)
	MsSeek(cFilAFP+AFD->AFD_PROJET+AFD->AFD_REVISA+AFD->AFD_PREDEC)
	While !Eof() .And. cFilAFP+AFD->AFD_PROJET+AFD->AFD_REVISA+AFD->AFD_PREDEC == AFP->AFP_FILIAL+AFP->AFP_PROJET+AFP->AFP_REVISA+AFP->AFP_TAREFA
		PmsAvalAFP("AFP",1)
		dbSkip()
	EndDo

	// Atualiza as datas previstas das tarefas predecessoras relacionada a tarefa predecessora atual
	PmsAtuScsI(AFD->AFD_PROJET,AFD->AFD_REVISA,AFD->AFD_PREDEC,lAtuEDT, nMetodo, aRecsAF9, aAtuEDT,lReprParc)

	AFD->(dbSkip())
EndDo

RestArea(aAreaAFP)
RestArea(aAreaAF9)
RestArea(aAreaAFD)
RestArea(aArea)
Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³PmsAtuPrdI³ Autor ³ Edson Maricate		³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Executa a atualizacao das datas da tarefa PREDECESS.de acordo ³±±
±±³			 ³com as suas sucessoras.										³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³Generico														³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsAtuPrdI(cProjeto,cRevisa,cTarefa,lAtuEDT, nMetodo, aRecsAF9, aAtuEDT,lReprParc)
Local cHoraF
Local aAuxRet
Local dFinish
Local cCalend
Local nHDurac
Local nRecAF9
Local aArea		:= GetArea()
Local aAreaAJ4	:= AJ4->(GetArea())
Local aAreaAF9	:= AF9->(GetArea())
Local aAreaAFD	:= AFD->(GetArea())
Local dStart	:= PMS_MAX_DATE
Local cHoraI	:= "00:00"
Local lCalcDtHr := .F.
Local cFilAFC	:= xFilial("AFC")
Local cFilAFD	:= xFilial("AFD")
Local cFilAF9	:= xFilial("AF9")
Local cFilAJ4	:= xFilial("AJ4")

DEFAULT lAtuEDT	:= .T.
DEFAULT aRecsAF9	:= {}
DEFAULT aAtuEDT	:= {}
DEFAULT lReprParc := .F.

dbSelectArea("AF9")
dbSetOrder(1)
MsSeek(cFilAF9+cProjeto+cRevisa+cTarefa)
nRecAF9	:= RecNo()
cCalend	:= AF9->AF9_CALEND
nHDurac	:= AF9->AF9_HDURAC

If ( Empty(AF9->AF9_DTATUI) .Or. lReprParc ) .And. Empty(AF9->AF9_DTATUF) .And. AF9->AF9_PRIORI < 1000
	dbSelectArea("AFD")
	dbSetOrder(2)
	DbSeek(cFilAFD+cProjeto+cRevisa+cTarefa) // AFD_FILIAL + AFD_PROJET + AFD_REVISA + AFD_PREDEC + AFD_ITEM
	While !Eof() .And. cFilAFD+cProjeto+cRevisa+cTarefa == AFD_FILIAL+AFD_PROJET+AFD_REVISA+AFD_PREDEC

		AF9->(DbSeek(cFilAF9+AFD->AFD_PROJET+AFD->AFD_REVISA+AFD->AFD_TAREFA))
		Do Case
			Case AFD->AFD_TIPO=="1" //Fim no Inicio
				If !Empty(AFD->AFD_HRETAR)
					// Aplica o retardo na predecessora de acordo com o calendario do PROJETO
					aAuxRet := PMSADDHrs(AF9->AF9_START,AF9->AF9_HORAI,AF8->AF8_CALEND,-AFD->AFD_HRETAR,AF9->AF9_PROJET,Nil)
					aAuxRet := PMSDTaskI(aAuxRet[1],aAuxRet[2],cCalend,nHDurac,AF9->AF9_PROJET,Nil)
				Else
					aAuxRet := PMSDTaskI(AF9->AF9_START,AF9->AF9_HORAI,cCalend,nHDurac,AF9->AF9_PROJET,Nil)
				EndIf
			Case AFD->AFD_TIPO=="2" //Inicio no Inicio
				If !Empty(AFD->AFD_HRETAR)
					// Aplica o retardo na predecessora de acordo com o calendario do PROJETO
					aAuxRet := PMSADDHrs(AF9->AF9_START,AF9->AF9_HORAI,AF8->AF8_CALEND,AFD->AFD_HRETAR,AF9->AF9_PROJET,Nil)
					aAuxRet := PMSDTaskF(aAuxRet[1],aAuxRet[2],cCalend,nHDurac,AF9->AF9_PROJET,Nil)
				Else
					aAuxRet := PMSDTaskF(AF9->AF9_START,AF9->AF9_HORAI,cCalend,nHDurac,AF9->AF9_PROJET,Nil)
				EndIf
			Case AFD->AFD_TIPO=="3" //Fim no Fim
				If !Empty(AFD->AFD_HRETAR)
					// Aplica o retardo na predecessora de acordo com o calendario do PROJETO
					aAuxRet := PMSADDHrs(AF9->AF9_FINISH,AF9->AF9_HORAF,AF8->AF8_CALEND,AFD->AFD_HRETAR,AF9->AF9_PROJET,Nil)
					aAuxRet := PMSDTaskI(aAuxRet[1],aAuxRet[2],cCalend,nHDurac,AF9->AF9_PROJET,Nil)
				Else
					aAuxRet := PMSDTaskI(AF9->AF9_FINISH,AF9->AF9_HORAF,cCalend,nHDurac,AF9->AF9_PROJET,Nil)
				EndIf
			Case AFD->AFD_TIPO=="4" //Inicio no Fim
				If !Empty(AFD->AFD_HRETAR)
					// Aplica o retardo na predecessora de acordo com o calendario do PROJETO
					aAuxRet := PMSADDHrs(AF9->AF9_START,AF9->AF9_HORAI,AF8->AF8_CALEND,(AFD->AFD_HRETAR*-1),AF9->AF9_PROJET,Nil)
					aAuxRet := PMSDTaskI(aAuxRet[1],aAuxRet[2],cCalend,nHDurac,AF9->AF9_PROJET,Nil)
				Else
					aAuxRet := PMSDTaskI(AF9->AF9_START,AF9->AF9_HORAI,cCalend,nHDurac,AF9->AF9_PROJET,Nil)
				EndIf
			EndCase

		If (aAuxRet[1] < dStart) .OR.;
		   (aAuxRet[1]==dStart.And.SubStr(aAuxRet[2],1,2)+SubStr(aAuxRet[2],4,2)<SubStr(cHoraI,1,2)+SubStr(cHoraI,4,2))
				dStart := aAuxRet[1]
				cHoraI := aAuxRet[2]
				dFinish:= aAuxRet[3]
				cHoraF := aAuxRet[4]
		EndIf

	dbSelectArea("AF9")
	If dStart <> PMS_MAX_DATE
		AF9->(dbGoto(nRecAF9))
		lCalcDtHr := (Ascan(aRecsAF9, nRecAF9) > 0)
		If nMetodo == 1 .OR. ;
		   ( nMetodo == 2 .And. !lCalcDtHr ) .OR. ;
			(	nMetodo == 2 .And. lCalcDtHr .And. ;
	   		((dStart == AF9->AF9_START .And. ;
	   			SubStr(cHoraI,1,2)+SubStr(cHoraI,4,2)>SubStr(AF9->AF9_HORAI,1,2)+SubStr(AF9->AF9_HORAI,4,2)).Or.;
	   		dStart > AF9->AF9_START ) .And. ;
	   		((dFinish == AF9->AF9_FINISH .And. ;
	   			SubStr(cHoraF,1,2)+SubStr(cHoraF,4,2)>SubStr(AF9->AF9_HORAF,1,2)+SubStr(AF9->AF9_HORAF,4,2)).Or.;
	   		dFinish > AF9->AF9_FINISH))
	   		aAdd(aRecsAF9, nRecAF9)

			RecLock("AF9",.F.)
			AF9->AF9_START	:= dStart
			AF9->AF9_FINISH	:= dFinish
			AF9->AF9_HORAI	:= cHoraI
			AF9->AF9_HORAF	:= cHoraF
			MsUnlock()
			PmsAtuNec(AF9_PROJET,AF9_REVISA,AF9_TAREFA)
			If aScan(aAtuEDT,AF9->AF9_EDTPAI) <= 0
				aAdd(aAtuEDT,AF9->AF9_EDTPAI)
			EndIf
			If lAtuEDT
				PmsAtuEDT(AF9_PROJET,AF9_REVISA,AF9_EDTPAI)
			EndIf
		EndIf
	EndIf
		dbSelectArea("AFD")
		dbSkip()
	EndDo

 	dbSelectArea("AJ4")
	dbSetOrder(1)
	MsSeek(cFilAJ4+cProjeto+cRevisa+cTarefa)
	While !Eof() .And. cFilAJ4+cProjeto+cRevisa+cTarefa == AJ4_FILIAL+AJ4_PROJET+AJ4_REVISA+AJ4_TAREFA
	 	dbSelectArea("AFC")
		dbSetOrder(1)
		AFC->(MsSeek(cFilAFC+AJ4->AJ4_PROJET+AJ4->AJ4_REVISA+AJ4->AJ4_PREDEC))
		AcertaAJ4(AFC->AFC_EDT,cProjeto,cRevisa,AJ4->AJ4_TAREFA,@aAuxRet,cHoraI,cHoraF,dStart,dFinish,cCalend,nHDurac,nMetodo,aTarSucs)
	 	DbSkip()
	EndDo
EndIf

RestArea(aAreaAJ4)
RestArea(aAreaAF9)
RestArea(aAreaAFD)
RestArea(aArea)
Return
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³PmsAtuRlz³ Autor ³ Edson Maricate			³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Executa a atualizacao dos percentuais executados da EDT		³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³Generico														³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsAtuRlz(cProjeto,cRevisa,cEDT,dDataRef,lReCalc, lPmsProject)

Local aArea		:= GetArea()
Local aAreaAFC	:= AFC->(GetArea())
Local aAreaAF9	:= AF9->(GetArea())

DEFAULT lReCalc := .T.
DEFAULT lPmsProject:= .F.

If !(AllTrim(UPPER(cProjeto))$SuperGetMV('MV_PMSJOBP', .F., ''))
	If SuperGetMV('MV_PMSJOB1', .F., '2') == '1'
		StartJob("PmsJobRlz",GetEnvServer(),.F.,cEmpAnt,cFilAnt,cProjeto,cRevisa,cEDT,dDataRef)
	Else
		AuxAtuRlz(cProjeto,cRevisa,cEDT,dDataRef,,,lPmsProject)
		If lReCalc .AND. (Type("bRecalc") == "B" .And. !Empty(bRecalc))
			 Eval(bReCalc)
		endif
	EndIf
EndIf

RestArea(aAreaAF9)
RestArea(aAreaAFC)
RestArea(aArea)

Return

/*/{Protheus.doc} AuxAtuRlz
atualiza os percentuais executados da EDT PAI

@param cProjeto, character, (Descrição do parâmetro)
@param cRevisa, character, (Descrição do parâmetro)
@param cEDT, character, (Descrição do parâmetro)
@param dDataRef, data, (Descrição do parâmetro)
@param cmensagem, character, (Descrição do parâmetro)
@param aTrbs, array, (Descrição do parâmetro)
@param lPmsProject, ${param_type}, (Descrição do parâmetro)
@return ${return}, ${return_description}

@author desconhecido
@since desconhecido
@version 1.0
/*/
Function AuxAtuRlz(cProjeto,cRevisa,cEDT,dDataRef,cmensagem,aTrbs,lPmsProject)
Local aArea		:= GetArea()
Local aAreaAF9	:= AF9->(GetArea())
Local aAreaAF8	:= AF8->(GetArea())
Local aAreaAFC	:= AFC->(GetArea())
Local aAreaAFF	:= AFF->(GetArea())
Local aAreaAFQ	:= AFQ->(GetArea())
Local cFilAFQ	:= xFilial("AFQ")
Local nPerc		:= 0

//Fazer procedimento de calculo diferenciado caso o ambiente estiver apontando para o top

If !Empty(dDataRef)
	PMSXCalTar(cProjeto,cRevisa,cEDT,dDataRef,lPmsProject) //inclui ou atualiza o percentual da EDT na data de inclusao do apontamento da tarefa
	nPerc := AFQ->AFQ_QUANT * 100
	dbSelectArea("AFQ")
	dbSetOrder(1) //AFQ_FILIAL+AFQ_PROJET+AFQ_REVISA+AFQ_EDT+DTOS(AFQ_DATA)
	DbSeek(cFilAFQ+cProjeto+cRevisa+cEDT+dtos(dDataRef))
	AFQ->(DbSkip())
	//atualiza os apontamentos da EDT nas datas posteriores
	While (!Eof() .And. cFilAFQ+cProjeto+cRevisa+cEDT==AFQ_FILIAL+AFQ_PROJET+AFQ_REVISA+AFQ_EDT)
		PMSXCalTar(cProjeto,cRevisa,cEDT,AFQ->AFQ_DATA)
		nPerc := AFQ->AFQ_QUANT
		AFQ->( dbskip() )
	EndDo
	// avalia se executa ou estorna o evento com o ultimo apontamento
	PmsAvalEvent(2,"AFC",1,nPerc)

	//recursividade para a EDT pai
	AFC->(DbSetOrder(1))
	If !lPmsProject .AND. AFC->(DbSeek(xFilial("AFC")+cProjeto+cRevisa+cEDT)) .And. !Empty(AFC->AFC_EDTPAI)
		AuxAtuRlz(AFC->AFC_PROJET,AFC->AFC_REVISA,AFC->AFC_EDTPAI,dDataRef,cmensagem)
	EndIf

Endif

RestArea(aAreaAF9)
RestArea(aAreaAF8)
RestArea(aAreaAFC)
RestArea(aAreaAFF)
RestArea(aAreaAFQ)
RestArea(aArea)
Return
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³PmsQtdeSC³ Autor ³ Edson Maricate			³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de validacao da quantidade da Solicitacao de Compras.	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³MATA110,SIGAPMS												³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsQtdeSC()
Local cItemSC	:= aCols[n,aScan(aHeader,{|x| Alltrim(x[2]) == "C1_ITEM"})]
Local nPosRat	:= 0
Local nPosQuant
Local nA		:= 0
Local nPosQtde	:= 0
Local nTotAFG	:= 0
Local lErro		:= .F.
Local nPosPlanej
Local lPmsScBlq	:= SuperGetMv("MV_PMSCBLQ",,.F.)
if l110Auto .and. ALTERA
	if  AllTrim(ReadVar()) == "M->C1_QUANT"
		nPosQuant := aScan(aHeader,{|x| Alltrim(x[2]) == "C1_QUANT"})
		if aCols[n,nPosQuant] = M->C1_QUANT .or. Empty(aCols[n,nPosQuant])
			If ALTERA .And. !Empty(cA110Num) .AND. aScan(aRatAFG,{|x| x[1] == cItemSC})== 0
 				PmsDlgSC(6,cA110Num,.F.) //Carrega os valores que serao utilizados para a validacao
			EndIf
			Return .t.
		endif
	endif
endif

If AllTrim(ReadVar()) == "M->C1_QUANT"
	nQtMaxSC  := M->C1_QUANT
	nPosQuant := aScan(aHeader,{|x| Alltrim(x[2]) == "C1_QUANT"})
	If nPosQuant > 0
		aCols[n,nPosQuant] := M->C1_QUANT
	EndIf
Else
	nQtMaxSC := aCols[n,aScan(aHeader,{|x| Alltrim(x[2]) == "C1_QUANT"})]
EndIf
If ALTERA .And. !Empty(cA110Num) .AND. aScan(aRatAFG,{|x| x[1] == cItemSC})== 0
	PmsDlgSC(6,cA110Num,.F.) //Carrega os valores que serao utilizados para a validacao
EndIf

// valida se a quantidade do item da SC é menor que a quantidade associada a tarefa dos projetos
If (nPosRat:=aScan(aRatAFG,{|x| x[1] == cItemSC})) > 0 .AND.;
   (nPosQtde := aScan(aHdrAFG,{|x|Alltrim(x[2])=="AFG_QUANT"})) >0
	nTotAFG	:= 0
	//se a SC eh gerada a partir de planejamento nao pode ser alterada a quantidade
	nPosPlanej := aScan(aHdrAFG,{|x|Alltrim(x[2])=="AFG_PLANEJ"})
	If nPosPlanej > 0
		For nA := 1 To Len(aRatAFG[nPosRat,2])
			If ! Empty(aRatAFG[nPosRat,2,nA,nPosPlanej]) .AND. lPmsScBlq
				if l110Auto
					Help( " ", 1,"PMSSCPLAN" ,STR0428) // "Este Item não pode ser alterado por ter sido gerada pelo planejamento PMS."
				else
					Aviso(STR0001, STR0407 ,{"OK"},2)  //"Atenção! Esta solicitacao de compras não pode ser alterada, pois foi gerada a partir de planejamento."
				endif
				Return(.F.)
			EndIf
		Next nA
	EndIf
	If (nPosQtde > 0)
		For nA := 1 To Len(aRatAFG[nPosRat,2])
			nTotAFG	+= aRatAFG[nPosRat,2,nA,nPosQtde]
		Next nA
		// se a quantidade associada for maior que a quantidade do item da solicitacao de compra, critica
		If nTotAFG # 0 .And. nTotAFG > nQtMaxSC
			Help("   ",1,"PMSQTSC")
			lErro := .T.
		Endif
		// se a quantidade associada for menor que a quantidade do item da solicitacao de compra, adverte
		If nTotAFG # 0 .And. nTotAFG < nQtMaxSC .and. !l110Auto
			Aviso(STR0001,STR0408,{"OK"},2)  //"Atenção! A quantidade informada é maior que foi associada as tarefas do(s) projetos"
		Endif
	Endif
	If lErro .and. !l110Auto
		Eval(bPmsDlgSC)
	EndIf
EndIf
Return .T.
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³PmsDlgSC³ Autor ³ Edson Maricate			³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Esta funcao cria uma janela para configuracao e utilizacao	³±±
±±³			 ³da Solicitacao em um determinado Projeto.						³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³MATA110,SIGAPMS												³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsDlgSC(nOpcao,cNumSC,lGetDados,aRatAuto)
Local lOk := .T.
Local oDlg
Local nPosPerc		:= 0
Local nPosItem		:= aScan(aHeader,{|x| Alltrim(x[2]) == "C1_ITEM"})
Local nQuantSC		:= aCols[n,aScan(aHeader,{|x| Alltrim(x[2]) == "C1_QUANT"})]
Local cItemSC		:= aCols[n,nPosItem]
Local nPosRat		:= aScan(aRatAFG,{|x| x[1] == aCols[n,nPosItem]})
Local aSavCols		:= {}
Local aSavHeader	:= {}
Local nSavN			:= n
Local oGetDados
Local nY			:= 0
Local nPosProj		:= aScan(aHeader,{|x| Alltrim(x[2]) == "C1_PROJET"})
Local nPosVersao	:= aScan(aHeader,{|x| Alltrim(x[2]) == "C1_REVISA"})
Local nPosTaref		:= aScan(aHeader,{|x| Alltrim(x[2]) == "C1_TAREFA"})
Local nPosTrt		:= aScan(aHeader,{|x| Alltrim(x[2]) == "C1_TRT"})
Local bSavKeyF10	:= SetKey(VK_F10,Nil)
Local lMsFilAFG		:= AFG->(ColumnPos("AFG_MSFIL")) > 0
Local lPcOk			:= .T.
Local nOpcMsg		:= 0
Local cNumSA		:= ""
Local aAlter		:= {"AFG_PROJET","AFG_TAREFA", "AFG_QUANT", "AFG_QTSEGU" }
Local cFilSC1		:= xFilial("SC1")
Local aRetorno		:= COMPosDHN({3,{'1',cFilSC1,cNumSC,aCols[n,1]}})
Local lPmsAFGCpo  := ExistBlock("PmsAFGCpo")
Local lRet := .T.
Local lAuto := aRatAuto <> NIL .and. ValType(aRatAuto) = 'A'
Local nX
Local cFilAFG		:= xFilial("AFG")

Private aSC1Itens	:= {}

DEFAULT lGetDados	:= .T.

//Verifica se a SC teve origem de uma Solicitacao de Armazem
If nOpcao!=6 .And. aRetorno[1] //-- Avalia se possui documentos do tipo SC gerados pela biblioteca de compras
	While !(aRetorno[2])->(Eof()) 
		lPcOk  := .F.
		cNumSA := (aRetorno[2])->DHN_DOCORI
		(aRetorno[2])->(DbSkip())
	EndDo
	(aRetorno[2])->(DbCloseArea())
EndIf
If lPcOk
	// Array aSC1Itens criado como private para uso da função PMSAvalEmp (PMSXFUNA)
	// onde precisarei do produto e local da linha da SC para verificar possivel
	// existencia de empenho perneta e amarra-lo com a nova SC
	aadd(aSC1Itens, {"C1_PRODUTO", aCols[n,aScan(aHeader,{|x| Alltrim(x[2]) == "C1_PRODUTO"})]})
	aadd(aSC1Itens, {"C1_LOCAL", aCols[n,aScan(aHeader,{|x| Alltrim(x[2]) == "C1_LOCAL"})]})
	aSavCols	:= aClone(aCols)
	aSavHeader	:= aClone(aHeader)
	nSavN		:= n
	n			:= 1
	aCols		:= {}
	aHeader		:= {}

	nQtMaxSC	:= nQuantSC

	If nOpcao == 3 //Inclusao do registro no AFG
		// Montagem do aHeader
		FillGetDados(nOpcao,"AFG",1,,,,,,,,{||.T.},.T.,aHeader)
		nPosPerc	:= aScan(aHeader,{|x|Alltrim(x[2])=="AFG_QUANT"})

		aHeaderAFG	:= aClone(aHeader)
		If nPosRat > 0
			aCols	:= aClone(aRatAFG[nPosRat,2])
		Else
			// Faz a montagem de uma linha em branco no aCols.
			nLenHeader := Len(aHeader)
			aadd(aCols,Array(nLenHeader+1))
			For ny := 1 to nLenHeader
				If Trim(aHeader[ny,2]) == "AFG_ITEM"
					aCols[1,ny] 	:= "01"
				ElseIf AllTrim(aHeader[ny,2]) $ "AFG_ALI_WT | AFG_REC_WT"
					If AllTrim(aHeader[ny,2]) == "AFG_ALI_WT"
						aCols[1,ny] := "AFG"
					ElseIf AllTrim(aHeader[ny,2]) == "AFG_REC_WT"
						aCols[1,ny] := 0
					EndIf
				Else
					aCols[1,ny] := CriaVar(aHeader[ny,2])
				EndIf
				aCols[1,nLenHeader+1] := .F.
			Next ny
		EndIf
	Else //Alteracao do registro no AFG
		// Montagem do aHeader
		FillGetDados(nOpcao,"AFG",1,,,,,,,,{||.T.},.T.,aHeader)
		nPosPerc	:= aScan(aHeader,{|x|Alltrim(x[2])=="AFG_QUANT"})
		aHeaderAFG	:= aClone(aHeader)
		dbSelectArea("AFG")
		dbSetOrder(2)
		If nPosRat == 0
			nLenHeader := Len(aHeader)
			If MsSeek(cFilAFG+cNumSC+cItemSC)
				While AFG->(! Eof()) .And. AFG->AFG_FILIAL == cFilAFG .AND. AFG->AFG_NUMSC == cNumSC .AND. AFG->AFG_ITEMSC == cItemSC
					If !lMsFilAFG .Or. (lMsFilAFG .And. AFG->AFG_MSFIL == cFilAnt)
						If AFG->AFG_REVISA==PmsAF8Ver(AFG->AFG_PROJET)
							aADD(aCols,Array(nLenHeader+1))
							nLenCols := Len(aCols)
							For ny := 1 to nLenHeader
								If ( aHeader[ny,10] != "V")
									aCols[nLenCols,ny] := FieldGet(ColumnPos(aHeader[ny,2]))
								ElseIf AllTrim(aHeader[ny,2]) $ "AFG_ALI_WT | AFG_REC_WT"
									If AllTrim(aHeader[ny,2]) == "AFG_ALI_WT"
										aCols[nLenCols,ny] := "AFG"
									ElseIf AllTrim(aHeader[ny,2]) == "AFG_REC_WT"
										aCols[nLenCols,ny] := AFG->(Recno())
									EndIf
								Else
									aCols[nLenCols,ny] := CriaVar(aHeader[ny,2])
								EndIf
								aCols[nLenCols,nLenHeader+1] := .F.
							Next ny
						EndIf
					EndIf
					dbSkip()
				End
			EndIf
			If nOpcao <> 6
				If Empty(aCols)
					// Faz a montagem de uma linha em branco no aCols.
					aadd(aCols,Array(nLenHeader+1))
					For ny := 1 to nLenHeader
						If Trim(aHeader[ny,2]) == "AFG_ITEM"
							aCols[1,ny] 	:= "01"
						ElseIf AllTrim(aHeader[ny,2]) $ "AFG_ALI_WT | AFG_REC_WT"
							If AllTrim(aHeader[ny,2]) == "AFG_ALI_WT"
								aCols[1,ny] := "AFG"
							ElseIf AllTrim(aHeader[ny,2]) == "AFG_REC_WT"
								aCols[1,ny] := 0
							EndIf
						Else
							aCols[1,ny] := CriaVar(aHeader[ny,2])
						EndIf
						aCols[1,nLenHeader+1] := .F.
					Next ny
				Else
					aADD(aRatAFG,{aSavCols[nSavN,nPosItem],aClone(aCols)})
				EndIf
			EndIf
		Else
			aCols := aClone(aRatAFG[nPosRat,2])
		EndIf
	EndIf
	If lPmsAFGCpo
		aAlter := aClone(Execblock("PmsAFGCpo", .F.,.F.,{aAlter,aHeader,aCols}))
	Endif
	//Grava na variavel privada para ser utilizada na rotina chamadora
	aHdrAFG	:=	aClone(aHeaderAFG)
	if lAuto
		for nX := 1 to Len(aHeader)
			for nY := 1 to Len(aRatAuto)
				if (nPos := aScan(aRatAuto[nY],{|x| Upper(Alltrim(x[1])) = Upper(Alltrim(aHeader[nX,2]))})) <> 0
					if Empty(aHeader[nX,6])
						aRatAuto[nY,nPos,3] := "PMSAFGFOK()"
					else
						aRatAuto[nY,nPos,3] := AllTrim(aHeader[nX,6])+" .and. PMSAFGFOK()"
					endif
				endif
			next nY
		next nX
		// Rotina automatica do Rateio.
		If !AFG->(MsGetDAuto(aRatAuto,"PMSAFGLOK()",{|| PMSAFGTOK()},,nOpcao))
			lOk  := .F.
			lRet := .F.
		endif
    else
		If lGetDados .and. nOpcao <> 6
			DEFINE FONT oBold NAME "Arial" SIZE 0, -13 BOLD
			DEFINE MSDIALOG oDlg FROM 88 ,22  TO 350,619 TITLE STR0001 Of oMainWnd PIXEL //"Gerenciamento de Projetos - SC"
				oGetDados := MSGetDados():New(23,3,112,296,nOpcao,"PMSAFGLOK","PMSAFGTOK",'+AFG_ITEM',.T.,aAlter,1,,100,"PMSAFGFOK()",,,"PMSAFGDEL("+str(nopcao)+")",oDlg)
				@ 16 ,3   TO 18 ,310 LABEL '' OF oDlg PIXEL
				@ 6  ,10   SAY STR0111 Of oDlg PIXEL SIZE 27 ,9  //"Num. SC"
				@ 5  ,35  SAY  cNumSC+"/"+cItemSC Of oDlg PIXEL SIZE 40,9 FONT oBold
				@ 6  ,190 SAY STR0112 Of oDlg PIXEL SIZE 30 ,9  //"Quantidade"
				@ 5  ,230 MSGET nQuantSC Picture "@E 999,999,999.99" When .F. PIXEL SIZE 65,9
				@ 118,249 BUTTON STR0027 SIZE 35 ,9   FONT oDlg:oFont ACTION {||If(oGetDados:TudoOk(),(lOk:=.T.,oDlg:End()),(lOk:=.F.))}  OF oDlg PIXEL  //'Confirma'
				@ 118,210 BUTTON STR0028 SIZE 35 ,9   FONT oDlg:oFont ACTION (lOk:=.F.,oDlg:End())  OF oDlg PIXEL  //'Cancelar'
			If ExistBlock("PMSSCSCR")
				ExecBlock("PMSSCSCR",.F.,.F.,{oDlg,nOpcao})
			Endif
			ACTIVATE MSDIALOG oDlg CENTERED
		EndIf
	endif
	If nOpcao <> 2 .And. lOk
		nPosRat := aScan(aRatAFG,{|x| x[1] == AllTrim(cItemSC)})
		If nPosRat > 0
			aRatAFG[nPosRat,2]	:= aClone(aCols)
		Else
			aADD(aRatAFG,{aSavCols[nSavN,nPosItem],aClone(aCols)})
		EndIf
		If ExistBlock("PMSDLGSC")
			U_PMSDLGSC(aCols,aHeader,aSavCols,aSavHeader,nSavN)
		EndIf
	EndIf
	// Restaura ambiente do pedido de compras
	aCols	:= aClone(aSavCols)
	aHeader	:= aClone(aSavHeader)
	n		:= nSavN
	If nPosProj>0 .and. lOk
		acols[n,nPosProj]	:=	SPACE(TAMSX3("C1_PROJET")[1])
		acols[n,nPosVersao]	:=	SPACE(TAMSX3("C1_REVISA")[1])
		acols[n,nPosTaref]	:=	SPACE(TAMSX3("C1_TAREFA")[1])
		acols[n,nPosTrt]		:=	SPACE(TAMSX3("C1_TRT")[1])
	EndIf
Else
	//"Este item da Solicitação de Compras esta relacionado a uma Solicitação ao Armazém amarrado a um projeto/tarefa e não poderá ser alterada. Utilize a rotina de manutenção de solicitações ao armazém ou verifique o item selecionado"###"Fechar"###"Visualiza SA"
	if l110Auto
		lRet := .F.
		Help( " ", 1, "PMSSCAR",, STR0375, 1, 0 )
	else
		nOpcMsg := Aviso(STR0143,STR0375,If(nOpcao<>1,{STR0006,STR0415},{STR0006}),2)
		If nOpcMsg == 2
			MaViewSA(cNumSA)
		EndIf
	endif
EndIf

SetKey(VK_F10,bSavKeyF10)
Return lRet
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³PMSAFGDEL³ Autor ³ Reynaldo Miyashita		³ Data ³ 02-01-2007 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Validacao na delecao de linha na GetDados de rateio da SC.	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³PMSDLGSC														³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PMSAFGDEL(nOpcao)
Local lRet := .T.
Local cProject := aCols[n,aScan(aHeader,{|x| Substr(x[2],4,7) =="_PROJET" })]
Local cRevisa	 := aCols[n,aScan(aHeader,{|x| Substr(x[2],4,7) =="_REVISA"})]
Local cTarefa  := aCols[n,aScan(aHeader,{|x| Substr(x[2],4,7) =="_TAREFA" })]

	// somente valida a exclusao de itens para opcao diferente de Visualizar
	If nOpcao <> 2
		// verifica os direitos do usuario
		If !(lRet := PmsChkUser(cProject,cTarefa,,"",3,"GERSC",cRevisa)) .and. lBlockDel
			if l110Auto
				Help( " ", 1, "PMSDELAFG",,STR0390, 1, 0 ) //"Usuario sem permissäo para executar a solicitação de compra para o projeto. Verifique os direitos do usuario na estrutura deste projeto e/ou tarefa."
			else
				Aviso(STR0324,STR0390,{"Ok"},2)// "Usuario sem Permissäo."##"Usuario sem permissäo para executar a solicitação de compra para o projeto. Verifique os direitos do usuario na estrutura deste projeto e/ou tarefa."
			endif
		EndIf
		lBlockDel := !lBlockDel // Pois a GetDados executa a função toda vez que se tenta excluir a linha

	EndIf
Return lRet
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³PmsWriteSC³ Autor ³ Edson Maricate		³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Programa de gravacao de Solicitacoes de Compras chamado pela  ³±±
±±³			 ³rotina de gravacao de Solicitacoes de Compras.				³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpN1 : Evento -	[1] - Inclusao da SC						³±±
±±³			 ³					[2] - Estorno da SC							³±±
±±³			 ³					[3] - Exclusao da SC						³±±
±±³			 ³ExpC2 : Alias da tabela de Solicitacoes de Compras			³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³COMXFUN,MATA110												³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsWriteSC(nEvento,cAliasSC1)
Local nx
Local nz
Local ny
Local nPos		:=	0
Local aArea		:= GetArea()
Local aRecAFG	:= {}
Local aTempCols	:= {}
Local nPosPln 	:=  0
Local nPosItem	:=	0
Local nPosProj	:=	0
Local nPosTar	:=	0
Local nPosRev	:=	0
Local nPosTrt	:=	0
Local lMsFilAFG := AFG->(ColumnPos("AFG_MSFIL")) > 0
Local lMantem	:= .F.
Local cFilAFG	:= xFilial("AFG")

If Type('aHeader') # "U"
	nPosItem	:= aScan(aHeader,{|x| Alltrim(x[2]) == "C1_ITEM"})
	nPosProj	:= aScan(aHeader,{|x| Alltrim(x[2]) == "C1_PROJET"})
	nPosTar		:= aScan(aHeader,{|x| Alltrim(x[2]) == "C1_TAREFA"})
	nPosRev		:= aScan(aHeader,{|x| Alltrim(x[2]) == "C1_REVISA"})
	nPosTrt		:= aScan(aHeader,{|x| Alltrim(x[2]) == "C1_TRT"})
	nPosPln		:= aScan(aHeader,{|x| Alltrim(x[2]) == "C1_PLANEJ"})
Endif
If Empty(aHeaderAFG)
	aHeaderAFG := {}
	// Montagem do aHeader
	dbSelectArea("SX3")
	dbSetOrder(1)
	MsSeek("AFG")
	While !EOF() .And. (x3_arquivo == "AFG")
		IF X3USO(x3_usado) .AND. cNivel >= x3_nivel
			AADD(aHeaderAFG,{ TRIM(x3titulo()), x3_campo, x3_picture,;
				x3_tamanho, x3_decimal, x3_valid,;
				x3_usado, x3_tipo, x3_arquivo,x3_context } )
		Endif
		dbSkip()
	End
EndIf

// Verifica o array de amarracao das Solicitacoes x Projetos
Do Case
	Case nEvento == 1 .And. Type('aRatAfg') # "U" .And. aRatAFG<>Nil
		nX	:= aScan(aRatAFG,{|x| x[1] == (cAliasSC1)->C1_ITEM})
		If nX == 0
			If nPosItem > 0
				nPos	:=	Ascan(aCols,{ |x| x[nPosItem]==(cAliasSC1)->C1_ITEM } )
			Else
				nPos	:=	0
			Endif
			// Se informou no proprio item.
			If (nPos * nPosProj * nPosTar*nPosTrt)  > 0 .And. !Empty(aCols[nPos,nPosProj]) .And. !Empty(aCols[nPos,nPosTar])
				aADD(aTempCols,Array(Len(aHeaderAFG)+1))
				For nY := 1 to Len(aHeaderAFG)
					Do Case
					Case Alltrim(aHeaderAFG[ny,2])	==	"AFG_PROJET"
						aTempCols[1,ny] :=	aCols[nPos,nPosProj]
					Case Alltrim(aHeaderAFG[ny,2])	==	"AFG_REVISA"
						aTempCols[1,ny] :=	aCols[nPos,nPosRev]
					Case Alltrim(aHeaderAFG[ny,2])	==	"AFG_TAREFA"
						aTempCols[1,ny] :=	aCols[nPos,nPosTar]
					Case Alltrim(aHeaderAFG[ny,2])	==	"AFG_TRT"
						aTempCols[1,ny] :=	aCols[nPos,nPosTrt]
					Case Alltrim(aHeaderAFG[ny,2]) == "AFG_QUANT"
						aTempCols[1,ny] :=	(cAliasSC1)->C1_QUANT
					Case Alltrim(aHeaderAFG[ny,2]) == "AFG_QTSEGU"
						aTempCols[1,ny] :=(cAliasSC1)->C1_QTSEGUM
					OtherWise
						aTempCols[1,ny] := CriaVar(aHeaderAFG[ny,2])
					EndCase
				Next ny
				aTempCols[Len(aTempCols),Len(aHeaderAFG)+1] := .F.
				aAdd(aRatAFG,{(cAliasSC1)->C1_ITEM,aClone(aTempCols)})
				nx := Len(aRatAFG)
			Else
				// Verifica se o item ja possui itens gravados.
				dbSelectArea("AFG")
				dbSetOrder(2)
				If MsSeek(cFilAFG+(cAliasSC1)->C1_NUM+(cAliasSC1)->C1_ITEM)
					While AFG->(! Eof()) .And. AFG->AFG_FILIAL == cFilAFG .AND. AFG->AFG_NUMSC == (cAliasSC1)->C1_NUM .AND. AFG->AFG_ITEMSC == (cAliasSC1)->C1_ITEM
						If !lMsFilAFG .Or. (lMsFilAFG .And. AFG->AFG_MSFIL == cFilAnt)
							If AFG->AFG_REVISA==PmsAF8Ver(AFG->AFG_PROJET)
								aADD(aTempCols,Array(Len(aHeaderAFG)+1))
								For ny := 1 to Len(aHeaderAFG)
									If ( aHeaderAFG[ny,10] != "V")
										aTempCols[Len(aTempCols),ny] := FieldGet(ColumnPos(aHeaderAFG[ny,2]))
									ElseIf AllTrim(aHeaderAFG[ny,2]) == "AFG_ALI_WT"
										aTempCols[Len(aTempCols),ny] := "AFG"
									ElseIf AllTrim(aHeaderAFG[ny,2]) == "AFG_REC_WT"
										aTempCols[Len(aTempCols),ny] := AFG->(Recno())
									Else
										aTempCols[Len(aTempCols),ny] := CriaVar(aHeaderAFG[ny,2])
									EndIf
									aTempCols[Len(aTempCols),Len(aHeaderAFG)+1] := .F.
								Next ny
							EndIf
						EndIf
						dbSkip()
					End
					aAdd(aRatAFG,{(cAliasSC1)->C1_ITEM,aClone(aTempCols)})
					nx := Len(aRatAFG)
				EndIf
			Endif
		Endif
		If nx > 0
			dbSelectArea("AFG")
			dbSetOrder(2)
			MsSeek(xFilial("AFG")+(cAliasSC1)->C1_NUM+(cAliasSC1)->C1_ITEM)
			// Carrega no array os registros ja existentes.
			While !Eof() .And. xFilial("AFG")+(cAliasSC1)->C1_NUM+(cAliasSC1)->C1_ITEM == ;
				AFG_FILIAL+AFG_NUMSC+AFG_ITEMSC
				If !lMsFilAFG .Or. (lMsFilAFG .And. AFG->AFG_MSFIL == cFilAnt)
					If AFG->AFG_REVISA==PmsAF8Ver(AFG->AFG_PROJET)
						aAdd(aRecAFG,AFG->(RecNo()))
					EndIf
				EndIf
				dbSkip()
			End
			For nz := 1 to Len(aRatAFG[nx,2])
				If !aRatAFG[nx,2,nz,Len(aRatAFG[nx,2,nz])]
					dbSelectArea('AFG')
				 	If nz <= Len(aRecAFG)
				 		AFG->(dbGoto(aRecAFG[nz]))
				 		RecLock('AFG',.F.)
				 	Else
			 			RecLock('AFG',.T.)
				 	EndIf
					// Atualiza os dados contidos na GetDados
					For ny := 1 to Len(aHeaderAFG)
						If aHeaderAFG[ny,10] # "V"
							cVar := Trim(aHeaderAFG[ny,2])
							Replace &cVar. With aRatAFG[nx,2,nz,ny]
						Endif
					Next
					AFG->AFG_FILIAL	:= xFilial("AFG")
					AFG->AFG_NUMSC  := (cAliasSC1)->C1_NUM
					AFG->AFG_ITEMSC	:= (cAliasSC1)->C1_ITEM
					AFG->AFG_COD   	:= (cAliasSC1)->C1_PRODUTO
					MsUnlock()
					If ((nPosPln := aScan(aHeaderAFG,{|x| alltrim(x[2])=="AFG_PLANEJ"})) > 0) .AND. !EMPTY(aRatAFG[nx,2,nz,nPosPln])
						lMantem := PmsGetEmp(aRatAFG[nx,2,nz],aHeaderAFG, 1, "AFG")
						If !lMantem
							PmsAvalAFG("AFG",1,aRatAFG[nx,2,nz,nPosPln])
						EndIf
					ELSE
						PmsAvalAFG("AFG",1)
					EndIf
				Else
					If nz <= Len(aRecAFG)
						MsGoto(aRecAFG[nz])
						RecLock("AFG",.F.,.T.)
						dbDelete()
						msUnLock()
					EndIf
				EndIf
			Next
			// Deleta os demais registros.
			If Len(aRecAFG) > Len(aRatAFG[nx,2])
				For nz := (Len(aRatAFG[nx,2])+1) to Len(aRecAFG)
					MsGoto(aRecAFG[nz])
					RecLock("AFG",.F.,.T.)
					dbDelete()
					msUnLock()
				Next nz
			EndIf
		EndIf
	Case nEvento == 2
		dbSelectArea("AFG")
		dbSetOrder(2)
		If MsSeek(xFilial("AFG")+(cAliasSC1)->C1_NUM+(cAliasSC1)->C1_ITEM)
			While !Eof() .And. xFilial()+(cAliasSC1)->C1_NUM+(cAliasSC1)->C1_ITEM==;
								AFG_FILIAL+AFG_NUMSC+AFG_ITEMSC
				If !lMsFilAFG .Or. (lMsFilAFG .And. AFG->AFG_MSFIL == cFilAnt)
					If AFG->AFG_REVISA==PmsAF8Ver(AFG->AFG_PROJET)
						PmsAvalAFG("AFG",2)
					EndIf
				EndIf
		   		dbSelectArea("AFG")
				dbSkip()
			EndDo
		EndIf
	Case nEvento == 3
		dbSelectArea("AFG")
		dbSetOrder(2)
		If MsSeek(xFilial("AFG")+(cAliasSC1)->C1_NUM+(cAliasSC1)->C1_ITEM)
			While !Eof() .And. xFilial()+(cAliasSC1)->C1_NUM+(cAliasSC1)->C1_ITEM==;
				AFG_FILIAL+AFG_NUMSC+AFG_ITEMSC
				If !lMsFilAFG .Or. (lMsFilAFG .And. AFG->AFG_MSFIL == cFilAnt)
					If AFG->AFG_REVISA==PmsAF8Ver(AFG->AFG_PROJET)
						PmsAvalAFG("AFG",3)
					EndIf
				EndIf
				dbSkip()
			End
		EndIf
EndCase
RestArea(aArea)
Return
// FUNCAO PMSSETF3 MOVIDA PARA O FONTE PMSXFUNB
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³PmsHrsItvl³ Autor ³ Edson Maricate		³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Retorna o numero de horas uteis em um determinado intervalo	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpD1 : Data Inicial											³±±
±±³			 ³ExpC2 : Hora Inicial	("XX:XX")								³±±
±±³			 ³ExpD3 : Data Final											³±±
±±³			 ³ExpC4 : Hora Final	("XX:XX")								³±±
±±³			 ³ExpC5 : Codigo do Calendario									³±±
±±³			 ³ExpC6 : Codigo do Projeto										³±±
±±³			 ³ExpC7 : Codigo do Recurso										³±±
±±³			 ³ExpL8 : Flag que indica se funcao esta sendo chamada pelo PCP ³±±
±±³			 ³ExpL9 : Flag para indicar se estah sendo chamada de uma rotina³±±
±±³			 ³			de apontamento de recurso.							³±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsHrsItvl(dDataIni,cHoraIni,dDataFim,cHoraFim,cCalend,cProjeto,cRecurso,lPcP,lAponta,cAliasAFY, aTRBs)
// 30/11/2009: Criada a funcao PmsHrsItv2 no PMSXFUNA com o mesmo conteudo da PmsHrsItvl
//				e efetuado o desvio para contornar o limite de tamanho de arquivo do compilador
//				( 2^20 - 100 = 1.048.476 bytes ). Passado esse limite, ocorre erro de compilacao
Return PmsHrsItv2(dDataIni,cHoraIni,dDataFim,cHoraFim,cCalend,cProjeto,cRecurso,lPcP,lAponta,cAliasAFY, aTRBs)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³PmsHrUtil³ Autor ³ Edson Maricate			³ Rev. ³ 15-08-2002 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Retorna o numero de horas uteis em uma determinada Data.		³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpD1 : Data de Referencia									³±±
±±³			 ³ExpC2 : Hora Final	("XXXX:XX")								³±±
±±³			 ³ExpC3 : Hora Inicial	("XXXX:XX")								³±±
±±³			 ³ExpC4 : Codigo do Calendario									³±±
±±³			 ³ExpA4 : Fora de Uso											³±±
±±³			 ³ExpC5 : Codigo do Projeto para tratamento de excecoes			³±±
±±³			 ³ExpC6 : Codigo do Recurso para tratamento de excecoes			³±±
±±³			 ³ExpL6 : Flag para tratamento da funcao para o PCP				³±±
±±³			 ³ExpC7 : Array contento a string de aloc. calendario (Opcional)³±±
±±³			 ³ExpN8 : Tamanho do bloco por dia (Opcional)					³±±
±±³			 ³ExpL9 : Indicar se foi chamado do apontamento da tarefa		³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³SIGAPMS, SXB													³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsHrUtil(dData,cHoraIni,cHoraFim,cCalend,aForaDeUso,cProjeto,cRecurso,lPcp,cAloc,nTamanho,lAponta,cAliasAFY,lFirstDay,lLastDay, aTrbs)
Local nHoras		:= 0
Local nRet			:= 0
Local aArea		:= GetArea()
Local nDayWeek	:= DOW(dData)
Local nMinBit		:= 0
Local nBitIni		:= 0
Local nBitFim		:= 0
Local aExcRec		:= {}
Local nPrioridade	:= 0
Local lTopConn	:= .F.
Local bGoToAFY	:= {|| AFY->(dbGoTo((cAliasAFY)->(R_E_C_N_O_))) }
Local lPmsHrsItv2	:= .F.
Local cFilAFY		:= ""
Local nPerc		:= 0
Local nQntVz		:= 0
Local nMin			:= 0
Local cFilSH9		:= xFilial("SH9")
Local cAlocTsk	    := ""
Local nTamTsk		:= 0
Local nHrTsk		:= 0
Local cHrIniTk 		:= cHoraIni
Local cHrFimTk		:= cHoraFim
Local lPMS320		:= IsInCallStack("PMSA320")
Local lIntMSP		:= IsInCallStack("Aux010BGrv")
Local dDataIni		:= AF9->AF9_START
Local dDataFin		:= AF9->AF9_FINISH
Local cCaleTsk		:= AF9->AF9_CALEND
Local nBitIniTk		:= 0
Local nBitFimTk		:= 0
Local aAreaSH7		:= SH7->(GetArea())
Local nT			:= 0
Local cAlocMrg		:= ""

DEFAULT lPcp		:= .F.
DEFAULT lAponta	:= .F.
DEFAULT cAliasAFY	:= "AFY"
DEFAULT lNewCalend:= SuperGetMv("MV_PMSCALE" , .T. , .F. )

If lNewCalend .and. __lTopConn 
	nRet := PmsAEGUteis(dData,IIf(Len(cHoraIni)==5,cHoraIni, substr(cHoraIni,3,5)),IIf(Len(cHoraFim)==5,cHoraFim, substr(cHoraFim,3,5)),cCalend,aForaDeUso,cProjeto,cRecurso,lPcp,cAloc,nTamanho,lAponta,cAliasAFY,lFirstDay,lLastDay, aTrbs)
	
// parâmetro para ignorar o calendário no cálculo das horas apontadas
// 0 - desconsidera o calendário para o cálculo
// 1 - considera o calendário ou exceção de calendário, se existir
ElseIf lAponta .And. GetNewPar("MV_PMSHUR", 1) == 0

	nRet := PMSTimeDiff(cHoraFim, cHoraIni)
Else
	
	nMinBit		:= 60 / SuperGetMV("MV_PRECISA")
	nBitIni		:= Round((Val(Substr(cHoraIni,3,2))*60+Val(Substr(cHoraIni,6,2)))/nMinBit,0)+1
	nBitFim		:= Round((Val(Substr(cHoraFim,3,2))*60+Val(Substr(cHoraFim,6,2)))/nMinBit,0)+1
	
	cFilAFY := xFilial("AFY")
	nDayWeek := If(nDayWeek==1,7,nDayWeek-1)
	lPmsHrsItv2 := Alltrim(cAliasAFY) != "AFY"
	lTopConn	:= IIf(Type("__lTopConn") == "L", __lTopConn, IfDefTopCTB())
	
	If cAloc == Nil
		dbSelectArea("SH7")
		If MsSeek(xFilial("SH7")+cCalend)
			cAloc    := Upper(SH7->H7_ALOC)
			nTamanho := Len(cAloc) / 7
		Else
			Aviso(STR0258, STR0259+cCalend+STR0260,{STR0261},2)  //"Inconsistencia na base de dados"##"O Calendario Cod. "###" nao existe no cadastro de calendarios.. Verifique a base de dados."###"Fechar"
			cAloc	:= ""
			nTamanho:= 0
		EndIf
	EndIf
	cAloc := Substr(cAloc,(nTamanho*(nDayWeek-1))+1,nTamanho)
	If lPcp
		dbSelectArea("SH9")
		dbSetOrder(2)
		If MsSeek(cFilSH9 +"E"+ Dtos(dData))
			While SH9->(!Eof() .And. (H9_FILIAL+H9_TIPO == cFilSH9+"E") .And. (dData == H9_DTINI))
				// Quando o recurso e o CC NAO sao informados.
				If Empty(SH9->H9_RECURSO) .And. Empty(SH9->H9_CCUSTO)
					cAloc 	:= SH9->H9_ALOC
					aExcRec := {}
					Exit
				// Quando o recurso e o CC sao informados, o mesmo tem prioridade
				ElseIf (SH9->H9_RECURSO == cRecurso) .And. !Empty(SH9->H9_CCUSTO)
					cAloc 	:= SH9->H9_ALOC
					aExcRec := {}
					Exit
				// Quando so o recurso eh informado
				ElseIf (SH9->H9_RECURSO == cRecurso) .And. Empty(SH9->H9_CCUSTO)
					Aadd(aExcRec,{"1",SH9->H9_ALOC})
				// Se o recurso nao for informado a prioridade eh o CCusto
				ElseIf Empty(SH9->H9_RECURSO) .AND. !Empty(SH9->H9_CCUSTO)
					Aadd(aExcRec,{"2",SH9->H9_ALOC})
				EndIf
				SH9->(dbSkip())
			End
	
			If !Empty(aExcRec)
				aExcRec := ASort(aExcRec,,, { |x, y| x[1] < y[1] } )
				cAloc 	:= aExcRec[1,2]
			EndIf
		EndIf
	Else
		nPrioridade := 0
		dbSelectArea(cAliasAFY)
		If !lTopConn
			dbSetOrder(2)
			AFY->(dbSeek(cFilAFY))
		Endif
		While (cAliasAFY)->(!Eof())
			If ( (cAliasAFY)->AFY_FILIAL==cFilAFY )
				IF (dData >= (cAliasAFY)->AFY_DATA .AND. dData <= (cAliasAFY)->AFY_DATAF)
					// ******** RECURSO E PROJETO PREENCHIDOS
					// Calendario de excecao do recurso sobrepõe do projeto ou geral,isto é, projeto e recurso em brancos.
					// Se a excecao de calendario ter informado recurso e projeto, assume este.
					If (!Empty((cAliasAFY)->AFY_RECURS).AND.(cAliasAFY)->AFY_RECURS == cRecurso) .AND. (!Empty((cAliasAFY)->AFY_PROJET) .AND. (cAliasAFY)->AFY_PROJET == cProjeto)
						If lPmsHrsItv2
							eval(bGoToAFY)
						Endif
						nPrioridade := 4
						cAloc := AFY->AFY_MALOC 
						Exit
					EndIf
					// ******** RECURSO PREENCHIDO E PROJETO EM BRANCO
					// Calendario de excecao do recurso sobrepõe do projeto ou geral,isto é, projeto e recurso em brancos.
					// Se a excecao de calendario ter informado recurso e projeto em branco, assume este.
					If (nPrioridade < 4) .AND. (!Empty((cAliasAFY)->AFY_RECURS).AND.(cAliasAFY)->AFY_RECURS == cRecurso) .AND. (Empty((cAliasAFY)->AFY_PROJET))
						If lPmsHrsItv2
							eval(bGoToAFY)
						Endif
						nPrioridade := 3
						cAloc := AFY->AFY_MALOC 
					EndIf
					// ******** PROJETO PREENCHIDO E RECURSO EM BRANCO
					// Calendario de excecao do projeto sobrepõe o geral, isto é projeto e recurso em brancos
					// Se a excecao de calendario ter informado projeto e recurso em branco, assume este.
					If (nPrioridade < 3) .AND. (!Empty((cAliasAFY)->AFY_PROJET) .AND. (cAliasAFY)->AFY_PROJET == cProjeto) .AND. Empty((cAliasAFY)->AFY_RECURS)
						If lPmsHrsItv2
							eval(bGoToAFY)
						Endif
						nPrioridade := 2
						cAloc := AFY->AFY_MALOC 
					EndIf
					// ******** PROJETO E RECURSO EM BRANCOS
					// Calendario de excecao do projeto sobrepõe o geral, isto é projeto e recurso em brancos
					// Se a excecao de calendario ter projeto e recurso em brancos, assume este.
					//
					If (nPrioridade < 2) .AND. (Empty((cAliasAFY)->AFY_PROJET) .AND. Empty((cAliasAFY)->AFY_RECURS))
						If lPmsHrsItv2
							eval(bGoToAFY)
						Endif
						nPrioridade := 1
						cAloc := AFY->AFY_MALOC 
					EndIf

				EndIf
			EndIf
			(cAliasAFY)->(dbSkip())
		EndDo
	EndIf
	
	nHoras := ((Len(StrTran(Substr(cAloc,nBitIni,nBitFim-nBitIni)," ","")))*nMinBit)/60

	If !lIntMSP .AND. Type("M->AF9_CALEND") == 'C'//Caso não seja da integração Project deve pegar informação da memória
		cCaleTsk := M->AF9_CALEND
	EndIf
	If cCalend <> cCaleTsk .And. nHoras > 0 //Se o calendario do recurso for diferente da tarefa deve processar os horarios passiveis de opontamento
		SH7->(dbSetOrder(1))
		SH7->(MsSeek(xFilial("SH7")+AF9->AF9_CALEND))
		cAlocTsk := Upper(SH7->H7_ALOC)
		nTamTsk := Len(cAlocTsk) / 7
		cAlocTsk := Substr(Upper(cAlocTsk),(nTamTsk*(nDayWeek-1))+1,nTamTsk)

		If cAloc <> cAlocTsk
			For nT := 1 To Len(cAloc)
				If Substr(cAloc,nT,1) == Substr(cAlocTsk,nT,1)
					cAlocMrg += Substr(cAloc,nT,1)
				Else
					cAlocMrg += " "	
				EndIf
			Next nT
		EndIf
		cAlocTsk := cAlocMrg

		If !lIntMSP .AND. Type("M->AF9_START") == 'D' //Caso não seja da integração Project deve pegar informação da memória
			dDataIni := M->AF9_START
			dDataFin := M->AF9_FINISH
		EndIf
		If !lPMS320
			If dData <> dDataIni
				cHrIniTk := Bit2Tempo(AT("X",Substr(cAlocTsk,1,Len(cAlocTsk)-1))-1) //Retorna a hora inicial de alocação do dia
			EndIf
			If dData <> dDataFin
				cHrFimTk := Bit2Tempo(RAT("X",Substr(cAlocTsk,1,Len(cAlocTsk)-1))) //Retorna a hora final de alocação do dia
			EndIf
		EndIf

		nBitIniTk		:= Round((Val(Substr(cHrIniTk,3,2))*60+Val(Substr(cHrIniTk,6,2)))/nMinBit,0)+1
		nBitFimTk		:= Round((Val(Substr(cHrFimTk,3,2))*60+Val(Substr(cHrFimTk,6,2)))/nMinBit,0)+1

		nHrTsk := ((Len(StrTran(Substr(cAlocTsk,nBitIniTk,nBitFimTk-nBitIniTk)," ","")))*nMinBit)/60 //Horario passivel de alocação de acordo com o calendario da tarefa
		If nHrTsk < nHoras //Caso o recurso possa apontar mais que a tarefa deve ser computado apenas o limite da tarefa.
			nHoras := nHoras-(nHoras-nHrTsk)
		EndIf
	EndIf

	If !Empty(nHoras) .AND. IsIncallStack("PMSA320")
		If SuperGetMV("MV_PRECISA",.F.,4) == 60
			nPerc := Mod(nHoras,1)
			nQntVz := 1/nPerc
			nMin := (60/nQntVz)/100
			nHoras := Int(nHoras) + nMin
		EndIf
	EndIf
	
	nRet := iIf(lPcp,nHoras,NoRound(nHoras,2))
	 
	(cAliasAFY)->(dbGotop())
EndIf

RestArea( aAreaSH7 )
RestArea(aArea)
Return nRet
 
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³PMSDTaskF³ Autor ³ Edson Maricate			³ Rev  ³ 15-08-2002 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Calcula a data e Hora Final da tarefa a partir da Hora Inicial³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpD1 : Data de Inicial da Tarefa								³±±
±±³			 ³ExpC2 : Hora Inicial	("XX:XX")								³±±
±±³			 ³ExpC3 : Calendario											³±±
±±³			 ³ExpN4 : Duracao ( em Hrs )									³±±
±±³			 ³ExpC5 : Codigo do Projeto para validacao das excessoes		³±±
±±³			 ³ExpC6 : Codigo do Recurso para validacao das excessoes		³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PMSDTaskF(dStart,cHoraIni,cCalend,nDuracao,cProjeto,cRecurso,dStartArq,cHoraIniArq,lMsg)
Local aArea		:= GetArea()
Local aRet			:= {}
Local nMinBit		:= 60 / SuperGetMV("MV_PRECISA")
Local cAloc		:= ''
Local nTamanho	:= 0
Local nDurMin		:= nDuracao*60
Local cAlocDay	:= ''
Local nDayWeek	:= 0
Local nHrAlocDay	:= 0
Local nMinAloc	:= 0
Local nX			:= 0

DEFAULT lMsg			:= .T.
DEFAULT dStartArq		:= dStart
DEFAULT cHoraIniArq	:= cHoraIni
DEFAULT lNewCalend	:= SuperGetMv("MV_PMSCALE" , .T. , .F. )

If lNewCalend .and. __lTopConn
	aRet := PMSDtFim(dStart,cHoraIni,cCalend,nDuracao,cProjeto,cRecurso,dStartArq,cHoraIniArq,lMsg)
Else
	// Verifica a existencia do calendario informado.
	dbSelectArea("SH7")
	If MsSeek(xFilial("SH7")+cCalend)
		cAloc    := Upper(SH7->H7_ALOC)
		nTamanho := Len(cAloc) / 7
	Else
		If lMsg
			Aviso(STR0258,STR0259+cCalend+STR0260,{STR0261},2)  //"Inconsistencia na base de dados"##"O Calendario Cod. "###" nao existe no cadastro de calendarios.. Verifique a base de dados."###"Fechar"
		Endif
		cAloc	:= ""
		nTamanho:= 0
	EndIf

	// Calcula as datas de inicio/hora e fim/hora da tarefa.
	dStart := If(Empty(dStart),dDataBase+1,dStart)

	//Se o fim da predecessora eh na mesma data que o inicio informado no cadastro,
	//a hora de inicio deve ser a maior entre o fim da predecessora e o inicio in-
	//formado no cadastro.
	If dStart == dStartArq
		cHoraIni := If(cHoraIni>cHoraIniArq,cHoraIni,cHoraIniArq)
	//Se o fim da predecessora eh anterior a data de inicio informado no cadastro,
	//a data e hora de inicio devem ser as informadas no cadastro.
	ElseIf dStart < dStartArq
		dStart	 := dStartArq
		cHoraIni := cHoraIniArq
	Endif
	If !Empty(cAloc)
		//Verifica a data/hora real de inicio
		nTimeIni := Round(((Val(Substr(cHoraIni,1,2))*60)+Val(Substr(cHoraIni,4,2)))/nMinBit,0)+1
		nDayWeek := DOW(dStart)
		nDayWeek := If(nDayWeek==1,7,nDayWeek-1)

		cAlocDay := Substr(cAloc,(nTamanho*(nDayWeek-1))+1,nTamanho)
		cAlocDay := PmsChkExc(dStart,cProjeto,cRecurso,cAlocDay)

		//Verifica se existe alocacao na data informada.
		//Caso nao exista procura no proximo dia.
		While Empty(Substr(cAlocDay,nTimeIni,Len(cAlocDay)-nTimeIni))
			dStart++
			cHoraIni := "00:00"
			nTimeIni := Round(((Val(Substr(cHoraIni,1,2))*60)+Val(Substr(cHoraIni,4,2)))/nMinBit,0)+1

			nDayWeek := DOW(dStart)
			nDayWeek := If(nDayWeek==1,7,nDayWeek-1)

			cAlocDay := Substr(cAloc,(nTamanho*(nDayWeek-1))+1,nTamanho)
			cAlocDay := PmsChkExc(dStart,cProjeto,cRecurso,cAlocDay)
		End

		//Calcula a hora de inicio da tarefa.
		dRetIni := dStart
		If Empty(Substr(cAlocDay,nTimeIni,1))
			cHrRetIni := Substr(Bit2Tempo(nTimeIni-2+AT("X",Substr(cAlocDay,nTimeIni,Len(cAlocDay)-nTimeIni))),3,5)
			cHoraIni  := cHrRetIni
		Else
			cHrRetIni := Substr(Bit2Tempo(nTimeIni-1),3,5)
			cHoraIni  := cHrRetIni
		EndIf
		
		If ReadVar() == "M->AF9_START"
			cHrRetFim := Substr(Bit2Tempo(RAT("X",Substr(cAlocDay,1,Len(cAlocDay)-1))),3,5)
		EndIf
		
		//Calcula a data de termino da tarefa.
		//Sao analisados a duracao da tarefa e a alocacao disponivel
		//em cada dia.
		nTimeIni  := Round(((Val(Substr(cHoraIni,1,2))*60)+Val(Substr(cHoraIni,4,2)))/nMinBit,0)
		nHrAlocDay:= Len(StrTran(SubStr(cAlocDay,nTimeIni+1,Len(cAlocDay))," ","")) * nMinBit

		While (nDurMin > nHrAlocDay)
			nDurMin -= nHrAlocDay
			If nDurMin > 0
				dStart++
				nDayWeek := DOW(dStart)
				nDayWeek := If(nDayWeek==1,7,nDayWeek-1)
				cAlocDay := Substr(cAloc,(nTamanho*(nDayWeek-1))+1,nTamanho)
				cAlocDay := PmsChkExc(dStart,cProjeto,cRecurso,cAlocDay)
				nTimeIni  := AT("X",cAlocDay)-1
				nHrAlocDay:= Len(StrTran(SubStr(cAlocDay,nTimeIni,Len(cAlocDay))," ","")) * nMinBit
			EndIf
		End

		//Calcula a hora de termino da tarefa.
		//Analisa a necessidade de alocacao no ultimo dia da tarefa
		//para saber o horario de termino.
		dRetFim := dStart
		cAlocDay:= AllTrim(SubStr(cAlocDay,nTimeIni,Len(cAlocDay)))
		For nX:= 1 To Len(cAlocDay)
			If (nDurMin <= 0)
				Exit
			EndIf
			nMinAloc++
			If !Empty(SubStr(cAlocDay,nX,1))
				nDurMin-= nMinBit
			EndIf
		Next nX
		
		If ReadVar() != "M->AF9_START"
			cHrRetFim := Bit2Tempo(nTimeIni+nMinAloc,3,5)
		EndIf
	Else
		cHrRetIni	:= cHoraIni
		cHrRetFim	:= cHoraIni
		dRetIni	:= dStart
		dRetFim	:= dStart
	Endif
	aRet := {dRetIni,cHrRetIni,dRetFim,cHrRetFim}
EndIf
RestArea(aArea)
Return aRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³PMSDTaskI³ Autor ³ Edson Maricate			³ Rev  ³ 15-08-2002 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Calcula a data e Hora Inicial  tarefa a partir da Hora Final  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpD1 : Data de Final da Tarefa								³±±
±±³			 ³ExpC2 : Hora Final	("XX:XX")								³±±
±±³			 ³ExpC3 : Calendario											³±±
±±³			 ³ExpN4 : Duracao ( em Hrs )									³±±
±±³			 ³ExpC5 : Codigo do Projeto para validacao das excessoes		³±±
±±³			 ³ExpC6 : Codigo do Recurso para validacao das excessoes		³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
*/
Function PMSDTaskI(dFinish,cHoraFim,cCalend,nDuracao,cProjeto,cRecurso)
Local aArea		:= GetArea()
Local nMinBit	:= 60 / SuperGetMV("MV_PRECISA")
Local cAloc		:= ''
Local nTamanho	:= 0
Local nDurMin	:= nDuracao*60
Local cAlocDay	:= ''
Local nDayWeek	:= 0
Local nHrAlocDay:= 0
Local nMinAloc	:= 0
Local nX		:= 0

DEFAULT lNewCalend	:= SuperGetMv("MV_PMSCALE" , .T. , .F. )

If lNewCalend .and. __lTopConn
	Return PMSDtIni(dFinish,cHoraFim,cCalend,nDuracao,cProjeto,cRecurso)
Endif

dbSelectArea("SH7")
If MsSeek(xFilial("SH7")+cCalend)
	cAloc	:= Upper(SH7->H7_ALOC)
	nTamanho:= Len(cAloc) / 7
Else
	Aviso(STR0258,STR0259+cCalend+STR0260,{STR0261},2)  //"Inconsistencia na base de dados"##"O Calendario Cod. "###" nao existe no cadastro de calendarios.. Verifique a base de dados."###"Fechar"
	cAloc	:= ""
	nTamanho:= 0
EndIf

//Calcula as datas de inicio/hora e fim/hora da tarefa.
dFinish := If(Empty(dFinish),dDataBase,dFinish)
If !Empty(cAloc)
	//Verifica a data/hora real de Fim
	nTimeFim := Round(((Val(Substr(cHoraFim,1,2))*60)+Val(Substr(cHoraFim,4,2)))/nMinBit,0)+1
	nDayWeek := DOW(dFinish)
	nDayWeek := If(nDayWeek==1,7,nDayWeek-1)

	//Verifica se existe alocacao na data informada.
	//Caso nao exista procura no dia anterior.
	cAlocDay := Substr(cAloc,(nTamanho*(nDayWeek-1))+1,nTamanho)
	cAlocDay := PmsChkExc(dFinish,cProjeto,cRecurso,cAlocDay)
	While Empty(Substr(cAlocDay,1,nTimeFim-1))
		dFinish--
		cHoraFim := "24:00"
		nTimeFim := Round(((Val(Substr(cHoraFim,1,2))*60)+Val(Substr(cHoraFim,4,2)))/nMinBit,0)+1

		nDayWeek := DOW(dFinish)
		nDayWeek := If(nDayWeek==1,7,nDayWeek-1)

		cAlocDay := Substr(cAloc,(nTamanho*(nDayWeek-1))+1,nTamanho)
		cAlocDay := PmsChkExc(dFinish,cProjeto,cRecurso,cAlocDay)
	End

	//Calcula a hora de termino da tarefa
	dRetFim := dFinish
	If !Empty(Substr(cAlocDay,nTimeFim-1,1))
		cHrRetFim := Substr(Bit2Tempo(nTimeFim-1),3,5)
		cHoraFim  := cHrRetFim
	Else
		cHrRetFim := Substr(Bit2Tempo(RAT("X",Substr(cAlocDay,1,nTimeFim-1))),3,5)
		cHoraFim  := cHrRetFim
	EndIf

	//Calcula a data de termino da tarefa.
	//Sao analisados a duracao da tarefa e a alocacao disponivel
	//em cada dia.
	nTimeFim  := Round(((Val(Substr(cHoraFim,1,2))*60)+Val(Substr(cHoraFim,4,2)))/nMinBit,0)
	nHrAlocDay:= Len(StrTran(SubStr(cAlocDay,1,nTimeFim)," ","")) * nMinBit

	While (nDurMin > nHrAlocDay)
		nDurMin -= nHrAlocDay
		If nDurMin > 0
			dFinish--
			nDayWeek := DOW(dFinish)
			nDayWeek := If(nDayWeek==1,7,nDayWeek-1)

			cAlocDay := Substr(cAloc,(nTamanho*(nDayWeek-1))+1,nTamanho)
			cAlocDay := PmsChkExc(dFinish,cProjeto,cRecurso,cAlocDay)

			nTimeFim  := RAT("X",cAlocDay) //Len(RTrim(cAlocDay))
		    nHrAlocDay:= Len(StrTran(SubStr(cAlocDay,1,nTimeFim)," ","")) * nMinBit
		EndIf
	End
	//Calcula a hora de termino da tarefa.
	//Analisa a necessidade de alocacao no ultimo dia da tarefa
	//para saber o horario de termino.
	dRetIni := dFinish
    cAlocDay:= AllTrim(SubStr(cAlocDay,1,nTimeFim))
    For nX:= 1 To Len(cAlocDay)
		If (nDurMin <= 0)
			Exit
		EndIf
	    nMinAloc++
		If !Empty(SubStr(cAlocDay,nX,1))
		    nDurMin-= nMinBit
		EndIf
	Next nX
	cHrRetIni := Bit2Tempo(nTimeFim-nMinAloc,3,5)
Else
	cHrRetIni	:= cHoraFim
	cHrRetFim	:= cHoraFim
	dRetIni		:= dFinish
	dRetFim		:= dFinish
Endif
RestArea(aArea)
Return {dRetIni,cHrRetIni,dRetFim,cHrRetFim}
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSADDHrs³ Autor ³ Edson Maricate         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Executa a soma ou a subtracao um numero de horas a uma data   ³±±
±±³          ³de acordo com o calendario.                                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpD1 : Data de Referencia                                    ³±±
±±³          ³ExpC2 : Hora Referencia("XX:XX")                              ³±±
±±³          ³ExpC3 : Calendario                                            ³±±
±±³          ³ExpN4 : Numero de Horas a Adicionar/Subtrair                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
*/
Function PMSADDHrs(dData,cHora,cCalend,nAddHrs,cProjeto,cRecurso,lPredec,nTipo)
Local aAuxRet

DEFAULT lPredec	:= .F.

If nAddHrs > 0
	aAuxRet := PMSDTaskF(dData,cHora,cCalend,nAddHrs,cProjeto,cRecurso)
	dData	:= aAuxRet[3]
	cHora	:= aAuxRet[4]
Else
	aAuxRet := PMSDTaskI(dData,cHora,cCalend,(nAddHrs*-1),cProjeto,cRecurso)
	dData	:= aAuxRet[1]
	cHora	:= aAuxRet[2]
EndIf
Return {dData,cHora}
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSAvalPrj³ Autor ³ Edson Maricate        ³ Data ³ 18-05-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Rotina de avaliacao dos eventos de um Projeto.                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Alias da tabela de Projetos                            ³±±
±±³          ³ExpN2: Codigo do Evento                                       ³±±
±±³          ³       [1] Implantacao de um Projeto                          ³±±
±±³          ³       [2] Estorno de um  Projeto                             ³±±
±±³          ³       [3] Exclusao de um  Projeto                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo atualizar os eventos vinculados ³±±
±±³          ³a um Projeto :                                                ³±±
±±³          ³A) Atualizacao das tabelas complementares.                    ³±±
±±³          ³B) Atualizacao das informacoes complementares do Projeto      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
*/
Function PMSAvalPrj(cAlias,nEvento,lCriaEDT)
Local aArea 	:= GetArea()
Local aAreaAF8  := AF8->(GetArea())

DEFAULT lCriaEDT := .T.

Do Case
	Case nEvento == 1
		// Grava o arquivo de revisoes com o historico inicial.
		RecLock("AFE",.T.)
		AFE->AFE_FILIAL := xFilial("AFE")
		AFE->AFE_PROJET := AF8->AF8_PROJET
		AFE->AFE_REVISA := AF8->AF8_REVISA
		AFE->AFE_DATAI	:= MsDate()
		AFE->AFE_HORAI  := Time()
		AFE->AFE_DATAF  := MsDate()
		AFE->AFE_HORAF	:= Time()
		AFE->AFE_USERI  := RetCodUsr()
		AFE->AFE_USERF  := RetCodUsr()
		AFE->AFE_MEMO	:= STR0014 //"Inclusao do Projeto"
		// Projeto normal
		AFE->AFE_TIPO := "1"
		MsUnlock()
		If lCriaEDT
			// Grava o arquivo de Estrutura EDT com o nivel 001
			RecLock("AFC",.T.)
			AFC->AFC_FILIAL := xFilial("AFC")
			AFC->AFC_PROJET := AF8->AF8_PROJET
			AFC->AFC_DESCRI := AF8->AF8_DESCRI
			AFC->AFC_CALEND := AF8->AF8_CALEND
			AFC->AFC_REVISA := AF8->AF8_REVISA
			AFC->AFC_EDT    := AF8->AF8_PROJET
			AFC->AFC_NIVEL  := "001"
			AFC->AFC_UM     := "UN"
			AFC->AFC_QUANT  := 1
			AFC->AFC_FATURA := CriaVar("AFC_FATURA")
			MsUnlock()
		EndIf

		FkCommit()

		//Cria os direitos de acesso para o usuario que criou o projeto.
		RecLock("AFX",.T.)
		AFX->AFX_FILIAL := xFilial("AFX")
		AFX->AFX_PROJET := AF8->AF8_PROJET
		AFX->AFX_EDT	:= IIf(lCriaEDT,AFC->AFC_EDT,AF8->AF8_PROJET)
		AFX->AFX_USER	:= __cUserID
		AFX->AFX_ESTRUT := "3"
		AFX->AFX_DOCUME := "3"
		AFX->AFX_GERSC	:= "4"
		AFX->AFX_GERSA	:= "4"
		AFX->AFX_GEROP	:= "4"
		AFX->AFX_GERCP	:= "4"
		AFX->AFX_GEREMP	:= "4"
		AFX->AFX_CONFIR	:= "4"
		AFX->AFX_NFE	:= "4"
		AFX->AFX_REQUIS	:= "4"
		AFX->AFX_DESP	:= "4"
		AFX->AFX_RECEI	:= "4"
		AFX->AFX_RECURS	:= "4"
		AFX->AFX_NFS	:= "4"
		AFX->AFX_MOVBAN	:= "4"
		If AFX->(ColumnPos("AFX_PREREC")) >0
			AFX->AFX_PREREC	:= "4"
		EndIf
		If AFX->(ColumnPos("AFX_APRPRE")) >0
			AFX->AFX_APRPRE	:= "2"
		EndIf
		MsUnlock()

		FkCommit()

		//Ponto de entrada para gravacao complementar
		If ExistBlock("PMSGAFX")
			ExecBlock("PMSGAFX",.F.,.F.)
		EndIf
EndCase
RestArea(aAreaAF8)
RestArea(aArea)
Return


/*/{Protheus.doc} PMSAvalTrf

Esta rotina tem como objetivo atualizar os eventos vinculadosa uma Tarefa de Projetos :
	A) Atualizacao das tabelas complementares.
	B) Atualizacao das informacoes complementares da Tarefa

@param cAlias, character, Alias da tabela de Tarefas do Projeto
@param nEvento, numérico, Codigo do Evento
						[1] Implantacao de uma Tarefa
						[2] Estorno de uma Tarefa
						[3] Exclusao de uma Tarefa
						[4] Recalculo do Custo de uma Tarefa
@param lAtuSuces, logico, (Descrição do parâmetro)
@param lAtuCron, logico, (Descrição do parâmetro)
@param lAtuEDT, logico, (Descrição do parâmetro)
@param lCopy, logico, (Descrição do parâmetro)
@param aSimDados, array, (Descrição do parâmetro)
@param aSimEDT, array, (Descrição do parâmetro)

@return ${return}, ${return_description}

@author Edson Maricate
@since 18-05-2001
@version 1.0

/*/
Function PMSAvalTrf(cAlias, nEvento, lAtuSuces, lAtuCron, lAtuEDT, lCopy, aSimDados, aSimEDT)
Local aArea		:= GetArea()
Local aAreaAE8	:= AE8->(GetArea())
Local aAreaAF9	:= AF9->(GetArea())
Local aAreaAFP	:= AFP->(GetArea())
Local aAreaAFQ	:= AFQ->(GetArea())
Local aAtuEDT		:= {}
Local cAliasAFP	:= xFilial("AFP")
Local lCalcTrib	:= IIf(AF8->(ColumnPos("AF8_PAR006")) > 0 .AND. AF8->AF8_PAR006 == '1' .AND. AliasInDic("AN9"), .T., .F.)
Local lSimula		:= (Type("aTarefs")=="A" .and. Len(aTarefs)>0) .OR. (ValType(aSimDados)=="A" .and. len(aSimDados)>0)
Local nx			:= 0

DEFAULT lAtuEDT	:= .T.
DEFAULT lAtuSuces	:= .T.
DEFAULT lAtuCron	:= .T.
DEFAULT lCopy		:= .F.
DEFAULT aSimDados	:= {}
DEFAULT aSimEDT	:= {}

aAtuEDT := Iif(Len(aSimEDT)>0, aClone(aSimEDT), {})

Do Case
	Case nEvento == 1
		// Efetua a atualizacao das datas dos recursos
		PmsAtuNec((cAlias)->AF9_PROJET,(cAlias)->AF9_REVISA,(cAlias)->AF9_TAREFA,.F.)
		// Efetua a atualizacao dos Eventos.
		dbSelectArea("AFP")
		dbSetOrder(1)
		MsSeek(cAliasAFP+(cAlias)->AF9_PROJET+(cAlias)->AF9_REVISA+(cAlias)->AF9_TAREFA)
		While !Eof() .And. cAliasAFP+(cAlias)->AF9_PROJET+(cAlias)->AF9_REVISA+(cAlias)->AF9_TAREFA==;
							AFP_FILIAL+AFP_PROJET+AFP_REVISA+AFP_TAREFA
			PmsAvalAFP("AFP",1,,lCopy)
			dbSkip()
		EndDo

		If lAtuCron
			// Efetua o recalculo das tarefas sucessoras.
			If lAtuSuces
				If lSimula
					If Len(aTarefs)>0
						PA203GrvTrf(aTarefs, @aAtuEDT ) // grava os dados simulados e validados anteriormente

					elseif Len(aSimDados)>0
						PA203GrvTrf(aSimDados, @aAtuEDT ) // grava os dados simulados e validados anteriormente

					else //padrao
						PmsAtuScs((cAlias)->AF9_PROJET,(cAlias)->AF9_REVISA,(cAlias)->AF9_TAREFA,.F., aAtuEDT)

						If aScan(aAtuEDT,AF9->AF9_EDTPAI) <= 0
							aAdd(aAtuEDT,AF9->AF9_EDTPAI)
						EndIf
					Endif
			   Else
					PmsAtuScs((cAlias)->AF9_PROJET,(cAlias)->AF9_REVISA,(cAlias)->AF9_TAREFA,.F., aAtuEDT)

					If aScan(aAtuEDT,AF9->AF9_EDTPAI) <= 0
						aAdd(aAtuEDT,AF9->AF9_EDTPAI)
					EndIf
			   Endif
			EndIf

			If lAtuEDT

				For nx := 1 to Len(aAtuEDT)
					PmsAtuEDT((cAlias)->AF9_PROJET,(cAlias)->AF9_REVISA,aAtuEDT[nx])
				Next nX

				// Executa o recalculo dos percentuais executados da EDT
				PMSEdtReal((cAlias)->AF9_PROJET,(cAlias)->AF9_REVISA,(cAlias)->AF9_EDTPAI)

			Endif
		EndIf
		If lAtuEDT
			//Executa o recalculo do custo das tarefas e edt.
			PmsAF9CusEDT((cAlias)->AF9_PROJET,(cAlias)->AF9_REVISA,(cAlias)->AF9_EDTPAI)

			//Executa o recalculo do valor total de impostos da edt
			If lCalcTrib
				PmsAN9ImpEDT((cAlias)->AF9_PROJET,(cAlias)->AF9_REVISA,(cAlias)->AF9_EDTPAI)
			EndIf
		EndIf

	Case nEvento == 2
		// Efetua a atualizacao dos Eventos.
		dbSelectArea("AFP")
		dbSetOrder(1)
		MsSeek(cAliasAFP+(cAlias)->AF9_PROJET+(cAlias)->AF9_REVISA+(cAlias)->AF9_TAREFA)
		While !Eof() .And. cAliasAFP+(cAlias)->AF9_PROJET+(cAlias)->AF9_REVISA+(cAlias)->AF9_TAREFA==;
							AFP_FILIAL+AFP_PROJET+AFP_REVISA+AFP_TAREFA
			PmsAvalAFP("AFP",3)
			dbSkip()
		EndDo

	Case nEvento == 3
		If lAtuEDT
			PmsAtuEDT((cAlias)->AF9_PROJET,(cAlias)->AF9_REVISA,(cAlias)->AF9_EDTPAI)
			// Executa o recalculo dos percentuais executados da EDT
			PmsAtuRlz((cAlias)->AF9_PROJET,(cAlias)->AF9_REVISA,(cAlias)->AF9_EDTPAI)

			//Executa o recalculo do custo das tarefas e edt.
			PmsAF9CusEDT((cAlias)->AF9_PROJET,(cAlias)->AF9_REVISA,(cAlias)->AF9_EDTPAI)

			//Executa o recalculo do valor total de impostos da edt
			If lCalcTrib
				PmsAN9ImpEDT((cAlias)->AF9_PROJET,(cAlias)->AF9_REVISA,(cAlias)->AF9_EDTPAI)
			EndIf
		Endif

	Case nEvento == 4
		//Executa o recalculo do custo das tarefas e edt.
		If lAtuEDT
			PmsAF9CusEDT((cAlias)->AF9_PROJET,(cAlias)->AF9_REVISA,(cAlias)->AF9_EDTPAI)

			//Executa o recalculo do valor total de impostos da edt
			If lCalcTrib
				PmsAN9ImpEDT((cAlias)->AF9_PROJET,(cAlias)->AF9_REVISA,(cAlias)->AF9_EDTPAI)
			EndIf
		Endif
EndCase

RestArea(aAreaAF9)
RestArea(aAreaAFQ)
RestArea(aAreaAE8)
RestArea(aAreaAFP)
RestArea(aArea)
Return


/*/{Protheus.doc} PmsAtuEDT
Funcao de atualizacao das datas previstas das EDT na estrutura
baseado nas tarefas e EDTs que a compoe

@param cProjeto, character, (Descrição do parâmetro)
@param cRevisa, character, (Descrição do parâmetro)
@param cEDTPai, character, (Descrição do parâmetro)
@param aAtuEDT, array, (Descrição do parâmetro)
@param lAtuEDT, logica, (Descrição do parâmetro)
@param lAtuScs, logica, (Descrição do parâmetro)
@param lForceAtu, logica, (Descrição do parâmetro)
@param lExProc, logica, (Descrição do parâmetro)
@param aTrbs, array, (Descrição do parâmetro)
@param lPmsProject, logica, (Descrição do parâmetro)

@return ${return}, ${return_description}

@author Edson Maricate
@since 18-05-2001
@version 1.0

/*/
Function PmsAtuEDT(cProjeto,cRevisa,cEDTPai,aAtuEDT,lAtuEDT,lAtuScs,lForceAtu,lExProc, aTrbs,lPmsProject)
Default lExProc := .F.
Default aTrbs	:= {}
DEFAULT lPmsProject	:= .F.

If lExProc
	ProcAtuEDT(cProjeto,cRevisa,cEDTPai,aAtuEDT,lAtuEDT,lAtuScs,lForceAtu)
Else
	Processa({||ProcAtuEDT(cProjeto,cRevisa,cEDTPai,aAtuEDT,lAtuEDT,lAtuScs,lForceAtu,aTrbs,lPmsProject)})
EndIf
Return( .T. )


/*/{Protheus.doc} ProcAtuEDT

Funcao Principal para atualizacao das datas previstas das EDT na estrutura baseado nas tarefas e EDTs que a compoe

@author Edson Maricate

@since 18-05-2001

@version P11

@param cProjeto, 		caracter, 	Codigo do projeto
@param cRevisa, 		caracter, 	Codigo da revisão
@param cEDTPai, 		caracter, 	Codigo da EDT pai
@param aAuxEDT, 		array, 		Codigos das EDTs pais envolvidas
@param lAtuEDT, 		logico, 	Verdadeiro para atualizar a EDT Pai da Edt informada (cEDTPai)
@param lAtuScs, 		logico, 	Verdadeiro para atualizar as EDT´s sucessoras no relacionamento
@param lForceAtu, 		logico, 	Verdadeir para atualizar sempre as datas e horas previstas da EDT

@return logico, Verdadeiro

/*/
Function ProcAtuEDT(cProjeto,cRevisa,cEDTPai,aAtuEDT,lAtuEDT,lAtuScs,lForceAtu, aTrbs, lPmsProject)
Local aArea		:= GetArea()
Local aAreaAF8	:= AF8->(GetArea())
Local aAreaAFC	:= AFC->(GetArea())
Local aAreaAF9	:= AF9->(GetArea())
Local aAreaAFP	:= AFP->(GetArea())
Local aAreaAJ4	:= AJ4->(GetArea())

If !(AllTrim(UPPER(cProjeto))$SuperGetMV('MV_PMSJOBD', .F., ''))
	If SuperGetMV('MV_PMSJOB2', .F., '2') == '1'
		StartJob("PmsJobEDT",GetEnvServer(),.F.,cEmpAnt,cFilAnt,cProjeto,cRevisa,cEDTPai,aAtuEDT,lAtuEDT,lAtuScs)
	Else
		If !Empty(cEDTPai)
			PmsIncProc(.T.)
			AuxAtuEDT(cProjeto,cRevisa,cEDTPai,aAtuEDT,lAtuEDT,lAtuScs,lForceAtu,aTrbs,lPmsProject)
		EndIf
	EndIf
EndIf

RestArea(aAreaAJ4)
RestArea(aAreaAFP)
RestArea(aAreaAF9)
RestArea(aAreaAFC)
RestArea(aAreaAF8)
RestArea(aArea)
Return( .T. )

/*/{Protheus.doc} AuxAtuEDT

Funcao auxiliar para atualizacao das datas previstas das EDT na estrutura baseado nas tarefas e EDTs que a compoe

@author Edson Maricate

@since 18-05-2001

@version P11

@param cProjeto, 	caracter, 	Codigo do projeto
@param cRevisa, 	caracter, 	Codigo da revisão
@param cEDTPai, 	caracter, 	Codigo da EDT pai
@param aAuxEDT, 	array, 		Codigos das EDTs pais envolvidas
@param lAtuEDT, 	logico, 	Verdadeiro para atualizar a EDT Pai da Edt informada (cEDTPai)
@param lAtuScs, 	logico, 	Verdadeiro para atualizar as EDT´s sucessoras no relacionamento
@param lForceAtu, 	logico, 	Verdadeir para atualizar sempre as datas e horas previstas da EDT
@param cMensagem, 	caracter, 	Verdadeir para atualizar sempre as datas e horas previstas da EDT
@param aTrbs, array,
@param lPmsProject, logico,

@return logico, Verdadeiro

/*/
Function AuxAtuEDT(cProjeto,cRevisa,cEDTPai,aAuxEDT,lAtuEDT,lAtuScs,lForceAtu,aTrbs,lPmsProject)
Local nHrsUteis	:= 0
Local nHrsEsf		:= 0 // horas de esforço de uma edt/tarefa
Local cHrsIni		:= "24:00"
Local cHrsFim		:= "00:00"
Local dIniEDT		:= PMS_MAX_DATE
Local dFimEDT		:= PMS_MIN_DATE
Local lAtuHDurac 	:= .F.
Local nX 			:= 0
Local lFirst		:= .F.
Local lExist_HESF	:= .F.
Local cFilAFC		:= xFilial("AFC")
Local cFilAF9		:= xFilial("AF9")
Local cFilAFP		:= xFilial("AFP")
Local cFilAF8		:= xFilial("AF8")
Local cFilAJ4		:= xFilial("AJ4")

Local cQuery    := ""
Local cAliasTmp := ""
Local cOper     := Iif("MSSQL" $ Upper(TcGetDb()) .Or. "SYBASE" $ Upper(TcGetDb()), "+", "||") // trata o operador || para não ocorrer erro na ChangeQuery()
Local d_START   := stod("")
Local c_HORAI   := ""
Local d_FINISH  := stod("")
Local c_HORAF   := ""

DEFAULT lAtuScs   := .T.
DEFAULT lAtuEDT   := .T.
DEFAULT lForceAtu := .F.

// Valida se existe os campos AF9_HESF e AFC_HESF
lExist_HESF := .T.

If aAuxEDT == Nil
	lFirst  := .T.
	aAuxEDT := {}
EndIf

// Buca pelas horas uteis, menor data de inicio(exceto em branco) e maior data de fim nas EDT Filhas
cQuery := " SELECT SUM(AFC_HUTEIS) AS AFC_HUTEIS ,MIN(AFC_START"+cOper+"AFC_HORAI) AS INICIO ,MAX(AFC_FINISH"+cOper+"AFC_HORAF) AS FIM "
If lExist_HESF
	cQuery += " ,SUM(AFC_HESF) AS AFC_HESF "
EndIf
cQuery += " FROM "+ RetSqlName("AFC")+ " "
cQuery += " WHERE AFC_FILIAL = '" + cFilAFC + "' "
cQuery += " AND AFC_PROJET = '"+cProjeto+"' "
cQuery += " AND AFC_REVISA = '"+cRevisa+"' "
cQuery += " AND AFC_EDTPAI = '"+cEdtPai+"' "
cQuery += " AND AFC_START <> ' ' "
cQuery += " AND D_E_L_E_T_ = ' ' "
cQuery := ChangeQuery(cQuery)

cAliasTmp := GetNextAlias()
dbUseArea(.T., "TOPCONN", TcGenQry(,,cQuery), cAliasTmp, .T., .T.)
If (cAliasTmp)->(!Eof())

	nHrsUteis += (cAliasTmp)->AFC_HUTEIS
	If lExist_HESF
		nHrsEsf += (cAliasTmp)->AFC_HESF
	EndIf

	d_START  := stod(substr((cAliasTmp)->INICIO,1,8))
	c_HORAI  := substr((cAliasTmp)->INICIO,9,5)
	d_FINISH := stod(substr((cAliasTmp)->FIM,1,8))
	c_HORAF  := substr((cAliasTmp)->FIM,9,5)

	If !Empty(d_START).And.((d_START==dIniEDT.And.SubStr(c_HORAI,1,2)+SubStr(c_HORAI,4,2)<SubStr(cHrsIni,1,2)+SubStr(cHrsIni,4,2)).Or.;
		(d_START<dIniEDT))
		dIniEDT := d_START
		cHrsIni	:= c_HORAI
		lAtuHDurac:= .T.
	EndIf

	If  !Empty(d_FINISH).And.((d_FINISH==dFimEDT.And.SubStr(c_HORAF,1,2)+SubStr(c_HORAF,4,2)>SubStr(chrsFim,1,2)+SubStr(cHrsFim,4,2)).Or.;
		(d_FINISH>dFimEDT))
		dFimEDT := d_FINISH
		cHrsFim	:= c_HORAF
		lAtuHDurac:= .T.
	EndIf

EndIf
(cAliasTmp)->(dbCloseArea())

// Busca pelas horas uteis, menor data de inicio(exceto em branco) e maior data de fim nas Tarefa Filhas
cQuery := " SELECT SUM(AF9_HUTEIS) AS AF9_HUTEIS ,MIN(AF9_START"+cOper+"AF9_HORAI) AS INICIO ,MAX(AF9_FINISH"+cOper+"AF9_HORAF) AS FIM "
If lExist_HESF
	cQuery += " ,SUM(AF9_HESF) AS AF9_HESF "
EndIf
cQuery += " FROM "+ RetSqlName("AF9")+ " "
cQuery += " WHERE AF9_FILIAL = '" + cFilAF9 + "' "
cQuery += " AND AF9_PROJET = '"+cProjeto+"' "
cQuery += " AND AF9_REVISA = '"+cRevisa+"' "
cQuery += " AND AF9_EDTPAI = '"+cEdtPai+"' "
cQuery += " AND D_E_L_E_T_ = ' ' "
cQuery := ChangeQuery(cQuery)

cAliasTmp := GetNextAlias()
dbUseArea(.T., "TOPCONN", TcGenQry(,,cQuery), cAliasTmp, .T., .T.)
If (cAliasTmp)->(!Eof())
	nHrsUteis += (cAliasTmp)->AF9_HUTEIS
	If lExist_HESF
		nHrsEsf += (cAliasTmp)->AF9_HESF
	EndIf

	d_START  := stod(substr((cAliasTmp)->INICIO,1,8))
	c_HORAI  := substr((cAliasTmp)->INICIO,9,5)
	d_FINISH := stod(substr((cAliasTmp)->FIM,1,8))
	c_HORAF  := substr((cAliasTmp)->FIM,9,5)

	If !Empty(d_START).And.((d_START==dIniEDT.And.SubStr(c_HORAI,1,2)+SubStr(c_HORAI,4,2)<SubStr(cHrsIni,1,2)+SubStr(cHrsIni,4,2)).Or.;
	   (d_START<dIniEDT))
		dIniEDT := d_START
		cHrsIni := c_HORAI
		lAtuHDurac:= .T.
	EndIf

	If  !Empty(d_FINISH).And.((d_FINISH==dFimEDT.And.SubStr(c_HORAF,1,2)+SubStr(c_HORAF,4,2)>SubStr(chrsFim,1,2)+SubStr(cHrsFim,4,2)).Or.;
		(d_FINISH>dFimEDT))
		dFimEDT := d_FINISH
		cHrsFim := c_HORAF
		lAtuHDurac:= .T.
	EndIf

EndIf
(cAliasTmp)->(dbCloseArea())

dbSelectArea("AFC")
dbSetOrder(1)
If MsSeek(cFilAFC+cProjeto+cRevisa+cEDTPai)
	If lAtuHDurac
		dbSelectArea("AFP")
		dbSetOrder(2)
		MsSeek(cFilAFP+AFC->AFC_PROJET+AFC->AFC_REVISA+AFC->AFC_EDT)
		While !Eof() .And. cFilAFP+AFC->AFC_PROJET+AFC->AFC_REVISA+AFC->AFC_EDT==;
							AFP->AFP_FILIAL+AFP->AFP_PROJET+AFP->AFP_REVISA+AFP->AFP_EDT
			PMSAvalAFP("AFP",3,2)
			dbSkip()
		End
		If DTOS(AFC->AFC_START)+AFC->AFC_HORAI+DTOS(AFC->AFC_FINISH)+AFC->AFC_HORAF<>DTOS(dIniEDT)+cHrsIni+DTOS(dFimEDT)+cHrsFim ;
		   .OR. ( AFC->AFC_HUteis <> nHrsUteis .OR. AFC->AFC_HESF <> nHrsEsf .OR. lForceAtu )
			RecLock("AFC",.F.)
			AFC->AFC_START	:= dIniEDT
			AFC->AFC_FINISH	:= dFimEDT
			AFC->AFC_HORAI	:= cHrsIni
			AFC->AFC_HORAF	:= cHrsFim
			nHDurac := PmsHrsItvl(dIniEDT,cHrsIni,dFimEDT,cHrsFim,AFC->AFC_CALEND,AFC->AFC_PROJET,,,,aTrbs)
			If ChkTam("AFC_HDURAC",nHDurac)
				AFC->AFC_HDURAC	:= nHDurac
			Else
				Aviso(STR0262,STR0263+STR0264,{STR0267},2)  //"Projeto com duracao nao suportada."###"O Tamanho do campo AFC_HDURAC nao suporta a duracao informada. Verifique as datas das tarefas do projeto ou aumente"###" o tamanho dos campos no configurador do sistema. Algumas consultas poderao apresentar valores inconsistentes ate a correcao do tamanho dos campos."
				AFC->AFC_HDURAC := 0
			EndIf
			If ChkTam("AFC_HUTEIS",nHrsUteis)
				AFC->AFC_HUTEIS	:= nHrsUteis
			Else
				Aviso(STR0262,STR0265+STR0266,{STR0267},2)  //"Projeto com duracao nao suportada."###"O Tamanho do campo AFC_HUTEIS nao suporta a duracao informada. Verifique as datas das tarefas do projeto ou aumente"###" o tamanho dos campos no configurador do sistema. Algumas consultas poderao apresentar valores inconsistentes ate a correcao do tamanho dos campos."
				AFC->AFC_HUTEIS	:= 0
			EndIf
			If lExist_HESF
				AFC->AFC_HESF	:= nHrsEsf
			EndIf
			MsUnlock()
			dbCommit()
		Else
			lAtuScs := .F.
			lATuEDT := .F.
		EndIf
		If lAtuScs
			PmsAtuScsE(AFC->AFC_PROJET,AFC->AFC_REVISA,AFC->AFC_EDT,.F.,aAuxEDT)
		EndIf
		dbSelectArea("AFP")
		dbSetOrder(2)
		MsSeek(cFilAFP+AFC->AFC_PROJET+AFC->AFC_REVISA+AFC->AFC_EDT)
		While !Eof() .And. cFilAFP+AFC->AFC_PROJET+AFC->AFC_REVISA+AFC->AFC_EDT==;
							AFP_FILIAL+AFP_PROJET+AFP_REVISA+AFP_EDT
			PMSAvalAFP("AFP",1,2)
			dbSkip()
		End
		If AFC->AFC_NIVEL == "001"
			dbSelectArea("AF8")
			DbSetOrder(1)
			If MsSeek(cFilAF8+cProjeto)
				Reclock("AF8",.F.)
				AF8->AF8_START	:= dIniEDT
				AF8->AF8_FINISH	:= dFimEDT
				MsUnlock()
			EndIf
		EndIf
	Else
		If ( Empty(AFC->AFC_START) .And.Empty(AFC->AFC_FINISH).And.Empty(AFC->AFC_HORAI).And.Empty(AFC->AFC_HORAF))
			lAtuScs := .F.
			lATuEDT := .F.
		Else
			RecLock("AFC",.F.)
			AFC->AFC_START	:= PMS_EMPTY_DATE
			AFC->AFC_FINISH	:= PMS_EMPTY_DATE
			AFC->AFC_HORAI	:= ""
			AFC->AFC_HORAF	:= ""
			AFC->AFC_HDURAC	:= 0
			AFC->AFC_HUTEIS	:= 0
			MsUnlock()
         dbcommit()
		EndIf

		If lAtuScs
			PmsAtuScsE(AFC->AFC_PROJET,AFC->AFC_REVISA,AFC->AFC_EDT,.F.,aAuxEDT)
		EndIf
		If AFC->AFC_NIVEL == "001"
			dbSelectArea("AF8")
			DbSetOrder(1)
			If MsSeek(cFilAF8+cProjeto)
				Reclock("AF8",.F.)
				AF8->AF8_START	:= PMS_EMPTY_DATE
				AF8->AF8_FINISH	:= PMS_EMPTY_DATE
				MsUnlock()
			EndIf
		EndIf
	EndIf

	AJ4->(dbSetOrder(2))
	If !lPmsProject .and. (lAtuEDT .Or. (!Empty(AFC->AFC_EDTPAI) .And. AJ4->(MsSeek(cFilAJ4+AFC->AFC_PROJET+AFC->AFC_REVISA+AFC->AFC_EDTPAI))))
		AuxAtuEDT(AFC->AFC_PROJET,AFC->AFC_REVISA,AFC->AFC_EDTPAI,aAuxEDT,lAtuEDT,lAtuScs,lForceAtu)
	Else
		If aScan(aAuxEDT,AFC->AFC_EDTPAI) <= 0
			aAdd(aAuxEDT,AFC->AFC_EDTPAI)
		EndIf
	EndIf
EndIf

If lFirst .and. !lPmsProject
	If lAtuScs
		For nx := 1 to Len(aAuxEDT)
			ProcAtuEDT(cProjeto,cRevisa,aAuxEDT[nx],,.T.,lAtuScs,lForceAtu)
		Next nX
	EndIf
EndIf
Return( .T. )


/*/{Protheus.doc} PMSAvalAFF
Esta rotina tem como objetivo atualizar os eventos vinculados a uma Confirmacao do Projeto :
          A) Atualizacao das tabelas complementares.
          B) Atualizacao das informacoes complementares das EDTs e Proj.

@param cAlias, character, Alias da tabela de Confirmacoes
@param nEvento, numérico, Codigo do Evento
						[1] Implantacao de uma Confirmacao
						[2] Estorno de uma Confirmacao
						[3] Exclusao de uma Confirmacao
@param nNewQty, numérico, (Descrição do parâmetro)
@param lPosiciona, ${param_type}, (Descrição do parâmetro)
@param lAtuRlz, ${param_type}, (Descrição do parâmetro)
@return ${return}, ${return_description}

@author reynaldo
@since 13/08/2014
@version 1.0

/*/
Function PMSAvalAFF(cAlias,nEvento,nNewQty,lPosiciona,lAtuRlz)
Local aArea 		:= GetArea()
Local aAreaAFF  	:= AFF->(GetArea())
Local aAreaAF9  	:= AF9->(GetArea())
Local bCtbOnLine 	:= {|| .T.}
Local aAreaTmpAFF := {}
Local dMinIni		:= PMS_MAX_DATE
Local dMaxFim		:= PMS_MIN_DATE
Local cHrATuI		:= "00:00"
Local cHrATuF		:= "24:00"
Local lMinIni		:= .F.
Local lMaxFim		:= .F.
Local lGera		:= .T.
Local dDataRef	:= (cAlias)->AFF_DATA
Local lPmsAFLCP 	:= Existblock("PMSAFLCP")
Local lAFF_HORAI 	:= AFF->(ColumnPos("AFF_HORAI"))>0
Local cFilAFL		:= xFilial("AFL")
Local cFilAJ9		:= xFilial("AJ9")
Local cFilSC7		:= xFilial("SC7")
Local cFilAFF		:= xFilial("AFF")

DEFAULT lAtuRlz	:= .T.
DEFAULT nNewQty := 0
DEFAULT lPosiciona	:= .T.
DEFAULT lPmsAFLCP 	:= Existblock("PMSAFLCP")
DEFAULT lPMSDELAFF	:= ExistBlock("PMSDELAFF")

If lPosiciona
	AF9->(dbSetOrder(1))
	AF9->(MsSeek(cFilAJ9+(cAlias)->AFF_PROJET+(cAlias)->AFF_REVISA+(cAlias)->AFF_TAREFA))
Endif
Do Case
	// Inclusao de uma confirmacao
	Case nEvento == 1
		PmsAvalEvent(1,"AF9",1,(cAlias)->AFF_QUANT)
		// Verifica a amarracao com os contratos de parceira para geracao de AEs
		// automaticas.
		If AFF->AFF_CONFIR=="1"
			AFF->(dbSkip())
			If !(AFF->AFF_FILIAL+AFF->AFF_PROJET+AFF->AFF_REVISA+AFF->AFF_TAREFA==cFilAFF+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA)
				RestArea(aAreaAFF)
				dbSelectArea("AFL")
				dbSetOrder(1)
				dbSeek(cFilAFL+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA)
				While !Eof() .And. AFL->AFL_FILIAL+AFL->AFL_PROJET+AFL->AFL_REVISA+AFL->AFL_TAREFA==cFilAFL+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA
					SC3->(dbSetOrder(1))
					If SC3->(dbSeek(PmsFilial("SC3","AFL")+AFL->AFL_NUMCP+AFL->AFL_ITEMCP))
						If lPmsAFLCP
							lGera := Execblock("PMSAFLCP",.F.,.F.)
						Endif
						If AFL->AFL_CONFIR == "1" .And. AFL->AFL_QTCONF < AFL->AFL_QUANT*AFF->AFF_QUANT/AF9->AF9_QUANT .and. lGera
							lProj711 := .F.
							A650GravC7(SC3->C3_PRODUTO,(AFL->AFL_QUANT*AFF->AFF_QUANT/AF9->AF9_QUANT)-AFL->AFL_QTCONF,"",AFF->AFF_DATA,,,,"F",SC3->(RecNo()),,,1)
							RecLock("SC3",.F.)
							Replace C3_QUJE With C3_QUJE + ((AFL->AFL_QUANT*AFF->AFF_QUANT/AF9->AF9_QUANT)-AFL->AFL_QTCONF)
							If C3_QUANT <= C3_QUJE
								Replace C3_ENCER 	With "E"
							Endif
							MsUnlock()
							RecLock("AFL",.F.)
							AFL->AFL_QTCONF := AFL->AFL_QUANT*AFF->AFF_QUANT/AF9->AF9_QUANT
							MsUnlock()
							RecLock("AJ9",.T.)
							AJ9->AJ9_FILIAL := cFilAJ9
							AJ9->AJ9_PROJET := AFL->AFL_PROJET
							AJ9->AJ9_REVISA := AFL->AFL_REVISA
							AJ9->AJ9_TAREFA := AFL->AFL_TAREFA
							AJ9->AJ9_DATA   := AFF->AFF_DATA
							AJ9->AJ9_NUMAE  := SC7->C7_NUM
							AJ9->AJ9_ITEMAE := SC7->C7_ITEM
							MsUnlock()
						EndIf
					EndIf
					AFL->(dbSkip())
				EndDo
			EndIf
			RestArea(aAreaAFF)
		EndIf

		aAreaTmpAFF := AFF->(GetArea())
		// Atualiza as datas de inicio e fim da tarefa
		dbSelectArea("AFF")
		dbSetOrder(1)
		MsSeek(cFilAFF+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA)
		While !Eof() .And. cFilAFF+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA == AFF_FILIAL+AFF_PROJET+AFF_REVISA+AFF_TAREFA

			If lAFF_HORAI // AFF->(FieldPos("AFF_HORAI"))>0
				cHrAtuI	:= If(AFF_QUANT>0.And.AFF->AFF_DATA<dMinIni,AFF->AFF_HORAI,cHrAtuI)
				cHrAtuF	:= If(AFF->AFF_DATA>dMaxFim,AFF->AFF_HORAF,cHrAtuF)
			EndIf
			lMinIni	:= If(AFF_QUANT>0.And.AFF->AFF_DATA<dMinIni,.T.,lMinIni)
			dMinIni := If(AFF_QUANT>0.And.AFF->AFF_DATA<dMinIni,AFF->AFF_DATA,dMinIni)
			lMaxFim	:= If(AFF->AFF_QUANT>=AF9->AF9_QUANT,.T.,lMaxFim)
			lMaxFim := If(AFF->AFF_DATA>dMaxFim.And.AFF->AFF_QUANT<AF9->AF9_QUANT,.F.,lMaxFim)
			dMaxFim := If(AFF->AFF_DATA>dMaxFim,AFF->AFF_DATA,dMaxFim)
			AFF->(dbSkip())
		End
		RestArea(aAreaTmpAFF)
		If lAtuRlz
			PmsAtuDT(AF9->AF9_PROJET,AF9->AF9_TAREFA,If(lMinIni,dMinIni,PMS_EMPTY_DATE),If(lMaxFim,dMaxFim,PMS_EMPTY_DATE),"AF9",If(lMinIni,cHrAtuI,"  :  "),If(lMaxFim,cHrAtuF,"  :  "))
		Endif

		// Recalcula o percentual realizado da EDT
		bBkp	:=	Nil
		If Type("bRecalc") == "B" .And. !Empty(bRecalc)
			bBkp	:= bRecalc
			bRecalc	:=	{|| }
		EndIf
		If nNewQty == 0
			If lAtuRlz
				PmsAtuRlz(AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_EDTPAI,dDataRef)
			EndIf
		EndIf

		If bBkp <> Nil
			bRecalc := bBkp
		Endif
		// Existe os campos?
		If AF9->(ColumnPos("AF9_FNC")>0 .AND. ColumnPos("AF9_REVFNC")>0 .AND. ColumnPos("AF9_ACAO")>0 .AND. ColumnPos("AF9_REVACA")>0 .AND. ColumnPos("AF9_TPACAO")>0)
			// Se PMS esta integrado com QNC
			If !Empty(AF9->AF9_FNC) .AND. !Empty(AF9->AF9_REVFNC) .AND. !Empty(AF9->AF9_ACAO) .AND. !Empty(AF9->AF9_REVACAO) .AND. !Empty(AF9->AF9_TPACAO)
				// Atualiza o status da ETAPA do ACAO/PLANO
				QNCAtuEtapa(/*FILIAL*/ ,AF9->AF9_ACAO ,AF9->AF9_REVACA ,AF9->AF9_TPACAO ,PMS310QT(.F.))
			EndIf
		EndIf
	// Estorno de uma confirmacao
	Case nEvento == 2
		PmsAvalEvent(1,"AF9",2,(cAlias)->AFF_QUANT)
		// Verifica a amarracao com os contratos de parceira para geracao de AEs
		// automaticas.
		dbSelectArea("AJ9")
		dbSetOrder(1)
		dbSeek(xFilial()+AFF->AFF_PROJET+AFF->AFF_REVISA+AFF->AFF_TAREFA+DTOS(AFF->AFF_DATA))
		While !Eof() .And. 	cFilAJ9+AFF->AFF_PROJET+AFF->AFF_REVISA+AFF->AFF_TAREFA+DTOS(AFF->AFF_DATA)==AJ9->AJ9_FILIAL+AJ9->AJ9_PROJET+AJ9->AJ9_REVISA+AJ9_TAREFA+DTOS(AJ9->AJ9_DATA)
			dbSelectArea("SC7")
			dbSetOrder(1)
			If dbSeek(cFilSC7+AJ9->AJ9_NUMAE+AJ9->AJ9_ITEMAE) .And. SC7->C7_QUJE == 0
				dbSelectArea("AFL")
				dbSetOrder(1)
				If dbSeek(cFilAFL+AJ9->AJ9_PROJET+AJ9->AJ9_REVISA+AJ9->AJ9_TAREFA+SC7->C7_NUMSC+SC7->C7_ITEMSC)
					RecLock("AFL",.F.)
					AFL->AFL_QTCONF := AFL->AFL_QTCONF - SC7->C7_QUANT
					MsUnlock()
				EndIf
				RecLock("SC7",.F.,.T.)
				MaAvalPC("SC7",2,Nil,Nil,Nil,Nil,bCtbOnLine)
				MaAvalPC("SC7",3,.T.)
				dbDelete()
				MsUnlock()
			EndIf
			AJ9->(dbSkip())
		End
	// Exclusao de uma confirmacao
	Case nEvento == 3
		If lPMSDELAFF
			ExecBlock("PMSDELAFF",.F.,.F.)
		EndIf
		RecLock("AFF",.F.,.T.)
		dbDelete()
		MsUnlock()
		// Atualiza as datas de inicio e fim da tarefa
		dbSelectArea("AFF")
		dbSetOrder(1)
		MsSeek(cFilAFF+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA)
		While !Eof() .And. cFilAFF+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA==;
						AFF_FILIAL+AFF_PROJET+AFF_REVISA+AFF_TAREFA
			If lAFF_HORAI // AFF->(FieldPos("AFF_HORAI"))>0
				cHrAtuI	:= If(AFF_QUANT>0.And.AFF->AFF_DATA<dMinIni,AFF->AFF_HORAI,cHrAtuI)
				cHrAtuF	:= If(AFF->AFF_DATA>dMaxFim,AFF->AFF_HORAF,cHrAtuF)
			EndIf
			lMinIni	:= If(AFF_QUANT>0.And.AFF->AFF_DATA<dMinIni,.T.,lMinIni)
			dMinIni := If(AFF_QUANT>0.And.AFF->AFF_DATA<dMinIni,AFF->AFF_DATA,dMinIni)
			lMaxFim	:= If(AFF->AFF_QUANT>=AF9->AF9_QUANT,.T.,lMaxFim)
			dMaxFim := If(AFF->AFF_DATA>dMaxFim,AFF->AFF_DATA,dMaxFim)
			AFF->(dbSkip())

		EndDo

		If lAtuRlz
			PmsAtuDT(AF9->AF9_PROJET,AF9->AF9_TAREFA,If(lMinIni,dMinIni,PMS_EMPTY_DATE),If(lMaxFim,dMaxFim,PMS_EMPTY_DATE),"AF9",If(lMinIni,cHrAtuI,"  :  "),If(lMaxFim,cHrAtuF,"  :  "))
		Endif

		// Recalcula o percentual realizado da EDT
		bBkp	:=	Nil
		If Type("bRecalc") == "B" .And. !Empty(bRecalc)
			bBkp	:= bRecalc
			bRecalc	:=	{|| }
		Endif

		If nNewQty == 0
			If lAtuRlz
				PmsAtuRlz(AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_EDTPAI,dDataRef)
			Endif
		EndIf

		If bBkp <> Nil
			bRecalc := bBkp
		Endif
EndCase
RestArea(aAreaAF9)
RestArea(aAreaAFF)
RestArea(aArea)
Return


/*/{Protheus.doc} PMSPlExec
Funcao de execucao do Plano de Execucao de Projetos.

@param cAlias, character, tabela corrente, esperado AF8
@param nRecNo, numérico, numero do registro da tabela corrente
@param cPlanej, character, código do planejamento

@author Edson Maricate
@since 18-05-2001
@version 1.0
/*/
Function PMSPlExec(cAlias,nRecNo,cPlanej)
Local aAuxEmp		:= {}
Local aArmEmp		:= {} // {armazem, qtdade estoque, qtdade empenhada}
Local aAuxProd		:= {}
Local aAuxRat		:= {}
Local aAuxSolum		:= {}
Local aTabela		:= {}
Local cFilialAF9	:= xFilial("AF9")
Local cFilialAFG	:= xFilial("AFG")
Local cFilialAFL	:= xFilial("AFL")
Local cFilialSB1	:= xFilial("SB1")
Local cFilialSB2	:= xFilial("SB2")
Local cFilialSC3	:= xFilial("SC3")
Local cFilialSG1	:= xFilial("SG1")
Local cFilialAFM	:= xFilial("AFM")
Local cFilialAFA	:= xFilial("AFA")
Local cFilialAFK	:= xFilial("AFK")
Local cItemSC		:= StrZero(1,Len(SC1->C1_ITEM))
Local cLocPad		:= ""
Local cNumSC		:= ""
Local cTrt			:= ""
Local dSavBase
Local lMV_PMSCSC	:= GetNewPar("MV_PMSCSC", .T.)
Local lMV_PMSOPG	:= GetNewPar("MV_PMSOPGE",.F.)
Local lMV_PMSSCG	:= GetNewPar("MV_PMSSCGE",.F.)
Local lPMSEXESC	:= ExistBlock("PMSEXESC")
Local lPMSNumOp	:= ExistBlock("PMSNumOp")
Local lPMSplEst	:= ExistBlock("PMSPlEst")
Local lPrevisto	:= .F.
Local lSC7			:= .F.
Local lSLMPreeID	:= FindFunction("SLMPreencheID")
Local nAFG_QUANT	:= 0
Local nAFM_QUANT	:= 0
Local nColigada	:= GetNewPar("MV_RMCOLIG",0) // coligada igual a empresa
Local nQtdDisp	:= 0
Local nQtdEst		:= 0
Local nQtdNec		:= 0
Local nQtdSC		:= 0
Local nQuant		:= 0
Local nx			:= 0
Local nY			:= 0
Local nZ			:= 0
Local lUsrAces	:= SuperGetMv("MV_PMSPLUS",.F.)
Local aAuxSC		:= {}
Local aAuxOP		:= {}
Local aAuxCP		:= {}
Local nGera := 0
Local lGeraEmp := .T.
Local cMV_GEREMP	:= SuperGetMv("MV_GEREMP",.F.,"")
Local lOpcPadrao	:= SuperGetMv("MV_REPGOPC",.F.,"N") == "N"			//Determina se será possível repetir o mesmo grupo de opcionais em vários níveis da estrutura.

Local nN			:= 0
Local nQtdArm		:= 0
Local nQtdAux		:= 0
Local nQtdReq		:= 0
Local nQtdEmp		:= 0
Local lMultArm		:= SuperGetMV("MV_REQEPMS",.F.,.F.)

aAdd(aTabela, {{STR0206, STR0207, STR0208, STR0209, STR0210 , STR0211}}) 		// "OP"###"Item""Sequencia"###"Tarefa"###"Produto"###"Quantidade"
aAdd(aTabela, {{STR0212, STR0213, STR0214, STR0215}})  // "SC"###"Item"###"Tarefa"###"Quantidade"
aAdd(aTabela, {{STR0216, STR0217, STR0218, STR0219, STR0220}})  // "Cod.Prod."###"Local"###"Tarefa"###"Qtd. Empen."###"Qtd. Empen. 2"
aAdd(aTabela, {{STR0221, STR0222, STR0223, STR0224}})  // "Codigo"###"Num. CP"###"Item"###"Quantidade"

// integracao com o TOP
If nColigada > 0
	If cAlias == "AF8"
		AF8->(dbGoto(nRecNo))
	EndIf
	SlmCalcNec(AF8->AF8_PROJET ,AF8->AF8_REVISA ,M->AFK_TRFDE ,M->AFK_TRFATE ,@aAuxProd,@aAuxRat,@aAuxSolum)
Else
	If AFJ->(ColumnPos("AFJ_QEMPPR")) > 0 .And. M->AFK_TPPLAN == "2"
		lPrevisto := .T.
	EndIf
	If cAlias == "AF8"
		AF8->(dbGoto(nRecNo))

		dbSelectArea("AF9")
		dbSetOrder(1)
		MsSeek(cFilialAF9+AF8->AF8_PROJET+AF8->AF8_REVISA+M->AFK_TRFDE,.T.)
		While !Eof().And.cFilialAF9+AF8->AF8_PROJET+AF8->AF8_REVISA==;
				AF9->AF9_FILIAL+AF9_PROJET+AF9->AF9_REVISA .And. AF9->AF9_TAREFA <= M->AFK_TRFATE
			PMSCalcNec(AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_TAREFA,@aAuxProd,@aAuxRat,AF9->AF9_EDTPAI)
			dbSelectArea("AF9")
			dbSkip()
		EndDo
	EndIf
EndIf

If ExistBlock("PMSRATPL")
	aPMSRATPL := Execblock("PMSRATPL", .F., .F., {aAuxProd,aAuxRat})
	If Valtype(aPMSRATPL)=="A" .AND. len(aPMSRATPL)>1
		If Valtype(aPMSRATPL[1])=="A" .AND. Valtype(aPMSRATPL[2])=="A"
			aAuxProd := aPMSRATPL[1]
			aAuxRat := aPMSRATPL[2]
		EndIf
	EndIf
EndIf

If ExistBlock("PMSRATSC")
	aAuxRat := Execblock("PMSRATSC", .F., .F., {aAuxRat})
EndIf

For nx := 1 to Len(aAuxProd)
	aArmEmp  := {}
	nQtdDisp := 0
	SB1->(dbSetOrder(1))
	SB1->(MsSeek(cFilialSB1+aAuxProd[nx,1]+aAuxProd[nx,7]))

	If Empty(M->AFK_ALMOX)
		dbSelectArea("SB2")
		SB2->(dbSetOrder(1))
		MsSeek(cFilialSB2+aAuxProd[nx,1]+aAuxProd[nx,7])
		// parâmetro para considerar ou não as SCs já existentes associadas ou não
		// ao projeto, no cálculo da quantidade necessária para a SC a ser gerada.
		//
		// .T. - considera as SCs já existentes associadas ou não (default)
		// .F. - não considera as SCs
		If lMV_PMSCSC
			nQtdEst := SaldoSB2(.T.) + SB2->B2_SALPEDI - SB2->B2_QEMPN + AvalQtdPre("SB2",2)
		Else
			nQtdEst := SaldoSB2(.T.) - SB2->B2_QEMPN + AvalQtdPre("SB2",2)
		EndIf

		If lPMSplEst
			nQtdEst += ExecBlock("PMSPlEst", .F., .F.)
		EndIf

		If lMultArm
			If nQtdEst > 0
				aAdd(aArmEmp, {SB2->B2_LOCAL, nQtdEst,0})
			EndIf
		EndIf

	Else
		nQtdEst := 0
		dbSelectArea("SB2")
		SB2->(dbSetOrder(1))
		MsSeek(cFilialSB2+aAuxProd[nx,1])
		While !EOF() .And. cFilialSB2+aAuxProd[nx,1]==SB2->B2_FILIAL+SB2->B2_COD
			If SB2->B2_LOCAL$M->AFK_ALMOX
				// parâmetro para considerar ou não as SCs já existentes associadas ou não
				// ao projeto, no cálculo da quantidade necessária para a SC a ser gerada.
				//
				// .T. - considera as SCs já existentes associadas ou não (default)
				// .F. - não considera as SCs
				If lMV_PMSCSC
					nQtdEst += SaldoSB2(.T.) + SB2->B2_SALPEDI - SB2->B2_QEMPN + AvalQtdPre("SB2",2)
					nQtdArm := SaldoSB2(.T.) + SB2->B2_SALPEDI - SB2->B2_QEMPN + AvalQtdPre("SB2",2)
				Else
					nQtdEst += SaldoSB2(.T.) - SB2->B2_QEMPN + AvalQtdPre("SB2",2)
					nQtdArm := SaldoSB2(.T.) - SB2->B2_QEMPN + AvalQtdPre("SB2",2)
				EndIf

				If lMultArm
					If nQtdArm > 0
						aAdd(aArmEmp, {SB2->B2_LOCAL, nQtdArm,0})
					EndIf				
				EndIf				
			EndIf

			If lPMSplEst
				nQtdEst += ExecBlock("PMSPlEst", .F., .F.)
			EndIf

			dbSelectArea("SB2")
			dbSkip()
		End
	EndIf

	If !lMultArm
		aAdd(aArmEmp, {aAuxProd[nx,7], nQtdEst,0})
	EndIf

	// reforço o posicionamento no registro do produto
	dbSelectArea("SB1")
	SB1->(dbSetOrder(1))
	SB1->(MsSeek(cFilialSB1 + aAuxProd[nx,1]))

	dbSelectArea("AF9")
	// Se existir o produto em estoque e existe tarefas associadas ao produto,
	// deve empenhar se houver quantidade disponivel
	nPosRat := aScan(aAuxRat,{|x|x[1]==nx})
	ny		:= 1
	While nQtdEst > 0 .And. ny<=Len(aAuxRat[nPosRat,2])
		If !lUsrAces .OR. (lUsrAces .AND. PmsChkUser(aAuxRat[nPosRat][2][ny][1],aAuxRat[nPosRat][2][ny][3],,aAuxRat[nPosRat][2][ny][9],2,"GEREMP",aAuxRat[nPosRat][2][ny][2])) //Empenho
			nQtdTrf := aAuxRat[nPosRat,2,ny,4] // quantidade prevista na tarefa
			// deve gerar empenho somente da quantidade que tem em estoque.
			If nQtdTrf > nQtdEst
				nQuant := nQtdEst
			Else
				nQuant := nQtdTrf
			EndIf
			// quantidade empenhada que estava disponivel no estoque do produto para o projeto/tarefa
			aAuxRat[nPosRat,2,ny,6] += nQuant
			
			// deve empenhar essa quantidade no projeto e no estoque
			If !Empty(cMV_GEREMP)
				If cMV_GEREMP == "1"
					lGeraEmp := .T.
				ElseIf cMV_GEREMP == "2"
					nGera := Aviso(STR0434, STR0435+ aAuxProd[nx,1] +STR0436, { STR0179, STR0180 }, 2)  //"Empenho (MV_GEREMP)"; "Deseja gerar empenho para o produto "; "?"  
					lGeraEmp := Iif(nGera == 1, .T., .F.)
				Else
					lGeraEmp := .F.
				EndIF
			Else	
				If lMV_PMSSCG
					lGeraEmp := .T.
				Else
					nGera := Aviso(STR0437, STR0435+ aAuxProd[nx,1] +STR0436, { STR0179, STR0180 }, 2)  //"Empenho (MV_PMSSCGE)"; "Deseja gerar empenho para o produto "; "?"
					lGeraEmp := Iif(nGera == 1, .T., .F.)
				EndIf
			EndIf
 			If lGeraEmp
				nQtdAux := nQuant
				nQtdReq  := 0
				
				For nN := 1 To Len(aArmEmp)

					If aArmEmp[nN][02] <= 0 //se quantidade restante no armazém zerar
						Loop
					ElseIf aArmEmp[nN][02] < nQtdAux
						nQtdEmp := aArmEmp[nN][02]
						nQtdAux	 -= nQtdEmp
					Else
						nQtdEmp := nQtdAux
					EndIf

					aAdd(aAuxEmp,PmsPrxEmp(aAuxRat[nPosRat,2,ny,1],,aAuxRat[nPosRat,2,ny,3]))
					cTrt := aAuxEmp[Len(aAuxEmp)]
					PmsAtuEmp( aAuxRat[nPosRat,2,ny,1],aAuxRat[nPosRat,2,ny,3],aAuxProd[nx,1];
					,aArmEmp[nN][01],nQtdEmp,"+",.T.,aAuxRat[nPosRat,2,ny,5],@cTrt,aAuxProd[nx,2],"4",cPlanej,lPrevisto)
					aAuxEmp[Len(aAuxEmp)] := cTRT

					aArmEmp[nN][02] -= nQtdEmp  // Quantidade restante no armazem
					aArmEmp[nN][03] := nQtdEmp  // Quantidade Empenhada
					nQtdReq += nQtdEmp

					If  nQtdReq == nQuant
						Exit
					EndIf
				Next
			EndIf
	
			For nN := 1 To Len(aArmEmp)
				// armazena para visualizacao dos empenhos gerados
				If aArmEmp[nN][03] <= 0 //se quantidade restante no armazém tiver zerado, não gravou empenho
					Loop
				Else
					aAdd(aTabela[3], {Transform(aAuxProd[nx,1]			, X3Picture("AFJ_COD"))+"-"+;
									Transform(SB1->B1_DESC				, X3Picture("B1_DESC")),;
									Transform(aArmEmp[nN][01]			, X3Picture("AFJ_LOCAL")),;
									Transform(aAuxRat[nPosRat,2,ny,3]	, X3Picture("AFJ_TAREFA")),;
									Transform(aArmEmp[nN][03]			, X3Picture("AFJ_QEMP")),;
									Transform(aAuxRat[nPosRat,2,ny,5]	, X3Picture("AFJ_QEMP2"))})
				EndIf
			Next
			
			nQtdDisp+= If(nQtdTrf>nQtdEst,nQtdEst,nQtdTrf)
			nQtdEst -= If(nQtdTrf>nQtdEst,nQtdEst,nQtdTrf)
		EndIf
		nY++
	EndDo
	nQtdNec := aAuxProd[nx,3]-nQtdDisp

	// Verifica se o produto contem estrutura
	If SG1->(MsSeek(cFilialSG1+aAuxProd[nx,1]))
		If nQtdNec > 0
			aAuxOP := {}
			For ny := 1 to Len(aAuxRat[nPosRat,2])
				If !lUsrAces .OR. (lUsrAces .AND. PmsChkUser(aAuxRat[nPosRat][2][ny][1],aAuxRat[nPosRat][2][ny][3],,aAuxRat[nPosRat][2][ny][9],2,"GEROP",aAuxRat[nPosRat][2][ny][2]))//Ordem de Produção
					
					aAdd(aAuxOP,{})
					aAdd(aAuxOP[len(aAuxOP)],aAuxRat[nPosRat,2,ny,1]) 
					aAdd(aAuxOP[len(aAuxOP)],aAuxRat[nPosRat,2,ny,2]) 
					aAdd(aAuxOP[len(aAuxOP)],aAuxRat[nPosRat,2,ny,3]) 
					aAdd(aAuxOP[len(aAuxOP)],aAuxRat[nPosRat,2,ny,4]) 
					aAdd(aAuxOP[len(aAuxOP)],aAuxRat[nPosRat,2,ny,5]) 
					aAdd(aAuxOP[len(aAuxOP)],aAuxRat[nPosRat,2,ny,6])
					aAdd(aAuxOP[len(aAuxOP)],aAuxRat[nPosRat,2,ny,7])
					aAdd(aAuxOP[len(aAuxOP)],aAuxRat[nPosRat,2,ny,8])
				Else
					nQtdNec:= nQtdNec - (aAuxRat[nPosRat,2,ny,4]-aAuxRat[nPosRat,2,ny,6]) 
				EndIf					
			Next nY
			
			If	!Empty(aAuxOP)			
				aQtdes := CalcLote(aAuxProd[nx,1],nQtdNec,"F")
				For nZ := 1 to Len(aQtdes)
					dSavBase := dDataBase
					dDataBase := aAuxProd[nx,2]
					nQtdOP := aQtdes[nz]
					aArrayOP := {	{"C2_PRODUTO",aAuxProd[nx,1],Nil},;
									{"AUTEXPLODE","S",Nil},;
									{"C2_LOCAL",aAuxProd[nx,7],Nil},;
									{"C2_QUANT",nQtdOp,Nil},;
									{"C2_DATPRI",dDataBase,Nil},;
									{"C2_DATPRF",aAuxProd[nx,2],Nil},; 
									{If(lOpcPadrao,"C2_OPC","C2_MOPC"), aAuxProd[nx,5], Nil}}
	
					If lPrevisto
						aAdd(aArrayOp,{"C2_TPOP","P",Nil})
					EndIf
					
					If lPMSNumOp
						aArrayOp := ExecBlock("PMSNumOp", .F., .F., {aArrayOp})
					EndIf
	
					MATA650(aArrayOp,3)
					dDataBase := dSavBase
					For ny := 1 to Len(aAuxOP)
						If nQtdOP > 0
							nAFM_QUANT := If(aAuxOP[ny,4]-aAuxOP[ny,6]>nQtdOP,nQtdOP,aAuxOP[ny,4]-aAuxOP[ny,6])
							cTRT := ""
							If lMV_PMSOPG
								// deve empenhar no projeto a quantidade associada na OP
								aAdd(aAuxEmp,PmsPrxEmp(aAuxOP[ny,1],,aAuxOP[ny,3]))
								cTrt := aAuxEmp[Len(aAuxEmp)]
								PmsAtuEmp(aAuxOP[ny,1],aAuxOP[ny,3],aAuxProd[nx,1],aAuxOP[ny,8],nAFM_QUANT,"+",.T.,ConvUm(aAuxProd[nx,1],nAFM_QUANT,0,2),@cTrt,aAuxProd[nX,2],"2",cPlanej,lPrevisto)
								aAuxEmp[Len(aAuxEmp)] := cTRT
							EndIf
							RecLock("AFM",.T.)
							AFM->AFM_FILIAL	:= cFilialAFM
							AFM->AFM_PROJET	:= aAuxOP[ny,1]
							AFM->AFM_REVISA	:= aAuxOP[ny,2]
							AFM->AFM_TAREFA	:= aAuxOP[ny,3]
							AFM->AFM_COD		:= aAuxProd[nx,1]
							AFM->AFM_NUMOP	:= SC2->C2_NUM
							AFM->AFM_ITEMOP	:= SC2->C2_ITEM
							AFM->AFM_SEQOP	:= SC2->C2_SEQUEN
							AFM->AFM_PLANEJ	:= cPlanej
							AFM->AFM_QUANT	:= nAFM_QUANT
							AFM->AFM_TRT		:= cTRT
							MsUnlock()
							
							aAuxOP[ny,6] += nAFM_QUANT
							nQtdOP -= nAFM_QUANT
	
							dbSelectArea("SB1")
							SB1->(dbSetOrder(1)) // B1_FILIAL + B1_COD
							SB1->(MsSeek(AFM->AFM_FILIAL + AFM->AFM_COD))
							aAdd(aTabela[1], {;
												Transform(AFM->AFM_NUMOP,  X3Picture("AFM_NUMOP")),;
												Transform(AFM->AFM_ITEMOP, X3Picture("AFM_ITEMOP")),;
												Transform(AFM->AFM_SEQOP,  X3Picture("AFM_SEQOP")),;
												Transform(AFM->AFM_TAREFA, X3Picture("AFM_TAREFA")),;
												Transform(SB1->B1_COD,     X3Picture("B1_COD"))+" - "+;
												Transform(SB1->B1_DESC,    X3Picture("B1_DESC")),;
												Transform(AFM->AFM_QUANT, X3Picture("AFM_QUANT"))})
							
							dbSelectArea("AFM")
						EndIf
					Next nY
				Next nZ
			EndIf
		EndIf
	Else
		If nQtdNec # 0
			dbSelectArea("SB1")
			dbSetOrder(1)
			MsSeek(cFilialSB1 + aAuxProd[nx,1])
			//Verifica  a existencia do contrato de parcerias.
			//Caso necessario gera a autorizacao de entrega.
			If SB1->B1_CONTRAT == "S" .Or. SB1->B1_CONTRAT == "A"
				lSC7:= .F.
				dbSelectArea("SC3")
				dbSetOrder(5)
				If MsSeek(cFilialSC3+SB1->B1_COD)
					While !Eof() .And. (SC3->C3_FILIAL+SC3->C3_PRODUTO) == (cFilialSC3+SB1->B1_COD)
						// Desconsidera o produto do contrato de parceria com a seguintes condicoes:
						// 1 contrato encerrado
						// 2 Se a data de necessidade do produto estiver fora da vigencia do contrato de parceria
						// 3 Não quantidade suficiente
						If  (SC3->C3_ENCER =="E") .OR. (SC3->C3_DATPRI<aAuxProd[nx,2] ) .Or. (aAuxProd[nx,2]>SC3->C3_DATPRF) .Or.;
							(aAuxProd[nx,3] > SC3->C3_QUANT) .Or. (aAuxProd[nx,3] > (SC3->C3_QUANT - SC3->C3_QUJE))
							dbSkip()
							Loop
						EndIf
						
						aAuxCP := {}
						For ny := 1 to Len(aAuxRat[nPosRat,2])
						
							If !lUsrAces .OR. (lUsrAces .AND. PmsChkUser(aAuxRat[nPosRat][2][ny][1],aAuxRat[nPosRat][2][ny][3],,aAuxRat[nPosRat][2][ny][9],2,"GERCP",aAuxRat[nPosRat][2][ny][2]))//Contrato de Parceria
								
								aAdd(aAuxCP,{})
								aAdd(aAuxCP[len(aAuxCP)],aAuxRat[nPosRat,2,ny,1]) 
								aAdd(aAuxCP[len(aAuxCP)],aAuxRat[nPosRat,2,ny,2]) 
								aAdd(aAuxCP[len(aAuxCP)],aAuxRat[nPosRat,2,ny,3])
								aAdd(aAuxCP[len(aAuxCP)],aAuxRat[nPosRat,2,ny,4]) 
								aAdd(aAuxCP[len(aAuxCP)],aAuxRat[nPosRat,2,ny,5]) 
								aAdd(aAuxCP[len(aAuxCP)],aAuxRat[nPosRat,2,ny,6])
								aAdd(aAuxCP[len(aAuxCP)],aAuxRat[nPosRat,2,ny,7])
							Else
								nQtdNec:= nQtdNec - (aAuxRat[nPosRat,2,ny,4]-aAuxRat[nPosRat,2,ny,6]) 
							EndIf					
						
						Next nY
						
						If	!Empty(aAuxCP)
						
							//Grava a autorizacao de entrega.
							PMSGrvSC7(aAuxProd[nx,1],aAuxProd[nx,3],aAuxProd[nx,2],SC3->(RecNo()),lPrevisto)
							For nY := 1 to len(aAuxCP)
								//Grava a amarracao SC3 X AFL.
								If nQtdNec > 0
									// quantidade prevista - quantidade empenhada do estoque
									nAFL_QUANT := If(aAuxCP[ny,4]-aAuxCP[ny,6]>nQtdNec,nQtdNec,aAuxCP[ny,4]-aAuxCP[ny,6])

									dbSelectArea("AFL")
									RecLock("AFL",.T.)
									AFL->AFL_FILIAL	:= cFilialAFL
									AFL->AFL_PROJET	:= aAuxCP[nY,1]
									AFL->AFL_REVISA	:= aAuxCP[nY,2]
									AFL->AFL_TAREFA	:= aAuxCP[nY,3]
									AFL->AFL_NUMCP	:= SC3->C3_NUM
									AFL->AFL_ITEMCP	:= SC3->C3_ITEM
									AFL->AFL_PLANEJ	:= cPlanej
									AFL->AFL_QUANT	:= nQtdNec
									AFL->AFL_COD		:= aAuxProd[nx,1]
		
									dbCommit()
									MsUnLock()

									aAuxCP[ny,6] += nAFL_QUANT
									nQtdNec -= nAFL_QUANT

									dbSelectArea("SB1")
									SB1->(dbSetOrder(1)) // B1_FILIAL + B1_COD
									SB1->(MsSeek(cFilialSB1 + AFL->AFL_COD))
									aAdd(aTabela[4], {AFL->AFL_COD+" - "+SB1->B1_DESC, AFL->AFL_NUMCP, AFL->AFL_ITEMCP, AFL->AFL_QUANT})
		
								EndIf
							Next nY
							lSC7:= .T.
							dbSelectArea("SC3")
							dbSkip()
						EndIf
					End
				EndIf
				If !lSC7
					// se nao houver numero de solicitacao de compra, deve gerar.
					cNumSC := iIf(Empty(cNumSC) ,GetNumSc1(.T.) ,cNumSC)
					
					aAuxSC := {}
					For ny := 1 to Len(aAuxRat[nPosRat,2])
					
						If !lUsrAces .OR. (lUsrAces .AND. PmsChkUser(aAuxRat[nPosRat][2][ny][1],aAuxRat[nPosRat][2][ny][3],,aAuxRat[nPosRat][2][ny][9],2,"GERSC",aAuxRat[nPosRat][2][ny][2]))//Solicitação de Compras
							
							aAdd(aAuxSC,{})
							aAdd(aAuxSC[len(aAuxSC)],aAuxRat[nPosRat,2,ny,1]) 
							aAdd(aAuxSC[len(aAuxSC)],aAuxRat[nPosRat,2,ny,2]) 
							aAdd(aAuxSC[len(aAuxSC)],aAuxRat[nPosRat,2,ny,3]) 
							aAdd(aAuxSC[len(aAuxSC)],aAuxRat[nPosRat,2,ny,4]) 
							aAdd(aAuxSC[len(aAuxSC)],aAuxRat[nPosRat,2,ny,5]) 
							aAdd(aAuxSC[len(aAuxSC)],aAuxRat[nPosRat,2,ny,6])
							aAdd(aAuxSC[len(aAuxSC)],aAuxRat[nPosRat,2,ny,7])
						Else
							nQtdNec:= nQtdNec - (aAuxRat[nPosRat,2,ny,4]-aAuxRat[nPosRat,2,ny,6]) 
						EndIf					
					
					Next nY
	
					If	!Empty(aAuxSC)	
						// Verifica se deve quebrar pelo Lote Economico
						aQtdes := CalcLote(aAuxProd[nx,1],nQtdNec,"C")
						For nz := 1 to Len(aQtdes)
							nQtdSC	:= aQtdes[nz]
							PMSGrvSC(cNumSC,cItemSC,aAuxProd[nx],aQtdes[nz],cLocPad,lPrevisto)
							For ny := 1 to Len(aAuxSC)
								If nQtdSC > 0
									// quantidade prevista - quantidade empenhada do estoque
									nAFG_QUANT := If(aAuxSC[ny,4]-aAuxSC[ny,6]>nQtdSC,nQtdSC,aAuxSC[ny,4]-aAuxSC[ny,6])
									cTRT := ""
									// se deve gerar empenho para a solicitacao de compra
									If lMV_PMSSCG
										// deve empenhar no projeto a quantidade associada na SC
										aAdd(aAuxEmp,PmsPrxEmp(aAuxSC[ny,1],,aAuxSC[ny,3]))
										cTrt := aAuxEmp[Len(aAuxEmp)]
										PmsAtuEmp(aAuxSC[ny,1],aAuxSC[ny,3],aAuxProd[nX,1],cLocPad,nAFG_QUANT,"+",.T.,ConvUm(aAuxProd[nX,1],nAFG_QUANT,0,2),@cTrt,aAuxProd[nX,2],"1",cPlanej,lPrevisto)
										aAuxEmp[Len(aAuxEmp)] := cTRT
									EndIF
	
									RecLock("AFG",.T.)
									AFG->AFG_FILIAL	:= cFilialAFG
									AFG->AFG_PROJET	:= aAuxSC[ny,1]
									AFG->AFG_REVISA	:= aAuxSC[ny,2]
									AFG->AFG_TAREFA	:= aAuxSC[ny,3]
									AFG->AFG_NUMSC	:= cNumSC
									AFG->AFG_ITEMSC	:= cItemSC
									AFG->AFG_PLANEJ	:= cPlanej
									AFG->AFG_COD		:= aAuxProd[nX,1]  //PRODUTO
									AFG->AFG_TRT		:= cTrt   //SEQUENCIA EMPENHO
									AFG->AFG_QUANT	:= nAFG_QUANT
									AFG->AFG_IDPROT := cNumSC
									// Campo para amarração com tabela AFA (produtos)
									// Pois, quando MV_PMSAGSC estiver como "2 - nao aglutina", é impossível
									// fazer a exclusão da SC pelo módulo de compras limpando o arquivo AFA_PLANEJ,
									// pois com esse campo preenchido, não se pode gerar nova SC pelo PMS através
									// de um planejamento
									AFG->AFG_AFAITE := aAuxSC[ny,7]
	
									MsUnlock()
	
									If lSLMPreeID
										// Envia o ID do Protheus para o TOP
										SLMPreencheID(iIf(Len(aAuxSolum)==0,NIL,aAuxSolum[nPosRat ,02]))
									EndIf
	
									aAuxSC[ny,6] += nAFG_QUANT
									nQtdSC -= nAFG_QUANT
	
									aAdd(aTabela[2], {;
														Transform(AFG->AFG_NUMSC,  X3Picture("AFG_NUMSC")),;
														Transform(AFG->AFG_ITEMSC, X3Picture("AFG_ITEMSC")),;
														Transform(AFG->AFG_TAREFA, X3Picture("AFG_TAREFA")),;
														Transform(AFG->AFG_QUANT,  X3Picture("AFG_QUANT"))})
								EndIf
	
								If lPMSEXESC
									ExecBlock("PMSEXESC",.F.,.F.)
								EndIf
							Next ny
						Next nz
						cItemSC := SomaIt(cItemSC)
					EndIf
				EndIf
			Else
				// se nao houver numero de solicitacao de compra, deve gerar.
				cNumSC := iIf(Empty(cNumSC) ,GetNumSc1(.T.) ,cNumSC)
				
				aAuxSC := {}
				For ny := 1 to Len(aAuxRat[nPosRat,2])
				
					If !lUsrAces .OR. (lUsrAces .AND. PmsChkUser(aAuxRat[nPosRat][2][ny][1],aAuxRat[nPosRat][2][ny][3],,aAuxRat[nPosRat][2][ny][9],2,"GERSC",aAuxRat[nPosRat][2][ny][2]))//Solicitação de Compras
						
						aAdd(aAuxSC,{})
						aAdd(aAuxSC[len(aAuxSC)],aAuxRat[nPosRat,2,ny,1]) 
						aAdd(aAuxSC[len(aAuxSC)],aAuxRat[nPosRat,2,ny,2]) 
						aAdd(aAuxSC[len(aAuxSC)],aAuxRat[nPosRat,2,ny,3]) 
						aAdd(aAuxSC[len(aAuxSC)],aAuxRat[nPosRat,2,ny,4]) 
						aAdd(aAuxSC[len(aAuxSC)],aAuxRat[nPosRat,2,ny,5]) 
						aAdd(aAuxSC[len(aAuxSC)],aAuxRat[nPosRat,2,ny,6])
						aAdd(aAuxSC[len(aAuxSC)],aAuxRat[nPosRat,2,ny,7])
					Else
						nQtdNec:= nQtdNec - (aAuxRat[nPosRat,2,ny,4]-aAuxRat[nPosRat,2,ny,6]) 
					EndIf					
				
				Next nY
				
				If	!Empty(aAuxSC)
					// Verifica se deve quebrar pelo Lote Economico
					aQtdes := CalcLote(aAuxProd[nx,1],nQtdNec,"C")
					For nz := 1 to Len(aQtdes)
						//	Pega novo numero de solicitacao pois a Solicitacao sera quebrada
						// de acordo com a quantidade do lote economico/Qtd embalagem -> (MV_QUEBRSC)
						If (Len(aQtdes)>1) .and. (nZ>1)
							cNumSC := GetNumSc1(.T.)
						EndIf	
						
						nQtdSC	:= aQtdes[nz]
						PMSGrvSC(cNumSC,cItemSC,aAuxProd[nx],aQtdes[nz],aAuxProd[nx,7],lPrevisto)
						For ny := 1 to Len(aAuxSC)
							If nQtdSC > 0
								// quantidade prevista - quantidade empenhada do estoque
								nAFG_QUANT := If(aAuxSC[ny,4]-aAuxSC[ny,6]>nQtdSC,nQtdSC,aAuxSC[ny,4]-aAuxSC[ny,6])
								cTRT := ""
								// se deve gerar empenho para a solicitacao de compra
								If lMV_PMSSCG
									// deve empenhar no projeto a quantidade associada na SC
									aAdd(aAuxEmp,PmsPrxEmp(aAuxSC[ny,1],,aAuxSC[ny,3]))
									cTrt := aAuxEmp[Len(aAuxEmp)]
									PmsAtuEmp(aAuxSC[ny,1],aAuxSC[ny,3],aAuxProd[nX,1],aAuxProd[nX,7],nAFG_QUANT,"+",.T.,ConvUm(aAuxProd[nX,1],nAFG_QUANT,0,2),@cTrt,aAuxProd[nX,2],"1",cPlanej,lPrevisto)
									aAuxEmp[Len(aAuxEmp)] := cTRT
								EndIF

								RecLock("AFG",.T.)
								AFG->AFG_FILIAL	:= cFilialAFG
								AFG->AFG_PROJET	:= aAuxSC[ny,1]
								AFG->AFG_REVISA	:= aAuxSC[ny,2]
								AFG->AFG_TAREFA	:= aAuxSC[ny,3]
								AFG->AFG_NUMSC	:= cNumSC
								AFG->AFG_ITEMSC	:= cItemSC
								AFG->AFG_PLANEJ	:= cPlanej
								AFG->AFG_COD		:= aAuxProd[nX,1]  //PRODUTO
								AFG->AFG_TRT		:= cTrt  //SEQ EMPENHO
								AFG->AFG_QUANT	:= nAFG_QUANT
								AFG->AFG_IDPROT := cNumSC
								// Campo para amarração com tabela AFA (produtos)
								// Pois, quando MV_PMSAGSC estiver como "2 - nao aglutina", é impossível
								// fazer a exclusão da SC pelo módulo de compras limpando o arquivo AFA_PLANEJ,
								// pois com esse campo preenchido, não se pode gerar nova SC pelo PMS através
								// de um planejamento
								nQtdEmp := 0
								//Verifica o item da AFA a ser gravado
								dbSelectArea('AFA')
								dbSetOrder(6)
								If AFA->(MsSeek(cFilialAFA+AFK->AFK_PLANEJ))
									While AFA->(!Eof()) .And. cFilialAFK+AFK->AFK_PLANEJ==AFA->AFA_FILIAL+AFA->AFA_PLANEJ
										If AFA->AFA_PRODUT == aAuxProd[nX,1]
											If aAuxSC[ny,6] >= AFA->AFA_QUANT .AND. nQtdEmp <= AFA->AFA_QUANT
												nQtdEmp += AFA->AFA_QUANT
											Else
												AFG->AFG_AFAITE := AFA->AFA_ITEM
												Exit
											EndIf
										EndIf
										AFA->(dbSkip())
									End
								EndIf
								

								MsUnlock()

								If lSLMPreeID
									// Envia o ID do Protheus para o TOP
									SLMPreencheID(iIf(Len(aAuxSolum)==0,NIL,aAuxSolum[nPosRat ,02]))
								EndIf

								aAuxSC[ny,6] += nAFG_QUANT
								nQtdSC -= nAFG_QUANT

								aAdd(aTabela[2], {;
													Transform(AFG->AFG_NUMSC,  X3Picture("AFG_NUMSC")),;
													Transform(AFG->AFG_ITEMSC, X3Picture("AFG_ITEMSC")),;
													Transform(AFG->AFG_TAREFA, X3Picture("AFG_TAREFA")),;
													Transform(AFG->AFG_QUANT,  X3Picture("AFG_QUANT"))})
							
								If lPMSEXESC
									ExecBlock("PMSEXESC",.F.,.F.)
								EndIf
							EndIf
						Next ny
					Next nz
					cItemSC := SomaIt(cItemSC)
				EndIf
			EndIf
		EndIf
	EndIf
Next nX

FreeObj(aArmEmp)

If __lSX8
	ConfirmSX8()
EndIf

If ExistBlock("PMSEXEEV")
	ExecBlock("PMSEXEEV", .T., .T., {RetCodUsr(), M->AFK_PLANEJ, aTabela[1], aTabela[2], aTabela[3], aTabela[4]})
EndIf
MEnviaMail("025",{AllTrim(AF8->AF8_PROJET)+"-"+Alltrim(AF8->AF8_DESCRI),UsrRetName(RetCodUsr()),M->AFK_PLANEJ, aTabela[1], aTabela[2], aTabela[3], aTabela[4]},,,,.T.)
Return

/*/{Protheus.doc} PMSGrvSC

@param cNumSC, character, numero da Solicitacao de compra
@param cItemSC, character, Item da solictacao de compra
@param aAuxProd, array, Produto e sua data de necessidade
@param nQuant, numérico, Quantidade a ser solictada do produto
@param cLocal, character, Local de estoque
@param lPrevisto, logico, Se inclui a solicitacao de compra como uma previsão

@author reynaldo
@since 30/07/2014
@version 1.0
/*/
Function PMSGrvSC(cNumSC,cItemSC,aAuxProd,nQuant,cLocal,lPrevisto)
Local nX := 0
Local aFieldSC1 := {}
Local nPos := 0

Static cUser
// Posiciona no produto correto.
SB1->(dbSetOrder(1))
SB1->(MsSeek(xFilial("SB1")+aAuxProd[1]))

// Obtem usuario e grupo de compras utilizado
If cUser == NIL
	cUser 	:= RetCodUsr()
EndIf

// Carrega em memoria os valores dos campos com os inicializadores padrao
aFieldSC1 := {}
aAdd(aFieldSC1 ,{"C1_FILIAL"  ,xFilial("SC1")})
aAdd(aFieldSC1 ,{"C1_ITEM"    ,cItemSC})
aAdd(aFieldSC1 ,{"C1_PRODUTO" ,aAuxProd[1]})
aAdd(aFieldSC1 ,{"C1_UM"      ,SB1->B1_UM})
aAdd(aFieldSC1 ,{"C1_LOCAL"   ,cLocal})
aAdd(aFieldSC1 ,{"C1_CC"      ,SB1->B1_CC})
aAdd(aFieldSC1 ,{"C1_EMISSAO" ,dDataBase})
aAdd(aFieldSC1 ,{"C1_NUM"     ,cNumSC})
aAdd(aFieldSC1 ,{"C1_DESCRI"  ,SB1->B1_DESC})
aAdd(aFieldSC1 ,{"C1_SEGUM"   ,SB1->B1_SEGUM})
aAdd(aFieldSC1 ,{"C1_QUANT"   ,nQuant})
aAdd(aFieldSC1 ,{"C1_QTSEGUM" ,ConvUm(SB1->B1_COD,nQuant,0,2)})
aAdd(aFieldSC1 ,{"C1_DATPRF"  ,aAuxProd[2]})
aAdd(aFieldSC1 ,{"C1_IMPORT"  ,SB1->B1_IMPORT})
aAdd(aFieldSC1 ,{"C1_COTACAO" ,If(SB1->B1_IMPORT=="S","IMPORT","")})
aAdd(aFieldSC1 ,{"C1_GRUPCOM" ,MaRetComSC(SB1->B1_COD,UsrRetGrp(),cUser)})
aAdd(aFieldSC1 ,{"C1_USER"    ,cUser})
aAdd(aFieldSC1 ,{"C1_FORNECE" ,SB1->B1_PROC})
aAdd(aFieldSC1 ,{"C1_LOJA"    ,SB1->B1_LOJPROC})
aAdd(aFieldSC1 ,{"C1_OBS"     ,STR0015}) //"SOLICITADO AO PROJETO"
aAdd(aFieldSC1 ,{"C1_TPOP"    ,If(lPrevisto,"P","F")})
aAdd(aFieldSC1 ,{"C1_CONTA"   ,SB1->B1_CONTA})
aAdd(aFieldSC1 ,{"C1_ITEMCTA" ,SB1->B1_ITEMCC})

RecLock("SC1",.T.)
For nX := 1 To SC1->(FCount())
	If (nPos := aScan(aFieldSC1 ,{|x| Alltrim(x[1]) == SC1->(FieldName(nX))})) = 0
		SC1->(FieldPut(nX ,CriaVar(SC1->(FieldName(nX)))))
	Else
		SC1->(FieldPut(nX ,aFieldSC1[nPos,2]))
	EndIf
Next nX

MaAvalSC("SC1",1)
MsUnLock()

If ExistBlock("PMSGRVSC")
	ExecBlock("PMSGRVSC",.F.,.F.)
EndIf
Return


/*
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsDlgSA³ Autor ³ Edson Maricate          ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Esta funcao cria uma janela para configuracao e utilizacao    ³±±
±±³          ³da Solicitacao ao Almox. em um Projeto.                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MATA105,SIGAPMS                                               ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
*/
Function PmsDlgSA(nOpcao,cNumSA,lGetDados)
Local lOk				:= .T.
Local oDlg
Local nPosPerc		:= 0
Local nPosItem		:= aScan(aHeader,{|x| Alltrim(x[2]) == "CP_ITEM"})
Local nQuantSA		:= aCols[n,aScan(aHeader,{|x| Alltrim(x[2]) == "CP_QUANT"})]
Local cItemSA		:= aCols[n,nPosItem]
Local nPosRat		:= aScan(aRatAFH,{|x| x[1] == aCols[n,nPosItem]})
Local aSavCols		:= aClone(aCols)
Local aSavHeader	:= aClone(aHeader)
Local nSavN			:= n
Local oBold
Local nY            := 0
Local nLenHeader	:= 0
Local nLenCols		:= 0
Local nPosProj		:= 0						// Posicao do campo _PROJET no aCols
Local nPosRevi      := 0						// Posicao do campo _REVISA no aCols
Local aArea			:= GetArea()
Local aAreaAF8		:= AF8->(GetArea())
Local aAreaAF9		:= AF9->(GetArea())
Local aAlter      := {"AFH_PROJET","AFH_TAREFA", "AFH_QUANT", "AFH_QTSEGU" }
Local lPmsAFHCpo  := ExistBlock("PmsAFHCpo")
Local oGetDados := NIL
Local cFilAFH		:= xFilial("AFH")

Default lGetDados		:= .T.

nQtMaxSA			:= nQuantSA
aCols	:= {}
aHeader	:= {}
dbSelectArea("AF8")
dbSetOrder(1)
dbSelectArea("AF9")
dbSetOrder(1)

If nOpcao == 3
	// Montagem do aHeader
	FillGetDados(nOpcao,"AFH",1,,,,,,,,{||.T.},.T.,aHeader)
	nPosPerc	:= aScan(aHeader,{|x|Alltrim(x[2])=="AFH_QUANT"})

	aHeaderAFH	:= aClone(aHeader)
	If nPosRat > 0
		aCols	:= aClone(aRatAFH[nPosRat,2])
	Else
		// Faz a montagem de uma linha em branco no aCols.
		nLenHeader := Len(aHeader)
		aadd(aCols,Array(nLenHeader+1))
		For ny := 1 to nLenHeader
			If Trim(aHeader[ny,2]) == "AFH_ITEM"
				aCols[1,ny] 	:= "01"
			ElseIf AllTrim(aHeader[ny,2]) $ "AFH_ALI_WT | AFH_REC_WT"
				If AllTrim(aHeader[ny,2]) == "AFH_ALI_WT"
					aCols[1,ny] := "AFH"
				ElseIf AllTrim(aHeader[ny,2]) == "AFH_REC_WT"
					aCols[1,ny] := 0
				EndIf
			Else
				aCols[1,ny] := CriaVar(aHeader[ny,2])
			EndIf
			aCols[1,nLenHeader+1] := .F.
		Next ny
	EndIf
Else
	// Montagem do aHeader
	FillGetDados(nOpcao,"AFH",1,,,,,,,,{||.T.},.T.,aHeader)
	nPosPerc	:= aScan(aHeader,{|x|Alltrim(x[2])=="AFH_QUANT"})

	aHeaderAFH	:= aClone(aHeader)
	dbSelectArea("AFH")
	dbSetOrder(2)
	If nPosRat == 0
		nLenHeader := Len(aHeader)
		If MsSeek(cFilAFH+cNumSA+cItemSA)
			While AFH->(! Eof()) .And. AFH->AFH_FILIAL == cFilAFH .AND. AFH->AFH_NUMSA == cNumSA .AND. AFH->AFH_ITEMSA == cItemSA
				If AFH->AFH_REVISA==PmsAF8Ver(AFH->AFH_PROJET)
					aADD(aCols,Array(nLenHeader+1))
					nLenCols := Len(aCols)
					For ny := 1 to nLenHeader
						If ( aHeader[ny,10] != "V")
							aCols[nLenCols,ny] := FieldGet(ColumnPos(aHeader[ny,2]))
						ElseIf AllTrim(aHeader[ny,2]) $ "AFH_ALI_WT | AFH_REC_WT"
							If AllTrim(aHeader[ny,2]) == "AFH_ALI_WT"
								aCols[nLenCols,ny] := "AFH"
							ElseIf AllTrim(aHeader[ny,2]) == "AFH_REC_WT"
								aCols[nLenCols,ny] := AFH->(Recno())
							EndIf
						Else
							aCols[nLenCols,ny] := CriaVar(aHeader[ny,2])
						EndIf
						aCols[nLenCols,nLenHeader+1] := .F.
					Next ny
				EndIf
				dbSkip()
			End
		Else
			lOk:=.F.
		EndIf
		If Empty(aCols)
			// Faz a montagem de uma linha em branco no aCols.
			aadd(aCols,Array(nLenHeader+1))
			For ny := 1 to nLenHeader
				If Trim(aHeader[ny,2]) == "AFH_ITEM"
					aCols[1,ny] 	:= "01"
				ElseIf AllTrim(aHeader[ny,2]) $ "AFH_ALI_WT | AFH_REC_WT"
					If AllTrim(aHeader[ny,2]) == "AFH_ALI_WT"
						aCols[1,ny] := "AFH"
					ElseIf AllTrim(aHeader[ny,2]) == "AFH_REC_WT"
						aCols[1,ny] := 0
					EndIf
				Else
					aCols[1,ny] := CriaVar(aHeader[ny,2])
				EndIf
				aCols[1,nLenHeader+1] := .F.
			Next ny
		EndIf
	Else
		aCols := aClone(aRatAFH[nPosRat,2])
	EndIf
EndIf
//Se for a opcao visualizar atualiza a variavel static cEofF3AF9
If nOpcao == 2 .AND. ( Len(aCols) > 0 )
	nPosProj := aScan(aHeader,{|x|Substr(x[2],4,7)=="_PROJET"})
	nPosRevi := aScan(aHeader,{|x|Substr(x[2],4,7)=="_REVISA"})
	If ( nPosProj  > 0 ) .AND. ( nPosRevi > 0 )
		cEofF3AF9 := aCols[Len(aCols),nPosProj] + aCols[Len(aCols),nPosRevi]
	EndIf
EndIf

// P.E. para definir quais campos da tabela AFH podem ser alterados
If lPmsAFHCpo
	aAlter := aClone(Execblock("PmsAFHCpo", .F.,.F.,{aAlter,aHeader,aCols}))
Endif

//Grava na variavel privada para ser utilizada na rotina chamadora
aHdrAFH	:=	aClone(aHeaderAFH)

If lGetDados
	DEFINE FONT oBold NAME "Arial" SIZE 0, -13 BOLD
	DEFINE MSDIALOG oDlg FROM 88 ,22  TO 350,619 TITLE STR0016 Of oMainWnd PIXEL //"Gerenciamento de Projetos - SA"
		oGetDados := MSGetDados():New(23,3,112,296,nOpcao,'PMSAFHLOK','PMSAFHTOK','+AFH_ITEM',.T.,aAlter,,,9999,'PMSAFHFOK')
		@ 16 ,3   TO 18 ,310 LABEL '' OF oDlg PIXEL
		@ 6 ,10   SAY STR0017 Of oDlg PIXEL SIZE 27 ,9 FONT oBold //'Num. SA'
		@ 7 ,35   SAY cNumSA+"/"+cItemSA PIXEL SIZE 30,9 of oDlg
		@ 6 ,180  SAY STR0002 Of oDlg PIXEL SIZE 37 ,9 FONT oBold //'Quantidade'
		@ 5 ,230  MSGET nQuantSA Picture PesqPict('SCP','CP_QUANT') When .F. PIXEL SIZE 50,9
		@ 118,249 BUTTON STR0027 SIZE 35 ,9   FONT oDlg:oFont ACTION {||If(oGetDados:TudoOk(),(lOk:=.T.,oDlg:End()),(lOk:=.F.))}  OF oDlg PIXEL  //'Confirma'
		@ 118,210 BUTTON STR0028 SIZE 35 ,9   FONT oDlg:oFont ACTION (oDlg:End())  OF oDlg PIXEL  //'Cancelar'
     If ExistBlock("PMSSASCR")
        ExecBlock("PMSSASCR",.F.,.F.,{oDlg,nOpcao})
     Endif
	ACTIVATE MSDIALOG oDlg
EndIf

If nOpcao <> 2 .And. lOk
	If nPosRat > 0
		aRatAFH[nPosRat,2]	:= aClone(aCols)
	Else
		aADD(aRatAFH,{aSavCols[nSavN,nPosItem],aClone(aCols)})
	EndIf

	If ExistBlock("PMSDLGSA")
		U_PMSDLGSA(aCols,aHeader,aSavCols,aSavHeader,nSavN)
	EndIf
EndIf

RestArea(aAreaAF9)
RestArea(aAreaAF8)
RestArea(aArea)
aCols	:= aClone(aSavCols)
aHeader	:= aClone(aSavHeader)
n		:= nSavN
Return
/*
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsDlgSAB³ Autor ³ Bruno Sobieski         ³ Data ³ 06-12-2005 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Esta funcao cria uma janela para selecionar as tarefas a serem³±±
±±³          ³atendiadas na baixa de uma SA.                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MATA185,SIGAPMS                                               ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
*/
Function PmsDlgSAB(cNumSA,cItemSA,nQtdDig,aAutoAFH)
Local ny	        := 0
Local nZ			:= 0
Local nW	       := 0
Local nV			:= 0
Local nH	       := 0
Local nA			:= 0
Local lOk			:= .T.
Local oDlg
Local nPosPerc		:= 0
Local nLenHeader	:= 0
Local nLenCols		:= 0
Local nPosRat		:= aScan(aRatAFH,{|x| x[1] == cItemSA})
Local aSavaRotina
Local aSavCols
Local aSavHeader
Local nSavN
Local lGetDados		:= .T.
Local oBold
Local cUsado		:= ""
Local lAuto := .F.
Local nPosPjx	:= 0
Local nPosPja	:= 0
Local nPosTrx := 0
Local nPosTra := 0
Local nPosQBa	:= 0
Local nPosQBx	:= 0
Local cProjet := ""
Local cTarefa := ""
Local lAchou	:= .F.
Local cFilAFH	:= xFilial("AFH")

DEFAULT aAutoAFH := {}

If Len(aAutoAFH) > 0
	lAuto:= .T.
EndIf

If Type("aRotina") == "A"
	aSavaRotina	:= aClone(aRotina)
Endif
If Type("aCols") == "A"
	aSavCols		:= aClone(aCols)
Endif
If Type("aHeader") == "A"
	aSavHeader	:= aClone(aHeader)
Endif
If Type("n") == "N"
	nSavN			:= n
Endif
DbSelectArea('SCP')
DbSetOrder(1)
MsSeek(xFilial()+cNumSA+cItemSA)

Private nQuantSA	:=	nQtdDig

aCols	:= {}
aHeader	:= {}
// Montagem do aHeader
dbSelectArea("SX3")
dbSetOrder(1)
MsSeek("AFH")
While !EOF() .And. (x3_arquivo == "AFH")
	IF (X3USO(x3_usado) .AND. cNivel >= x3_nivel) .Or. Alltrim(X3_CAMPO) == 'AFH_QBAIX'.Or. Alltrim(X3_CAMPO) == 'AFH_QUJE'
		AADD(aHeader,{ TRIM(x3titulo()), x3_campo, x3_picture,;
			x3_tamanho, x3_decimal, x3_valid,;
			x3_usado, x3_tipo, x3_arquivo,x3_context } )
	Endif
	If AllTrim(x3_campo) == "AFH_QUANT"
		nPosPerc	:= Len(aHeader)
	EndIf
	dbSkip()
End

SX3->(dbSetOrder(2))
SX3->(MsSeek("AFH_FILIAL"))

cUsado := SX3->X3_USADO

SX3->(dbSetOrder(1))

AADD( aHeader, { "Alias WT","AFH_ALI_WT", "", 09, 0,, cUsado, "C", "AFH", "V"} )
AADD( aHeader, { "Recno WT","AFH_REC_WT", "", 09, 0,, cUsado, "N", "AFH", "V"} )

aHeaderAFH	:= aClone(aHeader)
dbSelectArea("AFH")
dbSetOrder(2)
If nPosRat == 0
	nLenHeader := Len(aHeader)
	If MsSeek(cFilAFH+cNumSA+cItemSA)
		While AFH->(! Eof()) .And. AFH->AFH_FILIAL == cFilAFH .AND. AFH->AFH_NUMSA == cNumSA .AND. AFH->AFH_ITEMSA == cItemSA
			If AFH->AFH_REVISA==PmsAF8Ver(AFH->AFH_PROJET)
				aADD(aCols,Array(Len(aHeader)+1))
				nLenCols := Len(aCols)
				For ny := 1 to nLenHeader
					If AllTrim(aHeader[ny,2]) == "AFH_ALI_WT"
						aCols[nLenCols,ny] := "AFH"
					ElseIf AllTrim(aHeader[ny,2]) == "AFH_REC_WT"
						aCols[nLenCols,ny] := AFH->(Recno())
					ElseIf (aHeader[ny,10] != "V")
						aCols[nLenCols,ny] := FieldGet(ColumnPos(aHeader[ny,2]))
					Else
						aCols[nLenCols,ny] := CriaVar(aHeader[ny,2])
					EndIf
					aCols[nLenCols,nLenHeader+1] := .F.
				Next ny
			EndIf
			dbSkip()
		End
	EndIf
	If Empty(aCols)
		// Faz a montagem de uma linha em branco no aCols.
		aadd(aCols,Array(nLenHeader+1))
		nLenCols := Len(aCols)
		For ny := 1 to nLenHeader
			If Trim(aHeader[ny,2]) == "AFH_ITEM"
				aCols[1,ny] 	:= "01"
			ElseIf AllTrim(aHeader[ny,2]) $ "AFH_ALI_WT | AFH_REC_WT"
				If AllTrim(aHeader[ny,2]) == "AFH_ALI_WT"
					aCols[nLenCols,ny] := "AFH"
				ElseIf AllTrim(aHeader[ny,2]) == "AFH_REC_WT"
					aCols[nLenCols,ny] := 0
				EndIf
			Else
				aCols[1,ny] := CriaVar(aHeader[ny,2])
			Endif
			aCols[1,nLenHeader+1] := .F.
		Next ny
	EndIf
Else
	aCols := aClone(aRatAFH[nPosRat,2])
EndIf

If lAuto // Verifica projetos informados no execauto de baixa de pré rquisição

	xAutoAFH:={}
	For nW:=1 to len(acols)
		If acols[nW][len(aHeader)+1] == .F.
			aadd(xAutoAFH,{})
			For nZ:=1 to len(aHeader)
				aadd(xAutoAFH[nW],{aHeader[nZ][2],acols[nW][nZ],Nil})
			Next nZ
		EndIf
	Next nW
	
	nPosPjx := aScan(aHeader,{|x| Alltrim(x[2]) == 'AFH_PROJET' })
	nPosPja := aScan(aAutoAFH[1],{|x| Alltrim(x[1]) == 'AFH_PROJET' })
	
	nPosTrx := aScan(aHeader,{|x| Alltrim(x[2]) == 'AFH_TAREFA' })
	nPosTra := aScan(aAutoAFH[1],{|x| Alltrim(x[1]) == 'AFH_TAREFA' })
	
	nPosQBx := aScan(aHeader,{|x| Alltrim(x[2]) == 'AFH_QBAIX'})
	nPosQBa := aScan(aAutoAFH[1],{|x| Alltrim(x[1]) == 'AFH_QBAIX'})
	For nV:=1 to len(aAutoAFH)
		cProjet := aAutoAFH[nV][nPosPja][2]
		cTarefa := aAutoAFH[nV][nPosTra][2]
		For nH:=1	to len(xAutoAFH)	
			If AllTrim(xAutoAFH[nH][nPosPjx][2]) == AllTrim(cProjet) .AND. AllTrim(xAutoAFH[nH][nPosTrx][2]) == AllTrim(cTarefa)
				xAutoAFH[nH][nPosQBx][2]:= aAutoAFH[nV][nPosQBa][2]
				lAchou := .T.
			EndIf
		Next nH
		If lAchou <> .T.
			Help("   ",1, "VLDPROJ")	
			lOk := .F.
		EndIf
	Next nV
	
	If lAuto
		nPosQtd := aScan(aAutoSCP,{|x| Alltrim(x[1]) == 'CP_QUANT'})
		nQuantSA := aAutoSCP[nPosQtd][2]
	EndIf
	
	If lOK .AND. AFH->(MsGetDAuto(xAutoAFH ,"PMSAFHBLOK()",{|| PMSAFHBTOK(nQuantSA)},,4))
		For nA:=1 to len(aCols)
			aCols[nA][nPosQBx]:= xAutoAFH[nA][nPosQBx][2]
		Next nA
	Else		
		lOk  := .F.
	Endif
Else
	If lGetDados
		DEFINE FONT oBold NAME "Arial" SIZE 0, -13 BOLD
		DEFINE MSDIALOG oDlg FROM 88 ,22  TO 350,619 TITLE STR0016 Of oMainWnd PIXEL //"Gerenciamento de Projetos - SA"
			oGetDados := MSGetDados():New(23,3,112,296,4,'PMSAFHBLOK','PMSAFHBTOK(nQuantSA)','+AFH_ITEM',.T.,{'AFH_QBAIX'},,,Len(aCols))
			@ 16 ,3   TO 18 ,310 LABEL '' OF oDlg PIXEL
			@ 6 ,10   SAY STR0017 Of oDlg PIXEL SIZE 27 ,9 FONT oBold //'Num. SA'
			@ 7 ,35   SAY cNumSA+"/"+cItemSA PIXEL SIZE 30,9 of oDlg
			@ 6 ,180  SAY STR0002 Of oDlg PIXEL SIZE 37 ,9 FONT oBold //'Quantidade'
			@ 5 ,230  MSGET nQuantSA Picture PesqPict('SCP','CP_QUANT') When .F. PIXEL SIZE 50,9
			@ 118,249 BUTTON STR0027 SIZE 35 ,9   FONT oDlg:oFont ACTION {||If(oGetDados:TudoOk(),(lOk:=.T.,oDlg:End()),(lOk:=.F.))}  OF oDlg PIXEL  //'Confirma'
			@ 118,210 BUTTON STR0028 SIZE 35 ,9   FONT oDlg:oFont ACTION (oDlg:End())  OF oDlg PIXEL  //'Cancelar'
		ACTIVATE MSDIALOG oDlg
	EndIf
EndIf

If lOk
	If nPosRat > 0
		aRatAFH[nPosRat,2]	:= aClone(aCols)
	Else
		aADD(aRatAFH,{cItemSA,aClone(aCols)})
	EndIf

	If ExistBlock("PMSDLGSAB")
		U_PMSDLGSAB(aCols,aHeader,aSavCols,aSavHeader,nSavN)
	EndIf
EndIf
If aSavCols <> Nil
	aCols	:= aClone(aSavCols)
Endif
If aSavHeader <> Nil
	aHeader	:= aClone(aSavHeader)
Endif
If nSavN <> Nil
	n		:= nSavN
Endif
If aSavaRotina <> Nil
	aRotina	:= aClone(aSavaRotina)
Endif
Return
/*
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSAFHValid ³Autor  ³ Bruno Sobieski      ³ Data ³ 06-12-2005 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de validacao da quantidade a ser baixada da pre-req.   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSDLGSA,PMSXFUN                                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
*/
Function PMSAFHValid(nPosRat,nQuant,cProjeto,cTarefa)
Local lRet	:=	.T.
Local	nSavN	:=	 n
Local aSavHeader
Local aSavCols
Local nQtdPrj		:=0
Local nY
DEFAULT cProjeto	:=	""
DEFAULT cTarefa   :=	""

If aHeaderAFH <> Nil
	If Type("aCols") == "A"
		aSavCols		:= aClone(aCols)
	Endif
	If Type("aHeader") == "A"
		aSavHeader	:= aClone(aHeader)
	Endif
	aHeader	:=	aClone(aHeaderAFH)
	aCols		:=	aClone(aRatAFH[nPosRat,2])
	For nY:=1 To Len(aRatAFH[nPosRat,2])
  		If Len(cProjeto)==0 .Or. cProjeto+cTarefa == GdFieldGet('AFH_PROJET',nY)+GdFieldGet('AFH_TAREFA',nY)
			nQtdPrj += 	GdFieldGet('AFH_QBAIX',nY)
		Endif
	Next
	n	:=	nSavN
	If nQtdPrj > nQuant
		Help("    ",1,"QTDPROJ")
		lRet := .F.
	Endif
	If ValType(aSavCols) == "A"
		aCols		:= aClone(aSavCols)
	Endif
	If ValType(aSavHeader) == "A"
		aHeader	:= aClone(aSavHeader)
	Endif
Endif
Return lRet
/*
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSAFHDados ³Autor  ³ Bruno Sobieski      ³ Data ³ 06-12-2005 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Retorna uma array com a distribuicao da quantidade da pre-req ³±±
±±³          ³nos projetos selecionados.                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSDLGSA,PMSXFUN                                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
*/
Function PMSAFHDados(aRatAFH,cItemSA,nQtdTot)
Local	nSavN	:=	 n
Local aSavHeader
Local aSavCols
Local aRet	:=	{}
Local nPosRat		:= aScan(aRatAFH,{|x| x[1] == cItemSA})
Local nY
If aHeaderAFH <> Nil .And. nPosRat > 0
	If Type("aCols") == "A"
		aSavCols		:= aClone(aCols)
	Endif
	If Type("aHeader") == "A"
		aSavHeader	:= aClone(aHeader)
	Endif
	aHeader	:=	aClone(aHeaderAFH)
	aCols		:=	aRatAFH[nPosRat,2]
	For nY:= 1 To Len(aCols)
		If !aCols[nY,Len(aHeader)+1] .And. GdFieldGet('AFH_QBAIX',nY) > 0
			AAdd(aRet,{GdFieldGet('AFH_PROJET',nY),GdFieldGet('AFH_TAREFA',nY),GdFieldGet('AFH_QBAIX',nY)})
			nQtdTot	-=	GdFieldGet('AFH_QBAIX',nY)
		Endif
	Next
	n	:=	nSavN
	If ValType(aSavCols) == "A"
		aCols		:= aClone(aSavCols)
	Endif
	If ValType(aSavHeader) == "A"
		aHeader	:= aClone(aSavHeader)
	Endif
Endif
If nQtdTot > 0
	AAdd(aRet,{CriaVar('AFH_PROJET',.F.),CriaVar('AFH_TAREFA',.F.),nQtdTot})
Endif
Return aRet
/*
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSAFHFOK³ Autor ³ Edson Maricate         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de validacao dos campos da GetDados de rateio da SA.   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSDLGSA,PMSXFUN                                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
*/
Function PMSAFHFOK()
Local cRevisa
Local cProjeto
Local lRet		:= .T.
Local cCampo	:= AllTrim(ReadVar())

Do Case
	Case cCampo == 'M->AFH_PROJET'
		lRet := PMSExistCPO("AF8") .And. PmsVldFase("AF8",M->AFH_PROJET,"54")
	Case cCampo == 'M->AFH_TAREFA'
		cProjeto := aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFH_PROJET"})]
		cRevisa  := aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFH_REVISA"})]
		lRet := ExistCpo("AF9",cProjeto+cRevisa+M->AFH_TAREFA,1)
EndCase
Return lRet
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSAFHLOK³ Autor ³ Edson Maricate         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de validacao LinOk da GetDados de rateio da SA.        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSDLGSA,PMSXFUN                                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PMSAFHLOK()
Local lRet := .T.
// Verifica os campos obrigatorios do SX3.
If !aCols[n,Len(aCols[n])]
	lRet := PmsVldFase("AF8",aCols[n,aScan(aHeader,{|x| Substr(x[2],4,7) =="_PROJET" })],"54")
	If lRet
		lRet := MaCheckCols(aHeader,aCols,n)
	EndIf
EndIf

Return lRet
/*
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSAFHTOK³ Autor ³ Edson Maricate         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de validacao TudOk da GetDados de rateio da SA.        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSDLGSA,PMSXFUN                                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
*/
Function PMSAFHTOK()
Local nx
Local lRet			:= .T.
Local nTotQuant		:= 0
Local nPosProjet	:= aScan(aHeader,{|x|AllTrim(x[2])=="AFH_PROJET"})
Local nPosQuant		:= aScan(aHeader,{|x|AllTrim(x[2])=="AFH_QUANT"})
Local nSavN			:= n
// Verifica os campos obrigatorios do SX3.
For nx := 1 to Len(aCols)
	n	:= nx
	If !aCols[n,len(aCols[n])]
		If !Empty(aCols[n,nPosProjet])
			If !PMSAFHLOK()
				lRet := .F.
				Exit
			EndIf
			nTotQuant+=aCols[n,nPosQuant]
		EndIf
	EndIf
Next

If nTotQuant > nQtMaxSA .Or. Empty(nTotQuant)
	Help("   ",1,"PMSQTSA")
	lRet := .F.
EndIf

n := nSavN
Return lRet


/*/{Protheus.doc} PmsWriteSA
Programa de gravacao de Solicitacoes de Compras chamado pela
rotina de gravacao de Solicitacoes de Compras.

@param nEvento, numérico, Codigo do evento
								[1] - Inclusao da SC
								[2] - Estorno da SC
								[3] - Exclusao da SC
@param cAliasSCP, character, Alias da tabela de Solicitacoes de Compras
@return ${return}, ${return_description}

@author Edson Maricate
@since 09-02-2001
@version 1.0
/*/
Function PmsWriteSA(nEvento,cAliasSCP)
Local nx
Local nz
Local ny
Local aArea		:= GetArea()
Local aRecAFH	:= {}
Local lAFHID   := IIF(AFH->(ColumnPos("AFH_ID")) > 0,.T.,.F.)
Local lMsIdent := IIF(SCP->(ColumnPos("CP_MSIDENT")) > 0,.T.,.F.)

// Verifica o array de amarracao das Solicitacoes x Projetos
If aRatAFH<>Nil
	Do Case
		Case nEvento == 1
			nx	:= aScan(aRatAFH,{|x| x[1] == (cAliasSCP)->CP_ITEM})
			If nx > 0
				dbSelectArea("AFH")
				dbSetOrder(2)
				MsSeek(xFilial()+(cAliasSCP)->CP_NUM+(cAliasSCP)->CP_ITEM)
				// Carrega no array os registros ja existentes.
				While !Eof() .And. xFilial()+(cAliasSCP)->CP_NUM+(cAliasSCP)->CP_ITEM == ;
					AFH_FILIAL+AFH_NUMSA+AFH_ITEMSA
					If AFH->AFH_REVISA==PmsAF8Ver(AFH->AFH_PROJET)
						aAdd(aRecAFH,AFH->(RecNo()))
					EndIf
					dbSkip()
				End
				For nz := 1 to Len(aRatAFH[nx,2])
					If !aRatAFH[nx,2,nz,Len(aRatAFH[nx,2,nz])]
						dbSelectArea('AFH')
					 	If nz <= Len(aRecAFH)
					 		AFH->(dbGoto(aRecAFH[nz]))
					 		RecLock('AFH',.F.)
					 	Else
				 			RecLock('AFH',.T.)
					 	EndIf
						// Atualiza os dados contidos na GetDados
						For ny := 1 to Len(aHeaderAFH)
							If aHeaderAFH[ny,10] # "V"
								cVar := Trim(aHeaderAFH[ny,2])
								Replace &cVar. With aRatAFH[nx,2,nz,ny]
							Endif
						Next
						AFH->AFH_FILIAL	:= xFilial("AFH")
						AFH->AFH_NUMSA	   := (cAliasSCP)->CP_NUM
						AFH->AFH_ITEMSA	:= (cAliasSCP)->CP_ITEM
						AFH->AFH_COD   	:= (cAliasSCP)->CP_PRODUTO
						If lAFHID .And. lMsIdent
							AFH->AFH_ID     := (cAliasSCP)->CP_MSIDENT
						Endif

						MsUnlock()
						AFH->(FkCommit())

					Else
						If nz <= Len(aRecAFH)
							MsGoto(aRecAFH[nz])
							RecLock("AFH",.F.,.T.)
					        dbDelete()
						EndIf
					EndIf
				Next
				// Deleta os demais registros.
				If Len(aRecAFH) > Len(aRatAFH[nx,2])
					For nz := (Len(aRatAFH[nx,2])+1) to Len(aRecAFH)
						MsGoto(aRecAFH[nz])
						RecLock("AFH",.F.,.T.)
				        dbDelete()
				        msUnLock()
					Next nz
				EndIf
			EndIf
		Case nEvento == 2
			// Estornar os Empenhos
			// Apenas mostra os itens  (Wilson P.Godoi Incluido em 25/05/2011)
			nx	:= aScan(aRatAFH,{|x| x[1] == (cAliasSCP)->CP_ITEM})
			If nx > 0
				dbSelectArea("AFH")
				dbSetOrder(2)
				MsSeek(xFilial()+(cAliasSCP)->CP_NUM+(cAliasSCP)->CP_ITEM)
				// Carrega no array os registros ja existentes.
				While !Eof() .And. xFilial()+(cAliasSCP)->CP_NUM+(cAliasSCP)->CP_ITEM == ;
					AFH_FILIAL+AFH_NUMSA+AFH_ITEMSA
					If AFH->AFH_REVISA==PmsAF8Ver(AFH->AFH_PROJET)
						aAdd(aRecAFH,AFH->(RecNo()))
					EndIf
					dbSkip()
				End
        EndIf
		Case nEvento == 3
			dbSelectArea("AFH")
			dbSetOrder(2)
			If MsSeek(xFilial()+(cAliasSCP)->CP_NUM+(cAliasSCP)->CP_ITEM)
				While !Eof() .And. xFilial()+(cAliasSCP)->CP_NUM+(cAliasSCP)->CP_ITEM==;
					AFH_FILIAL+AFH_NUMSA+AFH_ITEMSA
					If AFH->AFH_REVISA==PmsAF8Ver(AFH->AFH_PROJET)
						RecLock("AFH",.F.,.T.)
						dbDelete()
				        msUnLock()
					EndIf
					dbSkip()
				End
				If lMsIdent
					PMS_AFH(AFH->AFH_PROJET ,AFH->AFH_TAREFA ,"" ,0,AFH->AFH_QUANT ,0 ,"SA", nEvento)// Dispara as Stored Procedure correspondente
				Endif
			EndIf
	EndCase
EndIf

RestArea(aArea)
Return
/*
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsDlgCP³ Autor ³ Edson Maricate          ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Esta funcao cria uma janela para configuracao e utilizacao    ³±±
±±³          ³do Contrato de Parceria ao Gerenciamento de Projetos          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MATA125,SIGAPMS                                               ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
*/
Function PmsDlgCP(nOpcao,cNumCP)

Local lOk
Local oDlg
Local nLenHeader	:= 0
Local nLenCols  	:= 0
Local nPosPerc		:= 0
Local nPosItem		:= aScan(aHeader,{|x| Alltrim(x[2]) == "C3_ITEM"})
Local nQuantCP		:= aCols[n,aScan(aHeader,{|x| Alltrim(x[2]) == "C3_QUANT"})]
Local cItemCP		:= aCols[n,nPosItem]
Local nPosRat		:= aScan(aRatAFL,{|x| x[1] == aCols[n,nPosItem]})
Local aSavCols		:= aClone(aCols)
Local aSavHeader	:= aClone(aHeader)
Local nSavN			:= n
Local lGetDados		:= .T.
Local oGetDados
Local nY            := 0
Local aAlter      := {"AFL_PROJET","AFL_TAREFA", "AFL_QUANT", "AFL_QTSEGU" }
Local nOpView := 0

nQtMaxCP			:= nQuantCP
aCols	:= {}
aHeader	:= {}

If nOpcao == 3

	// montagem do aHeader
	FillGetDados(nOpcao,"AFL",1,,,,,,,,{||.T.},.T.,aHeader)
	nPosPerc	:= aScan(aHeader,{|x|Alltrim(x[2])=="AFL_QUANT"})

	aHeaderAFL	:= aClone(aHeader)
	If nPosRat > 0
		aCols	:= aClone(aRatAFL[nPosRat,2])
	Else

		// montagem de uma linha em branco no aCols
		nLenHeader := Len(aHeader)
		aadd(aCols,Array(nLenHeader+1))
		For ny := 1 to nLenHeader
			If Trim(aHeader[ny,2]) == "AFL_ITEM"
				aCols[1,ny] 	:= "01"
			ElseIf AllTrim(aHeader[ny,2]) $ "AFL_ALI_WT | AFL_REC_WT"
				If AllTrim(aHeader[ny,2]) == "AFL_ALI_WT"
					aCols[1,ny] := "AFL"
				ElseIf AllTrim(aHeader[ny,2]) == "AFL_REC_WT"
					aCols[1,ny] := 0
				EndIf
			Else
				aCols[1,ny] := CriaVar(aHeader[ny,2])
			EndIf
			aCols[1,nLenHeader+1] := .F.
		Next ny
	EndIf
Else

	// montagem do aHeader
	FillGetDados(nOpcao,"AFL",1,,,,,,,,{||.T.},.T.,aHeader)

	nPosPerc	:= aScan(aHeader,{|x|Alltrim(x[2])=="AFL_QUANT"})
	aHeaderAFL	:= aClone(aHeader)

	dbSelectArea("AFL")
	dbSetOrder(2)

	If nPosRat == 0
		nLenHeader := Len(aHeader)
		If MsSeek(xFilial()+cNumCP+cItemCP)

			Do While !Eof() .And. xFilial()+cNumCP+cItemCP==;
				AFL_FILIAL+AFL_NUMCP+AFL_ITEMCP

				If AFL->AFL_REVISA==PmsAF8Ver(AFL->AFL_PROJET)

					aADD(aCols,Array(Len(aHeader)+1))
					nLenCols := Len(aCols)

					For ny := 1 to nLenHeader
						If ( aHeader[ny,10] != "V")
							aCols[nLenCols,ny] := FieldGet(ColumnPos(aHeader[ny,2]))
						ElseIf AllTrim(aHeader[ny,2]) $ "AFL_ALI_WT | AFL_REC_WT"
							If AllTrim(aHeader[ny,2]) == "AFL_ALI_WT"
								aCols[nLenCols,ny] := "AFL"
							ElseIf AllTrim(aHeader[ny,2]) == "AFL_REC_WT"
								aCols[nLenCols,ny] := AFL->(Recno())
							EndIf
						Else
							aCols[nLenCols,ny] := CriaVar(aHeader[ny,2])
						EndIf
						aCols[nLenCols,nLenHeader+1] := .F.
					Next ny

				EndIf

				dbSkip()
			EndDo

		EndIf
		If Empty(aCols)
			// Faz a montagem de uma linha em branco no aCols.
			aadd(aCols,Array(nLenHeader+1))
			For ny := 1 to nLenHeader
				If Trim(aHeader[ny,2]) == "AFL_ITEM"
					aCols[1,ny] := "01"
				ElseIf AllTrim(aHeader[ny,2]) $ "AFL_ALI_WT | AFL_REC_WT"
					If AllTrim(aHeader[ny,2]) == "AFL_ALI_WT"
						aCols[1,ny] := "AFL"
					ElseIf AllTrim(aHeader[ny,2]) == "AFL_REC_WT"
						aCols[1,ny] := 0
					EndIf
				Else
					aCols[1,ny] := CriaVar(aHeader[ny,2])
				EndIf
				aCols[1,nLenHeader+1] := .F.
			Next ny
		EndIf
	Else
		aCols := aClone(aRatAFL[nPosRat,2])
	EndIf
EndIf

If nOpcao == 2
	nOpView := 3
EndIF
If lGetDados
	DEFINE FONT oBold NAME "Arial" SIZE 0, -13 BOLD
	DEFINE MSDIALOG oDlg FROM 88 ,22  TO 350,619 TITLE STR0019 Of oMainWnd PIXEL //"Gerenciamento de Projetos - CP"
		oGetDados := MSGetDados():New(23,3,112,296,IIF(nOpcao == 2,nOpView,nOpcao),'PMSAFLLOK','PMSAFLTOK','+AFL_ITEM',.T.,aAlter,,,100,'PMSAFLFOK')
		@ 16 ,3   TO 18 ,310 LABEL '' OF oDlg PIXEL
		@ 6 ,10   SAY STR0121 Of oDlg PIXEL SIZE 27 ,9 //'Num. CP'
		@ 5 ,35  SAY  cNumCP+"/"+cItemCP Of oDlg PIXEL SIZE 40,9 FONT oBold
		@ 6 ,190  SAY STR0002 Of oDlg PIXEL SIZE 31 ,9 //'Quantidade'
		@ 5 ,230  MSGET nQuantCP Picture PesqPict('SC3','C3_QUANT') When .F. PIXEL SIZE 50,9
		@ 118,249 BUTTON STR0027 SIZE 35 ,9   FONT oDlg:oFont ACTION {||If(oGetDados:TudoOk(),(lOk:=.T.,oDlg:End()),(lOk:=.F.))}  OF oDlg PIXEL  //'Confirma'
		@ 118,210 BUTTON STR0028 SIZE 35 ,9   FONT oDlg:oFont ACTION (oDlg:End())  OF oDlg PIXEL  //'Cancelar'
	ACTIVATE MSDIALOG oDlg
EndIf

nOpView := 0
If nOpcao <> 2 .And. lOk
	If nPosRat > 0
		aRatAFL[nPosRat,2]	:= aClone(aCols)
	Else
		aADD(aRatAFL,{aSavCols[nSavN,nPosItem],aClone(aCols)})
	EndIf

	If ExistBlock("PMSDLGCP")
		U_PMSDLGCP(aCols,aHeader,aSavCols,aSavHeader,nSavN)
	EndIf
EndIf

aCols	:= aClone(aSavCols)
aHeader	:= aClone(aSavHeader)
n		:= nSavN

Return
/*
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSAFLFOK³ Autor ³ Edson Maricate         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de validacao dos campos da GetDados de rateio do CP.   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSDLGCP,PMSXFUN                                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
*/
Function PMSAFLFOK()

Local cRevisa
Local cProjeto
Local lRet		:= .T.
Local cCampo	:= AllTrim(ReadVar())

Do Case
	Case cCampo == 'M->AFL_PROJET'
		lRet := PMSExistCPO("AF8") .And. PmsVldFase("AF8",M->AFL_PROJET,"53")
	Case cCampo == 'M->AFL_TAREFA'
		cProjeto := aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFL_PROJET"})]
		cRevisa  := aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFL_REVISA"})]
		lRet := ExistCpo("AF9",cProjeto+cRevisa+M->AFL_TAREFA,1)
EndCase

Return lRet
/*
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSAFLLOK³ Autor ³ Edson Maricate         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de validacao LinOk da GetDados de rateio do CP.        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSDLGCP,PMSXFUN                                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
*/
Function PMSAFLLOK()
Local lRet := .T.

// Verifica os campos obrigatorios do SX3.
If !aCols[n,Len(aCols[n])]
	lRet := PmsVldFase("AF8",aCols[n,aScan(aHeader,{|x| Substr(x[2],4,7) =="_PROJET" })],"53")
	If lRet
		lRet := MaCheckCols(aHeader,aCols,n)
	EndIf
EndIf

Return lRet
/*
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSAFLTOK³ Autor ³ Edson Maricate         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de validacao TudOk da GetDados de rateio do CP.        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSDLGCP,PMSXFUN                                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
*/
Function PMSAFLTOK()

Local nx
Local lRet			:= .T.
Local nTotQuant		:= 0
Local nPosProjet	:= aScan(aHeader,{|x|AllTrim(x[2])=="AFL_PROJET"})
Local nPosQuant		:= aScan(aHeader,{|x|AllTrim(x[2])=="AFL_QUANT"})
Local nSavN			:= n

If ExistBlock("PMSAFLRAT")
	lRet := ExecBlock("PMSAFLRAT", .F., .F.)
EndIf

// Verifica os campos obrigatorios do SX3.
If lRet
	For nx := 1 to Len(aCols)
		n	:= nx
		If !aCols[n,len(aCols[n])]
			If !Empty(aCols[n,nPosProjet])
				If !PMSAFLLOK()
					lRet := .F.
					Exit
				EndIf
				nTotQuant+=aCols[n,nPosQuant]
			EndIf
		EndIf
	Next

	If nTotQuant > nQtMaxCP
		Help("   ",1,"PMSQTCP")
		lRet := .F.
	EndIf
Endif

n := nSavN
Return lRet
/*
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsWriteCP³ Autor ³ Edson Maricate        ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Programa de gravacao de Contratos do Projeto  chamado pela    ³±±
±±³          ³rotina de gravacao de Contratos de Parceria de acordo com os  ³±±
±±³          ³eventos.                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpN1 : Evento - [1] - Inclusao de um CP                      ³±±
±±³          ³                 [2] - Estorno de um CP                       ³±±
±±³          ³                 [3] - Exclusao de um CP                      ³±±
±±³          ³ExpC2 : Alias da tabela de Contratos de Parceria              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MATA125                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
*/
Function PmsWriteCP(nEvento,cAliasSC3)

Local nx
Local nz
Local ny
Local aArea		:= GetArea()
Local aRecAFL	:= {}
Local aTempCols	:= {}

If Empty(aHeaderAFL)
	aHeaderAFL := {}
	// Montagem do aHeaderAFL
	dbSelectArea("SX3")
	dbSetOrder(1)
	MsSeek("AFL")
	While !EOF() .And. (x3_arquivo == "AFL")
		IF X3USO(x3_usado) .AND. cNivel >= x3_nivel
			AADD(aHeaderAFL,{ TRIM(x3titulo()), x3_campo, x3_picture,;
				x3_tamanho, x3_decimal, x3_valid,;
				x3_usado, x3_tipo, x3_arquivo,x3_context } )
		Endif
		dbSkip()
	End
EndIf

// Verifica o array de amarracao dos Contratos x Projetos
If aRatAFL<>Nil
	Do Case
		Case nEvento == 1
			nx	:= aScan(aRatAFL,{|x| x[1] == (cAliasSC3)->C3_ITEM})
			If nx == 0
				// Verifica se o item ja possui itens gravados.
				dbSelectArea("AFL")
				dbSetOrder(2)
				If MsSeek(xFilial()+(cAliasSC3)->C3_NUM+(cAliasSC3)->C3_ITEM)
					While !Eof() .And. xFilial()+(cAliasSC3)->C3_NUM+(cAliasSC3)->C3_ITEM==;
									AFL_FILIAL+AFL_NUMCP+AFL_ITEMCP
						If AFL->AFL_REVISA==PmsAF8Ver(AFL->AFL_PROJET)
							aADD(aTempCols,Array(Len(aHeaderAFL)+1))
							For ny := 1 to Len(aHeaderAFL)
								If Trim(aHeaderAFL[ny,2]) == "AFL_ITEM"
									aTempCols[Len(aTempCols),ny] :=  "01"
								ElseIf AllTrim(aHeaderAFL[ny,2]) $ "AFL_ALI_WT | AFL_REC_WT"
									If AllTrim(aHeaderAFL[ny,2]) == "AFL_ALI_WT"
											aTempCols[Len(aTempCols),ny] := "AFL"
									ElseIf AllTrim(aHeaderAFL[ny,2]) == "AFL_REC_WT"
										aTempCols[Len(aTempCols),ny] :=  0
									EndIf
								Elseif ( aHeaderAFL[ny,10] != "V")
									aTempCols[Len(aTempCols),ny] := FieldGet(ColumnPos(aHeaderAFL[ny,2]))
								Else
									aTempCols[Len(aTempCols),ny] := CriaVar(aHeaderAFL[ny,2])
								EndIf
								aTempCols[Len(aTempCols),Len(aHeaderAFL)+1] := .F.
							Next ny
						EndIf
						dbSkip()
					End
					aAdd(aRatAFL,{(cAliasSC3)->C3_ITEM,aClone(aTempCols)})
					nx := Len(aRatAFL)
				EndIf
			EndIf
			If nx > 0
				dbSelectArea("AFL")
				dbSetOrder(2)
				MsSeek(xFilial()+(cAliasSC3)->C3_NUM+(cAliasSC3)->C3_ITEM)
				// Carrega no array os registros ja existentes.
				While !Eof() .And. xFilial()+(cAliasSC3)->C3_NUM+(cAliasSC3)->C3_ITEM == ;
					AFL_FILIAL+AFL_NUMCP+AFL_ITEMCP
					If AFL->AFL_REVISA==PmsAF8Ver(AFL->AFL_PROJET)
						aAdd(aRecAFL,AFL->(RecNo()))
					EndIf
					dbSkip()
				End
				For nz := 1 to Len(aRatAFL[nx,2])
					If !aRatAFL[nx,2,nz,Len(aRatAFL[nx,2,nz])]
						dbSelectArea('AFL')
					 	If nz <= Len(aRecAFL)
					 		AFL->(dbGoto(aRecAFL[nz]))
					 		RecLock('AFL',.F.)
					 	Else
				 			RecLock('AFL',.T.)
					 	EndIf
						// Atualiza os dados contidos na GetDados
						For ny := 1 to Len(aHeaderAFL)
							If aHeaderAFL[ny,10] # "V"
								cVar := Trim(aHeaderAFL[ny,2])
								Replace &cVar. With aRatAFL[nx,2,nz,ny]
							Endif
						Next
						AFL->AFL_FILIAL	:= xFilial("AFL")
						AFL->AFL_NUMCP	:= (cAliasSC3)->C3_NUM
						AFL->AFL_ITEMCP	:= (cAliasSC3)->C3_ITEM
						AFL->AFL_COD   	:= (cAliasSC3)->C3_PRODUTO
						MsUnlock()
						PmsAvalAFL("AFL",1)
					Else
						If nz <= Len(aRecAFL)
							MsGoto(aRecAFL[nz])
							RecLock("AFL",.F.,.T.)
					        dbDelete()
						EndIf
					EndIf
				Next
				// Deleta os demais registros.
				If Len(aRecAFL) > Len(aRatAFL[nx,2])
					For nz := (Len(aRatAFL[nx,2])+1) to Len(aRecAFL)
						MsGoto(aRecAFL[nz])
						RecLock("AFL",.F.,.T.)
				        dbDelete()
				        msUnLock()
					Next nz
				EndIf
			EndIf
		Case nEvento == 2
			dbSelectArea("AFL")
			dbSetOrder(2)
			If MsSeek(xFilial()+(cAliasSC3)->C3_NUM+(cAliasSC3)->C3_ITEM)
				While !Eof() .And. xFilial()+(cAliasSC3)->C3_NUM+(cAliasSC3)->C3_ITEM==;
									AFL_FILIAL+AFL_NUMCP+AFL_ITEMCP
					If AFL->AFL_REVISA==PmsAF8Ver(AFL->AFL_PROJET)
						PmsAvalAFL("AFL",2)
					EndIf
		   			dbSelectArea("AFL")
					dbSkip()
				End
			EndIf
		Case nEvento == 3
			dbSelectArea("AFL")
			dbSetOrder(2)
			If MsSeek(xFilial()+(cAliasSC3)->C3_NUM+(cAliasSC3)->C3_ITEM)
				While !Eof() .And. xFilial()+(cAliasSC3)->C3_NUM+(cAliasSC3)->C3_ITEM==;
					AFL_FILIAL+AFL_NUMCP+AFL_ITEMCP
					If AFL->AFL_REVISA==PmsAF8Ver(AFL->AFL_PROJET)
						PmsAvalAFL("AFL",3)
					EndIf
					dbSkip()
				End
			EndIf
	EndCase
EndIf

RestArea(aArea)
Return

/*/{Protheus.doc} PmsAtuEmp

Funcao de gravacao dos empenhos de Projetos.

@author Edson Maricate
@since 09-02-2001
@version 1.0
@param cProjeto,	character,	Codigo do Projeto
@param cTarefa,	character,	Codigo da Tarefa
@param cProduto,	character,	Codigo do Produto 
@param cLocal,		character,	Local Almoxarifado
@param nQuant,		numérico,	Quantidade Empenhada 
@param cSinal,		character,	Operacao ( "-" ou "+" )
@param lAtuAFJ,	logico,	Atualiza o empenho
@param nQuant2,	numérico,	Quantidade Empenhada na 2a unidade de medida   
@param cTRT,		character,	Sequencial do empenho
@param dDataPrf,	data,		Data de empenho
@param cProcesso,	character,	Processo que gerou o empenho
@param cPlanej,	character,	Codigo do planejamento
@param lPrevisto,	Logico,	Empenho previsto ou Firme(Efetivado)
@param nIDSolum,	numérico,	Id do RM TOP (não é mais utilizado)
@return nulo
/*/
Function PmsAtuEmp(cProjeto,cTarefa,cProduto,cLocal,nQuant,cSinal,lAtuAFJ,nQuant2,cTRT,dDataPrf,cProcesso,cPlanej,lPrevisto,nIDSolum)

Local aArea		:= GetArea()
Local aAreaSB2	:= SB2->(GetArea())
Local aAreaAFJ	:= AFJ->(GetArea())
Local lSB2Atu		:= .T. // Por padrao, sempre atualiza a SB2
Local lPMSALTARM	:= Existblock("PMSALTARM")
Local cFilAFJ		:= xFilial("AFJ")

DEFAULT lAtuAFJ		:= .T.
DEFAULT nQuant2		:= 0
DEFAULT cPlanej		:= ""
DEFAULT lPrevisto	:= .F.

cProjeto := PadR(AllTrim(cProjeto),TamSX3("AFJ_PROJET")[1])
cTarefa  := PadR(AllTrim(cTarefa),TamSX3("AFJ_TAREFA")[1])

If lPMSALTARM
	cLocal := ExecBlock("PMSALTARM",.F.,.F.,{cLocal,cProjeto,cTarefa,nQuant,cProduto,cSinal})
Endif

If !Empty(cTRT)
	If lAtuAFJ

		lSB2Atu := .F. // deve atualizar a SB2, somente na AFJ foi incluido/alterado ou excludio

		If cSinal == "+"
			If !Empty(cTRT)

				dbSelectArea("AFJ")
				dbSetOrder(3)
  				While MsSeek(cFilAFJ+cProjeto+cTarefa+cTRT)
					cTRT := PmsPrxEmp(cProjeto,,cTarefa)
				EndDo
				RecLock("AFJ",.T.)
				AFJ->AFJ_FILIAL := cFilAFJ
				AFJ->AFJ_PROJET := cProjeto
				AFJ->AFJ_TAREFA := cTarefa
				AFJ->AFJ_COD    := cProduto
				AFJ->AFJ_LOCAL  := cLocal
				If lPrevisto
					AFJ->AFJ_QEMPPR := nQuant
					AFJ->AFJ_QEMPP2 := nQuant2
				Else
					AFJ->AFJ_QEMP   := nQuant
					AFJ->AFJ_QEMP2  := nQuant2
				EndIf
				AFJ->AFJ_QATU   := PMSAjAFJ(cProjeto,cTarefa,cProduto,cLocal,cTRT)
				AFJ->AFJ_TRT    := cTRT
				AFJ->AFJ_DATA   := dDataPrf
				AFJ->AFJ_PLANEJ := cPlanej
				AFJ->AFJ_ROTGER := iIf(Empty(cProcesso) ,iIf(Empty(cPlanej),"5","4") ,cProcesso)
				MsUnLock()
				
				lSB2Atu := .T. // Deve atualizar a SB2, pois foi gerado um AFJ
			EndIf
		Else
			dbSelectArea("AFJ")
			dbSetOrder(3)
			If MsSeek(xFilial()+cProjeto+cTarefa+cTRT)
				RecLock("AFJ",.F.,.T.)
				If (lPrevisto .And. AFJ->AFJ_QEMPPR == nQuant) .Or. ;
					(!lPrevisto .And. AFJ->AFJ_QEMP	== nQuant)

					dbDelete()

				Else
					If lPrevisto
						AFJ->AFJ_QEMPPR -= nQuant
						AFJ->AFJ_QEMPP2 -= nQuant2
					Else
						AFJ->AFJ_QEMP -= nQuant
						AFJ->AFJ_QEMP2 -= nQuant2
					EndIf
				Endif
				MsUnlock()
				lSB2Atu := .T. // Deve atualizar a SB2, pois foi excluido ou atualizado um AFJ
			EndIf
		EndIf
	EndIf
		
	// Faz a gravacao na SB2, se existia empenho (incluido/alterado/excluido) 
	If lSB2Atu .AND. !Empty(cTRT) .AND. (cSinal=="+" .Or. cSinal=="-")
	
		// Faz a gravacao do arquivo de Empenhos SB2
		dbSelectArea("SB2")
		dbSetOrder(1)
		If DbSeek(xFilial()+cProduto+cLocal)
			RecLock("SB2",.F.)
		Else
			CriaSB2(cProduto,cLocal)
			DbSeek(xFilial()+cProduto+cLocal)
			RecLock("SB2",.F.)
		EndIf
		If lPrevisto
			If cSinal == "-"
				SB2->B2_QEMPPRE -= nQuant
				SB2->B2_QEPRE2 -= nQuant2
			Else
				SB2->B2_QEMPPRE += nQuant
				SB2->B2_QEPRE2 += nQuant2
			EndIf
		Else
			If cSinal == "-"
				SB2->B2_QEMPPRJ -= nQuant
				SB2->B2_QEMPPR2 -= nQuant2
			Else
				SB2->B2_QEMPPRJ += nQuant
				SB2->B2_QEMPPR2 += nQuant2
			EndIf
		EndIf
		MsUnlock()
	EndIf
	
EndIf

RestArea(aAreaAFJ)
RestArea(aAreaSB2)
RestArea(aArea)
Return

/*
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsBxEmp³ Autor ³ Edson Maricate          ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de baixa dos empenhos de Projettos.                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1 : Codigo do Projeto                                     ³±±
±±³          ³ExpC2 : Codigo da Tarefa                                      ³±±
±±³          ³ExpC3 : Codigo do Produto                                     ³±±
±±³          ³ExpC4 : Local Almoxarifado                                    ³±±
±±³          ³ExpC5 : Quantidade Empenhada                                  ³±±
±±³          ³ExpC6 : Operacao ( "-" ou "+" )                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
*/
Function PmsBxEmp(cProjeto,cTarefa,cProduto,cLocal,nQuant,cSinal,nQuant2,cTRT)

Local aArea		:= GetArea()
Local aAreaSB2	:= SB2->(GetArea())
Local aAreaAFJ	:= AFJ->(GetArea())

DEFAULT nQuant2	:= 0

If !Empty(cTRT)
	dbSelectArea("AFJ")
	dbSetOrder(3)
	If MsSeek(xFilial("AFJ")+cProjeto+cTarefa+cTRT)
		RecLock("AFJ",.F.)
		If cSinal == "-"
			nQuant := If(nQuant>AFJ->AFJ_QEMP-(AFJ->AFJ_QATU+Iif(AFJ->(ColumnPos("AFJ_EMPEST")) > 0,AFJ->AFJ_EMPEST,0)),AFJ->AFJ_QEMP-(AFJ->AFJ_QATU+Iif(AFJ->(ColumnPos("AFJ_EMPEST")) > 0,AFJ->AFJ_EMPEST,0)),nQuant)
			nQuant2:= If(nQuant2>AFJ->AFJ_QEMP2-(AFJ->AFJ_QATU2+Iif(AFJ->(ColumnPos("AFJ_EMPES2")) > 0,AFJ->AFJ_EMPEST,0)),AFJ->AFJ_QEMP2-(AFJ->AFJ_QATU2+Iif(AFJ->(ColumnPos("AFJ_EMPEST")) > 0,AFJ->AFJ_EMPES2,0)),nQuant2)
			AFJ->AFJ_QATU  += nQuant
			AFJ->AFJ_QATU2 += nQuant2
		Else
			nQuant := iIf(nQuant>AFJ->AFJ_QATU,AFJ->AFJ_QATU,nQuant)
			nQuant2 := iIf(nQuant2>AFJ->AFJ_QATU2,AFJ->AFJ_QATU2,nQuant2)
			AFJ->AFJ_QATU -= nQuant
			AFJ->AFJ_QATU2 -= nQuant2
			nQuant	:= Min(nQuant,AFJ->AFJ_QEMP)
			nQuant2 := Min(nQuant2,AFJ->AFJ_QEMP2)
		EndIf
		MsUnlock()
		// Faz a gravacao do arquivo de Empenhos AFJ
		dbSelectArea("SB2")
		dbSetOrder(1)
		If MsSeek(xFilial("SB2")+cProduto+cLocal)
			RecLock("SB2",.F.)
		Else
			CriaSB2(cProduto,cLocal)
			MsSeek(xFilial("SB2")+cProduto+cLocal)
			RecLock("SB2",.F.)
		EndIf
		If cSinal == "-"
			SB2->B2_QEMPPRJ -= nQuant
			SB2->B2_QEMPPR2 -= nQuant2
		Else
			SB2->B2_QEMPPRJ += nQuant
			SB2->B2_QEMPPR2 += nQuant2
		EndIf
		MsUnlock()
	EndIf
EndIf

RestArea(aAreaAFJ)
RestArea(aAreaSB2)
RestArea(aArea)
Return
/*

±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsDlgOP³ Autor ³ Edson Maricate          ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Esta funcao cria uma janela para configuracao e utilizacao    ³±±
±±³          ³de Ordens de Producao no Gerenciamento de Projetos            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MATA650,SIGAPMS                                               ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
*/
Function PmsDlgOP(nOpcao,cNumOP,cItemOp,cSeqOp)

Local lOk
Local oGetDados
Local oDlg
Local nPosPerc		:= 0
Local nQuantOP		:= If(nOpcao = 5, SC2->C2_QUANT, M->C2_QUANT)
Local nPosRat		:= aScan(aRatAFM,{|x| x[1] == cItemOp})
Local lGetDados		:= .T.
Local aArea			:= GetArea()
Local nY            := 0
Local nLenHeader 	:= 0
Local nLenCols   	:= 0

Private aRotina := PmsCreateMenu()

// Salva a Interface
SaveInter()
aCols		:= {}
aHeader		:= {}
nQtMaxOP	:= nQuantOP

If nOpcao == 3
	// Montagem do aHeader
	FillGetDados(nOpcao,"AFM",1,,,,,,,,{||.T.},.T.,aHeader)
	nPosPerc	:= aScan(aHeader,{|x|Alltrim(x[2])=="AFM_QUANT"})

	aHeaderAFM	:= aClone(aHeader)
	If nPosRat > 0
		aCols	:= aClone(aRatAFM[nPosRat,2])
	Else
		// Faz a montagem de uma linha em branco no aCols.
		nLenHeader := Len(aHeader)
		aadd(aCols,Array(nLenHeader+1))
		For ny := 1 to nLenHeader
			If Trim(aHeader[ny,2]) == "AFM_ITEM"
				aCols[1,ny] 	:= "01"
			ElseIf AllTrim(aHeader[ny,2]) $ "AFM_ALI_WT | AFM_REC_WT"
				If AllTrim(aHeader[ny,2]) == "AFM_ALI_WT"
					aCols[1,ny] := "AFM"
				ElseIf AllTrim(aHeader[ny,2]) == "AFM_REC_WT"
					aCols[1,ny] := 0
				EndIf
			Else
				aCols[1,ny] := CriaVar(aHeader[ny,2])
			EndIf
			aCols[1,nLenHeader+1] := .F.
		Next ny
	EndIf
Else
	// Montagem do aHeader
	FillGetDados(nOpcao,"AFM",1,,,,,,,,{||.T.},.T.,aHeader)
	nPosPerc	:= aScan(aHeader,{|x|Alltrim(x[2])=="AFM_QUANT"})

	aHeaderAFM := aClone(aHeader)
	dbSelectArea("AFM")
	dbSetOrder(2)
	If nPosRat == 0
		nLenHeader := Len(aHeader)
		If MsSeek(xFilial()+cNumOP+cItemOP+cSeqOp)
			While !Eof() .And. xFilial()+cNumOP+cItemOP+cSeqOp==;
				AFM_FILIAL+AFM_NUMOP+AFM_ITEMOP+AFM_SEQOP
				If AFM->AFM_REVISA == PmsAF8Ver(AFM->AFM_PROJET)
					aADD(aCols,Array(nLenHeader+1))
					nLenCols := Len(aCols)
					For ny := 1 to nLenHeader
						If ( aHeader[ny,10] != "V")
							aCols[nLenCols,ny] := FieldGet(ColumnPos(aHeader[ny,2]))
						ElseIf AllTrim(aHeader[ny,2]) $ "AFM_ALI_WT | AFM_REC_WT"
							If AllTrim(aHeader[ny,2]) == "AFM_ALI_WT"
								aCols[1,ny] := "AFM"
							ElseIf AllTrim(aHeader[ny,2]) == "AFM_REC_WT"
								aCols[1,ny] := AFM->(Recno())
							EndIf
						Else
							aCols[nLenCols,ny] := CriaVar(aHeader[ny,2])
						EndIf
						aCols[nLenCols,nLenHeader+1] := .F.
					Next ny
				EndIf
				dbSkip()
			End
		EndIf
		If Empty(aCols)
			// Faz a montagem de uma linha em branco no aCols.
			aadd(aCols,Array(nLenHeader+1))
			For ny := 1 to nLenHeader
				If Trim(aHeader[ny,2]) == "AFM_ITEM"
					aCols[1,ny] := "01"
				ElseIf AllTrim(aHeader[ny,2]) $ "AFM_ALI_WT | AFM_REC_WT"
					If AllTrim(aHeader[ny,2]) == "AFM_ALI_WT"
						aCols[1,ny] := "AFM"
					ElseIf AllTrim(aHeader[ny,2]) == "AFM_REC_WT"
						aCols[1,ny] := 0
					EndIf
				Else
					aCols[1,ny] := CriaVar(aHeader[ny,2])
				EndIf
				aCols[1,nLenHeader+1] := .F.
			Next ny
		EndIf
	Else
		aCols := aClone(aRatAFM[nPosRat,2])
	EndIf
EndIf

If lGetDados
	DEFINE FONT oBold NAME "Arial" SIZE 0, -13 BOLD
	DEFINE MSDIALOG oDlg FROM 88 ,22  TO 350,619 TITLE STR0020 Of oMainWnd PIXEL //"Gerenciamento de Projetos - OP"
		oGetDados := MSGetDados():New(23,3,112,296,nOpcao,'PMSAFMLOK','PMSAFMTOK','+AFM_ITEM',.T.,,,,100,'PMSAFMFOK')
		@ 16 ,3   TO 18 ,310 LABEL '' OF oDlg PIXEL
		@ 6 ,10   SAY STR0122 Of oDlg PIXEL SIZE 52 ,9 //'Num. OP'
		@ 5 ,35  SAY  cNumOP+"/"+cItemOP Of oDlg PIXEL SIZE 40,9 FONT oBold
		@ 6 ,190  SAY STR0002 Of oDlg PIXEL SIZE 31 ,9 //'Quantidade'
		@ 5 ,230  MSGET nQuantOP Picture PesqPict('SC2','C2_QUANT') When .F. PIXEL SIZE 50,9
		@ 118,249 BUTTON STR0027 SIZE 35 ,9   FONT oDlg:oFont ACTION {||If(oGetDados:TudoOk(),(lOk:=.T.,oDlg:End()),(lOk:=.F.))}  OF oDlg PIXEL  //'Confirma'
		@ 118,210 BUTTON STR0028 SIZE 35 ,9   FONT oDlg:oFont ACTION (oDlg:End())  OF oDlg PIXEL  //'Cancelar'
	ACTIVATE MSDIALOG oDlg
EndIf

If nOpcao <> 2 .And. lOk
	If nPosRat > 0
		aRatAFM[nPosRat,2]	:= aClone(aCols)
	Else
		aADD(aRatAFM,{cItemOp,aClone(aCols)})
	EndIf
EndIf

// Restaura a Interface
RestInter()
RestArea(aArea)

Return
/*
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSAFMFOK³ Autor ³ Edson Maricate         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de validacao dos campos da GetDados de rateio do OP.   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSDLGOP,PMSXFUN                                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
*/
Function PMSAFMFOK()

Local cTRT		:= aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFM_TRT"})]
Local cProjeto	:= aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFM_PROJET"})]
Local cRevisa	:= aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFM_REVISA"})]
Local cTarefa	:= aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFM_TAREFA"})]
Local nQuant	:= aScan(aHeader,{|x|Alltrim(x[2])=="AFM_QUANT"})
Local nPosTrt	:= aScan(aHeader,{|x|AllTrim(x[2])=="AFM_TRT"})
Local nPosPlanj	:= aScan(aHeader,{|x|AllTrim(x[2])=="AFM_PLANEJ"})
Local lRet		:= .T.
Local cCampo	:= AllTrim(ReadVar())
Local lGerEmp   := .F.
Local nTotEmp   := 0
Local nAFMQUANT := Iif(Type("M->AFM_QUANT")=="U", aCols[n,nQuant], M->AFM_QUANT)

If (nPosPlanj > 0) .and.  (nPosTrt > 0) .and. !Empty(aCols[n,nPosPlanj]) .and. !Empty(aCols[n,nPosTrt])
	If nAFMQUANT > ( nTotEmp := PmsGetEmp(aCols[n],aHeader,2, "AFM") )
		MSGAlert(STR0411 + Alltrim(STR(nTotEmp)))
		lRet := .F.
	EndIf
EndIf

If lRet
	Do Case
		Case cCampo == 'M->AFM_PROJET'
			cProjeto:= M->AFM_PROJET
			lRet := PMSExistCPO("AF8") .And. PmsVldFase("AF8",M->AFM_PROJET,"55")
		Case cCampo == 'M->AFM_TAREFA'
			cTarefa	:= M->AFM_TAREFA
			lRet := ExistCpo("AF9",cProjeto+cRevisa+M->AFM_TAREFA,1)
	EndCase
EndIf

If !Empty(cProjeto) .And. Empty(cTRT) .And. !Empty(cTarefa) .And. lRet .And. aScan(aHeader,{|x|Alltrim(x[2])=="AFM_TRT"}) > 0 .and. lRet
  	lGerEmp := GetNewPar("MV_PMSOPGE",.F.)
	If lGerEmp  // gera empenho direto sem perguntar nada
		aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFM_TRT"})]	 := PmsPrxEmp(cProjeto,cRevisa,cTarefa)
	ElseIf GetMV("MV_PMSBXEM") .And. Aviso(STR0254,STR0255,{STR0179, STR0180},2)==1 //"Gerenciamento de Projetos"###"Voce deseja gerar um empenho deste item ao projeto ?"###"Sim"###"Nao"
		aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFM_TRT"})]	 := PmsPrxEmp(cProjeto,cRevisa,cTarefa)
	Else
		aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFM_TRT"})]	 :=	SPACE(LEN(AFM->AFM_TRT))
	EndIf
EndIf

Return lRet
/*
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSAFMLOK³ Autor ³ Edson Maricate         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de validacao LinOk da GetDados de rateio do OP.        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSDLGOP,PMSXFUN                                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
*/
Function PMSAFMLOK()
Local lRet := .T.

// Verifica os campos obrigatorios do SX3.
If !aCols[n,Len(aCols[n])]
	lRet := PmsVldFase("AF8",aCols[n,aScan(aHeader,{|x| Substr(x[2],4,7) =="_PROJET" })],"55")
	If lRet
		lRet := MaCheckCols(aHeader,aCols,n)
	EndIf
EndIf
Return lRet
/*
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSAFMTOK³ Autor ³ Edson Maricate         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de validacao TudOk da GetDados de rateio do OP.        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSDLGOP,PMSXFUN                                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
*/
Function PMSAFMTOK()

Local nx			:= 0
Local nPosReg		:= 0
Local nTotQuant		:= 0
Local lRet			:= .T.
Local nPosProjet	:= aScan(aHeader,{|x|AllTrim(x[2])=="AFM_PROJET"})
Local nPosTarefa	:= aScan(aHeader,{|x|AllTrim(x[2])=="AFM_TAREFA"})
Local nPosTRT		:= aScan(aHeader,{|x|AllTrim(x[2])=="AFM_TRT"})
Local nPosQuant		:= aScan(aHeader,{|x|AllTrim(x[2])=="AFM_QUANT"})
Local nSavN			:= n

// Verifica os campos obrigatorios do SX3.
For nx := 1 to Len(aCols)
	n	:= nx
	If !aCols[n,len(aCols[n])]
		nPosReg := aScan(aCols, {|x| x[nPosProjet]==aCols[nx,nPosProjet] .and. x[nPosTarefa]==aCols[nx,nPosTarefa] .and. x[nPosTRT]==aCols[nx,nPosTRT] .and. !x[Len(aHeader)+1]} )
		If (nPosReg > 0) .and. (nPosReg <> nx)
			MsgAlert(STR0410) //"Não é permitido existir 2 itens de amarração com a mesma chave (Projeto+Tarefa+Seq.Empenho). Verificar os itens."
			lRet := .F.
			Exit
		EndIf

		If !Empty(aCols[n,nPosProjet])
			If !PMSAFMLOK()
				lRet := .F.
				Exit
			EndIf
			nTotQuant+=aCols[n,nPosQuant]
		EndIf
	EndIf
Next

If nTotQuant > nQtMaxOP
	Help("   ",1,"PMSQTOP")
	lRet := .F.
EndIf
n := nSavN
Return lRet
/*
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsWriteOP³ Autor ³ Edson Maricate        ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Programa de gravacao de Contratos do Projeto  chamado pela    ³±±
±±³          ³rotina de gravacao de Contratos de Parceria de acordo com os  ³±±
±±³          ³eventos.                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpN1 : Evento - [1] - Inclusao de um OP                      ³±±
±±³          ³                 [2] - Estorno de um OP                       ³±±
±±³          ³                 [3] - Exclusao de um OP                      ³±±
±±³          ³ExpC2 : Alias da tabela de Contratos de Parceria              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MATA125                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
*/
Function PmsWriteOP(nEvento,cAliasSC2)

Local nx
Local nz
Local ny
Local aArea		:= GetArea()
Local aRecAFM	:= {}
Local aTempCols	:= {}
Local nPosPln 	:= 0
Local lMantem := .F.

If Empty(aHeaderAFM)
	aHeaderAFM := {}
	// Montagem do aHeaderAFM
	dbSelectArea("SX3")
	dbSetOrder(1)
	MsSeek("AFM")
	While !EOF() .And. (x3_arquivo == "AFM")
		IF X3USO(x3_usado) .AND. cNivel >= x3_nivel
			AADD(aHeaderAFM,{ TRIM(x3titulo()), x3_campo, x3_picture,;
				x3_tamanho, x3_decimal, x3_valid,;
				x3_usado, x3_tipo, x3_arquivo,x3_context } )
		Endif
		dbSkip()
	End
EndIf

// Verifica o array de amarracao dos Contratos x Projetos
If aRatAFM<>Nil
	Do Case
		Case nEvento == 1
			nx	:= aScan(aRatAFM,{|x| x[1] == (cAliasSC2)->C2_ITEM})
			If nx == 0
				// Verifica se o item ja possui itens gravados.
				dbSelectArea("AFM")
				dbSetOrder(2)
				If MsSeek(xFilial()+(cAliasSC2)->C2_NUM+(cAliasSC2)->C2_ITEM+(cAliasSC2)->C2_SEQUEN)
					While !Eof() .And. xFilial()+(cAliasSC2)->C2_NUM+(cAliasSC2)->C2_ITEM+(cAliasSC2)->C2_SEQUEN==;
										AFM_FILIAL+AFM_NUMOP+AFM_ITEMOP+AFM->AFM_SEQOP
						If AFM->AFM_REVISA == PmsAF8Ver(AFM->AFM_PROJET)
							aADD(aTempCols,Array(Len(aHeaderAFM)+1))
							For ny := 1 to Len(aHeaderAFM)
								If ( aHeaderAFM[ny,10] != "V")
									aTempCols[Len(aTempCols),ny] := FieldGet(ColumnPos(aHeaderAFM[ny,2]))
								Else
									If !(aHeaderAFM[ny,2] $ "AFM_REC_WT|AFM_ALI_WT")
										aTempCols[Len(aTempCols),ny] := CriaVar(aHeaderAFM[ny,2])
									Endif
								EndIf
								aTempCols[Len(aTempCols),Len(aHeaderAFM)+1] := .F.
							Next ny
						EndIf
						dbSkip()
					End
					aAdd(aRatAFM,{(cAliasSC2)->C2_ITEM,aClone(aTempCols)})
					nx := Len(aRatAFM)
				EndIf
			EndIf
			If nx > 0
				dbSelectArea("AFM")
				dbSetOrder(2)
				MsSeek(xFilial()+(cAliasSC2)->C2_NUM+(cAliasSC2)->C2_ITEM+(cAliasSC2)->C2_SEQUEN)
				// Carrega no array os registros ja existentes.
				While !Eof() .And. xFilial()+(cAliasSC2)->C2_NUM+(cAliasSC2)->C2_ITEM+(cAliasSC2)->C2_SEQUEN== ;
					AFM_FILIAL+AFM_NUMOP+AFM_ITEMOP+AFM->AFM_SEQOP
					If AFM->AFM_REVISA == PmsAF8Ver(AFM->AFM_PROJET)
						aAdd(aRecAFM,AFM->(RecNo()))
					EndIf
					dbSkip()
				End
				For nz := 1 to Len(aRatAFM[nx,2])
					If !aRatAFM[nx,2,nz,Len(aRatAFM[nx,2,nz])]
						dbSelectArea('AFM')
					 	If nz <= Len(aRecAFM)
					 		AFM->(dbGoto(aRecAFM[nz]))
					 		RecLock('AFM',.F.)
					 	Else
				 			RecLock('AFM',.T.)
					 	EndIf
						// Atualiza os dados contidos na GetDados
						For ny := 1 to Len(aHeaderAFM)
							If aHeaderAFM[ny,10] # "V"
								cVar := Trim(aHeaderAFM[ny,2])
								Replace &cVar. With aRatAFM[nx,2,nz,ny]
							Endif
						Next
						AFM->AFM_FILIAL	:= xFilial("AFM")
						AFM->AFM_NUMOP	:= (cAliasSC2)->C2_NUM
						AFM->AFM_ITEMOP	:= (cAliasSC2)->C2_ITEM
						AFM->AFM_SEQOP	:= (cAliasSC2)->C2_SEQUEN
						AFM->AFM_COD  	:= (cAliasSC2)->C2_PRODUTO
						MsUnlock()
						If ((nPosPln := aScan(aHeaderAFM,{|x| alltrim(x[2])=="AFM_PLANEJ"})) > 0) .AND. !EMPTY(aRatAFM[nx,2,nz,nPosPln])
							lMantem := PmsGetEmp(aRatAFM[nx,2,nz],aHeaderAFM, 1, "AFM")
							If !lMantem
								PmsAvalAFM("AFM",1,aRatAFM[nx,2,nz,nPosPln])
							EndIf
						ELSE
							PmsAvalAFM("AFM",1)
						EndIf

					Else
						If nz <= Len(aRecAFM)
							MsGoto(aRecAFM[nz])
							RecLock("AFM",.F.,.T.)
					        dbDelete()
						EndIf
					EndIf
				Next
				// Deleta os demais registros.
				If Len(aRecAFM) > Len(aRatAFM[nx,2])
					For nz := (Len(aRatAFM[nx,2])+1) to Len(aRecAFM)
						MsGoto(aRecAFM[nz])
						RecLock("AFM",.F.,.T.)
				        dbDelete()
				        msUnLock()
					Next nz
				EndIf
			EndIf
		Case nEvento == 2
			dbSelectArea("AFM")
			dbSetOrder(2)
			If MsSeek(xFilial()+(cAliasSC2)->C2_NUM+(cAliasSC2)->C2_ITEM+(cAliasSC2)->C2_SEQUEN)
				While !Eof() .And. xFilial()+(cAliasSC2)->C2_NUM+(cAliasSC2)->C2_ITEM+(cAliasSC2)->C2_SEQUEN==;
									AFM_FILIAL+AFM_NUMOP+AFM_ITEMOP+AFM->AFM_SEQOP
					If AFM->AFM_REVISA == PmsAF8Ver(AFM->AFM_PROJET)
						PmsAvalAFM("AFM",2)
					EndIf
			   		dbSelectArea("AFM")
					dbSkip()
				End
			EndIf
		Case nEvento == 3
			dbSelectArea("AFM")
			dbSetOrder(2)
			If MsSeek(xFilial()+(cAliasSC2)->C2_NUM+(cAliasSC2)->C2_ITEM+(cAliasSC2)->C2_SEQUEN)
				While !Eof() .And. xFilial()+(cAliasSC2)->C2_NUM+(cAliasSC2)->C2_ITEM+(cAliasSC2)->C2_SEQUEN==;
									AFM_FILIAL+AFM_NUMOP+AFM_ITEMOP+AFM->AFM_SEQOP
					If AFM->AFM_REVISA == PmsAF8Ver(AFM->AFM_PROJET)
						PmsAvalAFM("AFM",3)
					EndIf
					dbSkip()
				End
			EndIf
	EndCase
EndIf

RestArea(aArea)
Return

/*/
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ValidEdt³ Autor ³ Michel Dantas           ³ Data ³ 09-06-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Valida uma EDT para 0 ou 100 %                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³SIGAPMS                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
*/
Function ValidEdt(cVarMem,lExclui)
Local aArea 		:= GetArea()
Local aAreaAF9	:= AF9->(GetArea())
Local aAreaAFD	:= {}
Local aAreaAF8	:= {}
Local cAlias 		:= ""
Local cChave 		:= ""
Local lRet 		:= .T.
Local lAF9_FNC	:= .T.
Local lTrava 		:= GetNewPar("MV_PMSBQCF", .F.)
Local nQuant 		:= 0

DEFAULT cVarMem := ReadVar()
DEFAULT lExclui := .F.

cAlias := Subs(cVarMem, 1, AT( "->",cVarMem)-1)
lRet := Positivo(&cVarMem)

cChave := Iif( cAlias == "M" , ;
				M->AFF_PROJET+M->AFF_REVISA+M->AFF_TAREFA,;
			   	(cAlias)->AFF_PROJET+(cAlias)->AFF_REVISA+(cAlias)->AFF_TAREFA )

dbSelectArea("AF9")
dbSetOrder(1)
If AF9->(DbSeek(xFilial("AF9")+cChave))
	//Se a tarefa que foi gerada pelo modulo QNC estiver encerrada, não deixa reabrir
	If lAF9_FNC .AND. !Empty(AF9->AF9_FNC) .AND. !Empty(AF9->AF9_DTATUF)
		Help(" ",1,STR0430,,STR0431,1,0) //"Integração SIGAQNC" ##"Esta tarefa se encontra encerrada, não podendo haver atualização da confirmação. Pois a tarefa está integrado ao modulo SIGAQNC."
		lRet := .F.

	Else
		If lRet .and. !INCLUI .and. lTrava
			nQuant := (IIF(cAlias == "M" , M->AFF_PERC, (cAlias)->AFF_PERC)  / 100)
			If (nQuant  <> AFF->AFF_QUANT .AND. ALTERA) .OR. lExclui
				DbSelectArea("AF8")
		       aAreaAF8 := AF8->(GetArea())
		 		DbSetOrder(1)
		 		If dbSeek(xFilial()+AF9->AF9_PROJET)
		 			If AF8->AF8_PAR002 == "2"
						DbSelectArea("AFD")
						aAreaAFD := AFD->(GetArea())
				 		DbSetOrder(2)
						//Se for predecessora de alguma tarefa, não deixa reabrir
						If AFD->(DbSeek(xFilial("AFD")+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA))
							Help(" ",1,"BLQ_CONFIR",,) // "Esta confirmação não pode ser editada, pois é predecessora de outra tarefa. O Projeto está configura com controle de rejeição por Tarefa. "
							lRet := .F.
						Endif
						RestArea(aAreaAFD)
					EndIf
				EndIf
				RestArea(aAreaAF8)
			EndIf
		Endif
	EndIf
Else
	Help(" ",1,"VALIDEDT",,STR0432,1,0) //"Não foi encontrada a tarefa referente a esta confirmação."
	lRet := .F.
EndIf


If lRet

	If Subs(cVarMem, AT( "->",cVarMem)+2) = "AFF_PERC"
		If &(cVarMem) > 100.00
			lRet := .F.
			Help(" ",1,"PERC_INV")
		EndIf
	ElseIf Subs(cVarMem, AT( "->",cVarMem)+2) = "AFF_QUANT"
		dbSelectArea("AF9")
		dbSetOrder(1)
		If !Empty(If(cAlias == "M" , M->AFF_TAREFA,(cAlias)->AFF_TAREFA))
			If dbSeek(xFilial("AF9")+cChave)
				If &(cVarMem) > AF9->AF9_QUANT
					lRet := .F.
					Help(" ",1,"QTDE_INV")
				EndIf
			Endif
		EndIf
	EndIf

EndIf

RestArea(aAreaAF9)
RestArea(aArea)
Return lRet
/*
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsWriteRQ³ Autor ³ Edson Maricate        ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Programa de gravacao de apontamentos chamado pela rotina de   ³±±
±±³          ³gravacao de Movimentos Internos.                              ³±±
±±³          ³Efetua a gravacao somente se nao for um apontamento de        ³±±
±±³          ³recursos.                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpN1 : Evento - [1] - Inclusao de uma requisicao             ³±±
±±³          ³                 [2] - Estorno de uma requisicao              ³±±
±±³          ³ExpC2 : Alias da tabela de Movimentacao Interna               ³±±
±±³          ³ExpA3 : Array contendo os Custos da Movimentacao              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MATA240                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
*/
Function PmsWriteRQ(nEvento,cAliasSD3,aCusto)

Local aArea		:= {}
Local aAreaSD3	:= {}
Local aAreaAF8	:= {}
Local aAreaAFU	:= {}
Local cChvAFI   := ""

If !Empty((cAliasSD3)->D3_PROJPMS) .And. !Empty((cAliasSD3)->D3_TASKPMS)

	aArea		:= GetArea()
	aAreaSD3	:= SD3->(GetArea())
	aAreaAF8	:= AF8->(GetArea())
	aAreaAFU	:= AFU->(GetArea())

	cChvAFI   := xFilial("AFI")+(cAliasSD3)->D3_COD+(cAliasSD3)->D3_LOCAL+DTOS((cAliasSD3)->D3_EMISSAO)+(cAliasSD3)->D3_NUMSEQ

    AF8->(dbSetOrder(1))
    AF8->(MsSeek(xFilial()+(cAliasSD3)->D3_PROJPMS))

	Do Case
		Case nEvento == 1
			// se existir a variavel e for falsa, não vem do apontamento de recursos (custo medio/FIFO)
			If Type("lAvalAFU") # "L" .OR. (Type("lAvalAFU") == "L" .AND. !lAvalAFU)
				dbSelectArea("AFI")
				dbSetOrder(2)
				If MsSeek(cChvAFI)
			 		RecLock('AFI',.F.)
			 	Else
		 			RecLock('AFI',.T.)
			 	EndIf
				// Atualiza os dados contidos na GetDados
				AFI->AFI_FILIAL	:= xFilial("AFI")
				AFI->AFI_PROJET	:= (cAliasSD3)->D3_PROJPMS
				AFI->AFI_TAREFA	:= (cAliasSD3)->D3_TASKPMS
				AFI->AFI_REVISA	:= AF8->AF8_REVISA
				AFI->AFI_COD		:= (cAliasSD3)->D3_COD
				AFI->AFI_LOCAL		:= (cAliasSD3)->D3_LOCAL
				AFI->AFI_NUMSEQ	:= (cAliasSD3)->D3_NUMSEQ
				AFI->AFI_EMISSAO	:= (cAliasSD3)->D3_EMISSAO
				AFI->AFI_QUANT		:= (cAliasSD3)->D3_QUANT
				MsUnlock()
				PmsAvalAFI("AFI",1,aCusto)
	   		EndIf

		// estorno
		Case nEvento == 2
			dbSelectArea("AFI")
			dbSetOrder(2)
			If MsSeek(cChvAFI)
				PmsAvalAFI("AFI",2,aCusto)
				PmsAvalAFI("AFI",3,aCusto)
			EndIf
	EndCase

	RestArea(aAreaAFU)
	RestArea(aAreaAF8)
	RestArea(aAreaSD3)
	RestArea(aArea)
EndIf
Return
/*
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄ-ÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsDlgNFS³ Autor ³ Clovis Magenta      	 ³ Data ³ 09-08-2008³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄ-ÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Esta funcao cria uma janela para configuracao e apontamentos  ³±±
±±³          ³das NF de Saida ao Gerenciamento de Projetos.     	        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MATA140,MATA103,SIGAPMS                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
*/
Function PmsDlgNFS(nOpcao,cNumNF,cSerieNF,cFornece,cLoja,cTipo,cSDoc)

Local bSavSetKey  := SetKey(VK_F4,Nil)
Local bSavKeyF5   := SetKey(VK_F5,Nil)
Local bSavKeyF6   := SetKey(VK_F6,Nil)
Local bSavKeyF7   := SetKey(VK_F7,Nil)
Local bSavKeyF8   := SetKey(VK_F8,Nil)
Local bSavKeyF9   := SetKey(VK_F9,Nil)
Local bSavKeyF10  := SetKey(VK_F10,Nil)

Local lOk
Local oDlg,oBold
Local nPosItem    := aScan(aHeader,{|x| Alltrim(x[2]) == "D2_ITEM"})
Local nQuantNF    := aCols[n,aScan(aHeader,{|x| Alltrim(x[2]) == "D2_QUANT"})]
Local nCodNF      := aScan(aHeader,{|x| Alltrim(x[2]) == "D2_COD"})
Local cItemNF     := aCols[n,nPosItem]
Local cCodNF      := aCols[n,nCodNF]
Local nPosRat     := aScan(aRatAFS,{|x| x[1] == aCols[n,nPosItem]})
Local lGetDados   := .T.
Local cSayCliFor  := If(cTipo$'BD',STR0021,STR0022) //'Cliente:'###'Fornecedor:'
Local oGetDados
Local nY          := 0
Local cFilAFS     := xFilial("AFS")
Local lMsFilAFS   := AFS->(ColumnPos("AFS_MSFIL")) > 0
Local aAlter      := {"AFS_PROJET","AFS_TAREFA", "AFS_QUANT", "AFS_QTSEGU" }

Default	cSDoc	:=	cSerieNF

Private aSavCols  := aClone(aCols)
Private aSavHeader:= aClone(aHeader)
Private nSavN     := n
Private cD2_COD   := aCols[n,aScan(aHeader,{|x| Alltrim(x[2]) == "D2_COD"})]

nQtMaxNF := nQuantNF
aCols    := {}
aHeader  := {}
n        := 1

If nOpcao == 3
	// Montagem do aHeader
	dbSelectArea("SX3")
	dbSetOrder(1)
	MsSeek("AFS")
	While !EOF() .And. (x3_arquivo == "AFS")
		IF X3USO(x3_usado) .AND. cNivel >= x3_nivel
			AADD(aHeader,{ TRIM(x3titulo()), x3_campo, x3_picture,;
				x3_tamanho, x3_decimal, x3_valid,;
				x3_usado, x3_tipo, x3_arquivo,x3_context } )
		Endif
		If AllTrim(x3_campo) == "AFS_QUANT"
			nPosPerc	:= Len(aHeader)
		EndIf
		dbSkip()
	End
	aHeaderAFS	:= aClone(aHeader)
	If nPosRat > 0
		aCols	:= aClone(aRatAFS[nPosRat,2])
	Else
		// Faz a montagem de uma linha em branco no aCols.
		aadd(aCols,Array(Len(aHeader)+1))
		For ny := 1 to Len(aHeader)
			If Trim(aHeader[ny,2]) == "AFS_ITEM"
				aCols[Len(aCols),ny] 	:= "01"
			Else
				aCols[Len(aCols),ny] := CriaVar(aHeader[ny,2])
			EndIf
		Next ny
		aCols[Len(aCols),Len(aHeader)+1] := .F.
	EndIf
Else
	// Montagem do aHeader
	dbSelectArea("SX3")
	dbSetOrder(1)
	MsSeek("AFS")
	While !EOF() .And. (x3_arquivo == "AFS")
		IF X3USO(x3_usado) .AND. cNivel >= x3_nivel
			AADD(aHeader,{ TRIM(x3titulo()), x3_campo, x3_picture,	x3_tamanho, x3_decimal, x3_valid,x3_usado, x3_tipo, x3_arquivo,x3_context } )
		Endif

		If AllTrim(x3_campo) == "AFS_QUANT"
			nPosPerc	:= Len(aHeader)
		EndIf

		dbSkip()
	EndDo

	aHeaderAFS	:= aClone(aHeader)
	dbSelectArea("SD2")
	dbSetOrder(3)   //D2_FILIAL+D2_DOC+D2_SERIE+D2_CLIENTE+D2_LOJA+D2_COD+D2_ITEM
	If MsSeek(xFilial("SD2")+cNumNF+cSerieNF+cFornece+cLoja+cCodNF+cItemNF)
		While !Eof() .And. ((cFilAFS+cNumNF+cSerieNF+cFornece+cLoja+cItemNF)==SD2->(D2_FILIAL+D2_DOC+D2_SERIE+D2_CLIENTE+D2_LOJA+D2_ITEM))

		dbSelectArea("AFS")
		dbSetOrder(4) //AFS_FILIAL+AFS_COD+AFS_LOCAL+DTOS(AFS_EMISSA)+AFS_NUMSEQ+AFS_PROJET+AFS_REVISA+AFS_EDT
		If nPosRat == 0
			If MsSeek(xFilial("AFS")+SD2->(D2_COD+D2_LOCAL+DTOS(D2_EMISSAO)+D2_NUMSEQ))
				While !Eof() .AND. (SD2->(D2_COD+D2_LOCAL+DTOS(D2_EMISSAO)+D2_NUMSEQ)==AFS->(AFS_COD+AFS_LOCAL+DTOS(AFS_EMISSA)+AFS_NUMSEQ))

				If !lMsFilAFS .Or. (AFS->AFS_MSFIL == cFilAnt)
					If AFS->AFS_REVISA==PmsAF8Ver(AFS->AFS_PROJET)
						aADD(aCols,Array(Len(aHeader)+1))
						For ny := 1 to Len(aHeader)
							If ( aHeader[ny,10] != "V")
								aCols[Len(aCols),ny] := FieldGet(ColumnPos(aHeader[ny,2]))
							Else
								aCols[Len(aCols),ny] := CriaVar(aHeader[ny,2])
							EndIf
							aCols[Len(aCols),Len(aHeader)+1] := .F.
						Next ny
					EndIf
				EndIf
				AFS-> ( dbSkip() )
				EndDo
			EndIf
		EndIf
		SD2 -> ( dbSkip() )
		EndDo
	Else
		// Faz a montagem de uma linha em branco no aCols.
		aadd(aCols,Array(Len(aHeader)+1))

            nCol := Len( aCols )
		For ny := 1 to Len(aHeader)
			If Trim(aHeader[ny,2]) == "AFS_ITEM"
				aCols[nCol,ny] 	:= "01"
			Else
				aCols[nCol,ny] := CriaVar(aHeader[ny,2])
			EndIf
		Next ny
		aCols[nCol,Len(aHeader)+1] := .F.
	EndIf
EndIf

If lGetDados
	DEFINE FONT oBold NAME "Arial" SIZE 0, -13 BOLD
	DEFINE MSDIALOG oDlg FROM 88 ,22  TO 350,619 TITLE STR0023 Of oMainWnd PIXEL //'Assistente de Apontamentos : Gerenciamento de Projetos - NF'
		oGetDados := MSGetDados():New(23,3,112,296,nOpcao,'PMSAFSLOK','PMSAFSTOK','+AFS_ITEM',.T.,aAlter,,,100,'PMSAFSFOK')
		@ 16 ,3   TO 18 ,310 LABEL '' OF oDlg PIXEL
		@ 6  ,4   SAY STR0025 Of oDlg PIXEL SIZE 27 ,9 //'Doc:'
		//@ 5  ,20  SAY  cSerieNF+"/"+cNumNF Of oDlg PIXEL SIZE 80,9 FONT oBold
		@ 5  ,20  SAY  cSDoc+"/"+cNumNF Of oDlg PIXEL SIZE 80,9 FONT oBold
		@ 6  ,78  SAY  cSayCliFor Of oDlg PIXEL SIZE 31 ,9
		@ 5  ,110  SAY  cFornece+"-"+cLoja Of oDlg PIXEL SIZE 35 ,9 FONT oBold
		@ 6  ,260 SAY STR0026 Of oDlg PIXEL SIZE 30 ,9 //'Item:'
		@ 5  ,280 SAY  cItemNF Of oDlg PIXEL SIZE 27 ,9 FONT oBold
		@ 118,249 BUTTON STR0027 SIZE 35 ,11   FONT oDlg:oFont ACTION {||If(oGetDados:TudoOk(),(lOk:=.T.,oDlg:End()),(lOk:=.F.))}  OF oDlg PIXEL  //'Confirma'
		@ 118,210 BUTTON STR0028 SIZE 35 ,11   FONT oDlg:oFont ACTION (oDlg:End())  OF oDlg PIXEL  //'Cancelar'
      If ExistBlock("PMSNFSCR")
         ExecBlock("PMSNFSCR",.F.,.F.,{oDlg,nOpcao})
      Endif
	ACTIVATE MSDIALOG oDlg CENTERED
EndIf

If nOpcao <> 2 .And. lOk
	If nPosRat > 0
		aRatAFS[nPosRat,2]	:= aClone(aCols)
	Else
		aADD(aRatAFS,{aSavCols[nSavN,nPosItem],aClone(aCols)})
	EndIf
EndIf

aCols   := aClone(aSavCols)
aHeader := aClone(aSavHeader)
n       := nSavN

SetKey(VK_F4,bSavSetKey)
SetKey(VK_F5,bSavKeyF5)
SetKey(VK_F6,bSavKeyF6)
SetKey(VK_F7,bSavKeyF7)
SetKey(VK_F8,bSavKeyF8)
SetKey(VK_F9,bSavKeyF9)
SetKey(VK_F10,bSavKeyF10)

Return
/*
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsDlgNF³ Autor ³ Edson Maricate          ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Esta funcao cria uma janela para configuracao e apontamentos  ³±±
±±³          ³das NF de Entrada ao Gerenciamento de Projetos.               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MATA140,MATA103,SIGAPMS                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
*/
Function PmsDlgNF(nOpcao,cNumNF,cSerieNF,cFornece,cLoja,cTipo,cSDoc)

Local bSavSetKey := SetKey(VK_F4,Nil)
Local bSavKeyF5  := SetKey(VK_F5,Nil)
Local bSavKeyF6  := SetKey(VK_F6,Nil)
Local bSavKeyF7  := SetKey(VK_F7,Nil)
Local bSavKeyF8  := SetKey(VK_F8,Nil)
Local bSavKeyF9  := SetKey(VK_F9,Nil)
Local bSavKeyF10 := SetKey(VK_F10,Nil)
Local lPMSNFESCR := ExistBlock("PMSNFESCR")
Local lOk
Local oDlg,oBold
Local nPosItem   := aScan(aHeader,{|x| Alltrim(x[2]) == "D1_ITEM"})
Local nQuantNF   := aCols[n,aScan(aHeader,{|x| Alltrim(x[2]) == "D1_QUANT"})]
Local nPosPed    := aScan(aHeader,{|x| Alltrim(x[2]) == "D1_PEDIDO"})
Local nPosItPC   := aScan(aHeader,{|x| Alltrim(x[2]) == "D1_ITEMPC"})
Local cItemNF    := aCols[n,nPosItem]
Local nPosRat    := aScan(aRatAFN,{|x| x[1] == aCols[n,nPosItem]})
Local lGetDados  := .T.
Local cSayCliFor := If(cTipo$'BD',STR0021,STR0022) //'Cliente:'###'Fornecedor:'
Local nY         := 0
Local cFilAFN    := xFilial("AFN")
Local lMsFilAFN  := AFN->(ColumnPos("AFN_MSFIL")) > 0
Local nLenCols   := 0
Local nLenHeader := 0
Local aAlter     := {"AFN_PROJET","AFN_TAREFA", "AFN_QUANT", "AFN_QTSEGU", "AFN_ESTOQU" }

Local lPmsxalter	:= ExistBlock("Pmsxalter",.F.,.F.,{aAlter})
Local lPmsAFNCpo	:= Existblock("PmsAFNCpo")

//236.02
Local lColigada := If(GetNewPar("MV_RMCOLIG",0) > 0, .T.,.F.)
Local lPmsInt:= IsIntegTop(,.T.)
Local lMsAFNCtr := AFN->(ColumnPos("AFN_CONTRA")) > 0
Local lVersao	:= .T.
Local lExistANE := lVersao
Local lIntNFSA  := .F.
Local cNumSA	  := ""
Local oGetDados

Default cSDoc	:=	cSerieNF

Private aSavCols  := aClone(aCols)
Private aSavHeader:= aClone(aHeader)
Private nSavN     := n
Private cD1_COD   := aCols[n,aScan(aHeader,{|x| Alltrim(x[2]) == "D1_COD"})]
Private lNFEFrete := PMSTipNFE(cTipo) // verifica se o tipo de nota fiscal de entrada é de complemento

//Se integracao RM ligada
//Se existe a tabela ANE (Amarração projeto x Contratos)
//Se versão igual ou superior a 11.80
If (lColigada .or. lPmsInt) .and. lExistANE .and. lMsAFNCtr
	aadd(aAlter, "AFN_CONTRA")
Endif

If nPosPed > 0 .And. nPosItPC > 0
	//Valida se é integração e pedido esta vinculado a uma SA originada pela integração
	If (lColigada .or. lPmsInt) .And. PMSNFSA(aCols[n,nPosPed],aCols[n,nPosItPC])[1]
		lIntNFSA := .T.
		cNumSA := PMSNFSA(aCols[n,nPosPed],aCols[n,nPosItPC])[2]
		aadd(aAlter, "AFN_QUANT")
	Endif
Endif

If lPmsxalter
	aAlter := ExecBlock("Pmsxalter", .F., .F., {aAlter})
EndIf 

If !lIntNFSA
	nQtMaxNF := nQuantNF
	aCols    := {}
	aHeader  := {}
	n        := 1
	
	PmsVldUser(.T.)
	
	If nOpcao == 3
		
		// Montagem do aHeader
		dbSelectArea("SX3")
		dbSetOrder(1)
		MsSeek("AFN")
		//	Caso seja rotina de Doc. Entrada e tipo de documento igual a Complemento preco/frete
		// a quantidade devera ser igual a 0 e o sistema devera permitir.
	   If lNFEFrete
			aHeader :=	GetaHeader("AFN",,,,{"AFN_QUANT"})
			nPosQtd := aScan(aHeader,{|x| alltrim(x[2])=="AFN_QUANT"})
			If nPosQtd > 0
				aHeader[nPosQtd,17] := .F. // X3_WHEN
				aHeader[nPosQtd,06] := .T. // X3_VALID
			EndIf
	
		else
			aHeader :=	GetaHeader("AFN",,,,)
		EndIf
	
		aHeaderAFN	:= aClone(aHeader)
	
		If nPosRat > 0
			aCols	:= aClone(aRatAFN[nPosRat,2])
		Else
			// Faz a montagem de uma linha em branco no aCols.
			nLenHeader := Len(aHeader)
			aadd(aCols,Array(nLenHeader+1))
			For ny := 1 to nLenHeader
				If Trim(aHeader[ny,2]) == "AFN_ITEM"
					aCols[1,ny] := "01"
				ElseIf AllTrim(aHeader[ny,2]) $ "AFN_ALI_WT | AFN_REC_WT"
					If AllTrim(aHeader[ny,2]) == "AFN_ALI_WT"
						aCols[1,ny] := "AFN"
					ElseIf AllTrim(aHeader[ny,2]) == "AFN_REC_WT"
						aCols[1,ny] := 0
					EndIf
				Else
					aCols[1,ny] := CriaVar(aHeader[ny,2])
				EndIf
				aCols[1,nLenHeader+1] := .F.
			Next ny
		EndIf
	Else
		// Montagem do aHeader
		dbSelectArea("SX3")
		dbSetOrder(1)
		MsSeek("AFN")
	   	If lNFEFrete
			aHeader :=	GetaHeader("AFN",,,,{"AFN_QUANT"})
			nPosQtd := aScan(aHeader,{|x| alltrim(x[2])=="AFN_QUANT"})
			If nPosQtd > 0
				aHeader[nPosQtd,17] := .F.
			EndIf
		else
			aHeader :=	GetaHeader("AFN",,,,)
		EndIf
	
		aHeaderAFN	:= aClone(aHeader)
		dbSelectArea("AFN")
		dbSetOrder(2)
		If nPosRat == 0
			nLenHeader := Len(aHeader)
			If MsSeek(cFilAFN+cNumNF+cSerieNF+cFornece+cLoja+cItemNF)
				While !Eof() .And. cFilAFN+cNumNF+cSerieNF+cFornece+cLoja+cItemNF==;
									AFN_FILIAL+AFN_DOC+AFN_SERIE+AFN_FORNEC+AFN_LOJA+AFN_ITEM
	
					If !lMsFilAFN .Or. (AFN->AFN_MSFIL == cFilAnt)
						If AFN->AFN_REVISA==PmsAF8Ver(AFN->AFN_PROJET)
							aADD(aCols,Array(nLenHeader+1))
							nLenCols := Len(aCols)
							For ny := 1 to nLenHeader
								If ( aHeader[ny,10] != "V")
									aCols[nLenCols,ny] := FieldGet(ColumnPos(aHeader[ny,2]))
								ElseIf AllTrim(aHeader[ny,2]) $ "AFN_ALI_WT | AFN_REC_WT"
									If AllTrim(aHeader[ny,2]) == "AFN_ALI_WT"
										aCols[1,ny] := "AFN"
									ElseIf AllTrim(aHeader[ny,2]) == "AFN_REC_WT"
										aCols[1,ny] := AFN->(Recno())
									EndIf
								Else
									aCols[nLenCols,ny] := CriaVar(aHeader[ny,2])
								EndIf
								aCols[nLenCols,nLenHeader+1] := .F.
							Next ny
						EndIf
					EndIf
					dbSkip()
				End
			Else
				// Faz a montagem de uma linha em branco no aCols.
				aadd(aCols,Array(nLenHeader+1))
				For ny := 1 to nLenHeader
					If Trim(aHeader[ny,2]) == "AFN_ITEM"
						aCols[1,ny] 	:= "01"
					ElseIf AllTrim(aHeader[ny,2]) $ "AFN_ALI_WT | AFN_REC_WT"
						If AllTrim(aHeader[ny,2]) == "AFN_ALI_WT"
							aCols[1,ny] := "AFN"
						ElseIf AllTrim(aHeader[ny,2]) == "AFN_REC_WT"
							aCols[1,ny] := 0
						EndIf
					Else
						aCols[1,ny] := CriaVar(aHeader[ny,2])
					EndIf
					aCols[1,nLenHeader+1] := .F.
				Next ny
			EndIf
		Else
			aCols := aClone(aRatAFN[nPosRat,2])
		EndIf
	EndIf
	
	If lPmsAFNCpo
		aAlter := aClone(Execblock("PmsAFNCpo", .F.,.F.,{aAlter,aHeader,aCols}))
	Endif
	If lGetDados
		DEFINE FONT oBold NAME "Arial" SIZE 0, -13 BOLD
		DEFINE MSDIALOG oDlg FROM 88 ,22  TO 350,619 TITLE STR0023 Of oMainWnd PIXEL //'Assistente de Apontamentos : Gerenciamento de Projetos - NF'
			oGetDados := MSNewGetDados():New(23,3,112,296,iIf(nOpcao==2,0,GD_UPDATE+GD_INSERT+GD_DELETE),'PMSAFNLOK','PMSAFNTOK','+AFN_ITEM',aAlter,,100,'PMSAFNFOK',,,oDlg,aHeader,aCols)
	
			@ 16 ,3   TO 18 ,310 LABEL '' OF oDlg PIXEL
			@ 6  ,4   SAY STR0025 Of oDlg PIXEL SIZE 27 ,9 //'Doc:'
			If cPaisLoc == "MEX"
				//@ 5  ,20  SAY  cSerieNF+"/"+cNumNF Of oDlg PIXEL SIZE 85,9 FONT oBold
				@ 5  ,20  SAY  cSDoc+"/"+cNumNF Of oDlg PIXEL SIZE 85,9 FONT oBold
				@ 6  ,120  SAY  cSayCliFor Of oDlg PIXEL SIZE 31 ,9
				@ 5  ,152  SAY  cFornece+"-"+cLoja Of oDlg PIXEL SIZE 35 ,9 FONT oBold
			Else
				//@ 5  ,20  SAY  cSerieNF+"/"+cNumNF Of oDlg PIXEL SIZE 80,9 FONT oBold
				@ 5  ,20  SAY  cSDoc+"/"+cNumNF Of oDlg PIXEL SIZE 80,9 FONT oBold
				@ 6  ,78  SAY  cSayCliFor Of oDlg PIXEL SIZE 31 ,9
				@ 5  ,110  SAY  cFornece+"-"+cLoja Of oDlg PIXEL SIZE 35 ,9 FONT oBold
			EndIf
			@ 6  ,260 SAY STR0026 Of oDlg PIXEL SIZE 30 ,9 //'Item:'
			@ 5  ,280 SAY  cItemNF Of oDlg PIXEL SIZE 27 ,9 FONT oBold
			@ 118,249 BUTTON STR0027 SIZE 35 ,11   FONT oDlg:oFont ACTION {||If(oGetDados:TudoOk(),(lOk:=.T.,oDlg:End()),(lOk:=.F.))}  OF oDlg PIXEL  //'Confirma'
			@ 118,169 BUTTON STR0287 SIZE 38 ,11   FONT oDlg:oFont ACTION {|| aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFN_TRT"})]	 := PmsSelEmp(aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFN_PROJET"})],aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFN_TAREFA"})],aHeader,aCols,aSavCols[nSavN,aScan(aSavHeader,{|x|Alltrim(x[2])=="D1_COD"})],aSavCols[nSavN,aScan(aSavHeader,{|x|Alltrim(x[2])=="D1_LOCAL"})])} OF oDlg PIXEL  //'Bx.Empenho'
			@ 118,210 BUTTON STR0028 SIZE 35 ,11   FONT oDlg:oFont ACTION (oDlg:End())  OF oDlg PIXEL  //'Cancelar'
			If lPMSNFESCR
				ExecBlock("PMSNFESCR",.F.,.F.,{oDlg,nOpcao})
			Endif
		ACTIVATE MSDIALOG oDlg CENTERED
	EndIf
	
	If nOpcao <> 2 .And. lOk
		If nPosRat > 0
			aRatAFN[nPosRat,2]	:= aClone(oGetDados:aCols)
		Else
			aADD(aRatAFN,{aSavCols[nSavN,nPosItem],aClone(oGetDados:aCols)})
		EndIf
	
		If ExistBlock("PMSDLGNF")
			U_PMSDLGNF(aCols,aHeader,aSavCols,aSavHeader,nSavN)
		EndIf
	EndIf
	
	aCols   := aClone(aSavCols)
	aHeader := aClone(aSavHeader) 
	n       := nSavN
Else
	If !l103Auto 
		nOpcMsg := Aviso(STR0143,"Este item da NF esta relacionado a uma Solicitação ao Armazém amarrado a um projeto/tarefa e não poderá ser alterada. Utilize a rotina de manutenção de solicitações ao armazém ou verifique o item selecionado." + CRLF + CRLF + ;
									"NÃO será gerado movimentação (SD3) automatica. A movimentação deve ser gerada manualmente atraves da baixa da Solicitação ao Armazem.",If(nOpcao<>1,{STR0006,STR0415},{STR0006}),2)
		If nOpcMsg == 2
			MaViewSA(cNumSA)
		EndIf
	endif
Endif

SetKey(VK_F4,bSavSetKey)
SetKey(VK_F5,bSavKeyF5)
SetKey(VK_F6,bSavKeyF6)
SetKey(VK_F7,bSavKeyF7)
SetKey(VK_F8,bSavKeyF8)
SetKey(VK_F9,bSavKeyF9)
SetKey(VK_F10,bSavKeyF10)

Return
/*
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSAFNFOK³ Autor ³ Edson Maricate         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de validacao dos campos da GetDados de rateio do SD1.  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSDLGNF,PMSXFUN                                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
*/
Function PMSAFNFOK()

Local lRet			:= .T.
Local cProjeto		:= aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFN_PROJET"})]
Local cRevisa		:= aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFN_REVISA"})]
Local cTarefa		:= aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFN_TAREFA"})]
Local cCampo		:= AllTrim(ReadVar())
Local cNumPC		:= ""
Local cMsgAlertF1	:= STR0433 //"Pedido de Compra já vinculado a um projeto/tarefa via TOP e não pode ser alterado."
Local cIntegracao	:= SuperGetMv("MV_INTPMS")
Local aArea		:= {}

Default lMsgUnica := IsIntegTop()

If !IsInCallStack("MATA465N") .And.  cIntegracao == "S" .And. lMsgUnica
	aArea		:= GetArea()
	DbSelectArea("AJ7")
	AJ7->(DbSetOrder(2))
	cNumPC := PadR(AllTrim(aSavCols[nSavN,gdfieldpos("D1_PEDIDO",aSavHeader)]),TamSx3("D1_PEDIDO")[1])
	If AJ7->(DbSeek(xFilial("AJ7") + cNumPC))
		if cCampo == "M->AFN_PROJET"
			If AllTrim(M->AFN_PROJET) <> AllTrim(AJ7->AJ7_PROJET) .And. AllTrim(AJ7->AJ7_VIAINT) == "S" //Veio da integração com o TOP
				MsgAlert(cMsgAlertF1)
				lRet := .F.
			Endif
		Elseif cCampo == "M->AFN_TAREFA"
			If AllTrim(M->AFN_TAREFA) <> AllTrim(AJ7->AJ7_TAREFA) .And. AllTrim(AJ7->AJ7_VIAINT) == "S" //Veio da integração com o TOP
				MsgAlert(cMsgAlertF1)
				lRet := .F.
			Endif
		Endif
	EndIf
	RestArea(aArea)
EndIF

If lRet
	Do Case
	   // valida se o projeto existe no PMS - Protheus
		Case cCampo == 'M->AFN_PROJET' .or. cCampo == 'M->AFZ_PROJET'
			cProjeto := M->AFN_PROJET
			lRet := PMSExistCPO("AF8") .And. PmsVldFase("AF8",M->AFN_PROJET,"83")
		Case cCampo == 'M->AFN_TAREFA' .or. cCampo == 'M->AFZ_TAREFA'
			cTarefa	:= M->AFN_TAREFA
			cProjeto := aCols[n,aScan(aHeader,{|x|Alltrim(Subs(x[2],4,7))=="_PROJET"})]
			cRevisa  := aCols[n,aScan(aHeader,{|x|Alltrim(Subs(x[2],4,7))=="_REVISA"})]
			lRet := ExistCpo("AF9",cProjeto+cRevisa+&cCampo,1)

	EndCase
EndIF

If !Empty(cProjeto) .And. !Empty(cTarefa) .And. lRet .And. aScan(aHeader,{|x|Alltrim(x[2])=="AFN_TRT"}) > 0
	If GetMV("MV_PMSBXEM") .And. Aviso(STR0268,STR0269,{STR0179, STR0180},2)==1  //"Empenhos do projeto"###"Voce deseja selecionar um empenho para efetuar a baixa ?"###"Sim"###"Nao"
		aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFN_TRT"})]	 := PmsSelEmp(cProjeto,cTarefa,aHeader,aCols,aSavCols[nSavN,aScan(aSavHeader,{|x|Alltrim(x[2])=="D1_COD"})],aSavCols[nSavN,aScan(aSavHeader,{|x|Alltrim(x[2])=="D1_LOCAL"})])
	Else
		aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFN_TRT"})]	 :=	SPACE(LEN(AFN->AFN_TRT))
	EndIf
EndIf
Return lRet


/*
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSAFSFOK³ Autor ³ Clovis Magenta         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de validacao dos campos da GetDados de rateio do SD2.  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSDLGNFS,PMSXFUN                                             ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
*/
Function PMSAFSFOK()

Local lRet		:= .T.
Local nPosEDT	:= aScan(aHeader,{|x|Alltrim(x[2])=="AFS_EDT"})
Local cEDT		:= ''
Local cProjeto	:= aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFS_PROJET"})]
Local cTarefa	:= aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFS_TAREFA"})]
Local cRevisa	:= aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFS_REVISA"})]
Local cCampo	:= AllTrim(ReadVar())

//Protecao para quando o aHeadear da tabela AFS nao carrega o campo AFS_EDT (MATA102DN Conduce de Dev.)
If nPosEDT > 0
	cEDT := aCols[n,nPosEDT]
EndIf

Do Case
	Case cCampo == 'M->AFS_PROJET' .or. cCampo == 'M->AFZ_PROJET'
		cProjeto := M->AFS_PROJET
		lRet := ExistCpo("AF8") .And. PmsVldFase("AF8",M->AFS_PROJET,"83")
		// Incluido por Wilson em 04/07/2011
		If !lRet
			MsgInfo("Projeto não encontrado no PMS !!!")
		Endif

		// valida se o produto foi associado a um insumo do projeto no CORPORE RM

		//lRet := lRet .AND. SLMValid(cProjeto ,cD2_COD) 		// Excluida linha que verifica Insumo no RM por Wilson em 05/07/2011

	Case cCampo == 'M->AFS_TAREFA' .or. cCampo == 'M->AFZ_TAREFA'
		cTarefa	:= M->AFS_TAREFA
		cProjeto := aCols[n,aScan(aHeader,{|x|Alltrim(Subs(x[2],4,7))=="_PROJET"})]
		cRevisa  := aCols[n,aScan(aHeader,{|x|Alltrim(Subs(x[2],4,7))=="_REVISA"})]
		lRet := ExistCpo("AF9",cProjeto+cRevisa+cTarefa,1)

EndCase

If !Empty(cProjeto) .And. !Empty(cTarefa) .And. lRet .And. aScan(aHeader,{|x|Alltrim(x[2])=="AFS_TRT"}) > 0
	If GetMV("MV_PMSBXEM") .And. Aviso(STR0268,STR0269,{STR0179, STR0180},2)==1  //"Empenhos do projeto"###"Voce deseja selecionar um empenho para efetuar a baixa ?"###"Sim"###"Nao"
		aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFS_TRT"})]	 := PmsSelEmp(cProjeto,cTarefa,aHeader,aCols,aSavCols[nSavN,aScan(aSavHeader,{|x|Alltrim(x[2])=="D2_COD"})],aSavCols[nSavN,aScan(aSavHeader,{|x|Alltrim(x[2])=="D2_LOCAL"})])
	Else
		aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFS_TRT"})]	 :=	SPACE(LEN(AFS->AFS_TRT))
	EndIf
EndIf

Return lRet


/*/{Protheus.doc} PMSAFNLOK
Funcao de validacao LinOk da GetDados de rateio do SD1.
Chamadas da função feitas através das funcções PmsDlgNF e PMSAFNTOK.

A variavel lNFEFrete é declarada como PRIVATE na funcao PMSDLGNF.

@Param nenhum

@Return logico - Verdadeiro, se as informações estao preenchidas corretamente.

@author Reynaldo Tetsu Miyashita
@since 12/12/2013
@version 1.0
/*/
Function PMSAFNLOK()
Local lRet := .T.
Local nQuant := 0
Local aCPOSkip := NIL

// Para uso em LocxNF()
If Type('aHdrAFN') <> "U"
	aHdrAFN := aClone(aHeaderAFN)
Endif

// Verifica os campos obrigatorios do SX3.
If !aCols[n,Len(aCols[n])]
	lRet := PmsVldFase("AF8",aCols[n,aScan(aHeader,{|x| Substr(x[2],4,7) =="_PROJET" })],"83")
	If lRet
		If lNFEFrete // se for uma nota fiscal de entrada do tipo Complemento de frete ou de ICMS deve zerar as quantidades
			aCPOSkip := {"AFN_QUANT"}
			nQuant := aScan(aHeader, {|x| Alltrim(x[2]) == "AFN_QUANT"})
			If nQuant >0
				aCols[n,nQuant] := 0
			EndIf
		EndIf
		lRet := MaCheckCols(aHeader,aCols,n,aCPOSkip)
	EndIf
EndIf

Return lRet
/*
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSAFSLOK³ Autor ³ Clovis Magenta         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de validacao LinOk da GetDados de rateio do SD2        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSDLGNFS,PMSXFUN                                             ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
*/
Function PMSAFSLOK()
Local lRet := .T.

// Para uso em LocxNF()
If Type('aHdrAFS') <> "U"
	aHdrAFS := aClone(aHeaderAFS)
Endif

// Verifica os campos obrigatorios do SX3.
If !aCols[n,Len(aCols[n])]
	lRet := PmsVldFase("AF8",aCols[n,aScan(aHeader,{|x| Substr(x[2],4,7) =="_PROJET" })],"83")
	If lRet
		lRet := MaCheckCols(aHeader,aCols,n)
	EndIf
EndIf

Return lRet
/*
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSAFNTOK³ Autor ³ Edson Maricate         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de validacao TudOk da GetDados de rateio do SD1        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSDLGNF,PMSXFUN                                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
*/
Function PMSAFNTOK()
 
Local nx
Local lRet			:= .T.
Local nTotQuant		:= 0
Local nPosProjet	:= aScan(aHeader,{|x|AllTrim(Subs(x[2],4,7))=="_PROJET"})
Local nPosQuant		:= aScan(aHeader,{|x|AllTrim(Subs(x[2],4,7))=="_QUANT"})
Local nPosContra	:= aScan(aHeader,{|x|AllTrim(Subs(x[2],4,7))=="_CONTRA"})
Local nSavN			:= n
Local cProjeto		:= ""
Local cContrato		:= ""
Local lVersao := PMSVersion()
Local lExistANE := lVersao

// Para uso em NF
If Type('aHdrAFN') <> "U"
	aHdrAFN := aClone(aHeaderAFN)
Endif

If ExistBlock("PMSAFNV")
	lRet := Execblock("PMSAFNV", .F., .F.)
EndIf

If lRet
	// Verifica os campos obrigatorios do SX3.
	For nx := 1 to Len(aCols)
		n	:= nx
		If !aCols[n,len(aCols[n])]
			If !Empty(aCols[n,nPosProjet])
				If !PMSAFNLOK()
					lRet := .F.
					Exit
				EndIf
				nTotQuant+=aCols[n,nPosQuant]
			EndIf
		EndIf
	Next

	If nTotQuant > nQtMaxNF
		Help("   ",1,"PMSQTNF")
		lRet := .F.
	EndIf

	//Valida exitencia de diferentes contratos para o mesmo projeto
	If lRet .and. lExistANE .and. nPosContra > 0
		aColsX := aClone(aCols)
		aSort(aColsX,,,{|x,y| Alltrim(x[nPosProjet])+Alltrim(x[nPosContra]) <= Alltrim(y[nPosProjet])+Alltrim(y[nPosContra])})

		For nx := 1 to Len(aColsX)
			If cProjeto != Alltrim(aColsX[nX,nPosProjet])
				cProjeto  := Alltrim(aColsX[nX,nPosProjet])
				cContrato := Alltrim(aColsX[nX,nPosContra])
			Endif

			If cProjeto == Alltrim(aColsX[nX,nPosProjet]) .and. cContrato != Alltrim(aColsX[nX,nPosContra])
				Help( " ", 1, "PMSVLDCTR",,STR0424+CRLF+STR0425+cProjeto, 1, 0 )	//"Não é permitido o rateio utilizando diferentes contratos para um mesmo projeto."###"Verifique o projeto "
				lRet := .F.
				Exit
			Endif
        Next
    Endif

EndIf

n := nSavN

Return lRet

/*
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSAFSTOK³ Autor ³ Clovis Magenta         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de validacao TudOk da GetDados de rateio do SD2        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSDLGNFS,PMSXFUN                                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
*/
Function PMSAFSTOK()

Local nx
Local lRet			:= .T.
Local nTotQuant		:= 0
Local nPosProjet	:= aScan(aHeader,{|x|AllTrim(Subs(x[2],4,7))=="_PROJET"})
Local nPosQuant		:= aScan(aHeader,{|x|AllTrim(Subs(x[2],4,7))=="_QUANT"})
Local nSavN			:= n

// Para uso em NFS
If Type('aHdrAFS') <> "U"
	aHdrAFN := aClone(aHeaderAFS)
Endif

If lRet
	// Verifica os campos obrigatorios do SX3.
	For nx := 1 to Len(aCols)
		n	:= nx
		If !aCols[n,len(aCols[n])]
			If !Empty(aCols[n,nPosProjet])
				If !PMSAFSLOK()
					lRet := .F.
					Exit
				EndIf
				If nPosQuant > 0
					nTotQuant+=aCols[n,nPosQuant]
				EndIf
			EndIf
		EndIf
	Next

	If nTotQuant > nQtMaxNF
		Help("   ",1,"PMSQTNF")
		lRet := .F.
	EndIf
EndIf
n := nSavN

Return lRet
/*
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsWriteNF³ Autor ³ Edson Maricate        ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Programa de gravacao de apontamentos chamado pela rotina de   ³±±
±±³          ³gravacao de Nota Fiscal de Entrada.                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpN1 : Evento - [1] - Inclusao de Nota Fiscal de Entrada     ³±±
±±³          ³                 [2] - Estorno de Nota Fiscal de Entrada      ³±±
±±³          ³                 [3] - Exclusao de Nota Fiscal de Entrada     ³±±
±±³          ³ExpC2 : Alias da tabela de Itens da NF de Entrada             ³±±
±±³          ³lEstNfClass - indica se eh estorno da classificacao (Mata140) ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MATA103,MATA140                                               ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
*/
Function PmsWriteNF(nEvento,cAliasSD1,lPreNota,cItem,lEstNfClass)
Local nx
Local nz
Local ny
Local aArea      := GetArea()
Local aRecAFN    := {}
Local aTempCols  := {}
Local cFilAFN    := xFilial("AFN")
Local lMsFilAFN  := AFN->(ColumnPos("AFN_MSFIL")) > 0
Local aAreaSF1   := SF1->(GetArea())
Local cSDoc      := ""

DEFAULT cItem    := (cAliasSD1)->D1_ITEM
DEFAULT lPreNota := .F.
DEFAULT lEstNfClass := .F.

If Type("l103Class") <> "L"
	l103Class := .F.
Endif

If Empty(aHeaderAFN)
	aHeaderAFN := {}
	// Montagem do aHeaderAFN
	dbSelectArea("SX3")
	dbSetOrder(1)
	MsSeek("AFN")
	While !EOF() .And. (x3_arquivo == "AFN")
		IF X3USO(x3_usado) .AND. cNivel >= x3_nivel
			AADD(aHeaderAFN,{ TRIM(x3titulo()), x3_campo, x3_picture,;
				x3_tamanho, x3_decimal, x3_valid,;
				x3_usado, x3_tipo, x3_arquivo,x3_context } )
		Endif
		dbSkip()
	End
EndIf

// Verifica o array de amarracao dos Contratos x Projetos

aRatAFN := IIf(Type('aRatAFN') == 'U', Nil, aRatAFN)

SF1->(DbSetOrder(1))
SF1->(DbSeek(xFilial()+(cAliasSD1)->(D1_DOC+D1_SERIE+D1_FORNECE+D1_LOJA+D1_TIPO)))

If aRatAFN<>Nil
	Do Case
		Case nEvento == 1  // Inclusao de Nota Fiscal de Entrada
			dbSelectArea("AFN")
			dbSetOrder(2) //AFN_FILIAL+AFN_DOC+AFN_SERIE+AFN_FORNEC+AFN_LOJA+AFN_ITEM+AFN_PROJET+AFN_REVISA+AFN_TAREFA

			nx	:= aScan(aRatAFN,{|x| x[1] == cItem })
			If nx == 0
				// Verifica se o item ja possui itens gravados.
				If DbSeek(cFilAFN+(cAliasSD1)->(D1_DOC+D1_SERIE+D1_FORNECE+D1_LOJA+D1_ITEM))
					While !Eof() .And. cFilAFN+(cAliasSD1)->(D1_DOC+D1_SERIE+D1_FORNECE+D1_LOJA+D1_ITEM)==;
												AFN_FILIAL+AFN_DOC+AFN_SERIE+AFN_FORNEC+AFN_LOJA+AFN_ITEM

						If !lMsFilAFN .Or. (AFN->AFN_MSFIL == cFilAnt)
							If AFN->AFN_REVISA==PmsAF8Ver(AFN->AFN_PROJET)
								aADD(aTempCols,Array(Len(aHeaderAFN)+1))
								For ny := 1 to Len(aHeaderAFN)
									If ( aHeaderAFN[ny,10] != "V")
										aTempCols[Len(aTempCols),ny] := FieldGet(ColumnPos(aHeaderAFN[ny,2]))
									Else
										aTempCols[Len(aTempCols),ny] := CriaVar(aHeaderAFN[ny,2])
									EndIf
									aTempCols[Len(aTempCols),Len(aHeaderAFN)+1] := .F.
								Next ny
								// se for um documento que foi classificado deve avaliar geracao de SD3.
								If l103Class .And. !Empty(aCols[n,GdFieldPos("D1_TES")]) .And. AllTrim(FunName()) == "MATA103"	
									PmsAvalAFN("AFN",1)
								Endif
							EndIf
						EndIf
						dbSkip()
					End
					aAdd(aRatAFN,{(cAliasSD1)->D1_ITEM,aClone(aTempCols)})
					nx := Len(aRatAFN)
				EndIf

			Else

				MsSeek(cFilAFN+(cAliasSD1)->(D1_DOC+D1_SERIE+D1_FORNECE+D1_LOJA+D1_ITEM))
				// Carrega no array os registros ja existentes.
				While !Eof() .And. cFilAFN+(cAliasSD1)->(D1_DOC+D1_SERIE+D1_FORNECE+D1_LOJA+D1_ITEM)==;
										AFN_FILIAL+AFN_DOC+AFN_SERIE+AFN_FORNEC+AFN_LOJA+AFN_ITEM

					If !lMsFilAFN .Or. (AFN->AFN_MSFIL == cFilAnt)
						If AFN->AFN_REVISA==PmsAF8Ver(AFN->AFN_PROJET)
							aAdd(aRecAFN,AFN->(RecNo()))
						EndIf
					EndIf
					dbSkip()
				End
				For nz := 1 to Len(aRatAFN[nx,2])
					If !aRatAFN[nx,2,nz,Len(aRatAFN[nx,2,nz])]
						dbSelectArea('AFN')
					 	If nz <= Len(aRecAFN)
					 		AFN->(dbGoto(aRecAFN[nz]))
					 		RecLock('AFN',.F.)
					 	Else
				 			RecLock('AFN',.T.)
					 	EndIf
						// Atualiza os dados contidos na GetDados
						For ny := 1 to Len(aHeaderAFN)
							If aHeaderAFN[ny,10] # "V"
								cVar := Trim(aHeaderAFN[ny,2])
								Replace &cVar. With aRatAFN[nx,2,nz,ny]
							Endif
						Next
						AFN->AFN_FILIAL := xFilial("AFN")
						AFN->AFN_DOC    := (cAliasSD1)->D1_DOC
						AFN->AFN_SERIE  := (cAliasSD1)->D1_SERIE
						If	SerieNfId("AFN",6,"AFN_SERIE")>3
							cSDoc		  := SerieNfId(cAliasSD1,2,"D1_SERIE")	
							AFN->(FieldPut(ColumnPos(SerieNfId("AFN",3,"AFN_SERIE")), cSDoc))
						EndIf
						AFN->AFN_FORNEC := (cAliasSD1)->D1_FORNECE
						AFN->AFN_LOJA   := (cAliasSD1)->D1_LOJA
						AFN->AFN_ITEM   := (cAliasSD1)->D1_ITEM
						AFN->AFN_TIPONF := (cAliasSD1)->D1_TIPO
						AFN->AFN_COD    := (cAliasSD1)->D1_COD
						If AFN->(ColumnPos("AFN_ID")) > 0 .And. SF1->(ColumnPos("F1_MSIDENT")) > 0
							AFN->AFN_ID     := SF1->F1_MSIDENT
						Endif
						If !Empty((cAliasSD1)->D1_NUMCQ) .And. AFN->(ColumnPos('AFN_SALDCQ')) > 0
							AFN->AFN_SALDCQ	:=	AFN->AFN_QUANT
						EndIf

						MsUnlock()
						If !lPreNota
							AFN->(FkCommit())
							PmsAvalAFN("AFN",1)
						EndIf
					Else
						If nz <= Len(aRecAFN)
							MsGoto(aRecAFN[nz])
							RecLock("AFN",.F.,.T.)
							dbDelete()
					        msUnLock()
						EndIf
					EndIf
				Next nz
				// Deleta os demais registros.
				If Len(aRecAFN) > Len(aRatAFN[nx,2])
					For nz := (Len(aRatAFN[nx,2])+1) to Len(aRecAFN)
						MsGoto(aRecAFN[nz])
						RecLock("AFN",.F.,.T.)
				      	dbDelete()
				  		msUnLock()
					Next nz
				EndIf
			EndIf

		Case nEvento == 2   //Estorno de Nota Fiscal de Entrada
			dbSelectArea("AFN")
			dbSetOrder(2)
			If MsSeek(xFilial()+(cAliasSD1)->D1_DOC+(cAliasSD1)->D1_SERIE+(cAliasSD1)->D1_FORNECE+(cAliasSD1)->D1_LOJA+(cAliasSD1)->D1_ITEM)
				While AFN->(!Eof()) .And. xFilial()+(cAliasSD1)->D1_DOC+(cAliasSD1)->D1_SERIE+(cAliasSD1)->D1_FORNECE+(cAliasSD1)->D1_LOJA+(cAliasSD1)->D1_ITEM==;
											AFN_FILIAL+AFN_DOC+AFN_SERIE+AFN_FORNEC+AFN_LOJA+AFN_ITEM

					If AFN->AFN_REVISA==PmsAF8Ver(AFN->AFN_PROJET)
						If !lPreNota
							PmsAvalAFN("AFN",2)
						EndIf
					EndIf
					AFN->(dbSkip())
				Enddo
			EndIf

		Case (nEvento == 3) .And. (lEstNfClass == .F.)  //Exclusão de Nota Fiscal de Entrada
			dbSelectArea("AFN")
			dbSetOrder(2)
			If MsSeek(xFilial()+(cAliasSD1)->D1_DOC+(cAliasSD1)->D1_SERIE+(cAliasSD1)->D1_FORNECE+(cAliasSD1)->D1_LOJA+(cAliasSD1)->D1_ITEM)
				While !Eof() .And. xFilial()+(cAliasSD1)->D1_DOC+(cAliasSD1)->D1_SERIE+(cAliasSD1)->D1_FORNECE+(cAliasSD1)->D1_LOJA+(cAliasSD1)->D1_ITEM==;
											AFN_FILIAL+AFN_DOC+AFN_SERIE+AFN_FORNEC+AFN_LOJA+AFN_ITEM
					If AFN->AFN_REVISA==PmsAF8Ver(AFN->AFN_PROJET)
						PmsAvalAFN("AFN",3)
					EndIf
					dbSkip()
				End
			EndIf
	EndCase
EndIf
RestArea(aAreaSF1)
RestArea(aArea)
Return


/*
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³AF9FimComD3³ Autor ³ Edson Maricate       ³ Data ³25-06-2001³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Atualiza o arquivo de tarefas com os dados da movimentacao. ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³AF9FimComD3(ExpA1)                                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpA1 = Array com os custos gravados no SD3                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
*/
FUNCTION AF9FimComD3(aCusto,aCustoFF,lCusFIFO)

LOCAL aArea		:= GetArea()
LOCAL aAreaAF8	:= AF8->(GetArea())
LOCAL aAreaAF9	:= AF9->(GetArea())
LOCAL aAreaAFU	:= {}
LOCAL nSavDec		:= Set(3,8)
LOCAL cQuery		:= ""
LOCAL cAliasQry	:= ""
LOCAL cProjeto	:= ""
LOCAL cRevisa		:= ""
LOCAL cTarefa		:= ""
LOCAL nRecno		:= 0

DEFAULT lCusFIFO:= .F.

AF8->(dbSetOrder(1))
AF9->(dbSetOrder(1))
AF8->(MsSeek(xFilial()+SD3->D3_PROJPMS))
cProjeto	:= AF8->AF8_PROJET
cRevisa	:= AF8->AF8_REVISA
cTarefa	:= SD3->D3_TASKPMS
If AF9->(MsSeek(xFilial()+cProjeto+cRevisa+cTarefa))

	RecLock("AF9",.F.)
	If SD3->D3_TM <= "500"
		If lCusFifo
			AF9->AF9_VFIMFF1 -= aCustoFF[1]
			AF9->AF9_VFIMFF2 -= aCustoFF[2]
			AF9->AF9_VFIMFF3 -= aCustoFF[3]
			AF9->AF9_VFIMFF4 -= aCustoFF[4]
			AF9->AF9_VFIMFF5 -= aCustoFF[5]
		Else
			AF9->AF9_VFIM1 -= aCusto[1]
			AF9->AF9_VFIM2 -= aCusto[2]
			AF9->AF9_VFIM3 -= aCusto[3]
			AF9->AF9_VFIM4 -= aCusto[4]
			AF9->AF9_VFIM5 -= aCusto[5]
		EndIf
	Else
		If lCusFifo
			AF9->AF9_VFIMFF1 += aCustoFF[1]
			AF9->AF9_VFIMFF2 += aCustoFF[2]
			AF9->AF9_VFIMFF3 += aCustoFF[3]
			AF9->AF9_VFIMFF4 += aCustoFF[4]
			AF9->AF9_VFIMFF5 += aCustoFF[5]
		Else
			AF9->AF9_VFIM1 += aCusto[1]
			AF9->AF9_VFIM2 += aCusto[2]
			AF9->AF9_VFIM3 += aCusto[3]
			AF9->AF9_VFIM4 += aCusto[4]
			AF9->AF9_VFIM5 += aCusto[5]
		EndIf
	EndIf
	MsUnlock()
	
	aAreaAFU	:= AFU->(GetArea())
	cAliasQry := GetNextAlias() 
			
	cQuery		:= "INNER JOIN " + RetSqlName("AE8") + " AE8 ON "
	cQuery		+= "AE8.AE8_RECURS = AFU.AFU_RECURS AND "
	cQuery		+= "AE8.AE8_PRDREA = AFU.AFU_COD AND "
	cQuery		+= "AE8.AE8_TPREAL = '1' AND "
	cQuery		+= "AE8.AE8_TPREAL = '1' AND "
	cQuery		+= "AE8.D_E_L_E_T_ = ' ' "
	cQuery		+= "WHERE AFU_FILIAL = '" + xFilial("AFU") + "' AND "
	cQuery    += "AFU.AFU_PROJET ='" + cProjeto + "' AND "
	cQuery    += "AFU.AFU_REVISA ='" + cRevisa + "' AND "
	cQuery    += "AFU.AFU_TAREFA ='" + cTarefa + "' AND "
	cQuery    += "AFU.AFU_COD ='" + SD3->D3_COD + "' AND "
	cQuery    += "AFU.AFU_DATA >'" + DTOS(GetMv("MV_ULMES")) + "' AND "
	cQuery		+= "AFU.D_E_L_E_T_ = ' ' "	
	cQuery    += "ORDER BY AFU_TAREFA"
		
	cQuery:=	"%"+ cQuery +"%"
		
	BeginSql Alias cAliasQry
		SELECT AFU.R_E_C_N_O_
		FROM %table:AFU% AFU
		%Exp:cQuery%
	EndSQL
		
	//posiciona no registro referente a confirmação ate a database
	While (cAliasQry)->( !EOF() )
		nRecno := (cAliasQry)->(R_E_C_N_O_)
		AFU->(dbGoto(nRecno))
		RecLock("AFU",.F.)
		AFU->AFU_CUSTO1 := aCusto[1]
		AFU->AFU_CUSTO2 := aCusto[2]
		AFU->AFU_CUSTO3 := aCusto[3]
		AFU->AFU_CUSTO4 := aCusto[4]
		AFU->AFU_CUSTO5 := aCusto[5]
		AFU->(MsUnlock())
		(cAliasQry)->(dbSkip())
	EndDo
		
	(cAliasQry)->(dbCloseArea())
	RestArea(aAreaAFU)
	
EndIf
Set(3,nSavDec)

RestArea(aAreaAF8)
RestArea(aAreaAF9)
RestArea(aArea)
Return

/*
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³AF9AtuComD3³ Autor ³ Edson Maricate       ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Programa de gravacao de apontamentos chamado pela rotina de   ³±±
±±³          ³gravacao de Movimentos Internos.                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpA1 : Array contendo os custos a serem gravados.            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MATA240                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
*/
Function AF9AtuComD3(aCusto)

Local aArea		:= GetArea()
Local aAreaAF8	:= AF8->(GetArea())
Local aAreaAF9	:= AF9->(GetArea())
Local nSavDec	:= Set(3,8)

AF8->(dbSetOrder(1))
AF9->(dbSetOrder(1))
AF8->(MsSeek(xFilial()+SD3->D3_PROJPMS))
If AF9->(MsSeek(xFilial()+AF8->AF8_PROJET+AF8->AF8_REVISA+SD3->D3_TASKPMS))

	RecLock("AF9",.F.)
	If SD3->D3_TM <= "500"
		AF9->AF9_VATU1	-= aCusto[01]
		AF9->AF9_VATU2	-= aCusto[02]
		AF9->AF9_VATU3	-= aCusto[03]
		AF9->AF9_VATU4	-= aCusto[04]
		AF9->AF9_VATU5	-= aCusto[05]
	Else
		AF9->AF9_VATU1	+= aCusto[01]
		AF9->AF9_VATU2	+= aCusto[02]
		AF9->AF9_VATU3	+= aCusto[03]
		AF9->AF9_VATU4	+= aCusto[04]
		AF9->AF9_VATU5	+= aCusto[05]
	EndIf
	MsUnlock()
EndIf

Set(3,nSavDec)
RestArea(aAreaAF8)
RestArea(aAreaAF9)
RestArea(aArea)

Return

/*
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³AF9AtuCD2³ Autor ³ Edson Maricate         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Programa de gravacao de apontamentos chamado pela rotina de   ³±±
±±³          ³gravacao de Notas Fiscais de Saida.                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpA1 : Array contendo os custos a serem gravados.            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³SIGAPMS, MATA461                                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
*/
Function AF9AtuCD2(nOpcao,aCusto)

Local aArea		:= GetArea()
Local aAreaAF8	:= AF8->(GetArea())
Local aAreaAF9	:= AF9->(GetArea())
Local nSavDec	:= Set(3,8)

AF8->(dbSetOrder(1))
AF9->(dbSetOrder(1))
If AF8->(MsSeek(xFilial()+AFS->AFS_PROJET)) .And.;
   AF9->(MsSeek(xFilial()+AFS->AFS_PROJET+AFS->AFS_REVISA+AFS->AFS_TAREFA))

	RecLock("AF9",.F.)
	If nOpcao==2
		AF9->AF9_VATU1	-= aCusto[01]
		AF9->AF9_VATU2	-= aCusto[02]
		AF9->AF9_VATU3	-= aCusto[03]
		AF9->AF9_VATU4	-= aCusto[04]
		AF9->AF9_VATU5	-= aCusto[05]
	Else
		AF9->AF9_VATU1	+= aCusto[01]
		AF9->AF9_VATU2	+= aCusto[02]
		AF9->AF9_VATU3	+= aCusto[03]
		AF9->AF9_VATU4	+= aCusto[04]
		AF9->AF9_VATU5	+= aCusto[05]
	EndIf
	MsUnlock()
EndIf

Set(3,nSavDec)
RestArea(aAreaAF8)
RestArea(aAreaAF9)
RestArea(aArea)

Return


/*/
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsTreeEDT³ Autor ³ Edson Maricate        ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao que monta o Tree do Projeto por EDT                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
*/
Function PMSTreeEDT(oTree,cVersao,aEstrutura,cFilhos,bCondicao,lReset,cRevisao,aConfig)
Local lRet
Local lPmsTree 	:= SuperGetMV("MV_PMSTREE")== "1"
Local lPMS200Vis := ExistBlock("PMS200VISU")

DEFAULT aConfig		:= {1,PMS_MIN_DATE,PMS_MAX_DATE}

// força busca no SX6 do parametro, pois o SUPERGETMV cacheia o valor
// Neste ponto de entrada existe a possibilidade de alteração deste parametro (PutMv())
If lPMS200Vis
	lPmsTree := GetMV("MV_PMSTREE")== "1"
Endif

PmsNewProc()
If lPmsTree
	If Type("bRefresh") == "B"
		lRet := Processa(	bRefresh ,STR0204)
	Else
		lRet := .T.
	Endif
Else
	lRet := Processa(	{||AuxTreeEDT(oTree,cVersao,aEstrutura,cFilhos,bCondicao,lReset,cRevisao,aConfig)},STR0204)
Endif
Return lRet
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³AuxTreeEDT³ Autor ³ Edson Maricate        ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao que monta o Tree do Projeto por EDT                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function AuxTreeEDT(oTree,cVersao,aEstrutura,cFilhos,bCondicao,lReset,cRevisao,aConfig)

Local aArea		:= GetArea()
Local lViewCod	:= GetMV("MV_PMSVCOD")
Local cChaveAnt
Local cFilAFC		:= xFilial("AFC")

DEFAULT cVersao 	:= AF8->AF8_REVISA
DEFAULT cFilhos 	:= "AF8,AFC,AF9,AFA,AFB,AFD"// Alias que sao amarrados ao TREE
DEFAULT lReset 		:= .T.
DEFAULT cRevisao    := CriaVar("AF8_REVISA",.F.)

cVersao := PadR(cVersao,4)
cRevisao := PadR(cRevisao,4)
If lReset
	cChaveAnt := oTree:GetCargo()
	oTree:BeginUpdate()
	oTree:Reset()
	oTree:EndUpdate()
EndIf
oTree:Hide()
oTree:BeginUpdate()
oTree:TreeSeek("")
oTree:AddItem(OemToAnsi(AF8->AF8_DESCRI),"AF8"+StrZero(AF8->(RecNo()),12),PmsRetRes("AF8",AF8->(RecNo()),.T. ),PmsRetRes("AF8",AF8->(RecNo()),.T. ),,,1)

dbSelectArea("AFC")
dbSetOrder(3)
MsSeek(xFilial()+AF8->AF8_PROJET+cVersao+"001")
While !Eof() .And. AFC->AFC_FILIAL+AFC->AFC_PROJET+AFC->AFC_REVISA+;
					AFC->AFC_NIVEL==cFilAFC+AF8->AF8_PROJET+cVersao+"001"
	BPMSEDTTrf(@oTree,AFC->AFC_PROJET+AFC->AFC_REVISA+AFC->AFC_EDT,,;
      		  cFilhos, bCondicao,, 2,lViewCod,cRevisao,"AF8"+StrZero(AF8->(RecNo()),12),aConfig)
	dbSkip()
End

oTree:EndUpdate()
oTree:TreeSeek(cChaveAnt)
oTree:Show()

RestArea(aArea)

Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³BPMSEDTTrf³ Autor ³ Edson Maricate         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao que monta o a Tarefa no Tree do Projeto.               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSXFUN                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/

Static Function BPMSEDTTrf(oTree,cChave,aEstrutura,cFilhos,bCondicao,nPaiMat,nNivel,lViewCod,cRevisao,cSeekAdd,aConfig)

Local nx		:= 0
Local aArea		:= GetArea()
Local aAreaAFC	:= AFC->(GetArea())
Local aAreaAF9	:= AF9->(GetArea())
Local aAuxArea  := {}
Local aDocAFC	:= {}
Local lAdiciona := .T.
Local cFilAJ5		:= xFilial("AJ5")
Local cFilAJ6		:= xFilial("AJ6")
Local cFilAF9		:= xFilial("AF9")
Local cFilAFC		:= xFilial("AFC")

Local aNodes    := {}  // array utilizado na ordenacao de tarefas e EDTs
Local nNode     := 0   // contador utilizado para iteracao com aNodes

PmsIncProc(.T.,1)
oTree:TreeSeek(cSeekAdd)
If PmsChkUser(AFC->AFC_PROJET,,AFC->AFC_EDT,AFC->AFC_EDTPAI,1,"ESTRUT",cRevisao)
	If 	(aConfig[1]==1) .Or.;
		(aConfig[1]==2 .And. !Empty(AFC->AFC_DTATUF)).Or.;
		(aConfig[1]==3 .And. Empty(AFC->AFC_DTATUF))
		If !(AFC->AFC_FINISH<aConfig[2].Or.AFC->AFC_START>aConfig[3]) .Or. Empty(AFC->AFC_START)
			oTree:AddItem(If(lViewCod,Alltrim(AFC->AFC_EDT)+"-","")+Alltrim(Substr(AFC->AFC_DESCRI,1,50))+ STR0123+TransForm(PmsPOCAFC(AFC->AFC_PROJET,AFC->AFC_REVISA,AFC->AFC_EDT,dDataBase),"@E 999.99%"),"AFC"+StrZero(AFC->(RecNo()),12),PmsRetRes("AFC",AFC->(RecNo()),.T. ),PmsRetRes("AFC",AFC->(RecNo()),.T. ),,,2)
			cSeekAdd := "AFC"+StrZero(AFC->(RecNo()),12)
			oTree:TreeSeek("AFC"+StrZero(AFC->(RecNo()),12))
			If "USR"$cFilhos
				// Insere os usuarios do Projeto no Tree
				dbSelectArea("AFX")
				dbSetOrder(1)
				MsSeek(xFilial()+AFC->AFC_PROJET+cRevisao+AFC->AFC_EDT)
				While !Eof() .And. AFX->AFX_FILIAL+AFX->AFX_PROJET+AFX->AFX_REVISA+AFX->AFX_EDT==xFilial()+AFC->AFC_PROJET+cRevisao+AFC->AFC_EDT
					oTree:AddItem(UsrRetName(AFX->AFX_USER),"AFX"+StrZero(AFX->(RecNo()),12),BMP_USER_PQ,BMP_USER_PQ,,,2)
					dbSkip()
				End
			EndIf

			If "ACB"$cFilhos .And. PmsChkUser(AFC->AFC_PROJET,,AFC->AFC_EDT,AFC->AFC_EDTPAI,2,"DOCUME",cRevisao)
				// Insere os documentos da EDT no Tree
				PMSDocTree("AFC", AFC->(RecNo()), @aDocAFC)
				For nx := 1 to Len(aDocAFC)
					ACB->(dbGoto(aDocAFC[nx]))
					oTree:AddItem(Substr(ACB->ACB_DESCRI,1,50),"ACB"+StrZero(ACB->(RecNo()),12),BMP_CLIPS_PQ,BMP_CLIPS_PQ,,,2)
				Next
			EndIf

			// Inclui os Relacionamentos    AFD
			If "AFD"$cFilhos
				aAuxArea := AF9->(GetArea())
				AF9->(dbSetOrder(1))
				dbSelectArea("AJ5")
				dbSetOrder(1)
				MsSeek(xFilial()+cChave)
				While !Eof() .And. AJ5->AJ5_FILIAL+AJ5->AJ5_PROJET+AJ5->AJ5_REVISA+;
									AJ5->AJ5_EDT==cFilAJ5+cChave
					AF9->(MsSeek(xFilial()+AJ5->AJ5_PROJET+AJ5->AJ5_REVISA+AJ5->AJ5_PREDEC))
					oTree:AddItem(AF9->AF9_DESCRI,"AJ5"+StrZero(AJ5->(RecNo()),12),BMP_RELAC_DIREITA_PQ,BMP_RELAC_DIREITA_PQ,,,2)
					dbSelectArea("AJ5")
					dbSkip()
				EndDo
				RestArea(aAuxArea)
				aAuxArea := AFC->(GetArea())
				AFC->(dbSetOrder(1))
				dbSelectArea("AJ6")
				dbSetOrder(1)
				MsSeek(xFilial()+cChave)
				While !Eof() .And. AJ6->AJ6_FILIAL+AJ6->AJ6_PROJET+AJ6->AJ6_REVISA+;
									AJ6->AJ6_EDT==cFilAJ6+cChave
					AFC->(MsSeek(xFilial()+AJ6->AJ6_PROJET+AJ6->AJ6_REVISA+AJ6->AJ6_PREDEC))
					oTree:AddItem(AFC->AFC_DESCRI,"AJ6"+StrZero(AJ6->(RecNo()),12),BMP_RELAC_DIREITA_PQ,BMP_RELAC_DIREITA_PQ,,,2)
					dbSelectArea("AJ6")
					dbSkip()
				EndDo
				RestArea(aAuxArea)
			EndIf
		EndIf
	EndIf
EndIf

If "AF9"$cFilhos
	dbSelectArea("AF9")
	dbSetOrder(2)
	MsSeek(xFilial()+cChave)
	While !Eof() .And. AF9->AF9_FILIAL+AF9->AF9_PROJET+AF9->AF9_REVISA+;
						AF9->AF9_EDTPAI=cFilAF9+cChave
		lAdiciona := .T.
		If PmsChkUser(AF9->AF9_PROJET,AF9->AF9_TAREFA,,AF9->AF9_EDTPAI,1,"ESTRUT",cRevisao)
			If 	(aConfig[1]==1) .Or.;
				(aConfig[1]==2 .And. !Empty(AF9->AF9_DTATUF)).Or.;
				(aConfig[1]==3 .And. Empty(AF9->AF9_DTATUF))
				If !(AF9->AF9_FINISH<aConfig[2].Or.AF9->AF9_START>aConfig[3]) .Or. Empty(AF9->AF9_START)
					If (Len(aConfig)>3)
						If !Empty(aConfig[4])
							lAdiciona := PmsHasRsrc(AF9->AF9_PROJET, AF9->AF9_REVISA, AF9->AF9_TAREFA, aConfig[4])
						EndIf
					EndIf

          			If lAdiciona
						aAdd(aNodes, {PMS_TASK,;
						              AF9->(Recno()),;
						IIf(Empty(AF9->AF9_ORDEM), "000", AF9->AF9_ORDEM),;
						              AF9->AF9_TAREFA})
					EndIf
				EndIf
			EndIf
		EndIf
		dbSelectArea("AF9")
		dbSkip()
	End
EndIf

dbSelectArea("AFC")
dbSetOrder(2)
MsSeek(xFilial()+cChave)
While !Eof() .And. AFC->AFC_FILIAL+AFC->AFC_PROJET+AFC->AFC_REVISA+;
					AFC->AFC_EDTPAI==cFilAFC+cChave
	aAdd(aNodes, {PMS_WBS,;
	              AFC->(Recno()),;
	IIf(Empty(AFC->AFC_ORDEM), "000", AFC->AFC_ORDEM),;
	              AFC->AFC_EDT})
	dbSkip()
EndDo

// ordenacao conjunta de tarefa/EDTs
aSort(aNodes, , , {|x, y| x[3]+x[4] < y[3]+y[4] })

For nNode := 1 To Len(aNodes)
	If aNodes[nNode,1] == PMS_TASK  // tarefa
		AF9->(dbGoto(aNodes[nNode,2]))

		PMSAddTrf(@oTree,AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA, aEstrutura,;
		          cFilhos, bCondicao,,nNivel,lViewCod,cRevisao,cSeekAdd)
	Else
		AFC->(dbGoto(aNodes[nNode,2]))

		BPMSEDTTrf(@oTree,AFC->AFC_PROJET+AFC->AFC_REVISA+AFC->AFC_EDT, aEstrutura,;
		           cFilhos, bCondicao,,nNivel,lViewCod,cRevisao,cSeekAdd,aConfig)
	EndIf
Next

RestArea(aAreaAF9)
RestArea(aAreaAFC)
RestArea(aArea)

Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSAddTrf³ Autor ³ Edson Maricate         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao que monta a tarefa no Tree do Projeto.                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSXFUN                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsAddTrf(oTree,cChave,aEstrutura,cFilhos,bCondicao,nPaiEdt,nNivel,lViewCod,cRevisao,cSeekAdd)

Local nx
Local aDocAF9	:= {}
Local aArea		:= GetArea()
Local aAreaAF9	:= AF9->(GetArea())
Local aAreaAFA	:= AFA->(GetArea())
Local aAreaAFB	:= AFB->(GetArea())
Local aAreaAFC	:= AFC->(GetArea())
Local cFilAFV		:= xFilial("AFV")
Local cFilAFA		:= xFilial("AFA")
Local cFilAFB		:= xFilial("AFB")
Local cFilAFD		:= xFilial("AFD")

PmsIncProc(.T.,1)

oTree:TreeSeek(cSeekAdd)
oTree:AddItem(If(lViewCod,AllTrim(AF9->AF9_TAREFA)+"-","")+AllTrim(Substr(AF9->AF9_DESCRI,1,50))+STR0123+TransForm(PmsPOCAF9(AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_TAREFA,dDataBase,AF9->AF9_QUANT),"@E 999.99%"),"AF9"+StrZero(AF9->(RecNo()),12),PmsRetRes("AF9",AF9->(RecNo()),.T. ),PmsRetRes("AF9",AF9->(RecNo()),.T. ),,,2)

oTree:TreeSeek("AF9"+StrZero(AF9->(RecNo()),12))

If "USR"$cFilhos
	// Insere os usuarios do Projeto no Tree
	dbSelectArea("AFV")
	dbSetOrder(1)
	MsSeek(cFilAFV+AF9->AF9_PROJET+cRevisao+AF9->AF9_TAREFA)
	While !Eof() .And. AFV->AFV_FILIAL+AFV->AFV_PROJET+AFV->AFV_REVISA+AFV->AFV_TAREFA==cFilAFV+AF9->AF9_PROJET+cRevisao+AF9->AF9_TAREFA
		oTree:AddItem(UsrRetName(AFV->AFV_USER),"AFV"+StrZero(AFV->(RecNo()),12),BMP_USER_PQ,BMP_USER_PQ,,,2)
		dbSkip()
	End
EndIf


If "ACB"$cFilhos .And. PmsChkUser(AF9->AF9_PROJET,AF9->AF9_TAREFA,,AF9->AF9_EDTPAI,2,"DOCUME",cRevisao)
	// Insere os documentos da Tarefa no Tree
	PMSDocTree("AF9", AF9->(RecNo()), @aDocAF9)
	For nx := 1 to Len(aDocAF9)
		ACB->(dbGoto(aDocAF9[nx]))
		oTree:AddItem(Substr(ACB->ACB_DESCRI,1,50),"ACB"+StrZero(ACB->(RecNo()),12),BMP_CLIPS_PQ,BMP_CLIPS_PQ,,,2)
	Next
EndIf

// Inclui os produtos da tarefa AFA
If "AFA"$cFilhos
	SB1->(dbSetOrder(1))
	dbSelectArea("AFA")
	dbSetOrder(1)
	MsSeek(xFilial()+cChave)
	While !Eof() .And. AFA->AFA_FILIAL+AFA->AFA_PROJET+AFA->AFA_REVISA+;
						AFA->AFA_TAREFA==cFilAFA+cChave
		SB1->(MsSeek(xFilial()+AFA->AFA_PRODUT))
		If !Empty(AFA->AFA_RECURS)
			oTree:AddItem(SB1->B1_DESC,"AFA"+StrZero(AFA->(RecNo()),12),BMP_RECURSO,BMP_RECURSO,,,2)
		Else
			oTree:AddItem(SB1->B1_DESC,"AFA"+StrZero(AFA->(RecNo()),12),BMP_MATERIAL,BMP_MATERIAL,,,2)
		EndIf
		dbSkip()
	End
EndIf
// Inclui as despesas da tarefa AFB
If "AFB"$cFilhos
	dbSelectArea("AFB")
	dbSetOrder(1)
	MsSeek(xFilial()+cChave)
	While !Eof() .And. AFB->AFB_FILIAL+AFB->AFB_PROJET+AFB->AFB_REVISA+;
						AFB->AFB_TAREFA==cFilAFB+cChave
		oTree:AddItem(AFB->AFB_DESCRI,"AFB"+StrZero(AFB->(RecNo()),12),BMP_BUDGET,BMP_BUDGET,,,2)
		dbSkip()
	End
Endif
// Inclui os Relacionamentos    AFD
If "AFD"$cFilhos
	aAuxArea := AF9->(GetArea())
	AF9->(dbSetOrder(1))
	dbSelectArea("AFD")
	dbSetOrder(1)
	MsSeek(xFilial()+cChave)
	While !Eof() .And. AFD->AFD_FILIAL+AFD->AFD_PROJET+AFD->AFD_REVISA+;
						AFD->AFD_TAREFA==cFilAFD+cChave
		AF9->(MsSeek(xFilial()+AFD->AFD_PROJET+AFD->AFD_REVISA+AFD->AFD_PREDEC))
		oTree:AddItem(AF9->AF9_DESCRI,"AFD"+StrZero(AFD->(RecNo()),12),BMP_RELAC_DIREITA_PQ,BMP_RELAC_DIREITA_PQ,,,2)
		dbSelectArea("AFD")
		dbSkip()
	EndDo
	RestArea(aAuxArea)
	aAuxArea := AFC->(GetArea())
	AFC->(dbSetOrder(1))
	dbSelectArea("AJ4")
	dbSetOrder(1)
	MsSeek(xFilial()+cChave)
	While !Eof() .And. AJ4->AJ4_FILIAL+AJ4->AJ4_PROJET+AJ4->AJ4_REVISA+;
						AJ4->AJ4_TAREFA==cFilAJ4+cChave
		AFC->(MsSeek(xFilial()+AJ4->AJ4_PROJET+AJ4->AJ4_REVISA+AJ4->AJ4_PREDEC))
		oTree:AddItem(AFC->AFC_DESCRI,"AJ4"+StrZero(AJ4->(RecNo()),12),BMP_RELAC_DIREITA_PQ,BMP_RELAC_DIREITA_PQ,,,2)
		dbSelectArea("AJ4")
		dbSkip()
	EndDo
	RestArea(aAuxArea)
EndIf

RestArea(aAreaAF9)
RestArea(aAreaAFA)
RestArea(aAreaAFB)
RestArea(aAreaAFC)
RestArea(aArea)

Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsTreeWP³ Autor ³ Edson Maricate         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao que monta o Tree dos Blocos de Trabalho do Projeto     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PMSTreeWP(oTree,cVersao)

Local cFilAFO		:= xFilial("AFO")

DEFAULT cVersao 	:= AF8->AF8_REVISA

oTree:Reset()
DBADDTREE oTree PROMPT OemToAnsi(AF8->AF8_DESCRI) RESOURCE BMP_RELATORIO,BMP_RELATORIO CARGO "AF8"+StrZero(AF8->(RecNo()),12)

dbSelectArea("AFO")
dbSetOrder(3)
MsSeek(xFilial()+AF8->AF8_PROJET+cVersao+"001")
While !Eof() .And. AFO->AFO_FILIAL+AFO->AFO_PROJET+AFO->AFO_REVISA+AFO->AFO_NIVEL==cFilAFO+AFO->AFO_PROJET+cVersao+"001"
	PmsWPTrf(@oTree,AFO->AFO_PROJET+AFO->AFO_REVISA+AFO->AFO_BLOCO)
	dbSkip()
End

DBENDTREE oTree
oTree:Refresh()

Return


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsWPTrf³ Autor ³ Edson Maricate          ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao que monta os Tarefas do Bloco de Trabalho.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSXFUN                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function PMSWPTrf(oTree,cChave)

Local lTipoTree	:= .F.
Local aArea		:= GetArea()
Local aAreaAFO	:= AFO->(GetArea())
Local aAreaAF9	:= AF9->(GetArea())
Local cResource	:= ''
Local cFilAF9		:= xFilial("AF9")
Local cFilAFO		:= xFilial("AFO")

cResource	:= BMP_NEXT

dbSelectArea("AF9")
dbSetOrder(3)
MsSeek(xFilial()+cChave)
While !Eof() .And. AF9->AF9_FILIAL+AF9->AF9_PROJET+AF9->AF9_REVISA+;
					AF9->AF9_BLOCO==cFilAF9+cChave
	If !lTipoTree
		DBADDTREE oTree PROMPT Substr(AFO->AFO_DESCRI,1,50) RESOURCE cResource,cResource CARGO "AFO"+StrZero(AFO->(RecNo()),12)
		lTipoTree := .T.
	EndIf
	DBADDTREE oTree PROMPT Substr(AF9->AF9_DESCRI,1,50) 	RESOURCE BMP_PROCESSA,BMP_PROCESSA CARGO "AF9"+StrZero(AF9->(RecNo()),12)
	dbSkip()
End


dbSelectArea("AFO")
dbSetOrder(2)
MsSeek(xFilial()+cChave)
While !Eof() .And. AFO->AFO_FILIAL+AFO->AFO_PROJET+AFO->AFO_REVISA+;
					AFO->AFO_SUBBLC==cFilAFO+cChave
	If !lTipoTree
		DBADDTREE oTree PROMPT Substr(AFO->AFO_DESCRI,1,50) RESOURCE cResource,cResource CARGO "AFO"+StrZero(AFO->(RecNo()),12)
		lTipoTree := .T.
	EndIf
	PMSWPTrf(@oTree,AFO->AFO_PROJET+AFO->AFO_REVISA+AFO->AFO_BLOCO)
	dbSkip()
EndDo

RestArea(aArea)

If lTipoTree
	DBENDTREE oTree
Else
	DBADDITEM oTree PROMPT Substr(AFO->AFO_DESCRI,1,50);
						RESOURCE cResource CARGO "AFO"+StrZero(AFO->(RecNo()),12)
EndIf

RestArea(aAreaAF9)
RestArea(aAreaAFO)
RestArea(aArea)

Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSPercPrv³ Autor ³ Edson Maricate        ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao que retorna o percentual previsto executado do Projeto ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSXFUN                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PMSPrvAF8(cProjeto,cRevisa,dDataRef)

Local nRetPrv	:= 0
Local aArea		:= GetArea()
Local aAreaAFC	:= AFC->(GetArea())

dbSelectArea("AFC")
dbSetOrder(3)
MsSeek(xFilial()+cProjeto+cRevisa+"001")
nRetPrv := PmsPrvAFC(AFC->AFC_PROJET,AFC->AFC_REVISA,AFC->AFC_EDT,dDataRef,2)/AFC->AFC_HUTEIS*100

RestArea(aAreaAFC)
RestArea(aArea)

Return nRetPrv
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSPrvAF9Cst³ Autor ³ Edson Maricate      ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao que retorna o percentual previsto executado do Projeto ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSXFUN                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PMSPrvAF9Cst(cProjeto,cRevisa,cTarefa,dDataRef)
Local lTpMed3	:= .F.
Local nRet		:= 0
Local aArea		:= GetArea()
Local aAreaAF9	:= AF9->(GetArea())
Local aAuxCRTE,nCustoReal
DEFAULT dDataRef := dDataBase

AF9->(dbSetOrder(1))
AF9->(MsSeek(xFilial()+cProjeto+cRevisa+cTarefa))
Do Case
	Case AF9->AF9_TPMEDI == "1"
		If dDataRef >= AF9->AF9_FINISH
			nRet := 1
		EndIf
	Case AF9->AF9_TPMEDI == "2"
		If dDataRef >= AF9->AF9_FINISH
			nRet := 1
		Else
			nRet := 0.2
		EndIf
	Case AF9->AF9_TPMEDI == "3"
		dbSelectArea("AFP")
		dbSetOrder(1)
		If MsSeek(xFilial()+cProjeto+cRevisa+cTarefa)
			While !Eof() .And. xFilial()+cProjeto+cRevisa+cTarefa==;
								AFP_FILIAL+AFP_PROJET+AFP_REVISA+AFP_TAREFA
				If AFP_USO==GetNewPar("MV_PMSEVEN","0001")
					lTpMed3	:= .T.
					If AFP_DTPREV <= dDataRef
						nRet := AFP_PERC/100
					EndIf
				EndIf
				dbSkip()
			End
		EndIf
		If !lTpMed3
			If dDataRef >= AF9->AF9_FINISH
				nRet := 1
			Else
				nRet := PmsHrsItvl(AF9->AF9_START,AF9->AF9_HORAI,dDataRef,"24:00",AF9->AF9_CALEND,AF9->AF9_PROJET)/AF9->AF9_HDURAC
			EndIf
		EndIf
	Case AF9->AF9_TPMEDI == "5"
		If dDataRef >= AF9->AF9_FINISH
			nRet := 1
		Else
			aAuxCRTE := PmsIniCRTE(cProjeto,cRevisa,dDataRef,cTarefa,cTarefa)
			nCustoReal := PmsRetCRTE(aAuxCRTE,1,cTarefa)[1]
			nRet := Min(nCustoReal,AF9->AF9_CUSTO)/AF9->AF9_CUSTO
		EndIf
	Case AF9->AF9_TPMEDI == "6"
		dbSelectArea("AFZ")
		dbSetOrder(1)
		If MsSeek(xFilial()+cProjeto+cRevisa+cTarefa+DTOS(dDataRef),.T.)
			nRet	:= AFZ_PERC/100
		Else
			dbSkip(-1)
			If 	!Bof().And. cProjeto==AFZ->AFZ_PROJET.And.;
				cRevisa==AFZ->AFZ_REVISA.And.;
				cTarefa==AFZ->AFZ_TAREFA
				nRet := AFZ_PERC/100
			Else
				nRet := 0
			EndIf
		EndIf
	OtherWise
		If dDataRef >= AF9->AF9_FINISH
			nRet := 1
		Else
			nRet := PmsHrsItvl(AF9->AF9_START,AF9->AF9_HORAI,dDataRef,"24:00",AF9->AF9_CALEND,AF9->AF9_PROJET)/AF9->AF9_HDURAC
		EndIf
EndCase

RestArea(aAreaAF9)
RestArea(aArea)
Return nRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSPrvAF9³ Autor ³ Edson Maricate         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao que retorna o percentual previsto executado do Projeto ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSXFUN                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PMSPrvAF9(cProjeto,cRevisa,cTarefa,dDataRef)
Local lTpMed3	:= .F.
Local nRet		:= 0
Local aArea		:= GetArea()
Local aAreaAF9	:= AF9->(GetArea())
Local aAuxCRTE,nCustoReal
Local nPercFrt := 1
DEFAULT dDataRef := dDataBase

AF9->(dbSetOrder(1))
AF9->(MsSeek(xFilial()+cProjeto+cRevisa+cTarefa))
Do Case
	Case AF9->AF9_TPMEDI == "1"
		If dDataRef >= AF9->AF9_FINISH
			nRet := AF9->AF9_HUTEIS
		EndIf
	Case AF9->AF9_TPMEDI == "2"
		If dDataRef >= AF9->AF9_FINISH
			nRet := AF9->AF9_HUTEIS
		Else
			nRet := AF9->AF9_HUTEIS*0.2
		EndIf
	Case AF9->AF9_TPMEDI == "3"
		dbSelectArea("AFP")
		dbSetOrder(1)
		If MsSeek(xFilial()+cProjeto+cRevisa+cTarefa)
			While !Eof() .And. xFilial()+cProjeto+cRevisa+cTarefa==;
								AFP_FILIAL+AFP_PROJET+AFP_REVISA+AFP_TAREFA
				If AFP_USO==GetNewPar("MV_PMSEVEN","0001")
					lTpMed3	:= .T.
					If AFP_DTPREV <= dDataRef
						nRet := AF9->AF9_HUTEIS*AFP_PERC/100
					EndIf
				EndIf
				dbSkip()
			End
		EndIf
		If !lTpMed3
			If dDataRef >= AF9->AF9_FINISH
				nRet := AF9->AF9_HUTEIS
			Else
				nRet := PmsHrsItvl(AF9->AF9_START,AF9->AF9_HORAI,dDataRef,"24:00",AF9->AF9_CALEND,AF9->AF9_PROJET)
			EndIf
		EndIf
	Case AF9->AF9_TPMEDI == "5"
		If dDataRef >= AF9->AF9_FINISH
			nRet := AF9->AF9_HUTEIS
		Else
			aAuxCRTE := PmsIniCRTE(cProjeto,cRevisa,dDataRef,cTarefa,cTarefa)
			nCustoReal := PmsRetCRTE(aAuxCRTE,1,cTarefa)[1]
			nRet := (Min(nCustoReal,AF9->AF9_CUSTO)/AF9->AF9_CUSTO)*AF9->AF9_HUTEIS
		EndIf
	Case AF9->AF9_TPMEDI == "6"
		dbSelectArea("AFZ")
		dbSetOrder(1)
		If MsSeek(xFilial()+cProjeto+cRevisa+cTarefa+DTOS(dDataRef),.T.)
			nRet	:= AF9->AF9_HUTEIS*AFZ_PERC/100
		Else
			dbSkip(-1)
			If 	!Bof().And. cProjeto==AFZ->AFZ_PROJET.And.;
				cRevisa==AFZ->AFZ_REVISA.And.;
				cTarefa==AFZ->AFZ_TAREFA
				nRet := AF9->AF9_HUTEIS*AFZ_PERC/100
			Else
				nRet := 0
			EndIf
		EndIf
	OtherWise
		If dDataRef >= AF9->AF9_FINISH
			nRet := AF9->AF9_HDURAC
		Else
			nRet := PmsHrsItvl(AF9->AF9_START,AF9->AF9_HORAI,dDataRef,"24:00",AF9->AF9_CALEND,AF9->AF9_PROJET)
		EndIf
EndCase

//CCTR - Verifica se estamos usados Frente e Pega o seu Percentual.
If !Empty(PmsGetFrt())
	nPercFrt := PmsPercFrt(AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_TAREFA,PmsGetFrt())
	nRet *= nPercFrt
Endif
RestArea(aAreaAF9)
RestArea(aArea)
Return nRet
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSPercPrv³ Autor ³ Edson Maricate        ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao que retorna o percentual previsto executado do Projeto ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSXFUN                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PMSPrvAFC(cProjeto,cRevisa,cEDT,dDataRef,nOpcao)

Local nHrsPrv	:= 0
Local aArea	:= GetArea()
Local aAreaAF9	:= AF9->(GetArea())
Local aAreaAFC	:= AFC->(GetArea())
Local cFilAF9		:=	xFilial("AF9")
Local cFilAFC		:= xFilial("AFC")

DEFAULT dDataRef := dDataBase

dbSelectArea("AF9")
dbSetOrder(2)
MsSeek(xFilial()+cProjeto+cRevisa+cEDT)
While !Eof().And.AF9_FILIAL+AF9_PROJET+AF9_REVISA+AF9_EDTPAI==;
				cFilAF9+cProjeto+cRevisa+cEDT
	nHrsPrv += PMSPrvAF9(AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_TAREFA,dDataRef)
    AF9->(dbSkip())
End

dbSelectArea("AFC")
dbSetOrder(2)
MsSeek(xFilial()+cProjeto+cRevisa+cEDT)
While !Eof().And.AFC_FILIAL+AFC_PROJET+AFC_REVISA+AFC_EDTPAI==;
				cFilAFC+cProjeto+cRevisa+cEDT
	nHrsPrv += PMSPrvAFC(cProjeto,cRevisa,AFC->AFC_EDT,dDataRef,nOpcao)
	AFC->(dbSkip())
End

RestArea(aAreaAF9)
RestArea(aAreaAFC)
RestArea(aArea)

Return nHrsPrv

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSAF1Color³ Autor ³ Edson Maricate       ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao que retorna a String de cores para utilizacao nos      ³±±
±±³          ³Browses de Orcamentos.                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSXFUN                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsAF1Color()

Local aArea		:= GetArea()
Local aRet		:= {}
Local cResColor	:= ''
Local cFilAE9		:= xFilial("AE9")

dbSelectArea("AE9")
dbSetOrder(1)
MsSeek(xFilial())
While !Eof() .And. AE9->AE9_FILIAL == cFilAE9
	Do Case
		Case AE9->AE9_CORBRW=="1"
			cResColor	:= 'DISABLE'
		Case AE9->AE9_CORBRW=="2"
			cResColor	:= 'ENABLE'
		Case AE9->AE9_CORBRW=="3"
			cResColor	:= 'BR_AZUL'
		Case AE9->AE9_CORBRW=="4"
			cResColor	:= 'BR_LARANJA'
		Case AE9->AE9_CORBRW=="5"
			cResColor	:= 'BR_CINZA'
		Case AE9->AE9_CORBRW=="6"
			cResColor	:= 'BR_MARRON'
		Case AE9->AE9_CORBRW=="7"
			cResColor	:= 'BR_PINK'
		Case AE9->AE9_CORBRW=="8"
			cResColor	:= 'BR_AMARELO'
		Case AE9->AE9_CORBRW=="9"
			cResColor	:= 'BR_PRETO'
		Case AE9->AE9_CORBRW=="A"
			cResColor	:= 'BR_BRANCO'
	EndCase
	aAdd(aRet,{'AF1_FASE=="'+AE9->AE9_COD+'"',cResColor,AE9->AE9_DESCRI})
	dbSkip()
End

RestArea(aArea)
Return aRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSAF8Color³ Autor ³ Edson Maricate       ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao que retorna a String de cores para utilizacao nos      ³±±
±±³          ³Browses de Projetos  .                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSXFUN                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsAF8Color()

Local aArea		:= GetArea()
Local aAreaAEA	:= AEA->(GetArea())
Local aRet		:= {}
Local cResColor	:= ''
Local cFilAEA		:= xFilial("AEA")

dbSelectArea("AEA")
dbSetOrder(1)
PmsChkAEA()
MsSeek(cFilAEA)
While !Eof() .And. AEA->AEA_FILIAL == cFilAEA
	Do Case
		Case AEA->AEA_CORBRW=="1"
			cResColor	:= 'DISABLE'
		Case AEA->AEA_CORBRW=="2"
			cResColor	:= 'ENABLE'
		Case AEA->AEA_CORBRW=="3"
			cResColor	:= 'BR_AZUL'
		Case AEA->AEA_CORBRW=="4"
			cResColor	:= 'BR_LARANJA'
		Case AEA->AEA_CORBRW=="5"
			cResColor	:= 'BR_CINZA'
		Case AEA->AEA_CORBRW=="6"
			cResColor	:= 'BR_MARRON'
		Case AEA->AEA_CORBRW=="7"
			cResColor	:= 'BR_PINK'
		Case AEA->AEA_CORBRW=="8"
			cResColor	:= 'BR_AMARELO'
		Case AEA->AEA_CORBRW=="9"
			cResColor	:= 'BR_PRETO'
		Case AEA->AEA_CORBRW=="A"
			cResColor	:= 'BR_BRANCO'
	EndCase
	aAdd(aRet,{'AF8->AF8_FASE=="'+AEA->AEA_COD+'"',cResColor,AEA->AEA_DESCRI})
	dbSkip()
End

RestArea(aAreaAEA)
RestArea(aArea)
Return aRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSRetDescr³ Autor ³ Michel Dantas        ³ Data ³ 03-07-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³                                                              ³±±
±±³          ³                                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSXFUN                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsRetDesc(cPesq,cCampo,nOrd)
Local cDescri := Nil
Local cAlias  := ""

If At("_",cCampo) == 4
	cAlias := Substr(cCampo,1,3)
Else
	cAlias := "S"+Substr(cCampo,1,2)
EndIf

If !Empty(cCampo)
	If !Empty(cAlias)
		DbSelectArea(cAlias)
		If !Empty(nOrd)
			DbSetOrder(nOrd)
		EndIf
		MsSeek(xFilial()+cPesq)
		cDescri := &(cCampo)
	EndIf
EndIf
Return cDescri

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³AtuVldVar  ³ Autor ³ Wagner Mobile Costa  ³ Data ³ 04-07-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Atualiza o aCols atual com o ReadVar em digitacao             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSXFUN                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsAtuaCols(nColsSV)

Local cReadVar := ReadVar(), aColsV := AClone(aCols), nHeader

If nColsSV != Nil
	nHeader := Ascan(aHeaderSV[nColsSV], { |X| X[2] = StrTran(cReadVar, "M->", "") })
	aColsV	:= aColsSV[nColsSV]
Else
	nHeader := Ascan(aHeader, { |X| X[2] = StrTran(cReadVar, "M->", "") })
EndIf

If nHeader > 0
	If nColsSV!=Nil
		aColsSV[nColsSV,aSavN[nColsSV],nHeader]	:= &(cReadVar)
	Else
		aColsV[n,nHeader] := &(cReadVar)
	EndIf
Endif

Return aColsV


/*/{Protheus.doc} PmsIniCRTE

Inicializa as funcoes de calculo de Custos Realizados do Projetos

@param cProjeto, character, (Descrição do parâmetro)
@param cRevisa, character, (Descrição do parâmetro)
@param dDataRef, data, (Descrição do parâmetro)
@param cTrfDe, character, (Descrição do parâmetro)
@param cTrfAte, character, (Descrição do parâmetro)
@param lAcumulado, ${param_type}, (Descrição do parâmetro)
@param lFilProd, ${param_type}, (Descrição do parâmetro)
@param cProdDe, character, (Descrição do parâmetro)
@param cProdAte, character, (Descrição do parâmetro)
@param aArrayTrb, array, (Descrição do parâmetro)
@param aFiltroRlz, array, (Descrição do parâmetro)
@param aTasks, array, (Descrição do parâmetro)
@return ${return}, ${return_description}

@author Edson Maricate
@since 04-07-2001
@version 1.0
/*/
Function PmsIniCRTE(cProjeto,cRevisa,dDataRef,cTrfDe,cTrfAte,lAcumulado,lFilProd,cProdDe,cProdAte,aArrayTrb,aFiltroRlz ,aTasks)

Local aArea		:= GetArea()
Local aAreaAF9	:= AF9->(GetArea())
Local aAreaAF8	:= AF8->(GetArea())
Local aAreaSD3	:= SD3->(GetArea())
Local aAreaSD1	:= SD1->(GetArea())
Local aAreaSE2	:= SE2->(GetArea())
Local aAreaSE5	:= SE5->(GetArea())
Local cTrfAtu	:= ""
Local cQryBkp   := ""
Local cQry      := ""
Local cSQLFSB1  := ""
Local cSQLFAE8  := ""
Local cSQLFAF9  := ""
Local cCodTasks := ""
Local cQryFilAFM:= ""
Local nSinal	:= 1
Local nPosTrf	:= 0
Local nCnt      := 0
Local lConsidera:= .T.
Local cFilAF9	:= xFilial("AF9")
Local cFilSB1	:= xFilial("SB1")
Local cFilAF8	:= xFilial("AF8")
Local lAFN_ESTOQU := AFN->(ColumnPos("AFN_ESTOQU")) > 0
Local nAFSQuant := 0
Local nSD2Quant := 0
Local nAFNQuant := 0
Local nSD1Quant := 0
Local cCpoSDoc	:= ""
Local lCompAFR  := FWModeAccess("AFR") == "E"
Local lCompAFN  := FWModeAccess("AFN") == "E"

DEFAULT cTrfDe     	:= ""
DEFAULT cTrfAte    	:= "zzzzzzzzzzzz"
DEFAULT cProdDe    	:= ""
DEFAULT cProdAte   	:= "zzzzzzzzzzzzzzz"
DEFAULT lFilProd   	:= .F.
DEFAULT lAcumulado 	:= .T.
DEFAULT aArrayTrb	:= {}
DEFAULT aFiltroRLZ	:=	Array(FILTER_LENGTH)
DEFAULT aTasks      := {}
DEFAULT lAF8TpCus 	:= AF8->(ColumnPos("AF8_TPCUS")) > 0

/* variaveis staticas declaradas no inicio do fonte */
DEFAULT lPmsFilAFM	:= ExistBlock("PmsFilAFM")
DEFAULT lPmsSD3CRTE	:= ExistBlock( "PmsSD3CRTE" )
DEFAULT lPmsSD3Qry	:= ExistBlock( "PmsSD3Qry" )
DEFAULT lPMSQRCRTE 	:= ExistBlock("PMSQRCRTE")

If Len(aTasks)>0
	For nCnt := 1 to Len(aTasks)
		cCodTasks += "'" + aTasks[nCnt] + "' ,"
	Next nCnt
	cCodTasks := Left( cCodTasks ,Len(cCodTasks)-2)
EndIf

dbSelectArea("SD1")
dbSetOrder(1)

dbSelectArea("SD2")
dbSetOrder(3) // D2_FILIAL + D2_DOC + D2_SERIE + D2_CLIENTE + D2_LOJA + D2_COD + D2_ITEM

dbSelectArea("AF8")
dbSetOrder(1)
MsSeek(cFilAF8+cProjeto)

dbSelectArea("AF9")
dbSetOrder(1)

STATIC cCrteFSB1 := ""
STATIC cCrteFAE8 := ""
STATIC cCrteFAF9 := ""

If !Empty(cCrteFSB1)
	cSQLFSB1 := PcoParseFil( cCrteFSB1, "SB1")
EndIf
If !Empty(cCrteFAE8)
	cSQLFAE8 := PcoParseFil( cCrteFAE8, "AE8")
EndIf
If !Empty(cCrteFAF9)
	cSQLFAF9 := PcoParseFil( cCrteFAF9, "AF9")
EndIf

If Empty(aCrteProc) .Or. aCrteProc[1]  // Considerar Documento de Entrada

	cQry := "SELECT "
	cQry += "AFN.AFN_QUANT, "
	cQry += "AFN.AFN_DOC, AFN.AFN_TIPONF, AFN.AFN_SERIE, AFN.AFN_FORNEC, AFN.AFN_LOJA, "
	cQry += "AFN.AFN_PROJET, AFN.AFN_REVISA, AFN.AFN_TAREFA, AFN.AFN_COD, "
	If lAFN_ESTOQU
		cQry += "AFN.AFN_ESTOQU, "
	EndIf

	cCpoSDoc	:= SerieNfId("AFN",3,"AFN_SERIE")
	If !(cCpoSDoc $ cQry)
		cQry += "AFN."+cCpoSDoc+", "
	EndIf
	
	cQry += "SD1.D1_NFORI, SD1.D1_SERIORI, SD1.D1_FORNECE, SD1.D1_LOJA, SD1.D1_ITEMORI, "

	cCpoSDoc	:= SerieNfId("SD1",3,"D1_SERIORI")
	If !(cCpoSDoc $ cQry)
		cQry += "SD1."+cCpoSDoc+", "
	EndIf

	cQry += "SD1.D1_QTDEDEV, SD1.D1_TIPO, SD1.D1_CUSTO, SD1.D1_CUSTO2, SD1.D1_CUSTO3, "
	cQry += "SD1.D1_CUSTO4, SD1.D1_CUSTO5, SD1.D1_ORIGLAN, SD1.D1_QUANT, "
	cQry += "AF9.AF9_EDTPAI "

	cQry += "FROM "+RetSqlName("AFN")+" AFN "

	cQry += "INNER JOIN "+RetSqlName("AF8")+" AF8 ON "
		cQry += "AF8.AF8_PROJET = AFN.AFN_PROJET "

	cQry += "INNER JOIN "+RetSqlName("SD1")+" SD1 ON "
		cQry += "SD1.D1_DOC     = AFN.AFN_DOC AND "
		cQry += "SD1.D1_SERIE   = AFN.AFN_SERIE AND "
		cQry += "SD1.D1_FORNECE = AFN.AFN_FORNEC AND "
		cQry += "SD1.D1_LOJA    = AFN.AFN_LOJA AND "
		cQry += "SD1.D1_COD     = AFN.AFN_COD AND "
		cQry += "SD1.D1_ITEM    = AFN.AFN_ITEM "
		If !lCompAFN .AND. AFN->(ColumnPos("AFN_MSFIL")) > 0
			cQry += "AND SD1.D1_FILIAL  = AFN.AFN_MSFIL "
		EndIf

	cQry += "INNER JOIN "+RetSqlName("AF9")+" AF9 ON "
		cQry += "AF9.AF9_PROJET = AFN.AFN_PROJET AND "
		cQry += "AF9.AF9_REVISA = AFN.AFN_REVISA AND "
		cQry += "AF9.AF9_TAREFA = AFN.AFN_TAREFA "

	If !Empty(cSQLFSB1)
		cQry += "LEFT OUTER JOIN "+RetSqlName("SB1")+" SB1 ON "
		cQry += "SB1.B1_COD = AFN.AFN_COD "
	EndIf

	cQry += "WHERE "

	cQry += "AFN.AFN_FILIAL = '"+xFilial("AFN")+"' AND "
	cQry += "AFN.AFN_PROJET = '"+cProjeto+"' AND "
	cQry += "AFN.AFN_REVISA = '"+cRevisa+"' AND "

	//Motivo: Campo p/ nao considerar apontamentos de NF no custo
	If AFN->(ColumnPos("AFN_ESTOQU") > 0)
		cQry += "AFN.AFN_ESTOQU <> '2' AND "
	EndIf

	If Empty(cCodTasks)
		cQry += "AFN.AFN_TAREFA BETWEEN '"+cTrfDe+"' AND '"+cTrfAte+"' AND "
	Else
		cQry += "AFN.AFN_TAREFA IN (" + cCodTasks +") AND "
	EndIf

	cQry += "AFN.D_E_L_E_T_ = ' ' AND "
	If !(aFiltroRLZ[FILTER_AFN] == Nil)
		cQry += "("+ aFiltroRLZ[FILTER_AFN]+") AND "
	Endif
	//CCTR - Verifica se estamos usando Frente .
	If !Empty(PmsGetFrt())
		cQry += "AFN.AFN_CODFRT ='" +PmsGetFrt() + "' AND "
	Endif
	cQry += "AF8.AF8_FILIAL = '"+cFilAF8+"' AND "
	cQry += "AF8.D_E_L_E_T_ = ' ' AND "

	If lCompAFN
		cQry += "SD1.D1_FILIAL  = '"+PmsFilial("SD1","AFN")+"' AND "
	EndIf
	cQry += "SD1.D1_DTDIGIT "+Iif(lAcumulado,"<=","=")+" '"+DTOS(dDataRef)+"' AND "
	If lFilProd
		cQry += "SD1.D1_COD BETWEEN '"+cProdDe+"' AND '"+cProdAte+"' AND "
	EndIf
	cQry += "SD1.D_E_L_E_T_ = ' ' AND "

	cQry += "AF9.AF9_FILIAL = '"+cFilAF9+"' AND "
	If !Empty(cCrteFAF9)
		cQry += cCrteFAF9 + " AND "
	EndIf
	cQry += "AF9.D_E_L_E_T_ = ' '"

	If !Empty(cSQLFSB1)
		cQry += " AND "
		cQry += "SB1.B1_FILIAL = '"+cFilSB1+"' AND "
		If !Empty(cSQLFSB1)
			cQry += cSQLFSB1 + " AND "
		EndIf
		cQry += "SB1.D_E_L_E_T_ = ' '"
	EndIf

	If lPMSQRCRTE
		cQryBkp := cQry
		cQry := ExecBlock("PMSQRCRTE", .F., .F., {cQry,aCrteProc,1})
		If Valtype(cQry)<>"C"
 			cQry := cQryBkp
		EndIf
	EndIf

	cQry := ChangeQuery(cQry)
	DbUseArea(.T.,"TOPCONN",TCGENQRY(,,cQry),"QRYCRTE",.F.,.T.)
	DbSelectArea("QRYCRTE")
	Do While !QRYCRTE->(Eof())
		If ! (cTrfAtu == QRYCRTE->AFN_TAREFA)
			nPosTrf := aScan(aArrayTrb,{|x|x[1]==QRYCRTE->AFN_TAREFA})
			If nPosTrf <= 0
				aAdd(aArrayTrb,{QRYCRTE->AFN_TAREFA,,{0,0,0,0,0,{} }})
				nPosTrf	:= Len(aArrayTrb)
			EndIf
			cTrfAtu := QRYCRTE->AFN_TAREFA
		EndIf

		nAFNQuant := PmsAFNQUANT("VALOR","QRYCRTE","QRYCRTE")
		nSD1Quant := PmsSD1QUANT("QRYCRTE","QRYCRTE")

		aArrayTrb[nPosTrf ,03 ,01] += nAFNQuant*(QRYCRTE->D1_CUSTO/nSD1Quant)
		aArrayTrb[nPosTrf ,03 ,02] += nAFNQuant*(QRYCRTE->D1_CUSTO2/nSD1Quant)
		aArrayTrb[nPosTrf ,03 ,03] += nAFNQuant*(QRYCRTE->D1_CUSTO3/nSD1Quant)
		aArrayTrb[nPosTrf ,03 ,04] += nAFNQuant*(QRYCRTE->D1_CUSTO4/nSD1Quant)
		aArrayTrb[nPosTrf ,03 ,05] += nAFNQuant*(QRYCRTE->D1_CUSTO5/nSD1Quant)
		AddCRTEEDT(@aArrayTrb,{nAFNQuant*(QRYCRTE->D1_CUSTO/nSD1Quant),;
		                       nAFNQuant*(QRYCRTE->D1_CUSTO2/nSD1Quant),;
		                       nAFNQuant*(QRYCRTE->D1_CUSTO3/nSD1Quant),;
		                       nAFNQuant*(QRYCRTE->D1_CUSTO4/nSD1Quant),;
		                       nAFNQuant*(QRYCRTE->D1_CUSTO5/nSD1Quant),{}};
		                       ,cProjeto,cRevisa,QRYCRTE->AF9_EDTPAI)

		QRYCRTE->(DbSkip())
	EndDo
	QRYCRTE->(DbCloseArea())

EndIf

// Considerar Remessas (Documento de saida)
If Empty(aCrteProc) .Or. aCrteProc[7]

	cQry := "SELECT AFS.AFS_PROJET, AFS.AFS_REVISA, AFS.AFS_TAREFA, AFS_NUMSEQ, AFS.AFS_QUANT,AF9.AF9_EDTPAI, "
	cQry += "SUM(SD2.D2_CUSTO1) D2_CUSTO1, SUM(SD2.D2_CUSTO2) D2_CUSTO2,SUM(SD2.D2_CUSTO3) D2_CUSTO3,SUM(SD2.D2_CUSTO4) D2_CUSTO4,SUM(SD2.D2_CUSTO5) D2_CUSTO5,"
	cQry += "SUM(SD2.D2_QUANT) D2_QUANT, AFS_MOVPRJ ,SUM(SD2.D2_QTDEDEV) D2_QTDEDEV "
	If cPaisLoc <> "BRA"
		cQry += ", D2_ESPECIE, SD2.D2_NFORI, SD2.D2_SERIORI, SD2.D2_CLIENTE, SD2.D2_LOJA, SD2.D2_COD, SD2.D2_ITEMORI "
		cCpoSDoc	:= SerieNfId("SD2",3,"D2_SERIORI")
		If !(cCpoSDoc $ cQry)
			cQry += "SD2."+cCpoSDoc+", "
		EndIf
	EndIf

	cQry += "FROM "+RetSqlName("AFS")+" AFS "

	cQry += "INNER JOIN "+RetSqlName("AF8")+" AF8 ON "
	cQry += "AF8.AF8_PROJET = AFS.AFS_PROJET "

	cQry += "INNER JOIN "+RetSqlName("SD2")+" SD2 ON "
	cQry += "SD2.D2_DOC     = AFS.AFS_DOC AND "
	cQry += "SD2.D2_SERIE   = AFS.AFS_SERIE AND "
	cQry += "SD2.D2_NUMSEQ = AFS.AFS_NUMSEQ "

	cQry += "INNER JOIN "+RetSqlName("AF9")+" AF9 ON "
	cQry += "AF9.AF9_PROJET = AFS.AFS_PROJET AND "
	cQry += "AF9.AF9_REVISA = AFS.AFS_REVISA AND "
	cQry += "AF9.AF9_TAREFA = AFS.AFS_TAREFA "

	If !Empty(cSQLFSB1)
		cQry += "LEFT OUTER JOIN "+RetSqlName("SB1")+" SB1 ON "
		cQry += "SB1.B1_COD = AFS.AFS_COD "
	EndIf

	cQry += "WHERE "

	cQry += "AFS.AFS_FILIAL =  '"+xFilial("AFS")+"' AND "
	cQry += "AFS.AFS_PROJET =  '"+cProjeto+"' AND "
	cQry += "AFS.AFS_REVISA =  '"+cRevisa+"' AND "
	If Empty(cCodTasks)
		cQry += "AFS.AFS_TAREFA BETWEEN '"+cTrfDe+"' AND '"+cTrfAte+"' AND "
	Else
		cQry += "AFS.AFS_TAREFA IN (" + cCodTasks +") AND "
	EndIf
	cQry += "AFS.AFS_MOVPRJ IN ('2','4','5') AND " //Despesa, devolucao de despesa ou receita e despesa
	cQry += "AFS.D_E_L_E_T_ = ' ' AND "
	If ! (aFiltroRLZ[FILTER_AFS] == Nil)
		cQry += "("+ aFiltroRLZ[FILTER_AFS]+") AND "
	Endif
	//CCTR - Verifica se estamos usando Frente .
	If !Empty(PmsGetFrt())
		cQry += "AFS.AFS_CODFRT ='" +PmsGetFrt() + "' AND "
	Endif
	cQry += "AF8.AF8_FILIAL = '"+cFilAF8+"' AND "
	cQry += "AF8.D_E_L_E_T_ = ' ' AND "

	cQry += "SD2.D2_FILIAL  = '"+PmsFilial("SD2","AFS")+"' AND "
	If SD2->(ColumnPos('D2_DTDIGIT')) > 0 .And. !(cPaisLoc=="BRA")
		cQry += "SD2.D2_DTDIGIT "+Iif(lAcumulado,"<=","=")+" '"+DTOS(dDataRef)+"' AND "
	Else
		cQry += "SD2.D2_EMISSAO "+Iif(lAcumulado,"<=","=")+" '"+DTOS(dDataRef)+"' AND "
	Endif
	If lFilProd
		cQry += "SD2.D2_COD BETWEEN '"+cProdDe+"' AND '"+cProdAte+"' AND "
	EndIf
	cQry += "SD2.D_E_L_E_T_ = ' ' AND "

	cQry += "AF9.AF9_FILIAL = '"+cFilAF9+"' AND "
	If !Empty(cCrteFAF9)
		cQry += cCrteFAF9 + " AND "
	EndIf
	cQry += "AF9.D_E_L_E_T_ = ' '"

	If !Empty(cSQLFSB1)
		cQry += " AND "
		cQry += "SB1.B1_FILIAL = '"+cFilSB1+"' AND "
		If !Empty(cSQLFSB1)
			cQry += cSQLFSB1 + " AND "
		EndIf
		cQry += "SB1.D_E_L_E_T_ = ' ' "
	EndIf

	cQry += " GROUP BY AFS.AFS_PROJET, AFS.AFS_REVISA, AFS.AFS_TAREFA, AFS.AFS_NUMSEQ, AFS.AFS_QUANT,AF9.AF9_EDTPAI,AFS_MOVPRJ,AFS.AFS_DOC,AFS.AFS_SERIE "
	cCpoSDoc	:= SerieNfId("AFS",3,"AFS_SERIE")
	If !(cCpoSDoc $ cQry)
		cQry += ", AFS."+cCpoSDoc+" "
	EndIf
	
	If cPaisLoc <> "BRA"
		cQry += ", D2_ESPECIE, SD2.D2_NFORI, SD2.D2_SERIORI, SD2.D2_CLIENTE, SD2.D2_LOJA, SD2.D2_COD, SD2.D2_ITEMORI "
		cCpoSDoc	:= SerieNfId("SD2",3,"D2_SERIORI")
		If !(cCpoSDoc $ cQry)
			cQry += ", SD2."+cCpoSDoc+" "
		EndIf
	EndIf

	If lPMSQRCRTE
		cQryBkp := cQry
		cQry := ExecBlock("PMSQRCRTE", .F., .F., {cQry,aCrteProc,7})
		If Valtype(cQry)<>"C"
 			cQry := cQryBkp
		EndIf
	EndIf

	cQry := ChangeQuery(cQry)
	DbUseArea(.T.,"TOPCONN",TCGENQRY(,,cQry),"QRYCRTE",.F.,.T.)
	DbSelectArea("QRYCRTE")
	Do While !QRYCRTE->(Eof())

		If !(cTrfAtu == QRYCRTE->AFS_TAREFA)
			nPosTrf := aScan(aArrayTrb,{|x|x[1]==QRYCRTE->AFS_TAREFA})
			If nPosTrf <= 0
				aAdd(aArrayTrb,{QRYCRTE->AFS_TAREFA,,{0,0,0,0,0,{}}})
				nPosTrf	:= Len(aArrayTrb)
			EndIf
			cTrfAtu := QRYCRTE->AFS_TAREFA
		EndIf
		nSinal	:=	iIf(QRYCRTE->AFS_MOVPRJ $ '25',1,-1)

		nAFSQuant := PmsAFSQUANT("QRYCRTE","QRYCRTE")
		nSD2Quant := PmsSD2QUANT("QRYCRTE")

		aArrayTrb[nPosTrf,3,1] += nAFSQuant*(QRYCRTE->D2_CUSTO1/nSD2Quant) * nSinal
		aArrayTrb[nPosTrf,3,2] += nAFSQuant*(QRYCRTE->D2_CUSTO2/nSD2Quant) * nSinal
		aArrayTrb[nPosTrf,3,3] += nAFSQuant*(QRYCRTE->D2_CUSTO3/nSD2Quant) * nSinal
		aArrayTrb[nPosTrf,3,4] += nAFSQuant*(QRYCRTE->D2_CUSTO4/nSD2Quant) * nSinal
		aArrayTrb[nPosTrf,3,5] += nAFSQuant*(QRYCRTE->D2_CUSTO5/nSD2Quant) * nSinal
		AddCRTEEDT(@aArrayTrb,{	nAFSQuant*(QRYCRTE->D2_CUSTO1/nSD2Quant) * nSinal,;
		                       	nAFSQuant*(QRYCRTE->D2_CUSTO2/nSD2Quant) * nSinal,;
		                       	nAFSQuant*(QRYCRTE->D2_CUSTO3/nSD2Quant) * nSinal,;
		                       	nAFSQuant*(QRYCRTE->D2_CUSTO4/nSD2Quant) * nSinal,;
		                       	nAFSQuant*(QRYCRTE->D2_CUSTO5/nSD2Quant) * nSinal,{}};
		                       	,cProjeto,cRevisa,QRYCRTE->AF9_EDTPAI)

		QRYCRTE->(DbSkip())
	EndDo
	QRYCRTE->(DbCloseArea())

Endif

If Empty(aCrteProc) .Or. aCrteProc[6]  // Considerar Requisições (movimentos internos)

	cQry := "SELECT "
	cQry += "SUM(SD3.D3_CUSFF1) D3_CUSFF1, SUM(SD3.D3_CUSFF2) D3_CUSFF2,SUM(SD3.D3_CUSFF3) D3_CUSFF3,SUM(SD3.D3_CUSFF4) D3_CUSFF4,SUM(SD3.D3_CUSFF5) D3_CUSFF5,"
	cQry += "SUM(SD3.D3_CUSTO1) D3_CUSTO1, SUM(SD3.D3_CUSTO2) D3_CUSTO2,SUM(SD3.D3_CUSTO3) D3_CUSTO3,SUM(SD3.D3_CUSTO4) D3_CUSTO4,SUM(SD3.D3_CUSTO5) D3_CUSTO5,"
	cQry += "SD3.D3_TASKPMS, SD3.D3_TM, "
	If lAF8TpCus
		cQry += "AF8.AF8_TPCUS, "
	EndIf
	cQry += "AF9.AF9_EDTPAI "

	cQry += "FROM "+RetSqlName("AFI")+" AFI "

	cQry += "INNER JOIN "+RetSqlName("AF8")+" AF8 ON "
	cQry += "AF8.AF8_PROJET = AFI.AFI_PROJET "

	cQry += "INNER JOIN "+RetSqlName("SD3")+" SD3 ON "
		cQry += "SD3.D3_COD     = AFI.AFI_COD AND "
		cQry += "SD3.D3_LOCAL   = AFI.AFI_LOCAL AND "
		cQry += "SD3.D3_EMISSAO = AFI.AFI_EMISSA AND "
		cQry += "SD3.D3_NUMSEQ  = AFI.AFI_NUMSEQ "

		cQry += "INNER JOIN "+RetSqlName("AF9")+" AF9 ON "
		cQry += "AF9.AF9_PROJET = AFI.AFI_PROJET AND "
		cQry += "AF9.AF9_REVISA = AFI.AFI_REVISA AND "
		cQry += "AF9.AF9_TAREFA = AFI.AFI_TAREFA "

	If !Empty(cSQLFSB1)
		cQry += "LEFT OUTER JOIN "+RetSqlName("SB1")+" SB1 ON "
			cQry += "SB1.B1_COD = SD3.D3_COD "
	EndIf

	cQry += "WHERE "

	cQry += "AFI.AFI_FILIAL = '"+xFilial("AFI")+"' AND "
	cQry += "AFI.AFI_PROJET = '"+cProjeto+"' AND "
	cQry += "AFI.AFI_REVISA = '"+cRevisa+"' AND "
	If Empty(cCodTasks)
		cQry += "AFI.AFI_TAREFA BETWEEN '"+cTrfDe+"' AND '"+cTrfAte+"' AND "
	Else
		cQry += "AFI.AFI_TAREFA IN (" + cCodTasks +") AND "
	EndIf
	cQry += "AFI.D_E_L_E_T_ = ' ' AND "
	If aFiltroRLZ[FILTER_AFI] <> Nil
		cQry += "("+ aFiltroRLZ[FILTER_AFI]+") AND "
	Endif
	//CCTR - Verifica se estamos usando Frente .
	If !Empty(PmsGetFrt())
		cQry += "AFI.AFI_CODFRT ='" +PmsGetFrt() + "' AND "
	Endif

	cQry += "AF8.AF8_FILIAL = '"+cFilAF8+"' AND "

	cQry += "AF8.D_E_L_E_T_ = ' ' AND "

	cQry += "SD3.D3_FILIAL  = '"+PmsFilial("SD3","AFI")+"' AND "
	cQry += "SD3.D3_EMISSAO "+Iif(lAcumulado,"<=","=")+" '"+DTOS(dDataRef)+"' AND "
	cQry += "SD3.D3_ESTORNO <> 'S' AND "
	cQry += "SD3.D3_CF      <> 'RE5' AND "
	If lFilProd
		cQry += "SD3.D3_COD BETWEEN '"+cProdDe+"' AND '"+cProdAte+"' AND "
	EndIf
	cQry += "SD3.D_E_L_E_T_ = ' ' AND "

	cQry += "AF9.AF9_FILIAL = '"+cFilAF9+"' AND "
	If !Empty(cCrteFAF9)
		cQry += cCrteFAF9 + " AND "
	EndIf
	cQry += "AF9.D_E_L_E_T_ = ' '"

	If !Empty(cSQLFSB1)
		cQry += " AND "
		cQry += "SB1.B1_FILIAL = '"+cFilSB1+"' AND "
		If !Empty(cSQLFSB1)
			cQry += cSQLFSB1 + " AND "
		EndIf
		cQry += "SB1.D_E_L_E_T_ = ' '"
	EndIf
	cQry	+=	" GROUP BY SD3.D3_TASKPMS, SD3.D3_TM, "
	If lAF8TpCus
		cQry += "AF8.AF8_TPCUS, "
	EndIf
	cQry += "AF9.AF9_EDTPAI "

	If lPMSQRCRTE
		cQryBkp := cQry
		cQry := ExecBlock("PMSQRCRTE", .F., .F., {cQry,aCrteProc,6})
		If Valtype(cQry)<>"C"
 			cQry := cQryBkp
		EndIf
	EndIf

	cQry := ChangeQuery(cQry)
	DbUseArea(.T.,"TOPCONN",TCGENQRY(,,cQry),"QRYCRTE",.F.,.T.)
	DbSelectArea("QRYCRTE")
	Do While !QRYCRTE->(Eof())

		If ! (cTrfAtu == QRYCRTE->D3_TASKPMS)
			nPosTrf := aScan(aArrayTrb,{|x|x[1]==QRYCRTE->D3_TASKPMS})
			If nPosTrf <= 0
				aAdd(aArrayTrb,{QRYCRTE->D3_TASKPMS,,{0,0,0,0,0,{}}})
				nPosTrf := Len(aArrayTrb)
			EndIf
			cTrfAtu := QRYCRTE->D3_TASKPMS
		EndIf

		If !lAF8TpCus .Or. QRYCRTE->AF8_TPCUS == "2"
			If QRYCRTE->D3_TM > "500"
				aArrayTrb[nPosTrf,3,1] += QRYCRTE->D3_CUSFF1
				aArrayTrb[nPosTrf,3,2] += QRYCRTE->D3_CUSFF2
				aArrayTrb[nPosTrf,3,3] += QRYCRTE->D3_CUSFF3
				aArrayTrb[nPosTrf,3,4] += QRYCRTE->D3_CUSFF4
				aArrayTrb[nPosTrf,3,5] += QRYCRTE->D3_CUSFF5
				AddCRTEEDT(@aArrayTrb,{QRYCRTE->D3_CUSFF1,QRYCRTE->D3_CUSFF2,QRYCRTE->D3_CUSFF3,QRYCRTE->D3_CUSFF4,QRYCRTE->D3_CUSFF5,{}},cProjeto,cRevisa,QRYCRTE->AF9_EDTPAI)
			Else
				aArrayTrb[nPosTrf,3,1] -= QRYCRTE->D3_CUSFF1
				aArrayTrb[nPosTrf,3,2] -= QRYCRTE->D3_CUSFF2
				aArrayTrb[nPosTrf,3,3] -= QRYCRTE->D3_CUSFF3
				aArrayTrb[nPosTrf,3,4] -= QRYCRTE->D3_CUSFF4
				aArrayTrb[nPosTrf,3,5] -= QRYCRTE->D3_CUSFF5
				AddCRTEEDT(@aArrayTrb,{QRYCRTE->D3_CUSFF1*-1,QRYCRTE->D3_CUSFF2*-1,QRYCRTE->D3_CUSFF3*-1,QRYCRTE->D3_CUSFF4*-1,QRYCRTE->D3_CUSFF5*-1,{}},cProjeto,cRevisa,QRYCRTE->AF9_EDTPAI)
			EndIf
		Else
			If QRYCRTE->D3_TM > "500"
				aArrayTrb[nPosTrf,3,1] += QRYCRTE->D3_CUSTO1
				aArrayTrb[nPosTrf,3,2] += QRYCRTE->D3_CUSTO2
				aArrayTrb[nPosTrf,3,3] += QRYCRTE->D3_CUSTO3
				aArrayTrb[nPosTrf,3,4] += QRYCRTE->D3_CUSTO4
				aArrayTrb[nPosTrf,3,5] += QRYCRTE->D3_CUSTO5
				AddCRTEEDT(@aArrayTrb,{QRYCRTE->D3_CUSTO1,QRYCRTE->D3_CUSTO2,QRYCRTE->D3_CUSTO3,QRYCRTE->D3_CUSTO4,QRYCRTE->D3_CUSTO5,{}},cProjeto,cRevisa,QRYCRTE->AF9_EDTPAI)
			Else
				aArrayTrb[nPosTrf,3,1] -= QRYCRTE->D3_CUSTO1
				aArrayTrb[nPosTrf,3,2] -= QRYCRTE->D3_CUSTO2
				aArrayTrb[nPosTrf,3,3] -= QRYCRTE->D3_CUSTO3
				aArrayTrb[nPosTrf,3,4] -= QRYCRTE->D3_CUSTO4
				aArrayTrb[nPosTrf,3,5] -= QRYCRTE->D3_CUSTO5
				AddCRTEEDT(@aArrayTrb,{QRYCRTE->D3_CUSTO1*-1,QRYCRTE->D3_CUSTO2*-1,QRYCRTE->D3_CUSTO3*-1,QRYCRTE->D3_CUSTO4*-1,QRYCRTE->D3_CUSTO5*-1,{}},cProjeto,cRevisa,QRYCRTE->AF9_EDTPAI)
			EndIf
		EndIf

		QRYCRTE->(DbSkip())
	EndDo
	QRYCRTE->(DbCloseArea())

EndIf

If Empty(aCrteProc) .Or. aCrteProc[4]  // Considerar Recursos

	cQry := "SELECT "
	cQry += "SUM(AFU.AFU_CUSTO1) AFU_CUSTO1,SUM(AFU.AFU_CUSTO2) AFU_CUSTO2,SUM(AFU.AFU_CUSTO3) AFU_CUSTO3,SUM(AFU.AFU_CUSTO4) AFU_CUSTO4,SUM(AFU.AFU_CUSTO5) AFU_CUSTO5,"
	cQry += "AF9.AF9_EDTPAI, AFU.AFU_TAREFA "
	cQry += "FROM "+RetSqlName("AFU")+" AFU "

	cQry += "INNER JOIN "+RetSqlName("AF8")+" AF8 ON "
		cQry += "AF8.AF8_PROJET = AFU.AFU_PROJET "

	cQry += "INNER JOIN "+RetSqlName("AF9")+" AF9 ON "
		cQry += "AF9.AF9_PROJET = AFU.AFU_PROJET AND "
		cQry += "AF9.AF9_REVISA = AFU.AFU_REVISA AND "
		cQry += "AF9.AF9_TAREFA = AFU.AFU_TAREFA "

	If !Empty(cSQLFAE8)
		cQry += "LEFT OUTER JOIN "+RetSqlName("AE8")+" AE8 ON "
			cQry += "AE8.AE8_RECURS = AFU.AFU_RECURS "
	EndIf

	If !Empty(cSQLFSB1)
		cQry += "LEFT OUTER JOIN "+RetSqlName("SB1")+" SB1 ON "
			cQry += "SB1.B1_COD = AFU.AFU_COD "
	EndIf

	cQry += "WHERE "

	cQry += "AFU.AFU_FILIAL = '"+xFilial("AFU")+"' AND "
	cQry += "AFU.AFU_PROJET = '"+cProjeto+"' AND "
	cQry += "AFU.AFU_REVISA = '"+cRevisa+"' AND "
	cQry += "AFU.AFU_CTRRVS = '1' AND "
	If Empty(cCodTasks)
		cQry += "AFU.AFU_TAREFA BETWEEN '"+cTrfDe+"' AND '"+cTrfAte+"' AND "
	Else
		cQry += "AFu.AFU_TAREFA IN (" + cCodTasks +") AND "
	EndIf
	cQry += "AFU.AFU_DATA "+Iif(lAcumulado,"<=","=")+" '"+DTOS(dDataRef)+"' AND "
	If lFilProd
		cQry += "AFU.AFU_COD BETWEEN '"+cProdDe+"' AND '"+cProdAte+"' AND "
	EndIf
	//CCTR - Verifica se estamos usando Frente .
	If !Empty(PmsGetFrt())
		cQry += "AFU.AFU_CODFRT ='" +PmsGetFrt() + "' AND "
	Endif
	cQry += "AFU.D_E_L_E_T_ = ' ' AND "

	If ! (aFiltroRLZ[FILTER_AFU] == Nil)
		cQry += "("+ aFiltroRLZ[FILTER_AFU]+") AND "
	Endif

	cQry += "AF8.AF8_FILIAL = '"+cFilAF8+"' AND "
	cQry += "AF8.D_E_L_E_T_ = ' ' AND "

	cQry += "AF9.AF9_FILIAL = '"+cFilAF9+"' AND "
	If !Empty(cCrteFAF9)
		cQry += cCrteFAF9 + " AND "
	EndIf
	cQry += "AF9.D_E_L_E_T_ = ' '"

	If !Empty(cSQLFAE8)
		cQry += " AND "
		cQry += "AE8.AE8_FILIAL = '"+xFilial("AE8")+"' AND "
		cQry += cSQLFAE8 + " AND "
		cQry += "AE8.D_E_L_E_T_ = ' '"
	EndIf

	If !Empty(cSQLFSB1)
		cQry += " AND "
		cQry += "SB1.B1_FILIAL = '"+cFilSB1+"' AND "
		If !Empty(cSQLFSB1)
			cQry += cSQLFSB1 + " AND "
		EndIf
		cQry += "SB1.D_E_L_E_T_ = ' '"
	EndIf

	cQry	+=	" GROUP BY AFU.AFU_TAREFA, AF9.AF9_EDTPAI "

	If lPMSQRCRTE
		cQryBkp := cQry
		cQry := ExecBlock("PMSQRCRTE", .F., .F., {cQry,aCrteProc,4})
		If Valtype(cQry)<>"C"
 			cQry := cQryBkp
		EndIf
	EndIf

	cQry := ChangeQuery(cQry)
	DbUseArea(.T.,"TOPCONN",TCGENQRY(,,cQry),"QRYCRTE",.F.,.T.)
	DbSelectArea("QRYCRTE")
	Do While !QRYCRTE->(Eof())
		If !(cTrfAtu == QRYCRTE->AFU_TAREFA)
			nPosTrf := aScan(aArrayTrb,{|x|x[1]==QRYCRTE->AFU_TAREFA})
			If nPosTrf <= 0
				aAdd(aArrayTrb,{QRYCRTE->AFU_TAREFA,,{0,0,0,0,0,{}}})
				nPosTrf	:= Len(aArrayTrb)
			EndIf
			cTrfAtu := QRYCRTE->AFU_TAREFA
		EndIf
		aArrayTrb[nPosTrf,3,1] += QRYCRTE->AFU_CUSTO1
		aArrayTrb[nPosTrf,3,2] += QRYCRTE->AFU_CUSTO2
		aArrayTrb[nPosTrf,3,3] += QRYCRTE->AFU_CUSTO3
		aArrayTrb[nPosTrf,3,4] += QRYCRTE->AFU_CUSTO4
		aArrayTrb[nPosTrf,3,5] += QRYCRTE->AFU_CUSTO5
		AddCRTEEDT(@aArrayTrb,{QRYCRTE->AFU_CUSTO1,QRYCRTE->AFU_CUSTO2,QRYCRTE->AFU_CUSTO3,QRYCRTE->AFU_CUSTO4,QRYCRTE->AFU_CUSTO5,{}},cProjeto,cRevisa,QRYCRTE->AF9_EDTPAI)
		QRYCRTE->(DbSkip())
	EndDo
	QRYCRTE->(DbCloseArea())

EndIf

If Empty(aCrteProc) .Or. aCrteProc[5]  // Considerar Apontamentos Diretos
	If PmsChkAJC(.F.)

		cQry := "SELECT "
		cQry += "SUM(AJC.AJC_CUSTO1) AJC_CUSTO1,SUM(AJC.AJC_CUSTO2) AJC_CUSTO2,SUM(AJC.AJC_CUSTO3) AJC_CUSTO3,SUM(AJC.AJC_CUSTO4) AJC_CUSTO4,SUM(AJC.AJC_CUSTO5) AJC_CUSTO5,"
		cQry += "AJC.AJC_TAREFA, AF9.AF9_EDTPAI "

		cQry += "FROM "+RetSqlName("AJC")+" AJC "

		cQry += "INNER JOIN "+RetSqlName("AF8")+" AF8 ON "
			cQry += "AF8.AF8_PROJET = AJC.AJC_PROJET "

		cQry += "INNER JOIN "+RetSqlName("AF9")+" AF9 ON "
			cQry += "AF9.AF9_PROJET = AF8.AF8_PROJET AND "
			cQry += "AF9.AF9_REVISA = AF8.AF8_REVISA AND "
			cQry += "AF9.AF9_TAREFA = AJC.AJC_TAREFA "

		If !Empty(cSQLFSB1)
			cQry += "LEFT OUTER JOIN "+RetSqlName("SB1")+" SB1 ON "
				cQry += "SB1.B1_COD = AJC.AJC_COD "
		EndIf

		cQry += "WHERE "

		cQry += "AJC.AJC_FILIAL =  '"+xFilial("AJC")+"' AND "
		cQry += "AJC.AJC_PROJET =  '"+cProjeto+"' AND "
		cQry += "AJC.AJC_REVISA =  '"+cRevisa+"' AND "
		cQry += "AJC.AJC_CTRRVS =  '1' AND "
		cQry += "AJC.AJC_DATA "+Iif(lAcumulado,"<=","=")+" '"+DTOS(dDataRef)+"' AND "
		If Empty(cCodTasks)
			cQry += "AJC.AJC_TAREFA BETWEEN '"+cTrfDe+"' AND '"+cTrfAte+"' AND "
		Else
			cQry += "AJC.AJC_TAREFA IN (" + cCodTasks +") AND "
		EndIf
		If lFilProd
			cQry += "AJC.AJC_COD BETWEEN '"+cProdDe+"' AND '"+cProdAte+"' AND "
		EndIf
		cQry += "AJC.D_E_L_E_T_ = ' ' AND "
		If ! (aFiltroRLZ[FILTER_AJC] == Nil)
			cQry += "("+ aFiltroRLZ[FILTER_AJC]+") AND "
		Endif
		//CCTR - Verifica se estamos usando Frente .
		If !Empty(PmsGetFrt())
			cQry += "AJC.AJC_CODFRT ='" +PmsGetFrt() + "' AND "
		Endif

		cQry += "AF8.AF8_FILIAL = '"+cFilAF8+"' AND "
		cQry += "AF8.D_E_L_E_T_ = ' ' AND "
		cQry += "AF9.AF9_FILIAL = '"+cFilAF9+"' AND "
		If !Empty(cCrteFAF9)
			cQry += cCrteFAF9 + " AND "
		EndIf
		cQry += "AF9.D_E_L_E_T_ = ' '"

		If !Empty(cSQLFSB1)
			cQry += " AND "
			cQry += "SB1.B1_FILIAL = '"+cFilSB1+"' AND "
			If !Empty(cSQLFSB1)
				cQry += cSQLFSB1 + " AND "
			EndIf
			cQry += "SB1.D_E_L_E_T_ = ' '"
		EndIf

		cQry += " GROUP BY AJC.AJC_TAREFA, AF9.AF9_EDTPAI "

		If lPMSQRCRTE
			cQryBkp := cQry
  			cQry := ExecBlock("PMSQRCRTE", .F., .F., {cQry,aCrteProc,5})
  			If Valtype(cQry)<>"C"
     			cQry := cQryBkp
  			EndIf
		EndIf

		cQry := ChangeQuery(cQry)
		DbUseArea(.T.,"TOPCONN",TCGENQRY(,,cQry),"QRYCRTE",.F.,.T.)
		DbSelectArea("QRYCRTE")
		Do While !QRYCRTE->(Eof())

			If ! (cTrfAtu==QRYCRTE->AJC_TAREFA)
				nPosTrf := aScan(aArrayTrb,{|x|x[1]==QRYCRTE->AJC_TAREFA})
				If nPosTrf <= 0
					aAdd(aArrayTrb,{QRYCRTE->AJC_TAREFA,,{0,0,0,0,0,{}}})
					nPosTrf	:= Len(aArrayTrb)
				EndIf
				cTrfAtu := QRYCRTE->AJC_TAREFA
			EndIf
			aArrayTrb[nPosTrf,3,1] += QRYCRTE->AJC_CUSTO1
			aArrayTrb[nPosTrf,3,2] += QRYCRTE->AJC_CUSTO2
			aArrayTrb[nPosTrf,3,3] += QRYCRTE->AJC_CUSTO3
			aArrayTrb[nPosTrf,3,4] += QRYCRTE->AJC_CUSTO4
			aArrayTrb[nPosTrf,3,5] += QRYCRTE->AJC_CUSTO5
			AddCRTEEDT(@aArrayTrb,{QRYCRTE->AJC_CUSTO1,QRYCRTE->AJC_CUSTO2,QRYCRTE->AJC_CUSTO3,QRYCRTE->AJC_CUSTO4,QRYCRTE->AJC_CUSTO5},cProjeto,cRevisa,QRYCRTE->AF9_EDTPAI)

			QRYCRTE->(DbSkip())
		EndDo
		QRYCRTE->(DbCloseArea())

	EndIf
EndIf

If Empty(aCrteProc) .Or. aCrteProc[2]  // Considerar Titulos a Pagar

	cQry := "SELECT "
	cQry += "SUM(AFR.AFR_VALOR1) AFR_VALOR1, SUM(AFR.AFR_VALOR2) AFR_VALOR2,SUM(AFR.AFR_VALOR3) AFR_VALOR3, SUM(AFR.AFR_VALOR4) AFR_VALOR4, SUM(AFR.AFR_VALOR5) AFR_VALOR5, AFR.AFR_TAREFA, "
	cQry += "AF9.AF9_EDTPAI,SE2.E2_TIPO,SE2.E2_VENCREA "

	cQry += "FROM "+RetSqlName("AFR")+" AFR "

	cQry += "INNER JOIN "+RetSqlName("AF8")+" AF8 ON "
		cQry += "AF8.AF8_PROJET = AFR.AFR_PROJET "

	cQry += "INNER JOIN "+RetSqlName("AF9")+" AF9 ON "
		cQry += "AF9.AF9_PROJET = AF8.AF8_PROJET AND "
		cQry += "AF9.AF9_REVISA = AF8.AF8_REVISA AND "
		cQry += "AF9.AF9_TAREFA = AFR.AFR_TAREFA "

	cQry += "INNER JOIN "+RetSqlName("SE2")+" SE2 ON "
		cQry += "SE2.E2_PREFIXO = AFR.AFR_PREFIX AND "
		cQry += "SE2.E2_NUM     = AFR.AFR_NUM AND "
		cQry += "SE2.E2_PARCELA = AFR.AFR_PARCEL AND "
		cQry += "SE2.E2_TIPO    = AFR.AFR_TIPO AND "
		cQry += "SE2.E2_FORNECE = AFR.AFR_FORNEC AND "
		cQry += "SE2.E2_LOJA    = AFR.AFR_LOJA "

	cQry += "WHERE "

	cQry += "AFR.AFR_FILIAL =  '"+xFilial("AFR")+"' AND "
	cQry += "AFR.AFR_PROJET =  '"+cProjeto+"' AND "
	cQry += "AFR.AFR_REVISA =  '"+cRevisa+"' AND "
	If Empty(cCodTasks)
		cQry += "AFR.AFR_TAREFA BETWEEN '"+cTrfDe+"' AND '"+cTrfAte+"' AND "
	Else
		cQry += "AFR.AFR_TAREFA IN (" + cCodTasks +") AND "
	EndIf
	cQry += "AFR.D_E_L_E_T_ = ' ' AND "
	If aFiltroRLZ[FILTER_AFR] <> Nil
		cQry += "("+ aFiltroRLZ[FILTER_AFR]+") AND "
	Endif

	cQry += "AF8.AF8_FILIAL = '"+cFilAF8+"' AND "
	cQry += "AF8.D_E_L_E_T_ = ' ' AND "
	//CCTR - Verifica se estamos usando Frente .
	If !Empty(PmsGetFrt())
		cQry += "AFR.AFR_CODFRT ='" +PmsGetFrt() + "' AND "
	Endif
	//Caso a tabela AFR esteja compartilhada não filtra o campo E2_FILIAL para demonstrar os movimentos de todas as filiais.
	If lCompAFR
		cQry += "SE2.E2_FILIAL = '"+PmsFilial("SE2","AFR")+"' AND "
	EndIf
	cQry += "SE2.E2_EMIS1 "+Iif(lAcumulado,"<=","=")+" '"+DTOS(dDataRef)+"' AND "
	cQry += "SE2.D_E_L_E_T_ = ' ' AND "

	cQry += "AF9.AF9_FILIAL = '"+cFilAF9+"' AND "
	If !Empty(cCrteFAF9)
		cQry += cCrteFAF9 + " AND "
	EndIf
	cQry += "AF9.D_E_L_E_T_ = ' '"
	cQry	+=	" GROUP BY AFR.AFR_TAREFA,AF9.AF9_EDTPAI,SE2.E2_TIPO,SE2.E2_VENCREA"

	If lPMSQRCRTE
		cQryBkp := cQry
		cQry := ExecBlock("PMSQRCRTE", .F., .F., {cQry,aCrteProc,2})
		If Valtype(cQry)<>"C"
 			cQry := cQryBkp
		EndIf
	EndIf

	cQry := ChangeQuery(cQry)
	DbUseArea(.T.,"TOPCONN",TCGENQRY(,,cQry),"QRYCRTE",.F.,.T.)

	Do While !QRYCRTE->(Eof())

		If QRYCRTE->E2_TIPO == MVPAGANT .And. GetNewPar("MV_PMSTANT",.T.) == .F. //considera os titulos antecipados?
			QRYCRTE->(DbSkip())
			Loop
		EndIf

		If !(cTrfAtu==QRYCRTE->AFR_TAREFA)
			nPosTrf := aScan(aArrayTrb,{|x|x[1]==QRYCRTE->AFR_TAREFA})
			If nPosTrf <= 0
				aAdd(aArrayTrb,{QRYCRTE->AFR_TAREFA,,{0,0,0,0,0,{} }})
				nPosTrf	:= Len(aArrayTrb)
			EndIf
			cTrfAtu := QRYCRTE->AFR_TAREFA
		EndIf
		If (QRYCRTE->E2_TIPO $ MVABATIM+"/"+MV_CPNEG)		 // Se for abatimento

			aValores := { QRYCRTE->AFR_VALOR1*-1 ,QRYCRTE->AFR_VALOR2*-1 ;
			             ,QRYCRTE->AFR_VALOR3*-1 ,QRYCRTE->AFR_VALOR4*-1 ;
			             ,QRYCRTE->AFR_VALOR5*-1 ,{QRYCRTE->E2_TIPO,QRYCRTE->E2_VENCREA, QRYCRTE->AFR_VALOR1} }
		Else
			aValores := { QRYCRTE->AFR_VALOR1 ,QRYCRTE->AFR_VALOR2 ;
			             ,QRYCRTE->AFR_VALOR3 ,QRYCRTE->AFR_VALOR4 ;
			             ,QRYCRTE->AFR_VALOR5 ,{QRYCRTE->E2_TIPO,QRYCRTE->E2_VENCREA, QRYCRTE->AFR_VALOR1} }

		EndIf
		aArrayTrb[nPosTrf,3,1] += aValores[1]
		aArrayTrb[nPosTrf,3,2] += aValores[2]
		aArrayTrb[nPosTrf,3,3] += aValores[3]
		aArrayTrb[nPosTrf,3,4] += aValores[4]
		aArrayTrb[nPosTrf,3,5] += aValores[5]
		Aadd ( aArrayTrb[nPosTrf,3,6], aValores[6] )//contem o TIPO,VENCREA,VALOR do se2 para recuperar as datas de vencto dos titulos
		AddCRTEEDT(@aArrayTrb,aValores,cProjeto,cRevisa,QRYCRTE->AF9_EDTPAI)
		QRYCRTE->(DbSkip())
	EndDo
	QRYCRTE->(DbCloseArea())
	
EndIf

If Empty(aCrteProc) .Or. aCrteProc[3]  // Considerar Movimentos Bancarios

	cQry := "SELECT "
	cQry += "SUM(AJE.AJE_VALOR) AJE_VALOR, AJE.AJE_TAREFA, "
	cQry += "AF9.AF9_EDTPAI "

	cQry += "FROM "+RetSqlName("AJE")+" AJE "

	cQry += "INNER JOIN "+RetSqlName("AF8")+" AF8 ON "
		cQry += "AF8.AF8_PROJET = AJE.AJE_PROJET "

	cQry += "INNER JOIN "+RetSqlName("AF9")+" AF9 ON "
		cQry += "AF9.AF9_PROJET = AF8.AF8_PROJET AND "
		cQry += "AF9.AF9_REVISA = AF8.AF8_REVISA AND "
		cQry += "AF9.AF9_TAREFA = AJE.AJE_TAREFA "

	cQry += "INNER JOIN "+RetSqlName("SE5")+" SE5 ON "
		cQry += "SE5.E5_PROJPMS = AJE.AJE_ID "

	cQry += "WHERE "

	cQry += "AJE.AJE_FILIAL =  '"+xFilial("AJE")+"' AND "
	cQry += "AJE.AJE_PROJET =  '"+cProjeto+"' AND "
	cQry += "AJE.AJE_REVISA =  '"+cRevisa+"' AND "
	If Empty(cCodTasks)
		cQry += "AJE.AJE_TAREFA BETWEEN '"+cTrfDe+"' AND '"+cTrfAte+"' AND "
	Else
		cQry += "AJE.AJE_TAREFA IN (" + cCodTasks +") AND "
	EndIf
	cQry += "AJE.D_E_L_E_T_ = ' ' AND "
	If aFiltroRLZ[FILTER_AJE] <> Nil
		cQry += "("+ aFiltroRLZ[FILTER_AJE]+") AND "
	Endif
	//CCTR - Verifica se estamos usando Frente .
	If !Empty(PmsGetFrt())
		cQry += "AJE.AJE_CODFRT ='" +PmsGetFrt() + "' AND "
	Endif
	cQry += "AF8.AF8_FILIAL = '"+cFilAF8+"' AND "
	cQry += "AF8.D_E_L_E_T_ = ' ' AND "
	cQry += "SE5.E5_FILIAL = '"+PmsFilial("SE5","AJE")+"' AND "
	cQry += "SE5.E5_DATA "+Iif(lAcumulado,"<=","=")+" '"+DTOS(dDataRef)+"' AND "
	cQry += "SE5.E5_SITUACA <> 'C' AND "
	cQry += "SE5.E5_RECPAG = 'P' AND "
	cQry += "SE5.D_E_L_E_T_ = ' ' AND "

	cQry += "AF9.AF9_FILIAL = '"+cFilAF9+"' AND "
	If !Empty(cCrteFAF9)
		cQry += cCrteFAF9 + " AND "
	EndIf
	cQry += "AF9.D_E_L_E_T_ = ' ' "
	cQry += " GROUP BY AJE.AJE_TAREFA, AF9.AF9_EDTPAI "

	If lPMSQRCRTE
		cQryBkp := cQry
		cQry := ExecBlock("PMSQRCRTE", .F., .F., {cQry,aCrteProc,3})
		If Valtype(cQry)<>"C"
 			cQry := cQryBkp
		EndIf
	EndIf

	cQry := ChangeQuery(cQry)
	DbUseArea(.T.,"TOPCONN",TCGENQRY(,,cQry),"QRYCRTE",.F.,.T.)
	DbSelectArea("QRYCRTE")
	Do While !QRYCRTE->(Eof())
		If !(cTrfAtu==QRYCRTE->AJE_TAREFA)
			nPosTrf := aScan(aArrayTrb,{|x|x[1]==QRYCRTE->AJE_TAREFA})
			If nPosTrf <= 0
				aAdd(aArrayTrb,{QRYCRTE->AJE_TAREFA,,{0,0,0,0,0,{}}})
				nPosTrf	:= Len(aArrayTrb)
			EndIf
			cTrfAtu := QRYCRTE->AJE_TAREFA
		EndIf
		aArrayTrb[nPosTrf,3,1] += QRYCRTE->AJE_VALOR
		aArrayTrb[nPosTrf,3,2] += 0
		aArrayTrb[nPosTrf,3,3] += 0
		aArrayTrb[nPosTrf,3,4] += 0
		aArrayTrb[nPosTrf,3,5] += 0
		AddCRTEEDT(@aArrayTrb,{QRYCRTE->AJE_VALOR,0,0,0,0},cProjeto,cRevisa,QRYCRTE->AF9_EDTPAI)
		QRYCRTE->(DbSkip())
	EndDo
	QRYCRTE->(DbCloseArea())

EndIf

If Empty(aCrteProc) .Or. aCrteProc[6]  // Considerar Requisições de movimentos de produção (Ordem de Producao)
	If AF8->(ColumnPos("AF8_CUSOP")) > 0 .And. ( AF8->AF8_CUSOP == "2" .Or. AF8->AF8_CUSOPE == "1" .Or. AF8->AF8_CUSOPE == "0" )

		If AF8->AF8_CUSOP == "2"
			cQry := "SELECT AFM.AFM_TAREFA, "
			cQry += "SUM(SD3.D3_CUSFF1) D3_CUSFF1, SUM(SD3.D3_CUSFF2) D3_CUSFF2,SUM(SD3.D3_CUSFF3) D3_CUSFF3,SUM(SD3.D3_CUSFF4) D3_CUSFF4,SUM(SD3.D3_CUSFF5) D3_CUSFF5,
			cQry += "SUM(SD3.D3_CUSTO1) D3_CUSTO1, SUM(SD3.D3_CUSTO3) D3_CUSTO2,SUM(SD3.D3_CUSTO3) D3_CUSTO3,SUM(SD3.D3_CUSTO4) D3_CUSTO4,SUM(SD3.D3_CUSTO5) D3_CUSTO5,

			If lAF8TpCus
				cQry += "AF8.AF8_TPCUS, "
			EndIf
			cQry += "SD3.D3_TM, AF9.AF9_EDTPAI "

			cQry += "FROM "+RetSqlName("AFM")+" AFM "

			cQry += "INNER JOIN "+RetSqlName("AF8")+" AF8 ON "
				cQry += "AF8.AF8_PROJET = AFM.AFM_PROJET "

			cQry += "INNER JOIN "+RetSqlName("AF9")+" AF9 ON "
				cQry += "AF9.AF9_PROJET = AF8.AF8_PROJET AND "
				cQry += "AF9.AF9_REVISA = AF8.AF8_REVISA AND "
				cQry += "AF9.AF9_TAREFA = AFM.AFM_TAREFA "
				cQry += "INNER JOIN "+RetSqlName("SD3")+" SD3 ON "
				cQry += "SUBSTRING(SD3.D3_OP,1,6) = AFM.AFM_NUMOP AND "
				cQry += "SUBSTRING(SD3.D3_OP,7,2) = AFM.AFM_ITEMOP "

			If !Empty(cSQLFSB1)
				cQry += "LEFT OUTER JOIN "+RetSqlName("SB1")+" SB1 ON "
				cQry += "SB1.B1_COD = SD3.D3_COD "
			EndIf

			cQry += "WHERE "

			cQry += "AFM.AFM_FILIAL =  '"+xFilial("AFM")+"' AND "
			cQry += "AFM.AFM_PROJET =  '"+cProjeto+"' AND "
			cQry += "AFM.AFM_REVISA =  '"+cRevisa+"' AND "

			If lPmsFilAFM
				cQryFilAFM := Execblock("PmsFilAFM",.F.,.F.)
				If Valtype(cQryFilAFM) == "C"
					cQry += cQryFilAFM
				Endif
			Endif

			If !("AFM_TAREFA" $ cQryFilAFM)
				If Empty(cCodTasks)
					cQry += "AFM.AFM_TAREFA BETWEEN '"+cTrfDe+"' AND '"+cTrfAte+"' AND "
				Else
					cQry += "AFM.AFM_TAREFA IN (" + cCodTasks +") AND "
				EndIf
  			Endif

			cQry += "AFM.D_E_L_E_T_ = ' ' AND "
			If aFiltroRLZ[FILTER_AFM] <> Nil
				cQry += "("+ aFiltroRLZ[FILTER_AFM]+") AND "
			Endif
			//CCTR - Verifica se estamos usando Frente .
			If !Empty(PmsGetFrt())
				cQry += "AFM.AFM_CODFRT ='" +PmsGetFrt() + "' AND "
			Endif
			cQry += "AF9.AF9_FILIAL = '"+cFilAF9+"' AND "
			If !Empty(cCrteFAF9)
				cQry += cCrteFAF9 + " AND "
			EndIf
			cQry += "AF9.D_E_L_E_T_ = ' ' AND "

			cQry += "SD3.D3_FILIAL  = '"+PmsFilial("SD3","AFM")+"' AND "
			cQry += "SD3.D3_EMISSAO "+Iif(lAcumulado,"<=","=")+" '"+DTOS(dDataRef)+"' AND "
			cQry += "SD3.D3_ESTORNO <> 'S' AND "
			cQry += "SD3.D3_CF      <> 'PR0' AND "
			cQry += "SD3.D3_CF      <> 'PR1' AND "
			If lFilProd
				cQry += "SD3.D3_COD BETWEEN '"+cProdDe+"' AND '"+cProdAte+"' AND "
			EndIf
			cQry += "SD3.D_E_L_E_T_ = ' ' "

			If !Empty(cSQLFSB1)
				cQry += " AND "
				cQry += "SB1.B1_FILIAL = '"+cFilSB1+"' AND "
				If !Empty(cSQLFSB1)
					cQry += cSQLFSB1 + " AND "
				EndIf
				cQry += "SB1.D_E_L_E_T_ = ' '"
			EndIf
			cQry	+=	" GROUP BY AFM.AFM_TAREFA,"
			If lAF8TpCus
				cQry += "AF8.AF8_TPCUS, "
			EndIf
			cQry += "SD3.D3_TM,AF9.AF9_EDTPAI "

			If lPmsSD3Qry
				cQry := ExecBlock( "PmsSD3Qry" , .F. , .F. , { cQry } )
			Endif

			cQry := ChangeQuery(cQry)
			DbUseArea(.T.,"TOPCONN",TCGENQRY(,,cQry),"QRYCRTE",.F.,.T.)
			DbSelectArea("QRYCRTE")
			Do While !QRYCRTE->(Eof())
				If lPmsSD3CRTE
					lConsidera := ExecBlock( "PmsSD3CRTE" , .F. , .F. , { "QRYCRTE" } )
				Endif
				If lConsidera
					If !(cTrfAtu == QRYCRTE->AFM_TAREFA)
						nPosTrf := aScan(aArrayTrb,{|x|x[1]==QRYCRTE->AFM_TAREFA})
						If nPosTrf <= 0
							aAdd(aArrayTrb,{QRYCRTE->AFM_TAREFA,,{0,0,0,0,0,{}}})
							nPosTrf := Len(aArrayTrb)
						EndIf
						cTrfAtu := QRYCRTE->AFM_TAREFA
					EndIf
					If !lAF8TpCus .Or. QRYCRTE->AF8_TPCUS == "2"
						aArrayTrb[nPosTrf,3,1] += QRYCRTE->D3_CUSFF1
						aArrayTrb[nPosTrf,3,2] += QRYCRTE->D3_CUSFF2
						aArrayTrb[nPosTrf,3,3] += QRYCRTE->D3_CUSFF3
						aArrayTrb[nPosTrf,3,4] += QRYCRTE->D3_CUSFF4
						aArrayTrb[nPosTrf,3,5] += QRYCRTE->D3_CUSFF5
						AddCRTEEDT(@aArrayTrb,{QRYCRTE->D3_CUSFF1,QRYCRTE->D3_CUSFF2,QRYCRTE->D3_CUSFF3,QRYCRTE->D3_CUSFF4,QRYCRTE->D3_CUSFF5},cProjeto,cRevisa,QRYCRTE->AF9_EDTPAI)
					Else
						aArrayTrb[nPosTrf,3,1] += QRYCRTE->D3_CUSTO1
						aArrayTrb[nPosTrf,3,2] += QRYCRTE->D3_CUSTO2
						aArrayTrb[nPosTrf,3,3] += QRYCRTE->D3_CUSTO3
						aArrayTrb[nPosTrf,3,4] += QRYCRTE->D3_CUSTO4
						aArrayTrb[nPosTrf,3,5] += QRYCRTE->D3_CUSTO5
						AddCRTEEDT(@aArrayTrb,{QRYCRTE->D3_CUSTO1,QRYCRTE->D3_CUSTO2,QRYCRTE->D3_CUSTO3,QRYCRTE->D3_CUSTO4,QRYCRTE->D3_CUSTO5},cProjeto,cRevisa,QRYCRTE->AF9_EDTPAI)
					EndIf
					lConsidera := .T.
            Endif
				QRYCRTE->(DbSkip())
			EndDo
			QRYCRTE->(DbCloseArea())

		EndIf

		If AF8->AF8_CUSOPE == "1" .Or. AF8->AF8_CUSOPE == "0"
			cQry := "SELECT SUM(SD4.D4_QUANT) D4_QUANT, "
			cQry += "SD4.D4_COD,AFM.AFM_TAREFA , "
			cQry += "AF9.AF9_EDTPAI "

			cQry += "FROM "+RetSqlName("AFM")+" AFM "

			cQry += "INNER JOIN "+RetSqlName("AF8")+" AF8 ON "
				cQry += "AF8.AF8_PROJET = AFM.AFM_PROJET "

			cQry += "INNER JOIN "+RetSqlName("AF9")+" AF9 ON "
				cQry += "AF9.AF9_PROJET = AF8.AF8_PROJET AND "
				cQry += "AF9.AF9_REVISA = AF8.AF8_REVISA AND "
				cQry += "AF9.AF9_TAREFA = AFM.AFM_TAREFA "

			cQry += "INNER JOIN "+RetSqlName("SD4")+" SD4 ON "
				cQry += "SUBSTRING(SD4.D4_OP,1,6) = AFM.AFM_NUMOP AND "
				cQry += "SUBSTRING(SD4.D4_OP,7,2) = AFM.AFM_ITEMOP "

			If AF8->AF8_CUSOPE == "0"
				cQry += "INNER JOIN "+RetSqlName("SC2")+" SC2 ON "
					cQry += "SC2.C2_NUM     = AFM.AFM_NUMOP AND "
					cQry += "SC2.C2_ITEM    = AFM.AFM_ITEMOP "
			EndIf

			If !Empty(cSQLFSB1)
				cQry += "LEFT OUTER JOIN "+RetSqlName("SB1")+" SB1 ON "
				cQry += "SB1.B1_COD = SD4.D4_COD "
			EndIf

			cQry += "WHERE "

			cQry += "AFM.AFM_FILIAL =  '"+xFilial("AFM")+"' AND "
			cQry += "AFM.AFM_PROJET =  '"+cProjeto+"' AND "
			cQry += "AFM.AFM_REVISA =  '"+cRevisa+"' AND "

			If lPmsFilAFM
				cQryFilAFM := Execblock("PmsFilAFM",.F.,.F.)
				If Valtype(cQryFilAFM) == "C"
					cQry += cQryFilAFM
				Endif
			Endif
			If !("AFM_TAREFA" $ cQryFilAFM)
				If Empty(cCodTasks)
					cQry += "AFM.AFM_TAREFA BETWEEN '"+cTrfDe+"' AND '"+cTrfAte+"' AND "
				Else
					cQry += "AFM.AFM_TAREFA IN (" + cCodTasks +") AND "
				EndIf
			Endif

			cQry += "AFM.D_E_L_E_T_ = ' ' AND "
			If aFiltroRLZ[FILTER_AFM] <> Nil
				cQry += "("+ aFiltroRLZ[FILTER_AFM]+") AND "
			Endif
			//CCTR - Verifica se estamos usando Frente .
			If !Empty(PmsGetFrt())
				cQry += "AFM.AFM_CODFRT ='" +PmsGetFrt() + "' AND "
			Endif

			cQry += "AF8.AF8_FILIAL = '"+cFilAF8+"' AND "
			cQry += "AF8.D_E_L_E_T_ = ' ' AND "
			cQry += "AF9.AF9_FILIAL = '"+cFilAF9+"' AND "
			If !Empty(cCrteFAF9)
				cQry += cCrteFAF9 + " AND "
			EndIf
			cQry += "AF9.D_E_L_E_T_ = ' ' AND "

			cQry += "SD4.D4_FILIAL  = '"+PmsFilial("SD4","AFM")+"' AND "
			cQry += "SD4.D4_OPORIG  = ' ' AND "
			If lFilProd
				cQry += "SD4.D4_COD BETWEEN '"+cProdDe+"' AND '"+cProdAte+"' AND "
			EndIf
			cQry += "SD4.D_E_L_E_T_ = ' ' AND "
            cQry += Iif( AF8->AF8_CUSOPE == "1" , "SD4.D4_DATA ", "SC2.C2_EMISSAO " )
            cQry += Iif(lAcumulado,"<=","=")+" '"+DTOS(dDataRef)+"'"

			If !Empty(cSQLFSB1)
				cQry += " AND "
				cQry += "SB1.B1_FILIAL = '"+cFilSB1+"' AND "
				If !Empty(cSQLFSB1)
					cQry += cSQLFSB1 + " AND "
				EndIf
				cQry += "SB1.D_E_L_E_T_ = ' '"
			EndIf
			cQry += " GROUP BY SD4.D4_COD,AFM.AFM_TAREFA ,AF9.AF9_EDTPAI "

			cQry := ChangeQuery(cQry)
			DbUseArea(.T.,"TOPCONN",TCGENQRY(,,cQry),"QRYCRTE",.F.,.T.)
			DbSelectArea("QRYCRTE")
			Do While !QRYCRTE->(Eof())

				If !(cTrfAtu == QRYCRTE->AFM_TAREFA)
					nPosTrf := aScan(aArrayTrb,{|x|x[1]==QRYCRTE->AFM_TAREFA})
					If nPosTrf <= 0
						aAdd(aArrayTrb,{QRYCRTE->AFM_TAREFA,,{0,0,0,0,0,{}}})
						nPosTrf := Len(aArrayTrb)
					EndIf
					cTrfAtu := QRYCRTE->AFM_TAREFA
				EndIf
				If SB1->(MsSeek(cFilSB1+QRYCRTE->D4_COD))
					aArrayTrb[nPosTrf,3,1] += QRYCRTE->D4_QUANT*RetFldProd(SB1->B1_COD,"B1_CUSTD")
					aArrayTrb[nPosTrf,3,2] += 0
					aArrayTrb[nPosTrf,3,3] += 0
					aArrayTrb[nPosTrf,3,4] += 0
					aArrayTrb[nPosTrf,3,5] += 0
					AddCRTEEDT(@aArrayTrb,{QRYCRTE->D4_QUANT*RetFldProd(SB1->B1_COD,"B1_CUSTD"),0,0,0,0},cProjeto,cRevisa,QRYCRTE->AF9_EDTPAI)
				EndIf

				QRYCRTE->(DbSkip())
			EndDo
			QRYCRTE->(DbCloseArea())
		EndIf
	EndIf
EndIf

RestArea(aAreaSE2)
RestArea(aAreaSE5)
RestArea(aAreaSD1)
RestArea(aAreaSD3)
RestArea(aAreaAF9)
RestArea(aAreaAF8)
RestArea(aArea)
Return aArrayTrb
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³AddCRTEEDT³ Autor ³ Edson Maricate        ³ Data ³ 04-07-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Adiciona o custo na EDT do Arquivo de trabalho especificado.  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function AddCRTEEDT(aArrayTrb,aCusto,cProjeto,cRevisa,cEDT)
Local aArea		:= GetArea()
Local aAreaAFC	:= AFC->(GetArea())
Local nPosEDT	:= aScan(aArrayTrb,{|x|x[2]==cEDT})

If nPosEDT > 0
	aArrayTrb[nPosEDT,3,1] += aCusto[1]
	aArrayTrb[nPosEDT,3,2] += aCusto[2]
	aArrayTrb[nPosEDT,3,3] += aCusto[3]
	aArrayTrb[nPosEDT,3,4] += aCusto[4]
	aArrayTrb[nPosEDT,3,5] += aCusto[5]
	If Len(aCusto) >= 6
		Aadd ( aArrayTrb[nPosEDT,3,6], aCusto[6] )
	Else
		Aadd ( aArrayTrb[nPosEDT,3,6], {} )
	Endif
Else
	aAdd(aArrayTrb,{,cEDT,{0,0,0,0,0,{}}})
	nPosEDT	:= Len(aArrayTrb)
	aArrayTrb[nPosEDT,3,1] := aCusto[1]
	aArrayTrb[nPosEDT,3,2] := aCusto[2]
	aArrayTrb[nPosEDT,3,3] := aCusto[3]
	aArrayTrb[nPosEDT,3,4] := aCusto[4]
	aArrayTrb[nPosEDT,3,5] := aCusto[5]
	If Len(aCusto) >= 6
		Aadd ( aArrayTrb[nPosEDT,3,6], aCusto[6] )
	Else
		Aadd ( aArrayTrb[nPosEDT,3,6], {} )
	Endif
EndIf

dbSelectArea("AFC")
dbSetOrder(1)
If MsSeek(xFilial("AFC")+cProjeto+cRevisa+cEDT) .And. !Empty(AFC_EDTPAI)
	AddCRTEEDT(aArrayTrb,aCusto,cProjeto,cRevisa,AFC_EDTPAI)
EndIf

RestArea(aAreaAFC)
RestArea(aArea)
Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsRetCRTE³ Autor ³ Edson Maricate        ³ Data ³ 04-07-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Retorna os custos da tarefa,EDT ou Bloco de Trabalho          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsRetCRTE(aArrayTrb,nTipo,cCodigo)
Local aCusto := {0,0,0,0,0,{}}

Do Case
	Case nTipo == 1
		nPosSeek := aScan(aArrayTrb,{|x|x[1]==cCodigo})
		If nPosSeek>0
			aCusto := aArrayTrb[nPosSeek,3]
		EndIf
	Case nTipo == 2
		nPosSeek := aScan(aArrayTrb,{|x|x[2]==cCodigo})
		If nPosSeek>0
			aCusto := aArrayTrb[nPosSeek,3]
		EndIf
EndCase

Return aCusto
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsIniCOTP³ Autor ³ Edson Maricate        ³ Data ³ 04-07-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Inicializa as funcoes de calculo de Custos de Projetos (COTP) ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsIniCOTP(cProjeto,cRevisa,dDataRef,cTrfDe,cTrfAte,lAcumulado,aArrayTrb, cTpAjust)

Local aArea		:= GetArea()
Local aAreaAF9	:= AF9->(GetArea())
Local aAreaAFB	:= AFB->(GetArea())
Local aAreaAFA	:= {}
Local aAreaAEL	:= {}
Local aAreaAEN	:= {}

Local aCusto	:= {}
Local cTrfAtu	:= ''
Local nPosTrf
Local nDecCst	:= TamSX3("AF9_CUSTO")[2]
Local cFilAF9	:= xFilial("AF9")

Local nCusto	:= 0
Local nFerram	:= 0
Local nDesp		:= 0
Local nSubComp	:= 0
Local nCustoA	:= 0
Local nCustoB	:= 0
Local nCustoE	:= 0
Local nCustoF	:= 0
Local cTrunca	:= "2"
Local nPerc
Local cCnvPrv
Local dDtConv
Local aTX2M		:= {0,0,0,0,0}
Local lTopConn	:= IIf(Type("__lTopConn") == "L",__lTopConn,IfDefTopCTB())
Local cAliasQry := ""
Local cQuery	:= ""
Local cFilAFA		:= xFilial("AFA")
Local cFilAFB		:= xFilial("AFB")
Local cFilAEL		:= xFilial("AEL")
Local cFilAEN		:= xFilial("AEN")

DEFAULT aArrayTrb  := {}
DEFAULT cTrfDe     := ""
DEFAULT cTrfAte    := "zzzzzzzzzzzz"
DEFAULT lAcumulado := .T.
DEFAULT cTpAjust   := PmsAF8CstAjust(cProjeto)
// se for de um projeto do padrao
If !AF8ComAJT(cProjeto)

	aAreaAFA := AFA->(GetArea())
	If lTopConn

		cAliasQry := GetNextAlias()
		cQuery := " SELECT AFA_PROJET , AFA_REVISA , AFA_TAREFA , R_E_C_N_O_ RECNO_ FROM "+RetSQLName("AFA")
		cQuery += " WHERE AFA_FILIAL = '"+cFilAFA+"' "
		cQuery += " AND AFA_PROJET = '"+cProjeto+"' "
		cQuery += " AND AFA_REVISA = '"+cRevisa+"' "
		cQuery += " AND ( AFA_TAREFA >= '"+cTrfDe+"' AND AFA_TAREFA <= '"+cTrfAte+"' ) "
		cQuery += " AND D_E_L_E_T_ = ' ' "
		cQuery := ChangeQuery(cQuery)

		dbUseArea(.T., "TOPCONN", TcGenQry(,,cQuery), cAliasQry , .T. , .T. )
		While (cAliasQry)->(!Eof())
			If PmsCOTPAFA( (cAliasQry)->(RECNO_) ,dDataRef,,@aCusto,nDecCst,lAcumulado,,cTpAjust)
				If cTrfAtu!=(cAliasQry)->AFA_TAREFA
					AF9->(dbSetOrder(1)) //AF9_FILIAL+AF9_PROJET+AF9_REVISA+AF9_TAREFA+AF9_ORDEM
					AF9->(dbSeek(cFilAF9+(cAliasQry)->(AFA_PROJET+AFA_REVISA+AFA_TAREFA)))
					nPosTrf := aScan( aArrayTrb , { |x|x[1]== (cAliasQry)->AFA_TAREFA } )
					If nPosTrf <= 0
						aAdd(aArrayTrb,{(cAliasQry)->AFA_TAREFA,,{0,0,0,0,0,{}}})
						nPosTrf := Len(aArrayTrb)
					EndIf
					cTrfAtu := (cAliasQry)->AFA_TAREFA
				EndIf
				aArrayTrb[nPosTrf,3,1] += aCusto[1]
				aArrayTrb[nPosTrf,3,2] += aCusto[2]
				aArrayTrb[nPosTrf,3,3] += aCusto[3]
				aArrayTrb[nPosTrf,3,4] += aCusto[4]
				aArrayTrb[nPosTrf,3,5] += aCusto[5]
				AddCOTPEDT(@aArrayTrb,aCusto,cProjeto,cRevisa,AF9->AF9_EDTPAI)
			EndIf
			(cAliasQry)->(dbSkip())
		EndDo
		(cAliasQry)->(dbCloseArea())
	Else

		dbSelectArea("AFA")
		dbSetOrder(1) //AFA_FILIAL+AFA_PROJET+AFA_REVISA+AFA_TAREFA+AFA_ITEM+AFA_PRODUT+AFA_RECURS
		MsSeek(cFilAFA+cProjeto+cRevisa+cTrfDe,.T.)
		While !AFA->(Eof()) .and. AFA->AFA_FILIAL+AFA->AFA_PROJET+AFA->AFA_REVISA==;
				cFilAFA+cProjeto+cRevisa .And. AFA->AFA_TAREFA <= cTrfAte
			If PmsCOTPAFA(AFA->(RecNo()),dDataRef,,@aCusto,nDecCst,lAcumulado,,cTpAjust)
				If cTrfAtu!=AFA->AFA_TAREFA
					AF9->(DbSetOrder(1)) //AF9_FILIAL+AF9_PROJET+AF9_REVISA+AF9_TAREFA+AF9_ORDEM
					AF9->(DbSeek(cFilAF9+AFA->(AFA_PROJET+AFA_REVISA+AFA_TAREFA)))
					nPosTrf := aScan(aArrayTrb,{|x|x[1]==AFA->AFA_TAREFA})
					If nPosTrf <= 0
						aAdd(aArrayTrb,{AFA->AFA_TAREFA,,{0,0,0,0,0,{}}})
						nPosTrf := Len(aArrayTrb)
					EndIf
					cTrfAtu := AFA->AFA_TAREFA
				EndIf
				aArrayTrb[nPosTrf,3,1] += aCusto[1]
				aArrayTrb[nPosTrf,3,2] += aCusto[2]
				aArrayTrb[nPosTrf,3,3] += aCusto[3]
				aArrayTrb[nPosTrf,3,4] += aCusto[4]
				aArrayTrb[nPosTrf,3,5] += aCusto[5]
				AddCOTPEDT(@aArrayTrb,aCusto,cProjeto,cRevisa,AF9->AF9_EDTPAI)
			EndIf
			AFA->(dbSkip())
		EndDo

	EndIf
	RestArea(aAreaAFA)

	If lTopConn

		cAliasQry := GetNextAlias()
		cQuery := " SELECT AFB_PROJET , AFB_REVISA , AFB_TAREFA , R_E_C_N_O_ RECNO_ FROM "+RetSQLName("AFB")
		cQuery += " WHERE AFB_FILIAL = '"+cFilAFB+"' "
		cQuery += " AND AFB_PROJET = '"+cProjeto+"' "
		cQuery += " AND AFB_REVISA = '"+cRevisa+"' "
		cQuery += " AND ( AFB_TAREFA >= '"+cTrfDe+"' AND AFB_TAREFA <= '"+cTrfAte+"' ) "
		cQuery += " AND D_E_L_E_T_ = ' ' "

		dbUseArea(.T., "TOPCONN", TcGenQry(,,cQuery), cAliasQry , .T. , .T. )
		While (cAliasQry)->(!Eof())
			If PmsCOTPAFB( (cAliasQry)->(RECNO_) ,dDataRef,,@aCusto,nDecCst)
				If cTrfAtu!=(cAliasQry)->AFB_TAREFA
					AF9->(DbSetOrder(1)) //AF9_FILIAL+AF9_PROJET+AF9_REVISA+AF9_TAREFA+AF9_ORDEM
					AF9->(DbSeek(cFilAF9+(cAliasQry)->(AFB_PROJET+AFB_REVISA+AFB_TAREFA)))
					nPosTrf := aScan(aArrayTrb,{|x|x[1]==(cAliasQry)->AFB_TAREFA})
					If nPosTrf <= 0
						aAdd(aArrayTrb,{(cAliasQry)->AFB_TAREFA,,{0,0,0,0,0,{}}})
						nPosTrf := Len(aArrayTrb)
					EndIf
					cTrfAtu := (cAliasQry)->AFB_TAREFA
				EndIf
				aArrayTrb[nPosTrf,3,1] += aCusto[1]
				aArrayTrb[nPosTrf,3,2] += aCusto[2]
				aArrayTrb[nPosTrf,3,3] += aCusto[3]
				aArrayTrb[nPosTrf,3,4] += aCusto[4]
				aArrayTrb[nPosTrf,3,5] += aCusto[5]
				AddCOTPEDT(@aArrayTrb,aCusto,cProjeto,cRevisa,AF9->AF9_EDTPAI)
			EndIf
			(cAliasQry)->(dbSkip())
		EndDo
		(cAliasQry)->(dbCloseArea())

	Else

		dbSelectArea("AFB") // Despesas
		dbSetOrder(1)
		MsSeek(xFilial()+cProjeto+cRevisa+cTrfDe,.T.)
		While !AFB->(Eof()) .and. AFB->AFB_FILIAL+AFB->AFB_PROJET+AFB->AFB_REVISA==;
				cFilAFB+cProjeto+cRevisa .And. AFB->AFB_TAREFA <= cTrfAte
			If PmsCOTPAFB(AFB->(RecNo()),dDataRef,,@aCusto,nDecCst)
				If cTrfAtu!=AFB->AFB_TAREFA
					AF9->(DbSetOrder(1)) //AF9_FILIAL+AF9_PROJET+AF9_REVISA+AF9_TAREFA+AF9_ORDEM
					AF9->(DbSeek(cFilAF9+AFB->(AFB_PROJET+AFB_REVISA+AFB_TAREFA)))
					nPosTrf := aScan(aArrayTrb,{|x|x[1]==AFB->AFB_TAREFA})
					If nPosTrf <= 0
						aAdd(aArrayTrb,{AFB->AFB_TAREFA,,{0,0,0,0,0,{}}})
						nPosTrf := Len(aArrayTrb)
					EndIf
					cTrfAtu := AFB->AFB_TAREFA
				EndIf
				aArrayTrb[nPosTrf,3,1] += aCusto[1]
				aArrayTrb[nPosTrf,3,2] += aCusto[2]
				aArrayTrb[nPosTrf,3,3] += aCusto[3]
				aArrayTrb[nPosTrf,3,4] += aCusto[4]
				aArrayTrb[nPosTrf,3,5] += aCusto[5]
				AddCOTPEDT(@aArrayTrb,aCusto,cProjeto,cRevisa,AF9->AF9_EDTPAI)
			EndIf
			AFB->(dbSkip())
		EndDo
	EndIf
Else
	// se for de um projeto de composicao unica
	aAreaAEL := AEL->(GetArea())
	aAreaAEN := AEN->(GetArea())


	dbSelectArea("AF9")
	If ColumnPos("AF9_TXMO2") > 0
		aTX2M[1]:=1
		aTX2M[2]:=AF9->AF9_TXMO2
		aTX2M[3]:=AF9->AF9_TXMO3
		aTX2M[4]:=AF9->AF9_TXMO4
		aTX2M[5]:=AF9->AF9_TXMO5
	Else
		aTX2M[1]:=1
		aTX2M[2]:=0
		aTX2M[3]:=0
		aTX2M[4]:=0
		aTX2M[5]:=0
	EndIf

	DbSelectArea("AF8")
	If ColumnPos("AF8_TRUNCA") > 0
		cTrunca:=AF8->AF8_TRUNCA
	Else
		cTrunca:="1"
	EndIf

	dbSelectArea("AF9") // Tarefas
	AF9->(DbSetOrder(1)) //AF9_FILIAL+AF9_PROJET+AF9_REVISA+AF9_TAREFA+AF9_ORDEM
	MsSeek(cFilAF9+cProjeto+cRevisa+cTrfDe,.T.)
	Do While !AF9->(Eof()) .and. AF9->AF9_FILIAL+AF9->AF9_PROJET+AF9->AF9_REVISA==;
			cFilAF9+cProjeto+cRevisa .and. AF9->AF9_TAREFA <= cTrfAte

		aAdd(aArrayTrb,{AF9->AF9_TAREFA,,{0,0,0,0,0,{}}})
		nPosTrf := Len(aArrayTrb)

		nFerram	:= 0
		nDesp	:= 0
		nSubComp:= 0
		nCustoA	:= 0
		nCustoB	:= 0
		nCustoE	:= 0
		nCustoF	:= 0

		If lAcumulado
			If dDataRef >= AF9->AF9_START
				nPerc := PMSPrvAF9Cst(AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_TAREFA,dDataRef)
			Else
				nPerc := 0
			EndIf
			nPerc := AF9->AF9_QUANT*nPerc
		// faz o calculo do custo no valor nao acumulado,
		// isto é não é o valor previsto até o dia, mas o valor previsto pro dia.
		Else
			nPerc := PMSPrvAF9Cst(AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_TAREFA,dDataRef)
		EndIf

		//CCTR - Verifica se estamos usados Frente e Pega o seu Percentual.
		If !Empty(PmsGetFrt())
			nPercFrt := PmsPercFrt(AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_TAREFA,PmsGetFrt())
			nPerc *= nPercFrt
		EndIf

		// Insumos
		dbSelectArea("AEL")
		dbSetOrder(1) //AEL_FILIAL+AEL_PROJET+AEL_REVISA+AEL_TAREFA+AEL_ITEM
		MsSeek(cFilAEL+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA,.T.)
		Do While !AEL->(Eof()) .and. AEL->AEL_FILIAL+AEL->AEL_PROJET+AEL->AEL_REVISA+AEL->AEL_TAREFA==;
				cFilAEL+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA

			nCusto := PmsCpoCoUn("AEL_CUSTD")
			Do Case
				Case AEL->AEL_GRORGA == "A" //Equipamentos
					nCustoA  += PMSTrunca(cTrunca, AEL->AEL_QUANT * nCusto, nDecCst)

				Case AEL->AEL_GRORGA == "B" //Mao de Obra
					nCustoB  += PMSTrunca(cTrunca, AEL->AEL_QUANT * nCusto, nDecCst)

				Case AEL->AEL_GRORGA == "E"
					nCustoE  += PMSTrunca(cTrunca, AEL->AEL_QUANT * nCusto, nDecCst)

				Case AEL->AEL_GRORGA == "F" //Transporte
					nCusto   := AEL->AEL_QUANT * nCusto
					// DMT
					If AEL->AEL_DMT > 0
						nCusto *= AEL->AEL_DMT
					Else
						nCusto := 0
					EndIf
					nCustoF  += PMSTrunca(cTrunca, nCusto, nDecCst)

				OtherWise
					nCustoE  += PMSTrunca(cTrunca, AEL->AEL_QUANT * nCusto, nDecCst)
			EndCase

			dbSelectArea("AEL")
			dbSkip()

		EndDo

		// Despesas
		dbSelectArea("AFB")
		dbSetOrder(1)
		MsSeek(cFilAFB+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA,.T.)
		Do While !AFB->(Eof()) .And. AFB->AFB_FILIAL+AFB->AFB_PROJET+AFB->AFB_REVISA+AFB->AFB_TAREFA==;
				cFilAFB+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA
			If AFB->AFB_TIPOD="9999"
				nCustoF += xMoeda( AFB->AFB_VALOR, AFB->AFB_MOEDA, 1, , nDecCst)
			Else
				nDesp += xMoeda( AFB->AFB_VALOR, AFB->AFB_MOEDA, 1, , nDecCst)
			EndIf
			dbSkip()
		EndDo

		// Subcomposicoes
		dbSelectArea("AEN")
		dbSetOrder(1) //AEN_FILIAL+AEN_PROJET+AEN_REVISA+AEN_TAREFA+AEN_ITEM
		MsSeek(cFilAEN+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA,.T.)
		Do While !AEN->(Eof()) .And. AEN->AEN_FILIAL+AEN->AEN_PROJET+AEN->AEN_REVISA+AEN->AEN_TAREFA==;
				cFilAEN+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA
			nSubComp += PmsCusAJT(AEN->AEN_PROJET, AEN->AEN_REVISA, AEN->AEN_SUBCOM, AEN->AEN_QUANT, nDecCst)
			dbSelectArea("AEN")
			dbSkip()

		EndDo

		If AF9->AF9_FERRAM > 0
			nFerram := nCustoB * AF9->AF9_FERRAM / 100
		Else
			nFerram := 0
		EndIf
		nFerram := Round( nFerram, nDecCst )

		If AF9->AF9_TIPO == "1" //Unitario
			nCusto := pmsTrunca( "2", ( nCustoA + nCustoB + nCustoE + nCustoF + nFerram + nDesp + nSubComp ), nDecCst )
		Else
			nCusto := pmsTrunca( "2", ( ( nCustoA + nCustoB + nFerram ) / AF9->AF9_PRODUC ) + nCustoE + nCustoF + nDesp + nSubComp, nDecCst )
		EndIf

		nCusto := nCusto * nPerc
		PmsVerConv(@dDtConv,@cCnvPrv)
		aCusto := PmsConvCus(nCusto,1,cCnvPrv,dDtConv,AF9->AF9_START,AF9->AF9_FINISH,,aTX2M,cTrunca,AF9->AF9_QUANT)

		aArrayTrb[nPosTrf,3,1] := aCusto[1]
		aArrayTrb[nPosTrf,3,2] := aCusto[2]
		aArrayTrb[nPosTrf,3,3] := aCusto[3]
		aArrayTrb[nPosTrf,3,4] := aCusto[4]
		aArrayTrb[nPosTrf,3,5] := aCusto[5]
		AddCOTPEDT(@aArrayTrb,aCusto,AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_EDTPAI)

		dbSelectArea("AF9")
		dbSkip()
	EndDo

	RestArea(aAreaAEL)
	RestArea(aAreaAEN)

EndIf

RestArea(aAreaAF9)
RestArea(aAreaAFB)
RestArea(aArea)

Return aArrayTrb
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³AddCOTPEDT³ Autor ³ Edson Maricate        ³ Data ³ 04-07-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Adiciona o custo na EDT do Arquivo de trabalho especificado.  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function AddCOTPEDT(aArrayTrb,aCusto,cProjeto,cRevisa,cEDT)
Local aArea		:= GetArea()
Local aAreaAFC	:= AFC->(GetArea())
Local nPosEDT	:= aScan(aArrayTrb,{|x|x[2]==cEDT})

If nPosEDT > 0
	aArrayTrb[nPosEDT,3,1] += aCusto[1]
	aArrayTrb[nPosEDT,3,2] += aCusto[2]
	aArrayTrb[nPosEDT,3,3] += aCusto[3]
	aArrayTrb[nPosEDT,3,4] += aCusto[4]
	aArrayTrb[nPosEDT,3,5] += aCusto[5]
Else
	aAdd(aArrayTrb,{,cEdt,{0,0,0,0,0,{}}})
	nPosEDT	:= Len(aArrayTrb)
	aArrayTrb[nPosEDT,3,1] := aCusto[1]
	aArrayTrb[nPosEDT,3,2] := aCusto[2]
	aArrayTrb[nPosEDT,3,3] := aCusto[3]
	aArrayTrb[nPosEDT,3,4] := aCusto[4]
	aArrayTrb[nPosEDT,3,5] := aCusto[5]
EndIf

dbSelectArea("AFC")
dbSetOrder(1)
If MsSeek(xFilial("AFC")+cProjeto+cRevisa+cEDT) .And. !Empty(AFC_EDTPAI)
	AddCOTPEDT(aArrayTrb,aCusto,cProjeto,cRevisa,AFC_EDTPAI)
EndIf

RestArea(aAreaAFC)
RestArea(aArea)
Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsRetCOTP³ Autor ³ Edson Maricate        ³ Data ³ 04-07-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Retorna os custos da tarefa,EDT ou Bloco de Trabalho          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsRetCOTP(aArrayTrb,nTipo,cCodigo,lInicia)

Local aArea    := GetArea()
Local aAreaAF9 := AF9->(GetArea())
Local aAreaAFA := AFA->(GetArea())
Local aAreaAFB := AFB->(GetArea())
Local aCusto := {0,0,0,0,0}
Local aTmp	 :=	{}
Local nX	:=0

DEFAULT lInicia	:=	.F.

Do Case
	Case nTipo == 1

		nPosSeek := aScan(aArrayTrb,{|x|x[1]==cCodigo})
		If nPosSeek>0
			aCusto := aArrayTrb[nPosSeek,3]
		ElseIf lInicia

			aTmp	:=	PmsIniCOTP(AF9->AF9_PROJET,AF9->AF9_REVISA,PMS_MAX_DATE,AF9->AF9_TAREFA,AF9->AF9_TAREFA,,)

			For nX:= 1 To Len(aTmp)
				AAdd(aArrayTrb,aTmp[nX])
			Next
			aCusto:=	PmsRetCOTP(aArrayTrb,nTipo,cCodigo,.F.)
		EndIf

	Case nTipo == 2

		nPosSeek := aScan(aArrayTrb,{|x|x[2]==cCodigo})
		If nPosSeek>0
			aCusto := aArrayTrb[nPosSeek,3]
		ElseIf lInicia

			aTmp	:=	PmsIniCOTP(AFC->AFC_PROJET,AFC->AFC_REVISA,PMS_MAX_DATE,AFC->AFC_EDT,AFC->AFC_EDT,,)

			For nX:= 1 To Len(aTmp)
				AAdd(aArrayTrb,aTmp[nX])
			Next
			aCusto	:=	PmsRetCOTP(aArrayTrb,nTipo,cCodigo,.F.)
		EndIf
EndCase

RestArea(aAreaAFA)
RestArea(aAreaAFB)
RestArea(aAreaAF9)
RestArea(aArea)

Return aCusto
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsDtPrv³ Autor ³ Edson Maricate          ³ Data ³ 04-07-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Retorna a data prevista teorica para o percentual realizado.  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsDtPrv(dIni,dFinish,nPerc,cMetodo)
Local dRet
dRet := ((dFinish-dIni)*nPerc/100)+dIni
Return dRet
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsIniCOTE³ Autor ³ Edson Maricate        ³ Data ³ 04-07-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Inicializa as funcoes de calculo de Custos de Projetos (COTE) ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsIniCOTE(cProjeto,cRevisa,dDataRef,cTrfDe,cTrfAte,aArrayTrb)

Local cRevAtu	:= ""

Local aArea		:= GetArea()
Local aAreaAF9	:= AF9->(GetArea())
Local aAreaAFB	:= AFB->(GetArea())
Local aAreaAFA := {}
Local aAreaAEL := {}
Local aAreaAEN := {}
Local nPercEx	:= 0
Local dTeorica
Local aCusto
Local nDecCst := TamSX3("AF9_CUSTO")[2]
Local cFilAF9	:= xFilial("AF9")
Local cFilAFF	:= xFilial("AFF")
Local cFilAFA	:= xFilial("AFA")
Local cFilAEL	:= xFilial("AEL")
Local cFilAEN	:= xFilial("AEN")
Local cFilAFB	:= xFilial("AFB")

DEFAULT cTrfDe		:= ""
DEFAULT cTrfAte		:= "zzzzzzzzzzzz"
DEFAULT aArrayTrb	:= {}

AF8->(dbSetOrder(1))
AF8->(MsSeek(xFilial()+cProjeto))
cRevAtu	:= AF8->AF8_REVISA

dbSelectArea("AF9")
dbSetOrder(1)
MsSeek(cFilAF9+cProjeto+cRevisa+cTrfDe,.T.)
While !Eof() .And. AF9->AF9_FILIAL+AF9->AF9_PROJET+AF9->AF9_REVISA==cFilAF9+cProjeto+cRevisa .And. AF9->AF9_TAREFA <= cTrfAte

	aAdd(aArrayTrb,{AF9->AF9_TAREFA,,{0,0,0,0,0,{}}})
	nPosTrf	:= Len(aArrayTrb)
	dbSelectArea("AFF")
	dbSetOrder(1)
	If MsSeek(cFilAFF+AF9->AF9_PROJET+cRevAtu+AF9->AF9_TAREFA+DTOS(dDataRef),.T.)
		nPercEx  := AFF->AFF_QUANT/AF9->AF9_QUANT
	Else
		dbSkip(-1)
		If 	!Bof().And. AF9->AF9_PROJET==AFF->AFF_PROJET.And.;
			AFF->AFF_REVISA==cRevAtu .And.;
			AFF->AFF_TAREFA==AF9->AF9_TAREFA
			nPercEx := AFF->AFF_QUANT/AF9->AF9_QUANT
		Else
			nPercEx  := 0
		EndIf
	EndIf
	//Verifica se existe alguma execucao para a tarefa antes de
	//calcular o custo.
	If (nPercEx > 0)
		dTeorica := ((AF9->AF9_FINISH-AF9->AF9_START)*nPercEx)+AF9->AF9_START

		// se for de um projeto do padrao
		If !AF8ComAJT(cProjeto)

			aAreaAFA := AFA->(GetArea())

			dbSelectArea("AFA")
			dbSetOrder(1)
			MsSeek(cFilAFA+cProjeto+cRevisa+AF9->AF9_TAREFA)
			While !Eof().And.AFA->AFA_FILIAL+AFA->AFA_PROJET+AFA->AFA_REVISA+AFA->AFA_TAREFA==;
								cFilAFA+cProjeto+cRevisa+AF9->AF9_TAREFA
				If PmsCOTPAFA(AFA->(RecNo()),dTeorica,AF9->(RecNo()),@aCusto,nDecCst,,nPercEx)
					aArrayTrb[nPosTrf,3,1] += aCusto[1]
					aArrayTrb[nPosTrf,3,2] += aCusto[2]
					aArrayTrb[nPosTrf,3,3] += aCusto[3]
					aArrayTrb[nPosTrf,3,4] += aCusto[4]
					aArrayTrb[nPosTrf,3,5] += aCusto[5]
					AddCOTEEDT(@aArrayTrb,aCusto,cProjeto,cRevisa,AF9->AF9_EDTPAI)
				EndIf
				dbSelectArea("AFA")
				dbSkip()
			End

			RestArea(aAreaAFA)
		Else
			// se for de um projeto de composicao unica
			aAreaAEL := AEL->(GetArea())
			aAreaAEN := AEN->(GetArea())
			dbSelectArea("AEL") // Insumos
			dbSetOrder(1) //AEL_FILIAL+AEL_PROJET+AEL_REVISA+AEL_TAREFA+AEL_ITEM
			MsSeek(xFilial()+cProjeto+cRevisa+AF9->AF9_TAREFA)
			While !AEL->(Eof()) .and. AEL->AEL_FILIAL+AEL->AEL_PROJET+AEL->AEL_REVISA+AEL->AEL_TAREFA==;
								cFilAEL+cProjeto+cRevisa+AF9->AF9_TAREFA
				If PmsCOTPAEL(cProjeto, cRevisa, AEL->AEL_TAREFA, AEL->AEL_ITEM, dTeorica, @aCusto, nDecCst, , nPercEx)
					aArrayTrb[nPosTrf,3,1] += aCusto[1]
					aArrayTrb[nPosTrf,3,2] += aCusto[2]
					aArrayTrb[nPosTrf,3,3] += aCusto[3]
					aArrayTrb[nPosTrf,3,4] += aCusto[4]
					aArrayTrb[nPosTrf,3,5] += aCusto[5]
					AddCOTEEDT(@aArrayTrb,aCusto,cProjeto,cRevisa,AF9->AF9_EDTPAI)
				EndIf
				dbSelectArea("AEL")
				dbSkip()
			EndDo

			dbSelectArea("AEN") // Subcomposicoes
			dbSetOrder(1) //AEN_FILIAL+AEN_PROJET+AEN_REVISA+AEN_TAREFA+AEN_ITEM
			MsSeek(xFilial()+cProjeto+cRevisa+AF9->AF9_TAREFA)
			While !AEN->(Eof()) .and. AEN->AEN_FILIAL+AEN->AEN_PROJET+AEN->AEN_REVISA+AEN->AEN_TAREFA==;
								cFilAEN+cProjeto+cRevisa+AF9->AF9_TAREFA
				If PmsCOTPAEN(cProjeto, cRevisa, AEN->AEN_TAREFA, AEN->AEN_ITEM, dTeorica, @aCusto, nDecCst, , nPercEx)
					aArrayTrb[nPosTrf,3,1] += aCusto[1]
					aArrayTrb[nPosTrf,3,2] += aCusto[2]
					aArrayTrb[nPosTrf,3,3] += aCusto[3]
					aArrayTrb[nPosTrf,3,4] += aCusto[4]
					aArrayTrb[nPosTrf,3,5] += aCusto[5]
					AddCOTEEDT(@aArrayTrb,aCusto,cProjeto,cRevisa,AF9->AF9_EDTPAI)
				EndIf
				dbSelectArea("AEN")
				dbSkip()
			End

			RestArea(aAreaAEL)
			RestArea(aAreaAEN)

		EndIf

		dbSelectArea("AFB")
		dbSetOrder(1)
		MsSeek(xFilial()+cProjeto+cRevisa+AF9->AF9_TAREFA)
		While !Eof().And. AFB->AFB_FILIAL+AFB->AFB_PROJET+AFB->AFB_REVISA+AFB->AFB_TAREFA==;
							cFilAFB+cProjeto+cRevisa+AF9->AF9_TAREFA
			If PmsCOTPAFB(AFB->(RecNo()),dTeorica,AF9->(RecNo()),@aCusto,nDecCst,,nPercEx)
				aArrayTrb[nPosTrf,3,1] += aCusto[1]
				aArrayTrb[nPosTrf,3,2] += aCusto[2]
				aArrayTrb[nPosTrf,3,3] += aCusto[3]
				aArrayTrb[nPosTrf,3,4] += aCusto[4]
				aArrayTrb[nPosTrf,3,5] += aCusto[5]
				AddCOTEEDT(@aArrayTrb,aCusto,cProjeto,cRevisa,AF9->AF9_EDTPAI)
			EndIf
			dbSelectArea("AFB")
			dbSkip()
		End
	EndIf

	dbSelectArea("AF9")
	dbSkip()
End

RestArea(aAreaAF9)
RestArea(aAreaAFB)
RestArea(aArea)
Return aArrayTrb
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³AddCOTEEDT³ Autor ³ Edson Maricate        ³ Data ³ 04-07-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Adiciona o custo na EDT do Arquivo de trabalho especificado.  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function AddCOTEEDT(aArrayTrb,aCusto,cProjeto,cRevisa,cEDT)
Local aArea		:= GetArea()
Local aAreaAFC	:= AFC->(GetArea())
Local nPosEDT	:= aScan(aArrayTrb,{|x|x[2]==cEDT})

If nPosEDT > 0
	aArrayTrb[nPosEDT,3,1] += aCusto[1]
	aArrayTrb[nPosEDT,3,2] += aCusto[2]
	aArrayTrb[nPosEDT,3,3] += aCusto[3]
	aArrayTrb[nPosEDT,3,4] += aCusto[4]
	aArrayTrb[nPosEDT,3,5] += aCusto[5]
Else
	aAdd(aArrayTrb,{,cEdt,{0,0,0,0,0,{}}})
	nPosEDT	:= Len(aArrayTrb)
	aArrayTrb[nPosEDT,3,1] := aCusto[1]
	aArrayTrb[nPosEDT,3,2] := aCusto[2]
	aArrayTrb[nPosEDT,3,3] := aCusto[3]
	aArrayTrb[nPosEDT,3,4] := aCusto[4]
	aArrayTrb[nPosEDT,3,5] := aCusto[5]
EndIf

dbSelectArea("AFC")
dbSetOrder(1)
If MsSeek(xFilial()+cProjeto+cRevisa+cEDT) .And. !Empty(AFC_EDTPAI)
	AddCOTEEDT(aArrayTrb,aCusto,cProjeto,cRevisa,AFC_EDTPAI)
EndIf

RestArea(aAreaAFC)
RestArea(aArea)
Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsRetCOTE³ Autor ³ Edson Maricate        ³ Data ³ 04-07-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Retorna os custos da tarefa,EDT ou Bloco de Trabalho          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsRetCOTE(aArrayTrb,nTipo,cCodigo,lInicia)
Local aCusto := {0,0,0,0,0}
Local aTmp	:=	{}
Local nX	:=	1
DEFAULT lInicia	:=	.F.
Do Case
	Case nTipo == 1
		nPosSeek := aScan(aArrayTrb,{|x|x[1]==cCodigo})
		If nPosSeek>0
			aCusto := aArrayTrb[nPosSeek,3]
		ElseIf lInicia
			aTmp	:=	PmsIniCOTE(AF9->AF9_PROJET,AF9->AF9_REVISA,PMS_MAX_DATE,AF9->AF9_TAREFA,AF9->AF9_TAREFA)
			For nX:= 1 To Len(aTmp)
				AAdd(aArrayTrb,aTmp[nX])
			Next
			aCusto	:=	PmsRetCOTE(aArrayTrb,nTipo,cCodigo,.F.)
		EndIf
	Case nTipo == 2
		nPosSeek := aScan(aArrayTrb,{|x|x[2]==cCodigo})
		If nPosSeek>0
			aCusto := aArrayTrb[nPosSeek,3]
		ElseIf lInicia
			aTmp	:=	PmsIniCOTE(AFC->AFC_PROJET,AFC->AFC_REVISA,PMS_MAX_DATE,AFC->AFC_EDT,AFC->AFC_EDT)
			For nX:= 1 To Len(aTmp)
				AAdd(aArrayTrb,aTmp[nX])
			Next
			aCusto	:=	PmsRetCOTE(aArrayTrb,nTipo,cCodigo,.F.)
		EndIf
EndCase

Return aCusto

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsCOTPAFA³ Autor ³ Edson Maricate        ³ Data ³ 04-07-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Retorna os custos previstos do Recurso na data.               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsCOTPAFA(nRecAFA,dDataRef,nRecAF9,aCusto,nDecCst,lAcumulado,nPercEx,cTpAjust)

Local nPerc
Local nHrsUteis
Local lRet		:= .F.
Local aArea		:= GetArea()
Local aAreaAF8	:= AF8->(GetArea())
Local aAreaAF9	:= AF9->(GetArea())
Local aAreaAFA	:= AFA->(GetArea())
Local nCusto	:= 0
Local aTX2M		:= {0,0,0,0,0}
Local cTrunca	:= "1"
Local dDtConv, cCnvPrv
Local nPercFrt := 1
Local cProduto := ""
Local cRecurso := ""
Local cPmsCust:= GetMV("MV_PMSCUST") //Indica se utiliza o custo pela quantidade unitaria ou total
Local lPmsxCusPrv := EXISTBLOCK("PMSXCUSPRV")
Local cFilAEF	:= xFilial("AEF")

DEFAULT nDecCst    := TamSX3("AF9_CUSTO")[2]
DEFAULT lAcumulado := .T.
DEFAULT cTpAjust   := ""

aCusto	:= {0,0,0,0,0}

AFA->(MsGoto(nRecAFA))
If nRecAF9 == Nil
	dbSelectArea("AF9")
	dbSetOrder(1)
	MsSeek(xFilial()+AFA->AFA_PROJET+AFA->AFA_REVISA+AFA->AFA_TAREFA)
	nRecAF9 := AF9->(recno())
Else
	AF9->(MsGoto(nRecAF9))
EndIf

cTpAjust := iIf(Empty(cTpAjust) ,PmsAF8CstAjust(AF9->AF9_PROJET) ,cTpAjust)

dbSelectArea("AFA")
If lAcumulado
	Do Case
		Case AFA->AFA_ACUMUL == "1"
			If dDataRef >= AF9->AF9_START .And. dDataRef < AF9->AF9_FINISH
				nCusto		:= AFA_CUSTD*PmsAFAQuant(AFA_PROJET,AFA_REVISA,AFA_TAREFA,AFA_PRODUT,AF9->AF9_QUANT,AFA_QUANT,AF9->AF9_HDURAC)/2
				lRet		:= .T.
	    	EndIf
			If dDataRef >= AF9->AF9_FINISH
				nCusto		:= AFA_CUSTD*PmsAFAQuant(AFA_PROJET,AFA_REVISA,AFA_TAREFA,AFA_PRODUT,AF9->AF9_QUANT,AFA_QUANT,AF9->AF9_HDURAC)
				lRet		:= .T.
	    	EndIf
		Case AFA->AFA_ACUMUL == "2"
			If dDataRef>=AF9->AF9_FINISH
				nCusto 		:= AFA_CUSTD*PmsAFAQuant(AFA_PROJET,AFA_REVISA,AFA_TAREFA,AFA_PRODUT,AF9->AF9_QUANT,AFA_QUANT,AF9->AF9_HDURAC)
				lRet		:= .T.
			EndIf
		Case AFA->AFA_ACUMUL == "4"
			If dDataRef>=AFA->AFA_DATPRF
				nCusto		:= AFA_CUSTD*PmsAFAQuant(AFA_PROJET,AFA_REVISA,AFA_TAREFA,AFA_PRODUT,AF9->AF9_QUANT,AFA_QUANT,AF9->AF9_HDURAC)
				lRet		:= .T.
			EndIf
		Case AFA->AFA_ACUMUL == "5"
			If dDataRef>=AFA->AFA_DTAPRO
				nCusto	:= AFA_CUSTD*PmsAFAQuant(AFA_PROJET,AFA_REVISA,AFA_TAREFA,AFA_PRODUT,AF9->AF9_QUANT,AFA_QUANT,AF9->AF9_HDURAC)
				lRet		:= .T.
			EndIf
		Case AFA->AFA_ACUMUL == "6"

			If dDataRef>=AFA->AFA_DTAPRO
				If nPercEx != Nil
					nCusto	:= AFA_CUSTD*PmsAFAQuant(AFA_PROJET,AFA_REVISA,AFA_TAREFA,AFA_PRODUT,AF9->AF9_QUANT,AFA_QUANT,AF9->AF9_HDURAC)*nPercEx
				Else
					If AF9->AF9_HUTEIS > 0
						If dDataRef >= AF9->AF9_FINISH
							nHrsUteis := AF9->AF9_HUTEIS
						Else
							nHrsUteis := PmsHrsItvl(AFA->AFA_DTAPRO,AF9->AF9_HORAI,dDataRef,"24:00",AF9->AF9_CALEND,AF9->AF9_PROJET)
						EndIf
						If nHrsUteis==AF9->AF9_HUTEIS
							nPerc		:= 1
						Else
							nPerc		:= nHrsUteis/PmsHrsItvl(AFA->AFA_DTAPRO,AF9->AF9_HORAI,AF9->AF9_FINISH,AF9->AF9_HORAF,AF9->AF9_CALEND,AF9->AF9_PROJET)
						EndIf
					Else
						If dDataRef >= AFA->AFA_DTAPRO
							nPerc	:= 1
						Else
							nPerc	:= 0
						EndIf
					EndIf
					nCusto	:= AFA_CUSTD*PmsAFAQuant(AFA_PROJET,AFA_REVISA,AFA_TAREFA,AFA_PRODUT,AF9->AF9_QUANT,AFA_QUANT,AF9->AF9_HDURAC)*nPerc
				EndIf
				lRet := .T.
			EndIf

		//Cronograma de consumo
		Case AFA->AFA_ACUMUL == "7"

			If Empty(AFA->AFA_RECURS)
				cProduto := AFA->AFA_PRODUT
				cRecurso := Space(TamSX3("AFA_RECURS")[1])
			Else
				cRecurso := AFA->AFA_RECURS
				cProduto := Space(TamSX3("AFA_PRODUT")[1])
			EndIf
			DbSelectArea('AEF')
			DbSetOrder(1)
			If dbSeek(cFilAEF+AFA->(AFA_PROJET+AFA_REVISA+AFA_TAREFA)+AFA->AFA_ITEM+cProduto+cRecurso)
				nCusto := 0
				nQtAcum	:= 0
				//Verificar datas...
				While !Eof() .And. cFilAEF+AFA->(AFA_PROJET+AFA_REVISA+AFA_TAREFA+AFA_ITEM)+cProduto+cRecurso == AEF->(AEF_FILIAL+AEF_PROJET+AEF_REVISA+AEF_TAREFA)+AEF->AEF_ITEM+AEF->AEF_PRODUT+AEF->AEF_RECURS .AND. ;
				      AnoMes(AEF->AEF_DATREF) <= AnoMes(dDataRef)

					If cTpAjust $ '12'
						If Empty(AFA->AFA_RECURS)
							nCusIt	:=	AEFPrdCust(AFA->AFA_PROJET,AFA->AFA_REVISA,'P',AFA->AFA_PRODUT , IIf(cTpAjust == '1',Min(dDataBase,AEF->AEF_DATREF),AEF->AEF_DATREF))
						Else
							nCusIt	:=	AEFPrdCust(AFA->AFA_PROJET,AFA->AFA_REVISA,'R',AFA->AFA_RECURS , IIf(cTpAjust == '1',Min(dDataBase,AEF->AEF_DATREF),AEF->AEF_DATREF))
						Endif
					Else
						nCusIt		:=	AFA->AFA_CUSTD
					Endif

					dbSelectArea("AF8")
					dbSetOrder(1)
					If MsSeek(xFilial()+AFA->AFA_PROJET) .AND. !Empty(AF8->AF8_ULMES) .AND. AEF->AEF_DATREF <= AF8->AF8_ULMES
						nCusIt	:=	AFA->AFA_CUSTRE
					EndIf
					nCusIt := nCusIt * AFA->AFA_QUANT
					nCusto	+=	((nCusIt  * (AEF->AEF_QUANT/100))*IIf(cPmsCust == "1" ,1 ,AF9->AF9_QUANT))

					lRet	:= .T.
      				DbSelectArea('AEF')
	      			DbSkip()
      			EndDo
     		Else
                nQuantAFA := PmsPrvAFA(AFA->(RecNo()),Min(AF9->AF9_START,dDataRef),dDataRef,AF9->(RecNo()))
                nCusto := AFA->AFA_CUSTD * nQuantAFA
                lRet := .T.
       		EndIf

		OtherWise
			If nPercEx == Nil
				If dDataRef >= AF9->AF9_START
					nPerc := PMSPrvAF9Cst(AFA_PROJET,AFA_REVISA,AFA_TAREFA,dDataRef)
				Else
					nPerc := 0
				EndIf
				nCusto		:= AFA_CUSTD*PmsAFAQuant(AFA_PROJET,AFA_REVISA,AFA_TAREFA,AFA_PRODUT,AF9->AF9_QUANT,AFA_QUANT,AF9->AF9_HDURAC)*nPerc
			Else
				nCusto		:= AFA_CUSTD*PmsAFAQuant(AFA_PROJET,AFA_REVISA,AFA_TAREFA,AFA_PRODUT,AF9->AF9_QUANT,AFA_QUANT,AF9->AF9_HDURAC)*nPercEx
			Endif
			lRet		:= .T.
	EndCase

// faz o calculo do custo no valor nao acumulado,
// isto é não é o valor previsto até o dia, mas o valor previsto pro dia.
Else
	Do Case
		Case AFA->AFA_ACUMUL == "1"
			If dDataRef == AF9->AF9_START .AND. dDataRef == AF9->AF9_FINISH
				nCusto		:= AFA_CUSTD*PmsAFAQuant(AFA_PROJET,AFA_REVISA,AFA_TAREFA,AFA_PRODUT,AF9->AF9_QUANT,AFA_QUANT,AF9->AF9_HDURAC)
				lRet		:= .T.
			Else
				If dDataRef == AF9->AF9_START .OR. dDataRef == AF9->AF9_FINISH
					nCusto		:= AFA_CUSTD*PmsAFAQuant(AFA_PROJET,AFA_REVISA,AFA_TAREFA,AFA_PRODUT,AF9->AF9_QUANT,AFA_QUANT,AF9->AF9_HDURAC)/2
					lRet		:= .T.
		    	EndIf
	    	EndIf
		Case AFA->AFA_ACUMUL == "2"
			If dDataRef == AF9->AF9_FINISH
				nCusto 		:= AFA_CUSTD*PmsAFAQuant(AFA_PROJET,AFA_REVISA,AFA_TAREFA,AFA_PRODUT,AF9->AF9_QUANT,AFA_QUANT,AF9->AF9_HDURAC)
				lRet		:= .T.
			EndIf
		Case AFA->AFA_ACUMUL == "4"
			If dDataRef == AFA->AFA_DATPRF
				nCusto		:= AFA_CUSTD*PmsAFAQuant(AFA_PROJET,AFA_REVISA,AFA_TAREFA,AFA_PRODUT,AF9->AF9_QUANT,AFA_QUANT,AF9->AF9_HDURAC)
				lRet		:= .T.
			EndIf
		Case AFA->AFA_ACUMUL == "5"
			If dDataRef>=AFA->AFA_DTAPRO
				nCusto	:= AFA_CUSTD*PmsAFAQuant(AFA_PROJET,AFA_REVISA,AFA_TAREFA,AFA_PRODUT,AF9->AF9_QUANT,AFA_QUANT,AF9->AF9_HDURAC)
				lRet		:= .T.
			EndIf
		Case AFA->AFA_ACUMUL == "6"
			If dDataRef>=AFA->AFA_DTAPRO
				If nPercEx == Nil
					nCusto		:= AFA_CUSTD*PmsPrvAFA(AFA->(recno()), dDataRef, dDataRef ,nRecAF9)
				Else
					nCusto		:= AFA_CUSTD*nPercEx
				Endif
				lRet		:= .T.
			EndIf
		//Cronograma de consumo
		Case AFA->AFA_ACUMUL == "7"
			If nPercEx == Nil
				nCusto		:= AFA_CUSTD*PmsPrvAFA(AFA->(Recno()), dDataRef, dDataRef ,nRecAF9)
			Else
				nCusto		:= AFA_CUSTD*nPercEx
			Endif
			lRet				:= .T.
		OtherWise
			If nPercEx == Nil
				nCusto		:= (AFA_CUSTD*PmsPrvAFA(AFA->(recno()), dDataRef, dDataRef,nRecAF9))*nPercFrt
			Else
				nCusto		:= (AFA_CUSTD*nPercEx)*nPercFrt
			Endif
			lRet		:= .T.
	EndCase
EndIf

dbSelectArea("AF9")
If ColumnPos("AF9_TXMO2") > 0
	aTX2M[1]:=1
	aTX2M[2]:=AF9->AF9_TXMO2
	aTX2M[3]:=AF9->AF9_TXMO3
	aTX2M[4]:=AF9->AF9_TXMO4
	aTX2M[5]:=AF9->AF9_TXMO5
Else
	aTX2M[1]:=1
	aTX2M[2]:=0
	aTX2M[3]:=0
	aTX2M[4]:=0
	aTX2M[5]:=0
EndIf

DbSelectArea("AF8")
If ColumnPos("AF8_TRUNCA") > 0
	DbSetOrder(1)
	If (MsSeek(XFILIAL("AF8")+AF9->AF9_PROJET))
		cTrunca:=AF8->AF8_TRUNCA
	Endif
Else
	cTrunca:="1"
EndIf
//CCTR - Verifica se estamos usados Frente e Pega o seu Percentual.
If !Empty(PmsGetFrt())
	nPercFrt := PmsPercFrt(AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_TAREFA,PmsGetFrt())
	nCusto *= nPercFrt
Endif

IF lPmsxCusPrv
	nCusto := Execblock("PMSXCUSPRV",.F.,.F.,{nCusto})
Endif
PmsVerConv(@dDtConv,@cCnvPrv)
aCusto := PmsConvCus(nCusto,AFA->AFA_MOEDA,cCnvPrv,dDtConv,AF9->AF9_START,AF9->AF9_FINISH,,aTX2M,cTrunca,AF9->AF9_QUANT)

RestArea(aAreaAFA)
RestArea(aAreaAF9)
RestArea(aAreaAF8)
RestArea(aArea)
Return lRet
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsPrvAFA³ Autor ³ Edson Maricate         ³ Data ³ 06-05-2004 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Retorna a quantidade prevista do AFA no periodo especificado. ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsPrvAFA(nRecAFA,dDataDe,dDataAte,nRecAF9)

Local nPerc
Local nHrsUteis := 0
Local nQuant	:= 0
Local aArea		:= GetArea()
Local aAreaAFA	:= AFA->(GetArea())
Local cFilAEF		:= xFilial("AEF")

AFA->(MsGoto(nRecAFA))
If nRecAF9==Nil
	dbSelectArea("AF9")
	dbSetOrder(1)
	MsSeek(xFilial()+AFA->AFA_PROJET+AFA->AFA_REVISA+AFA->AFA_TAREFA)
Else
	AF9->(MsGoto(nRecAF9))
EndIf

dbSelectArea("AFA")
Do Case
	Case AFA->AFA_ACUMUL == "1"
		If (dDataDe >= AF9->AF9_START .And. dDataDe < AF9->AF9_FINISH) .Or.(dDataAte >= AF9->AF9_START .And. dDataAte < AF9->AF9_FINISH)
			nQuant	:= PmsAFAQuant(AFA_PROJET,AFA_REVISA,AFA_TAREFA,AFA_PRODUT,AF9->AF9_QUANT,AFA_QUANT,AF9->AF9_HDURAC)/2
    	EndIf
		If dDataDe <= AF9->AF9_START .And. dDataAte >= AF9->AF9_FINISH
			nQuant	:= PmsAFAQuant(AFA_PROJET,AFA_REVISA,AFA_TAREFA,AFA_PRODUT,AF9->AF9_QUANT,AFA_QUANT,AF9->AF9_HDURAC)
    	EndIf
	Case AFA->AFA_ACUMUL == "2"
		If dDataDe <= AF9->AF9_FINISH .And. dDataAte >= AF9->AF9_FINISH
			nQuant	:= PmsAFAQuant(AFA_PROJET,AFA_REVISA,AFA_TAREFA,AFA_PRODUT,AF9->AF9_QUANT,AFA_QUANT,AF9->AF9_HDURAC)
		EndIf
	Case AFA->AFA_ACUMUL == "4"
		If dDataDe <= AFA->AFA_DATPRF .And. dDataAte >= AFA->AFA_DATPRF
			nQuant	:= PmsAFAQuant(AFA_PROJET,AFA_REVISA,AFA_TAREFA,AFA_PRODUT,AF9->AF9_QUANT,AFA_QUANT,AF9->AF9_HDURAC)
		EndIf
	Case AFA->AFA_ACUMUL == "5"
		If dDataDe>=AFA->AFA_DTAPRO
			nQuant	:= PmsAFAQuant(AFA_PROJET,AFA_REVISA,AFA_TAREFA,AFA_PRODUT,AF9->AF9_QUANT,AFA_QUANT,AF9->AF9_HDURAC)
		EndIf
	Case AFA->AFA_ACUMUL == "6"
		If AF9->AF9_HUTEIS > 0

  			If !((dDataDe < AFA->AFA_DTAPRO .And. dDataAte < AFA->AFA_DTAPRO) ;
  			    .OR.(dDataDe > AF9->AF9_FINISH .And. dDataAte > AF9->AF9_FINISH))

				If AFA->AFA_DTAPRO >= dDataDe
					dDataDe := AFA->AFA_DTAPRO
				EndIf

				If AF9->AF9_FINISH < dDataAte
					dDataAte := AF9->AF9_FINISH
				EndIf

				nHrsUteis := PmsHrsItvl(dDataDe ,AF9->AF9_HORAI, dDataAte ,"24:00",AF9->AF9_CALEND,AF9->AF9_PROJET)
				If nHrsUteis==AF9->AF9_HUTEIS
					nPerc := 1
				Else
					nPerc := nHrsUteis/PmsHrsItvl(AFA->AFA_DTAPRO,AF9->AF9_HORAI,AF9->AF9_FINISH,AF9->AF9_HORAF,AF9->AF9_CALEND,AF9->AF9_PROJET)
				EndIf
			Else
				nPerc := 0
  			EndIf
		Else
			If dDataDe <= AFA->AFA_DTAPRO .And. dDataAte >= AF9->AF9_FINISH
				nPerc	:= 1
			Else
				nPerc	:= 0
			EndIf
		EndIf
		nQuant	:= PmsAFAQuant(AFA_PROJET,AFA_REVISA,AFA_TAREFA,AFA_PRODUT,AF9->AF9_QUANT,AFA_QUANT,AF9->AF9_HDURAC)*nPerc

	// Cronograma por consumo
	Case AFA->AFA_ACUMUL == "7"

		nQuant := 0
		DbSelectArea('AEF')
		DbSetOrder(1)
		If MsSeek(cFilAEF+AFA->(AFA_PROJET+AFA_REVISA+AFA_TAREFA+AFA_ITEM)+AFA->AFA_PRODUT+AFA->AFA_RECURS)
			While !Eof() .And. cFilAEF+AFA->(AFA_PROJET+AFA_REVISA+AFA_TAREFA)+AFA->AFA_PRODUT+AFA->AFA_RECURS == AEF_FILIAL+AEF->(AEF_PROJET+AEF_REVISA+AEF_TAREFA)+AEF->AEF_PRODUT+AEF->AEF_RECURS        .And.;
				  AnoMes(AEF_DATREF) >= AnoMes(dDataDe) .And. AnoMes(AEF_DATREF) <= AnoMes(dDataAte)
				nQuant += AEF->AEF_QUANT
				dbSkip()
   			EndDo
      	Else
       		If dDataDe <= AF9->AF9_START .And. dDataAte >= AF9->AF9_FINISH
            	nPerc        := 1
         	Elseif dDataDe > AF9->AF9_FINISH .And. dDataAte > AF9->AF9_FINISH
          		nPerc        := 0
            Elseif dDataDe < AF9->AF9_START .And. dDataAte < AF9->AF9_START
            	nPerc        := 0
			Else
             	If AF9->AF9_HUTEIS > 0
              		nPerc := (PMSPrvAF9(AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_TAREFA,Max(dDataAte,AF9->AF9_FINISH))-PMSPrvAF9(AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_TAREFA,Min(dDataDe-1,AF9->AF9_START)))/AF9->AF9_HDURAC
                Else
                	nPerc := 0
                EndIf
			EndIf
			nQuant := PmsAFAQuant(AFA->AFA_PROJET,AFA->AFA_REVISA,AFA->AFA_TAREFA,AFA->AFA_PRODUT,AF9->AF9_QUANT,AFA->AFA_QUANT,AF9->AF9_HDURAC)*nPerc
   		EndIf

	OtherWise
		If AF9->AF9_HUTEIS > 0
			nPerc		:= (PMSPrvAF9(AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_TAREFA,dDataAte)-PMSPrvAF9(AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_TAREFA,dDataDe-1))/AF9->AF9_HDURAC
		Else
			If dDataDe <= AF9->AF9_START .And. dDataAte >= AF9->AF9_FINISH
				nPerc	:= 1
			Else
				nPerc	:= 0
			EndIf
		EndIf
		nQuant	:= PmsAFAQuant(AFA_PROJET,AFA_REVISA,AFA_TAREFA,AFA_PRODUT,AF9->AF9_QUANT,AFA_QUANT,AF9->AF9_HDURAC)*nPerc
EndCase

RestArea(aAreaAFA)
RestArea(aArea)
Return nQuant

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsCOTPAFB³ Autor ³ Edson Maricate        ³ Data ³ 04-07-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Retorna os custos previstos do Recurso na data.               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsCOTPAFB(nRecAFB,dDataRef,nRecAF9,aCusto,nDecCst,lAcumulado,nPercExc)
Local nPerc
Local nHrsUteis
Local lRet		:= .F.
Local aArea		:= GetArea()
Local aAreaAF9	:= AF9->(GetArea())
Local aAreaAFB	:= AFB->(GetArea())
Local nCusto	:= 0
Local aTX2M		:= {0,0,0,0,0}
Local cTrunca	:= "1"
Local dDtConv, cCnvPrv
Local nPercFrt := 1
DEFAULT nDecCst    := TamSX3("AF9_CUSTO")[2]
DEFAULT lAcumulado := .T.

aCusto	:= {0,0,0,0,0}

AFB->(MsGoto(nRecAFB))
If nRecAF9==Nil
	dbSelectArea("AF9")
	dbSetOrder(1)
	MsSeek(xFilial()+AFB->AFB_PROJET+AFB->AFB_REVISA+AFB->AFB_TAREFA)
Else
	AF9->(MsGoto(nRecAF9))
EndIf

dbSelectArea("AFB")
If lAcumulado
	Do Case
		Case AFB->AFB_ACUMUL == "1"
			If dDataRef >= AF9->AF9_START .And. dDataRef < AF9->AF9_FINISH
				nCusto := PmsAFBValor(AF9->AF9_QUANT,AFB->AFB_VALOR)/2
				lRet		:= .T.
	    	EndIf
			If dDataRef >= AF9->AF9_FINISH
				nCusto		:= PmsAFBValor(AF9->AF9_QUANT,AFB->AFB_VALOR)
				lRet		:= .T.
	    	EndIf
		Case AFB->AFB_ACUMUL == "2"
			If dDataRef>=AF9->AF9_FINISH
				nCusto		:= PmsAFBValor(AF9->AF9_QUANT,AFB->AFB_VALOR)
				lRet		:= .T.
			EndIf
		Case AFB->AFB_ACUMUL == "4"
			If dDataRef>=AFB->AFB_DATPRF
				nCusto		:= PmsAFBValor(AF9->AF9_QUANT,AFB->AFB_VALOR)
				lRet		:= .T.
			EndIf
		Case AFB->AFB_ACUMUL == "5"
			If dDataRef>=AFB->AFB_DTAPRO
				nCusto		:= PmsAFBValor(AF9->AF9_QUANT,AFB->AFB_VALOR)
				lRet		:= .T.
			EndIf
		Case AFB->AFB_ACUMUL == "6"
			If dDataRef>=AFB->AFB_DTAPRO
				If nPercExc != NIL
					nCusto		:= PmsAFBValor(AF9->AF9_QUANT,AFB->AFB_VALOR)*nPercExc
				Else
					If AF9->AF9_HUTEIS > 0
						If dDataRef >= AF9->AF9_FINISH
							nHrsUteis := AF9->AF9_HUTEIS
						Else
							nHrsUteis := PmsHrsItvl(AFB->AFB_DTAPRO,AF9->AF9_HORAI,dDataRef,"24:00",AF9->AF9_CALEND,AF9->AF9_PROJET)
						EndIf
						If nHrsUteis==AF9->AF9_HUTEIS
							nPerc		:= 1
						Else
							nPerc		:= nHrsUteis/PmsHrsItvl(AFB->AFB_DTAPRO,AF9->AF9_HORAI,AF9->AF9_FINISH,AF9->AF9_HORAF,AF9->AF9_CALEND,AF9->AF9_PROJET)
						EndIf
					Else
						If dDataRef >= AF9->AF9_START
							nPerc	:= 1
						Else
							nPerc	:= 0
						EndIf
					EndIf
					nCusto		:= PmsAFBValor(AF9->AF9_QUANT,AFB->AFB_VALOR)*nPerc
				EndIf
				lRet		:= .T.
			EndIf
		OtherWise
			If nPercExc <> Nil
			   nPerc	:=	nPercExc
			Else
				If dDataRef >= AF9->AF9_START
					nPerc := PMSPrvAF9Cst(AFB_PROJET,AFB_REVISA,AFB_TAREFA,dDataRef)
				Else
					nPerc := 0
				EndIf
			Endif
			nCusto		:= PmsAFBValor(AF9->AF9_QUANT,AFB->AFB_VALOR)*nPerc
			lRet		:= .T.
	EndCase

// faz o calculo do custo no valor nao acumulado,
// isto é não é o valor previsto até o dia, mas o valor previsto pro dia.
Else
	Do Case
		Case AFB->AFB_ACUMUL == "1"
			If dDataRef == AF9->AF9_START .And. dDataRef == AF9->AF9_FINISH
				nCusto := PmsAFBValor(AF9->AF9_QUANT,AFB->AFB_VALOR)
				lRet		:= .T.
			Else
				If dDataRef == AF9->AF9_START .OR. dDataRef == AF9->AF9_FINISH
					nCusto := PmsAFBValor(AF9->AF9_QUANT,AFB->AFB_VALOR)/2
					lRet		:= .T.
				EndIf
	    	EndIf
		Case AFB->AFB_ACUMUL == "2"
			If dDataRef == AF9->AF9_FINISH
				nCusto		:= PmsAFBValor(AF9->AF9_QUANT,AFB->AFB_VALOR)
				lRet		:= .T.
			EndIf
		Case AFB->AFB_ACUMUL == "4"
			If dDataRef == AFB->AFB_DATPRF
				nCusto		:= PmsAFBValor(AF9->AF9_QUANT,AFB->AFB_VALOR)
				lRet		:= .T.
			EndIf
		Case AFB->AFB_ACUMUL == "5"
			If dDataRef>=AFB->AFB_DTAPRO
				nCusto		:= PmsAFBValor(AF9->AF9_QUANT,AFB->AFB_VALOR)
				lRet		:= .T.
			EndIf
		Case AFB->AFB_ACUMUL == "6"
			If AF9->AF9_HUTEIS > 0
				If dDataRef >= AF9->AF9_FINISH
					nHrsUteis := AF9->AF9_HUTEIS
				Else
					nHrsUteis := PmsHrsItvl(AFB->AFB_DTAPRO,AF9->AF9_HORAI,dDataRef,"24:00",AF9->AF9_CALEND,AF9->AF9_PROJET)
				EndIf
				If nHrsUteis==AF9->AF9_HUTEIS
					nPerc		:= 1
				Else
					nPerc		:= nHrsUteis/PmsHrsItvl(AFB->AFB_DTAPRO,AF9->AF9_HORAI,AF9->AF9_FINISH,AF9->AF9_HORAF,AF9->AF9_CALEND,AF9->AF9_PROJET)
				EndIf
			Else
				If dDataRef >= AF9->AF9_START
					nPerc	:= 1
				Else
					nPerc	:= 0
				EndIf
			EndIf
			nCusto		:= PmsAFBValor(AF9->AF9_QUANT,AFB->AFB_VALOR)*nPerc
			lRet		:= .T.
		OtherWise
			If nPercExc <> Nil
				nPerc	:=	nPercExc
			Else
				nPerc := PmsPrvAFB(AFA->(recno()), dDataRef, dDataRef,nRecAF9)
			EndIf
			nCusto		:= PmsAFBValor(AF9->AF9_QUANT,AFB->AFB_VALOR)*nPerc
			lRet		:= .T.
	EndCase
EndIf

dbSelectArea("AF9")
If ColumnPos("AF9_TXMO2") > 0
	aTX2M[1]:=1
	aTX2M[2]:=AF9->AF9_TXMO2
	aTX2M[3]:=AF9->AF9_TXMO3
	aTX2M[4]:=AF9->AF9_TXMO4
	aTX2M[5]:=AF9->AF9_TXMO5
Else
	aTX2M[1]:=1
	aTX2M[2]:=0
	aTX2M[3]:=0
	aTX2M[4]:=0
	aTX2M[5]:=0
EndIf

DbSelectArea("AF8")
If ColumnPos("AF8_TRUNCA") > 0
	DbSetOrder(1)
	If (MsSeek(XFILIAL("AF8")+AF9->AF9_PROJET))
		cTrunca:=AF8->AF8_TRUNCA
	Endif
Else
	cTrunca:="1"
EndIf
//CCTR - Verifica se estamos usados Frente e Pega o seu Percentual.
If !Empty(PmsGetFrt())
	nPercFrt := PmsPercFrt(AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_TAREFA,PmsGetFrt())
	nCusto *= nPercFrt
Endif

PmsVerConv(@dDtConv,@cCnvPrv)

aCusto := PmsConvCus(nCusto,AFB->AFB_MOEDA,cCnvPrv,dDtConv,AF9->AF9_START,AF9->AF9_FINISH,,aTX2M,cTrunca,AF9->AF9_QUANT)

RestArea(aAreaAF9)
RestArea(aAreaAFB)
RestArea(aArea)
Return lRet
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsPrvAFB³ Autor ³ Edson Maricate         ³ Data ³ 06-05-2004 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Retorna os custos previstos das despesas no periodo           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsPrvAFB(nRecAFB,dDataDe,dDataAte,nRecAF9)
Local nPerc
Local aArea		:= GetArea()
Local aAreaAFB	:= AFB->(GetArea())
Local nCusto	:= 0
Local cTrunca	:="1"
Local aTX2M		:={0,0,0,0,0}
//Local nDecCst := TamSX3("AF9_CUSTO")[2]
Local aCusto	:= {0,0,0,0,0}
Local dDtConv, cCnvPrv

AFB->(MsGoto(nRecAFB))
If nRecAF9==Nil
	dbSelectArea("AF9")
	dbSetOrder(1)
	MsSeek(xFilial()+AFB->AFB_PROJET+AFB->AFB_REVISA+AFB->AFB_TAREFA)
Else
	AF9->(MsGoto(nRecAF9))
EndIf

dbSelectArea("AFB")
Do Case
	Case AFB->AFB_ACUMUL == "1"
		If (dDataDe >= AF9->AF9_START .And. dDataDe < AF9->AF9_FINISH) .Or.(dDataAte >= AF9->AF9_START .And. dDataAte < AF9->AF9_FINISH)
			nCusto := PmsAFBValor(AF9->AF9_QUANT,AFB->AFB_VALOR)/2
    	EndIf
		If dDataDe <= AF9->AF9_START .And. dDataAte >= AF9->AF9_FINISH
			nCusto		:= PmsAFBValor(AF9->AF9_QUANT,AFB->AFB_VALOR)
    	EndIf
	Case AFB->AFB_ACUMUL == "2"
		If dDataDe <= AF9->AF9_FINISH .And. dDataAte >= AF9->AF9_FINISH
			nCusto		:= PmsAFBValor(AF9->AF9_QUANT,AFB->AFB_VALOR)
		EndIf
	Case AFB->AFB_ACUMUL == "4"
		If dDataDe <= AFB->AFB_DATPRF .And. dDataAte >= AFB->AFB_DATPRF
			nCusto		:= PmsAFBValor(AF9->AF9_QUANT,AFB->AFB_VALOR)
		EndIf
	Case AFB->AFB_ACUMUL == "5"
		If dDataDe >= AFB->AFB_DTAPRO
			nCusto		:= PmsAFBValor(AF9->AF9_QUANT,AFB->AFB_VALOR)
		EndIf
	Case AFB->AFB_ACUMUL == "6"
		If AF9->AF9_HUTEIS > 0
  			If !((dDataDe < AFB->AFB_DTAPRO .And. dDataAte < AFB->AFB_DTAPRO) ;
  			    .OR.(dDataDe > AF9->AF9_FINISH .And. dDataAte > AF9->AF9_FINISH))

				If AFB->AFB_DTAPRO >= dDataDe
					dDataDe := AFB->AFB_DTAPRO
				EndIf

				If AF9->AF9_FINISH < dDataAte
					dDataAte := AF9->AF9_FINISH
				EndIf

				nHrsUteis := PmsHrsItvl(dDataDe ,AF9->AF9_HORAI, dDataAte ,"24:00",AF9->AF9_CALEND,AF9->AF9_PROJET)
				If nHrsUteis==AF9->AF9_HUTEIS
					nPerc := 1
				Else
					nPerc := nHrsUteis/PmsHrsItvl(AFB->AFB_DTAPRO,AF9->AF9_HORAI,AF9->AF9_FINISH,AF9->AF9_HORAF,AF9->AF9_CALEND,AF9->AF9_PROJET)
				EndIf
			Else
				nPerc := 0
  			EndIf
		Else
			If dDataDe <= AFB->AFB_DTAPRO .And. dDataAte >= AF9->AF9_FINISH
				nPerc	:= 1
			Else
				nPerc	:= 0
			EndIf
		EndIf
		nCusto		:= PmsAFBValor(AF9->AF9_QUANT,AFB->AFB_VALOR)*nPerc
	OtherWise
		If AF9->AF9_HUTEIS > 0
			nPerc		:= (PMSPrvAF9(AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_TAREFA,dDataAte)-PMSPrvAF9(AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_TAREFA,dDataDe-1))/AF9->AF9_HDURAC
		Else
			If dDataDe <= AF9->AF9_START .And. dDataAte >= AF9->AF9_FINISH
				nPerc	:= 1
			Else
				nPerc	:= 0
			EndIf
		EndIf
		nCusto		:= PmsAFBValor(AF9->AF9_QUANT,AFB->AFB_VALOR)*nPerc
EndCase

DbSelectArea("AF8")
If ColumnPos("AF8_TRUNCA") > 0
	DbSetOrder(1)
	If (MSseek(XFILIAL("AF8")+AF9->AF9_PROJET))
		cTrunca:=AF8->AF8_TRUNCA
	EndIf
Else
	cTrunca:="1"
EndIf

DbSelectArea("AF9")
If ColumnPos("AF9_TXMO2") > 0
	aTX2M[1]:=1
	aTX2M[2]:=AF9->AF9_TXMO2
	aTX2M[3]:=AF9->AF9_TXMO3
	aTX2M[4]:=AF9->AF9_TXMO4
	aTX2M[5]:=AF9->AF9_TXMO5
Else
	aTX2M[1]:=0
	aTX2M[2]:=0
	aTX2M[3]:=0
	aTX2M[4]:=0
	aTX2M[5]:=0
EndIf

PmsVerConv(@dDtConv,@cCnvPrv)
aCusto := PmsConvCus(nCusto,AFB->AFB_MOEDA,cCnvPrv,dDtConv,AF9->AF9_START,AF9->AF9_FINISH,,aTX2M,cTrunca,AF9->AF9_QUANT)

RestArea(aAreaAFB)
RestArea(aArea)
Return aCusto
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsPOCAF9³ Autor ³ Edson Maricate         ³ Data ³ 04-07-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Retorna os percentual realizado da tarefa.                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsPOCAF9(cProjeto,cRevisa,cTarefa,dDataRef,nQuantAF9)
Local aArea    := GetArea()
Local aAreaAFF := AFF->(GetArea())
Local aAreaAF9 := AF9->(GetArea())
Local nRetPerc := 0
Local nPercFrt := 1
Local cAliasQry	:= "POC"+getNextAlias()
Local cAlias	:= ""

DEFAULT dDataRef:= dDataBase
DEFAULT cRevisa := PmsAF8Ver(cProjeto)

If nQuantAF9 == Nil
	dbSelectArea("AF9")
	dbSetOrder(1)
	MsSeek(xFilial("AF9")+cProjeto+cRevisa+cTarefa)
	nQuantAF9 := AF9->AF9_QUANT
EndIf

cAlias	:= Alias()
cAliasQry := "PMSAF9POC"
cQuery    := "% AFF_PROJET='"+cProjeto+"' AND "
cQuery    += "AFF_REVISA='"+cRevisa+"' AND "
cQuery    += "AFF_TAREFA='"+cTarefa+"' "
cQuery    += "ORDER BY AFF_DATA DESC %"

BeginSql Alias cAliasQry
	column AFF_DATA as Date
	SELECT AFF_QUANT, AFF_DATA
	FROM %table:AFF% AFF
	WHERE AFF_FILIAL = %xFilial:AFF%
			AND AFF.%NotDel%
			AND %Exp:cQuery%
EndSQL

//posiciona no registro referente a confirmação ate a database
If (cAliasQry)->( !EOF() )
	nRetPerc := (cAliasQry)->AFF_QUANT / nQuantAF9 * 100
EndIf

(cAliasQry)->(dbCloseArea())
dbSelectArea(cAlias)

//CCTR - Verifica se estamos usados Frente e Pega o seu Percentual.
If !Empty(PmsGetFrt())
	nPercFrt := PmsPercFrt(AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_TAREFA,PmsGetFrt())
	nRetPerc *= nPercFrt
Endif

RestArea(aAreaAF9)
RestArea(aAreaAFF)
RestArea(aArea)

Return nRetPerc
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsPOCAFC³ Autor ³ Edson Maricate         ³ Data ³ 04-07-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Retorna os percentual realizado da EDT.                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsPOCAFC(cProjeto,cRevisa,cEDT,dDataRef)
Local aArea		:= GetArea()
Local aAreaAFQ	:= AFQ->(GetArea())
Local aAreaAFC	:= AFC->(GetArea())
Local nRetPerc	:= 0

DEFAULT dDataRef := dDataBase

cRevisa := PmsAF8Ver(cProjeto)

cAliasQry := "PMSAFCPOC"
cQuery    := "% AFQ_PROJET='"+cProjeto+"' AND "
cQuery    += "AFQ_REVISA='"+cRevisa+"' AND "
cQuery    += "AFQ_EDT='"+cEDT+"' "
cQuery    += "ORDER BY AFQ_DATA %"

BeginSql Alias cAliasQry
	column AFQ_DATA as Date
	SELECT AFQ_QUANT, AFQ_DATA
	FROM %table:AFQ% AFQ
	WHERE AFQ_FILIAL = %xFilial:AFQ%
			AND AFQ.%NotDel%
			AND %Exp:cQuery%
EndSQL
(cAliasQry)->(dbGoTop())

//posiciona no registro referente a confirmação ate a database
While !(cAliasQry)->(EOF()) .And. (cAliasQry)->AFQ_DATA <= dDataRef
	nRetPerc	:= (cAliasQry)->AFQ_QUANT/AFC->AFC_QUANT*100
	(cAliasQry)->(DbSkip())
EndDo

(cAliasQry)->(dbCloseArea())

RestArea(aAreaAFC)
RestArea(aAreaAFQ)
RestArea(aArea)

Return nRetPerc
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsVldFase³ Autor ³ Edson Maricate        ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de validacao das Fases do Orcamento/Projeto            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsVldFase(cAlias,cChave,cEvento,lMensagem,cMensagem,dDataChk)
Local nLen
Local nPosIni
Local lRet	:= .T.
Local aArea	:= GetArea()
Local aAreaAF	:= (cAlias)->(GetArea())
Local aAreaAFE := AFE->(GetArea())

DEFAULT dDataChk	:= dDataBase
DEFAULT lMensagem := .T.

dbSelectArea(cAlias)
dbSetOrder(1)
If MsSeek(xFilial()+cChave)
	Do Case
		Case cAlias=="AF8"
			If Type("cRevisa")=="U" .OR. Empty(cRevisa)
				cRevisa	:= AF8->AF8_REVISA
			EndIf
			dbSelectArea("AFE")
			dbSetOrder(1)
			// procura pelo projeto + revisao corrente
			// OBS.: a cRevisa é uma variavel PRIVATE declarada
			// externamente a esta function nas telas principais do PMS
			// Caso nao esteja declarado assume a versao atual do projeto
			If MsSeek(xFilial()+cChave+cRevisa)
				// se for um projeto NORMAL, nao é uma simulacao
				If AFE->AFE_TIPO <> "2"
					RestArea(aAreaAFE)

					If cEvento$"81/82/83/85/86/87/91/92/93/94/95/96/52/51" ;
					  .And. !Empty(AF8->AF8_ULMES) ;
					  .And. dDataChk <= AF8->AF8_ULMES
						Aviso(STR0251+DTOC(AF8->AF8_ULMES),STR0252,{STR0253},2)
						lRet := .F.
					Elseif AF8->AF8_ENCPRJ == "1" .And. cEvento$"81/82/83/85/86/87/91/92/93/94/95/96"
						Aviso(STR0143,STR0090,{STR0203},2)
						lRet := .F.
					EndIf
					dbSelectArea("AEA")
					dbSetOrder(1)
					If lRet .And. MsSeek(xFilial()+AF8->AF8_FASE)
						If &("AEA_EVEN"+cEvento)=="2"
							If AT(cEvento+"=",AEA->AEA_MSG1) > 0
								nPosIni	:= AT(cEvento+"=",AEA->AEA_MSG1)+3
								nLen	:= AT(";",Substr(AEA->AEA_MSG1+";",nPosIni,Len(AEA->AEA_MSG1+";")-nPosIni+1))
								If lMensagem
									Help(" ",1, STR0033, ,AllTrim(Substr(AEA->AEA_MSG1,nPosIni,nLen-1)),2,1)
								Else
									cMensagem := AllTrim(Substr(AEA->AEA_MSG1,nPosIni,nLen-1))
								EndIf
							ElseIf AT("**=",AEA->AEA_MSG1) > 0
								nPosIni	:= AT("**=",AEA->AEA_MSG1)+3
								nLen	:= AT(";",Substr(AEA->AEA_MSG1+";",nPosIni,Len(AEA->AEA_MSG1+";")-nPosIni+1))
								If lMensagem
									Help(" ",1, STR0033, ,AllTrim(Substr(AEA->AEA_MSG1,nPosIni,nLen-1)),2,1)
								Else
									cMensagem := AllTrim(Substr(AEA->AEA_MSG1,nPosIni,nLen-1))
								EndIf
							EndIf
							lRet := .F.
						EndIf
					EndIf
				EndIf
			EndIf
			RestArea(aAreaAFE)
		Case cAlias=="AF1"
			dbSelectArea("AE9")
			dbSetOrder(1)
			If MsSeek(xFilial()+AF1->AF1_FASE)
				If &("AE9_EVEN"+cEvento)=="2"
					If AT(cEvento+"=",AE9->AE9_MSG1) > 0
						nPosIni	:= AT(cEvento+"=",AE9->AE9_MSG1)+3
						nLen	:= AT(";",Substr(AE9->AE9_MSG1+";",nPosIni,Len(AE9->AE9_MSG1+";")-nPosIni+1))
						If lMensagem
							Aviso(STR0033,AllTrim(Substr(AE9->AE9_MSG1,nPosIni,nLen-1)),{STR0043},2,STR0045) //"Operacao Invalida" //"Controle de Fases do Orcamento" //"Ok"
						Else
							cMensagem := AllTrim(Substr(AE9->AE9_MSG1,nPosIni,nLen-1))
						EndIf
					ElseIf AT("**=",AE9->AE9_MSG1) > 0
						nPosIni	:= AT("**=",AE9->AE9_MSG1)+3
						nLen	:= AT(";",Substr(AE9->AE9_MSG1+";",nPosIni,Len(AE9->AE9_MSG1+";")-nPosIni+1))
						If lMensagem
							Aviso(STR0033,AllTrim(Substr(AE9->AE9_MSG1,nPosIni,nLen-1)),{STR0043},2,STR0045) //"Operacao Invalida" //"Controle de Fases do Orcamento" //"Ok"						EndIf
						Else
							cMensagem := AllTrim(Substr(AE9->AE9_MSG1,nPosIni,nLen-1))
						EndIf
					EndIf
					lRet := .F.
				EndIf
			EndIf
	EndCase
EndIf

RestArea(aAreaAF)
RestArea(aArea)
Return lRet
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsCopyReg³ Autor ³ Edson Maricate        ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao que copia um registro do arquivo.                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsCopyReg(cAlias,nRecNo,aCampos,nRegIncl, aBlkAtu)

Local nx
Local cMSFil
Local nPosMSFil
Local nPosCpo
Local lMSFil	:= .F.
Local bCampo 	:= {|n| FieldName(n) }

DEFAULT aCampos	:= {}
DEFAULT aBlkAtu	:= {}

dbSelectArea(cAlias)
dbGoto(nRecNo)
nPosMSFil := ColumnPos(cAlias+"_MSFIL")
If nPosMSFil >0
	cMSFil := FieldGet(nPosMSFil)
	lMSFil := .T.
EndIf

RegToMemory(cAlias,.F.,.F.)

// Efetua a copia do registro
RecLock(cAlias,.T.)
For nx := 1 TO FCount()
	nPosCpo := aScan(aCampos,{|x| AllTrim(x[1])==AllTrim(FieldName(nx))})
	If nPosCpo > 0
		FieldPut(ColumnPos(aCampos[nPosCpo,1]),aCampos[nPosCpo,2])
	Else
		FieldPut(nx,M->&(EVAL(bCampo,nx)))
	EndIf
Next nx
If lMsFil
	FieldPut(nPosMSFil,cMSFil)
EndIf

For nX := 1 to Len(aBlkAtu)
	Eval(aBlkAtu[nX])
next nX

nRegIncl := (cAlias)->(Recno())
MsUnlock()
FkCommit()
dbGoto(nRecNo)
Return
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsDlgFI³ Autor ³ Edson Maricate          ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Esta funcao cria uma janela para configuracao e apontamentos  ³±±
±±³          ³de Despesas Financeiras do Projeto.                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³                                                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsDlgFI(nOpcao,cPrefixo,cNum,cParcela,cTipo,cFornece,cLoja,lDlg)

Local bSavSetKey	:= SetKey(VK_F4,Nil)
Local bSavKeyF5   := SetKey(VK_F5,Nil)
Local bSavKeyF6   := SetKey(VK_F6,Nil)
Local bSavKeyF7   := SetKey(VK_F7,Nil)
Local bSavKeyF8   := SetKey(VK_F8,Nil)
Local bSavKeyF9   := SetKey(VK_F9,Nil)
Local bSavKeyF10  := SetKey(VK_F10,Nil)
Local oGetDados
Local lOk         := .T.
Local oDlg,oBold
Local nPosRat		:= aScan(aRatAFR,{|x| x[1] == "01"})
Local lGetDados	:= .T.
Local nY          := 0
Local nLenCols		:= 0
Local nLenHeader	:= 0
Local lValido		:= .T.
Local lFA050PMS	:= ExistBlock("FA050PMS")
Local aAlter      := {"AFR_PROJET","AFR_TAREFA", "AFR_TIPOD", "AFR_VALOR1" }
Local lPmsAFRCpo := ExistBlock("PmsAFRCpo",.F.,.F.,{aAlter})
Local lRatAutPrj	:=Type("LF050AUTO") =="L" .and. lF050Auto .and. Type("aAutoAFR") # "U" .and. !Empty (aAutoAFR)//rateio automatico de projetos

PRIVATE aCols	:= {}
PRIVATE aHeader	:= {}
DEFAULT lDlg := .T.

If lPmsAFRCpo
	aAlter := ExecBlock("PmsAFRCpo", .F., .F., {aAlter})
EndIf

If !PmsVldtit(2)  // Funçao que validará se o titulo foi gerado via NFE.
	IF !Isblind()
		Aviso(STR0143 , STR0419 ,{"OK"},2) //"Atenção!", "Este título não poderá ser novamente amarrado a um projeto pois foi originado de uma nota fiscal de entrada já com amarração a um projeto e tarefa."
	Else
		Help(,,STR0143,,STR0419,1,0)////"Atenção!", "Este título não poderá ser novamente amarrado a um projeto pois foi originado de uma nota fiscal de entrada já com amarração a um projeto e tarefa."
	Endif
	lValido := .F.
Endif

If lValido .and. lFA050PMS // ponto de entrada existente somente para a rotina FINA050 (CP)
	lValido := Execblock("FA050PMS",.F.,.F.)
Endif

If lValido
	If nOpcao == 3
		// Montagem do aHeader
		FillGetDados(nOpcao,"AFR",1,,,,,,,,{||.T.},.T.,aHeader)
		aHeaderAFR	:= aClone(aHeader)
		If nPosRat > 0
			aCols	:= aClone(aRatAFR[nPosRat,2])
		ElseIf !lRatAutPrj
			// Faz a montagem de uma linha em branco no aCols.
			nLenHeader := Len(aHeader)
			aadd(aCols,Array(nLenHeader+1))
			For ny := 1 to nLenHeader
				If Trim(aHeader[ny,2]) == "AFR_ITEM"
					aCols[1,ny]	:= "01"
				ElseIf AllTrim(aHeader[ny,2]) $ "AFR_ALI_WT | AFR_REC_WT"
					If AllTrim(aHeader[ny,2]) == "AFR_ALI_WT"
						aCols[1,ny] := "AFR"
					ElseIf AllTrim(aHeader[ny,2]) == "AFR_REC_WT"
						aCols[1,ny] := 0
					EndIf
				Else
					aCols[1,ny] := CriaVar(aHeader[ny,2])
				EndIf
				aCols[1,nLenHeader+1] := .F.
			Next ny
		EndIf
	Else
		// Montagem do aHeader
		FillGetDados(nOpcao,"AFR",1,,,,,,,,{||.T.},.T.,aHeader)
		aHeaderAFR	:= aClone(aHeader)
		dbSelectArea("AFR")
		dbSetOrder(2)
		If nPosRat == 0
			nLenHeader := Len(aHeader)
			If MsSeek(xFilial()+cPrefixo+cNum+cParcela+cTipo+cFornece+cLoja)
				While !Eof() .And. xFilial()+cPrefixo+cNum+cParcela+cTipo+cFornece+cLoja==;
									AFR_FILIAL+AFR_PREFIX+AFR_NUM+AFR_PARCEL+AFR_TIPO+AFR_FORNEC+AFR_LOJA
					If AFR->AFR_REVISA==PmsAF8Ver(AFR->AFR_PROJET)
						aADD(aCols,Array(nLenHeader+1))
						nLenCols := Len(aCols)
						For ny := 1 to nLenHeader
							If ( aHeader[ny,10] != "V")
								aCols[nLenCols,ny] := FieldGet(ColumnPos(aHeader[ny,2]))
							ElseIf AllTrim(aHeader[ny,2]) $ "AFR_ALI_WT | AFR_REC_WT"
								If AllTrim(aHeader[ny,2]) == "AFR_ALI_WT"
									aCols[1,ny] := "AFR"
								ElseIf AllTrim(aHeader[ny,2]) == "AFR_REC_WT"
									aCols[1,ny] := AFR->(Recno())
								EndIf
							Else
								aCols[nLenCols,ny] := CriaVar(aHeader[ny,2])
							EndIf
							aCols[nLenCols,nLenHeader+1] := .F.
						Next ny
					EndIf
					dbSkip()
				End
			EndIf
			If Empty(aCols) .and. !lRatAutPrj
				// Faz a montagem de uma linha em branco no aCols.
				aadd(aCols,Array(nLenHeader+1))
				For ny := 1 to nLenHeader
					If Trim(aHeader[ny,2]) == "AFR_ITEM"
						aCols[1,ny] 	:= "01"
					ElseIf AllTrim(aHeader[ny,2]) $ "AFR_ALI_WT | AFR_REC_WT"
						If AllTrim(aHeader[ny,2]) == "AFR_ALI_WT"
							aCols[1,ny] := "AFR"
						ElseIf AllTrim(aHeader[ny,2]) == "AFR_REC_WT"
							aCols[1,ny] := 0
						EndIf
					Else
						aCols[1,ny] := CriaVar(aHeader[ny,2])
					EndIf
					aCols[1,nLenHeader+1] := .F.
				Next ny
			EndIf
		Else
			aCols := aClone(aRatAFR[nPosRat,2])
		EndIf
	EndIf

	If lGetDados .And. lDlg
		DEFINE FONT oBold NAME "Arial" SIZE 0, -13 BOLD
		DEFINE MSDIALOG oDlg FROM 88,22  TO 350,619 TITLE STR0034 Of oMainWnd PIXEL //'Assistente de Apontamentos : Gerenciamento de Projetos - Despesas'
			@ 16 ,3   TO 18 ,310 LABEL '' OF oDlg PIXEL
			@ 6,10 SAY STR0035+cPrefixo+"-"+cNum+cParcela SIZE 150,7 OF oDlg PIXEL //"Documento : "
			oGetDados := MSGetDados():New(23,3,112,296,nOpcao,'PMSAFRLOK','PMSAFRTOK','+AFR_ITEM',.T.,aAlter,,,GetNewPar("MV_NUMLIN", 9999),'PMSAFRFOK')
			@ 118,249 BUTTON STR0027 SIZE 35 ,9   FONT oDlg:oFont ACTION {||If(oGetDados:TudoOk(),(lOk:=.T.,oDlg:End()),(lOk:=.F.))}  OF oDlg PIXEL  //'Confirma'
			@ 118,210 BUTTON STR0028 SIZE 35 ,9   FONT oDlg:oFont ACTION (lOk:=.F., oDlg:End() ) OF oDlg PIXEL  //'Cancelar'
	      If ExistBlock("PMSFISCR")
	         ExecBlock("PMSFISCR",.F.,.F.,{oDlg,nOpcao})
	      Endif
		ACTIVATE MSDIALOG oDlg CENTERED
	ElseIf lRatAutPrj//rateio automatico de projetos
		lOk:=MsGetDAuto ( aAutoAFR,'PMSAFRLOK() .and. PMSAFRFOK()', 'PMSAFRTOK', , nopcao )
	EndIf

	If nOpcao <> 2 .And. lOk
		If nPosRat > 0
			aRatAFR[nPosRat,2]	:= aClone(aCols)
		Else
			aADD(aRatAFR,{"01",aClone(aCols)})
		EndIf

		If ExistBlock("PMSDLGFI")
			U_PMSDLGFI(aCols,aHeader)
		EndIf
	EndIf
Endif

SetKey(VK_F4,bSavSetKey)
SetKey(VK_F5,bSavKeyF5)
SetKey(VK_F6,bSavKeyF6)
SetKey(VK_F7,bSavKeyF7)
SetKey(VK_F8,bSavKeyF8)
SetKey(VK_F9,bSavKeyF9)
SetKey(VK_F10,bSavKeyF10)

Return Iif(!lDlg,aRatAFR,Nil)
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsWriteFI³ Autor ³ Edson Maricate        ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Programa de gravacao de apontamentos chamado pela rotina de   ³±±
±±³          ³gravacao de Despesas Financeiras .                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpN1 : Evento - [1] - Inclusao de Titulos a Pagar            ³±±
±±³          ³                 [2] - Estorno de Titulos a Pagar             ³±±
±±³          ³                 [3] - Exclusao de Titulos a Pagar            ³±±
±±³          ³ExpC2 : Alias da tabela de Titulos a Pagar                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³                                                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsWriteFI(nEvento,cAliasSE2)

Local nx
Local ny
Local aArea		:= GetArea()
Local aTempCols	:= {}
Local aAreaSE2 := (cAliasSE2)->(GetArea())
Local aAreaAFR := AFR->(GetArea())
Local cAFRFilial  := ""
Local cAFRPrefixo := ""
Local cAFRNum     := ""
Local cAFRPar		:=""
Local cAFRProj 	:= ""
Local cAFRRev  	:= ""
Local cAFRTrf  	:= ""
Local lNrasdsd		:= SuperGetMV("MV_NRASDSD",.T.,.F.)
Local cPrefixo 	:= ""
Local cNum     	:= ""
Local cTipo    	:= ""
Local cFornece 	:= ""
Local cLoja    	:= ""
Local nParc    	:= 0   // número de parcelas a serem desdobradas
Local nRecAfr		:= 0
Local cFilAFR		:= xFilial("AFR")

Private cTipoE2   := ""
Private cParcIR   := ""
Private cParcINSS := ""
Private cParcISS  := ""
Private cParcCof  := ""
Private cParcPis  := ""
Private cParcCsll := ""

cTipoE2	 := (cAliasSE2)->E2_TIPO
cParcIR  := (cAliasSE2)->E2_PARCIR
cParcINSS:= (cAliasSE2)->E2_PARCINS
cParcISS := (cAliasSE2)->E2_PARCISS

If SE2->(ColumnPos("E2_PARCCOF")) > 0
	cParcCof := (cAliasSE2)->E2_PARCCOF
EndIf
If SE2->(ColumnPos("E2_PARCPIS")) > 0
	cParcPis := (cAliasSE2)->E2_PARCPIS
EndIf
If SE2->(ColumnPos("E2_PARCSLL")) > 0
	cParcCsll:= (cAliasSE2)->E2_PARCSLL
EndIf

If Empty(aHeaderAFR)
	aHeaderAFR := {}
	// Montagem do aHeaderAFR
	dbSelectArea("SX3")
	dbSetOrder(1)
	MsSeek("AFR")
	While !EOF() .And. (x3_arquivo == "AFR")
		IF X3USO(x3_usado) .AND. cNivel >= x3_nivel
			AADD(aHeaderAFR,{ TRIM(x3titulo()), x3_campo, x3_picture,;
				x3_tamanho, x3_decimal, x3_valid,;
				x3_usado, x3_tipo, x3_arquivo,x3_context } )
		Endif
		dbSkip()
	End
EndIf

// Verifica o array de amarracao dos Contratos x Projetos

aRatAFR := If(Type('aRatAFR') = 'U', Nil, aRatAFR)

If nEvento <> 1 .Or. !Empty(aRatAFR)
   Do Case
		Case nEvento == 1
			nx	:= aScan(aRatAFR,{|x| x[1] == "01"})
			If nx == 0
				// Verifica se o item ja possui itens gravados.
				dbSelectArea("AFR")
				dbSetOrder(2)
				If MsSeek(cFilAFR+(cAliasSE2)->E2_PREFIXO+(cAliasSE2)->E2_NUM+(cAliasSE2)->E2_PARCELA+(cAliasSE2)->E2_TIPO+(cAliasSE2)->E2_FORNECE+(cAliasSE2)->E2_LOJA)
					While AFR->(!Eof()) .And. xFilial()+(cAliasSE2)->E2_PREFIXO+(cAliasSE2)->E2_NUM+(cAliasSE2)->E2_PARCELA+(cAliasSE2)->E2_TIPO+(cAliasSE2)->E2_FORNECE+(cAliasSE2)->E2_LOJA==;
												AFR->AFR_FILIAL+AFR->AFR_PREFIX+AFR->AFR_NUM+AFR->AFR_PARCEL+AFR->AFR_TIPO+AFR->AFR_FORNEC+AFR->AFR_LOJA
						If AFR->AFR_REVISA==PmsAF8Ver(AFR->AFR_PROJET)
							aADD(aTempCols,Array(Len(aHeaderAFR)+1))
							For ny := 1 to Len(aHeaderAFR)
								If ( aHeaderAFR[ny,10] != "V")
									aTempCols[Len(aTempCols),ny] := FieldGet(ColumnPos(aHeaderAFR[ny,2]))
								ElseIf AllTrim(aHeaderAFR[ny,02]) $ "AFR_ALI_WT | AFR_REC_WT"
									If AllTrim(aHeaderAFR[ny,02]) == "AFR_ALI_WT"
										aTempCols[Len(aTempCols),ny] := "AFR"
									ElseIf AllTrim(aHeaderAFR[ny,02]) == "AFR_REC_WT"
										aTempCols[Len(aTempCols),ny] := AFR->(Recno())
									EndIf
								Else
									aTempCols[Len(aTempCols),ny] := CriaVar(aHeaderAFR[ny,2])
								EndIf
								aTempCols[Len(aTempCols),Len(aHeaderAFR)+1] := .F.
							Next ny
						EndIf
						dbSkip()
					End
					aAdd(aRatAFR,{"01",aClone(aTempCols)})
					nx := Len(aRatAFR)
				EndIf
			EndIf
			If nx > 0

				// gerado a partir de desdobramento
				// (SE2->E2_DESDOBR == "S")
				If SE2->E2_DESDOBR == "S"  .And. INCLUI
					cPrefixo := (cAliasSE2)->E2_PREFIXO
					cNum     := (cAliasSE2)->E2_NUM
					cTipo    := (cAliasSE2)->E2_TIPO
					cFornece := (cAliasSE2)->E2_FORNECE
					cLoja    := (cAliasSE2)->E2_LOJA
					nRecAfr	 := (cAliasSE2)->(Recno())

					If Left(cSE2TpDsd, 1) == "T"
						nParc	:=	If(lNrasdsd,SE2ParcNo(xFilial(), cPrefixo, cNum, cTipo, cFornece, cLoja),;
										SE2ParcNo(xFilial(), cPrefixo, cNum, cTipo, cFornece, cLoja) - 1)
					Else
					 	nParc :=  1
					EndIf

					dbSelectArea(cAliasSE2)
					(cAliasSE2)->(dbSetOrder(1)) //E2_FILIAL+E2_PREFIXO+E2_NUM+E2_PARCELA+E2_TIPO+E2_FORNECE+E2_LOJA
					(cAliasSE2)->(MsSeek(xFilial() + cPrefixo + cNum))

    				While !(cAliasSE2)->(Eof()) .And. (cAliasSE2)->E2_FILIAL + (cAliasSE2)->E2_PREFIXO + (cAliasSE2)->E2_NUM == ;
																	xFilial()            + cPrefixo                + cNum
						If (cAliasSE2)->(E2_TIPO+E2_FORNECE+E2_LOJA) == cTipo+cFornece+cLoja .And.;
							(cAliasSE2)->E2_DESDOBR == "S" .and. (nRecAfr <> (cAliasSE2)->(Recno()))
							PMSSE2Ass(cAliasSE2, aHeaderAFR, aRatAFR, nx, nParc)
						EndIf

						(cAliasSE2)->(dbSkip())
					EndDo
				Else

					PMSSE2Ass(cAliasSE2, aHeaderAFR, aRatAFR, nx, nParc)
				EndIf
			EndIf
		Case nEvento == 2
			If aRatAFR<>Nil
				If (nx	:= aScan(aRatAFR,{|x| x[1] == "01"})) == 0
					aRatAFR := PmsDlgFI(1,(cAliasSE2)->E2_PREFIXO,(cAliasSE2)->E2_NUM,(cAliasSE2)->E2_PARCELA,(cAliasSE2)->E2_TIPO,(cAliasSE2)->E2_FORNECE,(cAliasSE2)->E2_LOJA,.F.)
					nx	:= aScan(aRatAFR,{|x| x[1] == "01"})
				Endif
			Endif
			dbSelectArea("AFR")
			dbSetOrder(2)
			If MsSeek(cFilAFR+(cAliasSE2)->E2_PREFIXO+(cAliasSE2)->E2_NUM+(cAliasSE2)->E2_PARCELA+(cAliasSE2)->E2_TIPO+(cAliasSE2)->E2_FORNECE+(cAliasSE2)->E2_LOJA)
				While AFR->(!Eof()) .And. xFilial()+(cAliasSE2)->E2_PREFIXO+(cAliasSE2)->E2_NUM+(cAliasSE2)->E2_PARCELA+(cAliasSE2)->E2_TIPO+(cAliasSE2)->E2_FORNECE+(cAliasSE2)->E2_LOJA==;
					AFR->AFR_FILIAL+AFR->AFR_PREFIX+AFR->AFR_NUM+AFR->AFR_PARCEL+AFR->AFR_TIPO+AFR->AFR_FORNEC+AFR->AFR_LOJA
					If AFR->AFR_REVISA==PmsAF8Ver(AFR->AFR_PROJET)
						// verifica ha valor de ISS, INSS ou IRRF associado
						// e o deleta
						aAreaAFR := AFR->(GetArea())

						cAFRFilial  := AFR->AFR_FILIAL
						cAFRPrefixo := AFR->AFR_PREFIX
						cAFRNum     := AFR->AFR_NUM
						cAFRParc    := AFR->AFR_PARCEL
						cAFRProj 	:= AFR->AFR_PROJET
						cAFRRev		:= AFR->AFR_REVISA
						cAFRTrf		:= AFR->AFR_TAREFA
						AFR->(dbSetOrder(2))
						If AFR->(MsSeek(cAFRFilial + cAFRPrefix + cAFRNum + cAFRParc)) .and. (nx <> 0)
							While !AFR->(Eof()) .And.;
								cAFRFilial + cAFRPrefixo + cAFRNum +cAFRParc ==;
								AFR->AFR_FILIAL + AFR->AFR_PREFIX + AFR->AFR_NUM + AFR->AFR_PARCEL .or. PmsVldAFR(cAFRProj, cAFRRev, cAFRTrf)
								RecLock("AFR", .F., .T.)
								dbDelete()
								MsUnlock()
								AFR->(dbSkip())
							End
						EndIf
						RestArea(aAreaAFR)
					EndIf
					AFR->(dbSkip())
				EndDo
			EndIF

		Case nEvento == 3
			dbSelectArea("AFR")
			dbSetOrder(2)
		   If MsSeek(cFilAFR+(cAliasSE2)->E2_PREFIXO+(cAliasSE2)->E2_NUM+(cAliasSE2)->E2_PARCELA+(cAliasSE2)->E2_TIPO+(cAliasSE2)->E2_FORNECE+(cAliasSE2)->E2_LOJA)
				While AFR->(!Eof()) .And. cFilAFR+(cAliasSE2)->E2_PREFIXO+(cAliasSE2)->E2_NUM+(cAliasSE2)->E2_PARCELA+(cAliasSE2)->E2_TIPO+(cAliasSE2)->E2_FORNECE+(cAliasSE2)->E2_LOJA==;
										  AFR->AFR_FILIAL+AFR->AFR_PREFIX+AFR->AFR_NUM+AFR->AFR_PARCEL+AFR->AFR_TIPO+AFR->AFR_FORNEC+AFR->AFR_LOJA
					If AFR->AFR_REVISA==PmsAF8Ver(AFR->AFR_PROJET)
						// verifica ha valor de ISS, INSS ou IRRF associado
						// e o deleta
						aAreaAFR := AFR->(GetArea())

						cAFRFilial  := AFR->AFR_FILIAL
						cAFRPrefixo := AFR->AFR_PREFIX
						cAFRNum     := AFR->AFR_NUM
						cAFRProj 	:= AFR->AFR_PROJET
						cAFRRev		:= AFR->AFR_REVISA
						cAFRTrf		:= AFR->AFR_TAREFA
						cAFRPar		:= AFR->AFR_PARCEL

						AFR->(dbSetOrder(2))

						If AFR->(MsSeek(cAFRFilial + cAFRPrefix + cAFRNum + cAFRPar))
							While !AFR->(Eof()) .And.;
								cAFRFilial + cAFRPrefixo + cAFRNum == AFR->AFR_FILIAL + AFR->AFR_PREFIX + AFR->AFR_NUM .AND. ;
								(cAFRPar==AFR->AFR_PARCEL .or. PmsVldAFR(cAFRProj, cAFRRev, cAFRTrf))
								RecLock("AFR", .F., .T.)
								dbDelete()
								MsUnlock()
								AFR->(dbSkip())
							End
						EndIf

						RestArea(aAreaAFR)

						// Integração com TOP, gera a apropriacao para o projeto.

						RecLock("AFR",.F.,.T.)
						dbDelete()
						MsUnlock()
					EndIf
					AFR->(dbSkip())
				EndDo
			EndIf
	EndCase
EndIf

RestArea(aAreaSE2)
RestArea(aAreaAFR)
RestArea(aArea)

Return
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSAFRFOK³ Autor ³ Edson Maricate         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de validacao dos campos da GetDados de rateio do OP.   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSDLGFI,PMSXFUN                                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PMSAFRFOK()
Local cRevisa
Local lRet		:= .T.
Local cCampo	:= AllTrim(ReadVar())
Local nX

Do Case
	Case cCampo == 'M->AFR_PROJET'
		lRet := PMSExistCPO("AF8") .And. PmsVldFase("AF8",M->AFR_PROJET,"82")
		// Se houver integracao com o modulo TOP (TOTVS Obras e Projetos) deve validar para que existe somente 1 projeto e tarefa na acols.
		If lRet .and. IsIntegTop()
			If len(aCols) > 1
				For nX := 1 to Len(aCols)
					If nX <> N .and. M->AFR_PROJET == aCols[nX,aScan(aHeader,{|x|Alltrim(x[2])=="AFR_PROJET"})];
						.and. aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFR_TAREFA"})] == aCols[nX,aScan(aHeader,{|x|Alltrim(x[2])=="AFR_TAREFA"})]
						Help( " ", 1, "PMS",, STR0422, 1, 0 )//"Já existe rateio para este projeto e tarefa!"
						lRet:=.F.
						Exit
					Endif
				Next
			EndIf
		Endif
	Case cCampo == 'M->AFR_TAREFA'
		cProjeto := aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFR_PROJET"})]
		cRevisa  := aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFR_REVISA"})]
		lRet := ExistCpo("AF9",cProjeto+cRevisa+M->AFR_TAREFA,1)
		// Se houver integracao com o modulo TOP (TOTVS Obras e Projetos) deve validar para que existe somente 1 projeto e tarefa na acols.
		If lRet .and. IsIntegTop()
			If len(aCols) > 1
				For nX := 1 to Len(aCols)
					If nX <> N .and. M->AFR_TAREFA == aCols[nX,aScan(aHeader,{|x|Alltrim(x[2])=="AFR_TAREFA"})];
						.and. aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFR_PROJET"})] == aCols[nX,aScan(aHeader,{|x|Alltrim(x[2])=="AFR_PROJET"})]
						Help( " ", 1, "PMS",, STR0422, 1, 0 )//"Já existe rateio para este projeto e tarefa!"
						lRet:=.F.
						Exit
					Endif
				Next
			EndIf
		Endif
	Case cCampo == 'M->AFR_REC_WT' //validação do linha ok
		cProjeto := aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFR_PROJET"})]
		cRevisa  := aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFR_REVISA"})]
		lRet:=PMSExistCPO("AF8",M->AFR_PROJET) .And. PmsVldFase("AF8",M->AFR_PROJET,"82")
		IF lRet
			lRet := ExistCpo("AF9",cProjeto+cRevisa+M->AFR_TAREFA,1)
		Endif
		// Se houver integracao com o modulo TOP (TOTVS Obras e Projetos) deve validar para que existe somente 1 projeto e tarefa na acols.
		If lRet .and. IsIntegTop()
			If len(aCols) > 1
				For nX := 1 to Len(aCols)
					If nX <> N .and. M->AFR_TAREFA == aCols[nX,aScan(aHeader,{|x|Alltrim(x[2])=="AFR_TAREFA"})];
						.and. aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFR_PROJET"})] == aCols[nX,aScan(aHeader,{|x|Alltrim(x[2])=="AFR_PROJET"})]
						Help( " ", 1, "PMS",, STR0422, 1, 0 )//"Já existe rateio para este projeto e tarefa!"
						lRet:=.F.
						Exit
					Endif
				Next
			EndIf
		Endif
EndCase

Return lRet
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSAFRLOK³ Autor ³ Edson Maricate         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de validacao LinOk da GetDados de rateio das Despesas. ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSDLGFI,PMSXFUN                                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PMSAFRLOK()
Local lRet := .T.

// Verifica os campos obrigatorios do SX3.
If !aCols[n,Len(aCols[n])]
	lRet := PmsVldFase("AF8",aCols[n,aScan(aHeader,{|x| Substr(x[2],4,7) =="_PROJET" })],"82")
	If lRet
		lRet := MaCheckCols(aHeader,aCols,n)
	EndIf
EndIf

Return lRet
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSAFRTOK³ Autor ³ Edson Maricate         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de validacao TudOk da GetDados de rateio da SC.        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSDLGFI,PMSXFUN                                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PMSAFRTOK()

Local nx
Local lRet			:= .T.
Local lUsaProj		:= .F.
Local nTotVal		:= 0
Local nTotTit		:= xMoeda(M->E2_VALOR,M->E2_MOEDA,1)
Local aAreaAFR    	:= AFR->(GetArea())
Local nPosProjet	:= If(Type("aHeader") == "U",0,aScan(aHeader,{|x|AllTrim(x[2])=="AFR_PROJET"}))
Local nPosVal1	:= If(Type("aHeader") == "U",0,aScan(aHeader,{|x|AllTrim(x[2])=="AFR_VALOR1"}))
Local nPosData	:= If(Type("aHeader") == "U",0,aScan(aHeader,{|x|AllTrim(x[2])=="AFR_DATA"}))

If M->E2_MOEDA > 1
	nTotTit := Round(NoRound(xMoeda(M->E2_VALOR , M->E2_MOEDA , 1 , Iif(nPosData >0 , aCols[n,nPosData], M->E2_EMISSAO) , 3 , IIF(M->E2_TXMOEDA > 0, M->E2_TXMOEDA , Nil)),3),2)
Else
	nTotTit := M->E2_VALOR
Endif

// Verifica os campos obrigatorios do SX3.
If Len(aRatAFR) > 0   //Adicionado por Jorge Gomes / Wilson Godoi [10/05/11]
	For nx := 1 to Len(aRatAFR[1,2])
		n	:= nx
		If !aRatAFR[1,2,n,len(aRatAFR[1,2,n])]
			If !Empty(aRatAFR[1,2,n,nPosProjet])     //Posição do código do projeto
				lUsaProj := .T.
				nTotVal += aRatAFR[1,2,n,nPosVal1]   // Posição do valor da tarefa rateada
			EndIf
		EndIf
	Next

ElseIf Type("aCols") == "A"   //Adicionado por Jorge Gomes / Wilson Godoi [10/05/11]18:00 hs
	For nx := 1 to Len(aCols)
		n	:= nx
		If !aCols[n,len(aCols[n])]
			If !Empty(aCols[n,nPosProjet])
				lUsaProj := .T.
				If !PMSAFRLOK()
					lRet := .F.
					Exit
				EndIf
				nTotVal	+= aCols[n,nPosVal1]
			EndIf
		EndIf
	Next
Endif

If lUsaProj
	M->E2_PROJPMS	:= "1"
Else
	M->E2_PROJPMS	:= "2"
EndIf

If ExistBlock("PMSTOKFI")
	nTotTit := ExecBlock("PMSTOKFI",.F.,.F.,{nTotTit, nTotVal})
EndIf

If lRet .And. lUsaProj
	If nTotVal > nTotTit
	   	Help("   ",1,"PMSVLFI")
	   	lRet := .F.
	EndIf
EndIf

If lRet .And. ExistBlock("PMSVLF2")
	lRet := ExecBlock("PMSVLF2", .F., .F.)
EndIf

RestArea(aAreaAFR)
Return lRet
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsWriteD2³ Autor ³ Edson Maricate        ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Programa de gravacao de apontamentos chamado pela rotina de   ³±±
±±³          ³gravacao de Nota Fiscal de Saida.                             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpN1 : Evento - [1] - Inclusao de Nota Fiscal de Saida       ³±±
±±³          ³                 [2] - Estorno de Nota Fiscal de Saida        ³±±
±±³          ³                 [3] - Exclusao de Nota Fiscal de Saida       ³±±
±±³          ³ExpC2 : Alias da tabela de Itens da NF de Saida               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MATA461                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsWriteD2(nEvento,cAliasSD2,cItem,aHdrAFS,aRatAFS)

Local aArea		:= GetArea(cAliasSD2)
Local aAreaAF8	:= AF8->(GetArea())
Local nPosItem
Local nX
Local nY
Local aNewRatAFS:= {}
Local lTES_Estoque
Local cFunc	   	:= FUNNAME()
Local lPmsInt:= IsIntegTop(,.T.)
DEFAULT cItem    := (cAliasSD2)->D2_ITEM
Default aHdrAFS  := {}
Default aRatAFS  := {}

If IsRemito(1,'SD2->D2_TIPODOC') .Or. cFunc $ "MATA466N|MATA467N"
	If ValType(aHdrAFS) == "A"
		nPosProj := aScan(aHdrAFS,{|x| x[2] = 'AFS_PROJET' })
		nPosRevisa  := aScan(aHdrAFS,{|x| x[2] = 'AFS_REVISA' })
		nPosEdt  := aScan(aHdrAFS,{|x| x[2] = 'AFS_EDT' })
		nPosQuant:= aScan(aHdrAFS,{|x| x[2] = 'AFS_QUANT' })
		nPosTsk  := aScan(aHdrAFS,{|x| x[2] = 'AFS_TAREFA' })

		For nX := 1 To Len(aRatAFS)
			aadd(aNewRatAFS, {aRatAFS[nX,1],{}})
			For nY:=1 to Len(aRatAFS[nX,2])
		    	If aRatAFS[nX,2,nY,6] == .F.
			    	AAdd(aNewRatAFS[nX,2], aRatAFS[nX,2,nY])
				EndIf
			Next nY
		Next nX

		If aRatAFS <> NIL
			If !Empty((cAliasSD2)->D2_PROJPMS)
				If nEvento == 1
					SF4->(dbSetOrder(1))
		    		SF4->(MsSeek(xFilial("SF4")+(cAliasSD2)->D2_TES))
		    		AF8->(dbSetOrder(1))
		    		AF8->(MsSeek(xFilial("AF8")+(cAliasSD2)->D2_PROJPMS))
					dbSelectArea("AFS")
					dbSetOrder(2)
					If MsSeek(xFilial("AFS")+(cAliasSD2)->D2_COD+(cAliasSD2)->D2_LOCAL+DTOS((cAliasSD2)->D2_EMISSAO)+(cAliasSD2)->D2_NUMSEQ)
				 		RecLock('AFS',.F.)
			 		Else
			 			RecLock('AFS',.T.)
				 	EndIf
					AFS->AFS_FILIAL		:= xFilial("AFS")
					AFS->AFS_DOC		:= (cAliasSD2)->D2_DOC
					//AFS->AFS_SERIE		:= (cAliasSD2)->D2_SERIE
					// Até o momento todos os fontes que o chamam apontam o alias SD2
					SerieNfId('AFS', 1, 'AFS_SERIE', (cAliasSD2)->D2_EMISSAO, (cAliasSD2)->D2_ESPECIE, (cAliasSD2)->D2_SERIE ) 
					AFS->AFS_PROJET		:= (cAliasSD2)->D2_PROJPMS
					AFS->AFS_TAREFA		:= (cAliasSD2)->D2_TASKPMS
					AFS->AFS_REVISA		:= AF8->AF8_REVISA
					AFS->AFS_COD		:= (cAliasSD2)->D2_COD
					AFS->AFS_LOCAL		:= (cAliasSD2)->D2_LOCAL
					AFS->AFS_NUMSEQ		:= (cAliasSD2)->D2_NUMSEQ
					AFS->AFS_EMISSAO	:= (cAliasSD2)->D2_EMISSAO
					AFS->AFS_QUANT		:= (cAliasSD2)->D2_QUANT
					AFS->AFS_MOVPRJ		:= SF4->F4_MOVPRJ
					If AFS->(ColumnPos("AFS_EDT"))>0
						AFS->AFS_EDT	:= (cAliasSD2)->D2_EDTPMS
					EndIf
					If SD2->(ColumnPos('D2_TRT')) > 0 .And.AFS->(ColumnPos('AFS_TRT'))  > 0
						AFS->AFS_TRT  := (cAliasSD2)->D2_TRT
					Endif
					MsUnlock()
					
					If SD2->D2_TIPODOC <> "50"
						SF4->(dbSetOrder(1))
						SF4->(MsSeek(xFilial("SF4")+(cAliasSD2)->D2_TES))
						If SF4->F4_MOVPRJ $ "25"
		
							lTES_Estoque := IIf( lPmsInt, .T., (SF4->F4_ESTOQUE == "S"))
		
							// verifica se ja foi baixado na liberacao do pedido ou na geracao de remito
							If Empty((cAliasSD2)->D2_PEDIDO) .And. ((cAliasSD2)->(ColumnPos('D2_REMITO')) == 0;
							   .Or. Empty((cAliasSD2)->D2_REMITO) ) .and. lTES_Estoque // SF4->F4_ESTOQUE == "S"
		
								// Efetua a baixa dos empenhos do Projeto
								PmsBxEmp(AFS->AFS_PROJET,AFS->AFS_TAREFA,(cAliasSD2)->D2_COD,(cAliasSD2)->D2_LOCAL,AFS->AFS_QUANT,"-",AFS->AFS_QTSEGU,AFS->AFS_TRT)
							Endif
							// Atualiza os valores da Tarefa
							AF9AtuCD2(1,{(cAliasSD2)->D2_CUSTO1,(cAliasSD2)->D2_CUSTO2,(cAliasSD2)->D2_CUSTO3,(cAliasSD2)->D2_CUSTO4,(cAliasSD2)->D2_CUSTO5})
						EndIf
					EndIf
				EndIf
			Else
				Do Case
					Case nEvento == 1
						nPosItem := aScan(aNewRatAFS,{|x| x[1] == cItem })
						If nPosItem > 0 .AND. nPosProj > 0 .AND. nPosRevisa > 0 .AND. nPosEdt > 0 .AND. nPosQuant > 0 .AND. nPosTsk > 0
							For nX := 1 To Len(aNewRatAFS[nPosItem,02])
								PmsIncSD2(cAliasSD2,;						//Alias
									aNewRatAFS[nPosItem,02,nX,nPosProj]/*1*/,;	//Cod.Projeto
									aNewRatAFS[nPosItem,02,nX,nPosRevisa]/*2*/,;	//Rev.Projeto
									aNewRatAFS[nPosItem,02,nX,nPosEdt]/*3*/,;	//EDT.Projeto
									aNewRatAFS[nPosItem,02,nX,nPosQuant]/*5*/,;	//Qtde Produto
									 Iif(SD2->(ColumnPos("D2_TASKPMS"))>0,aNewRatAFS[nPosItem,02,nX,nPosTsk/*4*/],Nil))	//Tarefa
							Next nX
						EndIf
					Case nEvento == 2
						dbSelectArea("AFS")
						dbSetOrder(2)
						If MsSeek(xFilial("AFS")+(cAliasSD2)->D2_COD+(cAliasSD2)->D2_LOCAL+DTOS((cAliasSD2)->D2_EMISSAO)+(cAliasSD2)->D2_NUMSEQ)
							While AFS->(!Eof()) .and. ((cAliasSD2)->D2_COD+(cAliasSD2)->D2_LOCAL+DTOS((cAliasSD2)->D2_EMISSAO)+(cAliasSD2)->D2_NUMSEQ)==(AFS->(AFS_COD+AFS_LOCAL+DTOS(AFS_EMISSA)+AFS_NUMSEQ))
								// Integração com TOP, exclui as apropriacao para o projeto.
								SLMPMSCOST(2, "AFS")
	
								RecLock("AFS",.F.,.T.)
								dbDelete()
								MsUnlock()
								AFS->(DbSkip())
							eNDdo
						EndIf
					Case nEvento == 3
						dbSelectArea("AFS")
						dbSetOrder(2)
						If MsSeek(xFilial("AFS")+(cAliasSD2)->D2_COD+(cAliasSD2)->D2_LOCAL+DTOS((cAliasSD2)->D2_EMISSAO)+(cAliasSD2)->D2_NUMSEQ)
							SF4->(dbSetOrder(1))
							SF4->(MsSeek(xFilial("SF4")+(cAliasSD2)->D2_TES))
							If SF4->F4_MOVPRJ $ "25"
								// Atualiza os valores da Tarefa
								AF9AtuCD2(2,{(cAliasSD2)->D2_CUSTO1,(cAliasSD2)->D2_CUSTO2,(cAliasSD2)->D2_CUSTO3,(cAliasSD2)->D2_CUSTO4,(cAliasSD2)->D2_CUSTO5})
								// Efetua o estorno dos empenhos do Projeto.
	
								lTES_Estoque := IIf( lPmsInt, .T., (SF4->F4_ESTOQUE == "S"))
								// verifica se ja foi baixado na liberacao do pedido ou na geracao de remito
								If Empty((cAliasSD2)->D2_PEDIDO) .And. ;
								  ((cAliasSD2)->(ColumnPos('D2_REMITO')) == 0 .Or. Empty((cAliasSD2)->D2_REMITO)) .and. lTES_Estoque // SF4->F4_ESTOQUE == "S"
									PmsBxEmp(AFS->AFS_PROJET,AFS->AFS_TAREFA,(cAliasSD2)->D2_COD,(cAliasSD2)->D2_LOCAL,AFS->AFS_QUANT,"+",AFS->AFS_QTSEGU,AFS->AFS_TRT)
								Endif
	
								// Integração com TOP, exclui as apropriacao para o projeto.
								SLMPMSCOST(2, "AFS")
							EndIf
						EndIf
				EndCase
			EndIf
		EndIf
	EndIf
else
	If !Empty((cAliasSD2)->D2_PROJPMS)
		Do Case
			Case nEvento == 1
	    		SF4->(dbSetOrder(1))
	    		SF4->(MsSeek(xFilial("SF4")+(cAliasSD2)->D2_TES))
	    		AF8->(dbSetOrder(1))
	    		AF8->(MsSeek(xFilial("AF8")+(cAliasSD2)->D2_PROJPMS))
				dbSelectArea("AFS")
				dbSetOrder(2)
				If MsSeek(xFilial("AFS")+(cAliasSD2)->D2_COD+(cAliasSD2)->D2_LOCAL+DTOS((cAliasSD2)->D2_EMISSAO)+(cAliasSD2)->D2_NUMSEQ)
			 		RecLock('AFS',.F.)
		 		Else
		 			RecLock('AFS',.T.)
			 	EndIf
				AFS->AFS_FILIAL		:= xFilial("AFS")
				AFS->AFS_DOC		:= (cAliasSD2)->D2_DOC
				//AFS->AFS_SERIE		:= (cAliasSD2)->D2_SERIE
				// Até o momento todos os fontes que o chamam apontam o alias SD2
				SerieNfId('AFS', 1, 'AFS_SERIE', (cAliasSD2)->D2_EMISSAO, (cAliasSD2)->D2_ESPECIE, (cAliasSD2)->D2_SERIE ) 
				AFS->AFS_PROJET		:= (cAliasSD2)->D2_PROJPMS
				AFS->AFS_TAREFA		:= (cAliasSD2)->D2_TASKPMS
				AFS->AFS_REVISA		:= AF8->AF8_REVISA
				AFS->AFS_COD		:= (cAliasSD2)->D2_COD
				AFS->AFS_LOCAL		:= (cAliasSD2)->D2_LOCAL
				AFS->AFS_NUMSEQ		:= (cAliasSD2)->D2_NUMSEQ
				AFS->AFS_EMISSAO	:= (cAliasSD2)->D2_EMISSAO
				AFS->AFS_QUANT		:= (cAliasSD2)->D2_QUANT
				AFS->AFS_MOVPRJ		:= SF4->F4_MOVPRJ
				If AFS->(ColumnPos("AFS_EDT"))>0
					AFS->AFS_EDT	:= (cAliasSD2)->D2_EDTPMS
				EndIf
				If SD2->(ColumnPos('D2_TRT')) > 0 .And.AFS->(ColumnPos('AFS_TRT'))  > 0
					AFS->AFS_TRT  := (cAliasSD2)->D2_TRT
				Endif
				MsUnlock()

				SF4->(dbSetOrder(1))
				SF4->(MsSeek(xFilial("SF4")+(cAliasSD2)->D2_TES))
				If SF4->F4_MOVPRJ $ "25"

					lTES_Estoque := IIf( lPmsInt, .T., (SF4->F4_ESTOQUE == "S"))

					// verifica se ja foi baixado na liberacao do pedido ou na geracao de remito
					If Empty((cAliasSD2)->D2_PEDIDO) .And. ((cAliasSD2)->(ColumnPos('D2_REMITO')) == 0;
					   .Or. Empty((cAliasSD2)->D2_REMITO) ) .and. lTES_Estoque // SF4->F4_ESTOQUE == "S"

						// Efetua a baixa dos empenhos do Projeto
						PmsBxEmp(AFS->AFS_PROJET,AFS->AFS_TAREFA,(cAliasSD2)->D2_COD,(cAliasSD2)->D2_LOCAL,AFS->AFS_QUANT,"-",AFS->AFS_QTSEGU,AFS->AFS_TRT)
					Endif
					// Atualiza os valores da Tarefa
					AF9AtuCD2(1,{(cAliasSD2)->D2_CUSTO1,(cAliasSD2)->D2_CUSTO2,(cAliasSD2)->D2_CUSTO3,(cAliasSD2)->D2_CUSTO4,(cAliasSD2)->D2_CUSTO5})
				EndIf

				If Existblock("PMSNFINC")
					Execblock("PMSNFINC", .F., .F., {(cAliasSD2)->D2_PROJPMS, (cAliasSD2)->D2_EDTPMS, (cAliasSD2)->D2_TASKPMS})
				EndIf

			Case nEvento == 2
					dbSelectArea("AFS")
					dbSetOrder(2)
					If MsSeek(xFilial("AFS")+(cAliasSD2)->D2_COD+(cAliasSD2)->D2_LOCAL+DTOS((cAliasSD2)->D2_EMISSAO)+(cAliasSD2)->D2_NUMSEQ)
						SF4->(dbSetOrder(1))
						SF4->(MsSeek(xFilial("SF4")+(cAliasSD2)->D2_TES))
						If SF4->F4_MOVPRJ $ "25"
							// Atualiza os valores da Tarefa
							AF9AtuCD2(2,{(cAliasSD2)->D2_CUSTO1,(cAliasSD2)->D2_CUSTO2,(cAliasSD2)->D2_CUSTO3,(cAliasSD2)->D2_CUSTO4,(cAliasSD2)->D2_CUSTO5})
							// Efetua o estorno dos empenhos do Projeto.

							lTES_Estoque := IIf( lPmsInt, .T., (SF4->F4_ESTOQUE == "S"))

							// verifica se ja foi baixado na liberacao do pedido ou na geracao de remito
							If Empty((cAliasSD2)->D2_PEDIDO) .And. ;
							  ((cAliasSD2)->(ColumnPos('D2_REMITO')) == 0 .Or. Empty((cAliasSD2)->D2_REMITO)) .and. lTES_Estoque  // SF4->F4_ESTOQUE == "S"
								PmsBxEmp(AFS->AFS_PROJET,AFS->AFS_TAREFA,(cAliasSD2)->D2_COD,(cAliasSD2)->D2_LOCAL,AFS->AFS_QUANT,"+",AFS->AFS_QTSEGU,AFS->AFS_TRT)
							Endif
							// Integração com TOP, exclui as apropriacao para o projeto.
							SLMPMSCOST(2, "AFS")
						EndIf
					EndIf
			Case nEvento == 3
				dbSelectArea("AFS")
				dbSetOrder(2)
				If MsSeek(xFilial("AFS")+(cAliasSD2)->D2_COD+(cAliasSD2)->D2_LOCAL+DTOS((cAliasSD2)->D2_EMISSAO)+(cAliasSD2)->D2_NUMSEQ)
					RecLock("AFS",.F.,.T.)
					dbDelete()
					MsUnlock()
				EndIf
		EndCase
	EndIf

EndIf

RestArea(aAreaAF8)
RestArea(aArea)
Return
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsDlgRC³ Autor ³ Edson Maricate          ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Esta funcao cria uma janela para configuracao e apontamentos  ³±±
±±³          ³de Receitas Financeiras do Projeto.                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ nOpcao : 2.Visualizar                                        ³±±
±±³          ³          3.Incluir                                           ³±±
±±³          ³          4.Alterar                                           ³±±
±±³          ³ cOrigem : fonte de origem do titulo a receber(E1_ORIGEM)     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³                                                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsDlgRC(nOpcao,cPrefixo,cNum,cParcela,cTipo,cCliente,cLoja,cOrigem)
Local bSavSetKey := SetKey(VK_F4,Nil)
Local bSavKeyF5  := SetKey(VK_F5,Nil)
Local bSavKeyF6  := SetKey(VK_F6,Nil)
Local bSavKeyF7  := SetKey(VK_F7,Nil)
Local bSavKeyF8  := SetKey(VK_F8,Nil)
Local bSavKeyF9  := SetKey(VK_F9,Nil)
Local bSavKeyF10 := SetKey(VK_F10,Nil)

Local lOk
Local oDlg,oBold
Local nPosRat    := aScan(aRatAFT,{|x| x[1] == "01"})
Local lGetDados  := .T.
Local nY         := 0
Local nLenHeader := 0
Local nLenCols   := 0
Local cFilSC6    := xFilial("SC6")
Local lValido := .T.
Local lFA040PMS := ExistBlock("FA040PMS")

DEFAULT cOrigem  := ""
PRIVATE aCols    := {}
PRIVATE aHeader  := {}

If lValido .and. lFA040PMS // ponto de entrada existente somente para a rotina FINA040 (CR)
	lValido := Execblock("FA040PMS",.F.,.F.)
Endif

If lValido
	If nOpcao == 3 //Incluir
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Montagem do aHeader                                          ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		FillGetDados(nOpcao,"AFT",1,,,,,,,,{||.T.},.T.,aHeader)
		aHeaderAFT	:= aClone(aHeader)
		If nPosRat > 0
			aCols	:= aClone(aRatAFT[nPosRat,2])
		Else
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Faz a montagem de uma linha em branco no aCols.              ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			nLenHeader := Len(aHeader)
			aadd(aCols,Array(nLenHeader+1))
			For ny := 1 to nLenHeader
				If Trim(aHeader[ny,2]) == "AFT_ITEM"
					aCols[1,ny] := "01"
				ElseIf AllTrim(aHeader[ny,2]) $ "AFT_ALI_WT | AFT_REC_WT"
					If AllTrim(aHeader[ny,2]) == "AFT_ALI_WT"
						aCols[1,ny] := "AFT"
					ElseIf AllTrim(aHeader[ny,2]) == "AFT_REC_WT"
						aCols[1,ny] := 0
					EndIf
				Else
					aCols[1,ny] := CriaVar(aHeader[ny,2])
				EndIf
				aCols[1,nLenHeader+1] := .F.
			Next ny
		EndIf
	Else
		If (nOpcao == 4) .And. !(cOrigem=='FINA040') //Alterar
			SC6->(DbSetOrder(4))	//C6_FILIAL+C6_NOTA+C6_SERIE
			SC6->(DbSeek(cFilSC6+cNum+cPrefixo))
			While !SC6->(Eof()) .And. SC6->(C6_FILIAL+C6_NOTA+C6_SERIE)==cFilSC6+cNum+cPrefixo
				If !(Empty(SC6->C6_PROJPMS))
					//""Atencao""###"Este título tem origem na NF "+###+" gerada pelo pedido "+###+" que possui amarração ao PMS, a qual não poderá ser alterada."###"Fechar"
					Aviso(STR0143,STR0394+cNum+STR0392+AllTrim(SC6->C6_NUM)+STR0393,{STR0006})
					Return
				EndIf
				SC6->(DbSkip())
			EndDo
		EndIf

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Montagem do aHeader                                          ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		FillGetDados(nOpcao,"AFT",1,,,,,,,,{||.T.},.T.,aHeader)
		aHeaderAFT	:= aClone(aHeader)
		dbSelectArea("AFT")
		dbSetOrder(2)
		If nPosRat == 0
			nLenHeader := Len(aHeader)
			If MsSeek(xFilial()+cPrefixo+cNum+cParcela+cTipo+cCliente+cLoja)
				While !Eof() .And. xFilial()+cPrefixo+cNum+cParcela+cTipo+cCliente+cLoja==;
									AFT_FILIAL+AFT_PREFIX+AFT_NUM+AFT_PARCEL+AFT_TIPO+AFT_CLIENT+AFT_LOJA
					If AFT->AFT_REVISA==PmsAF8Ver(AFT->AFT_PROJET)
						aADD(aCols,Array(nLenHeader+1))
						nLenCols := Len(aCols)
						For ny := 1 to nLenHeader
							If ( aHeader[ny,10] != "V")
								aCols[nLenCols,ny] := FieldGet(ColumnPos(aHeader[ny,2]))
							ElseIf AllTrim(aHeader[ny,2]) $ "AFT_ALI_WT | AFT_REC_WT"
								If AllTrim(aHeader[ny,2]) == "AFT_ALI_WT"
									aCols[1,ny] := "AFT"
								ElseIf AllTrim(aHeader[ny,2]) == "AFT_REC_WT"
									aCols[1,ny] := AFT->(Recno())
								EndIf
							Else
								aCols[nLenCols,ny] := CriaVar(aHeader[ny,2])
							EndIf
							aCols[nLenCols,nLenHeader+1] := .F.
						Next ny
					EndIf
					dbSkip()
				EndDo
			EndIf
			If Empty(aCols)
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Faz a montagem de uma linha em branco no aCols.              ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				aadd(aCols,Array(nLenHeader+1))
				For ny := 1 to nLenHeader
					If Trim(aHeader[ny,2]) == "AFT_ITEM"
						aCols[1,ny] := "01"
					ElseIf AllTrim(aHeader[ny,2]) $ "AFT_ALI_WT | AFT_REC_WT"
						If AllTrim(aHeader[ny,2]) == "AFT_ALI_WT"
							aCols[1,ny] := "AFT"
						ElseIf AllTrim(aHeader[ny,2]) == "AFT_REC_WT"
							aCols[1,ny] := 0
						EndIf
					Else
						aCols[1,ny] := CriaVar(aHeader[ny,2])
					EndIf
					aCols[1,nLenHeader+1] := .F.
				Next ny
			EndIf
		Else
			aCols := aClone(aRatAFT[nPosRat,2])
		EndIf
	EndIf

	If lGetDados
		DEFINE FONT oBold NAME "Arial" SIZE 0, -13 BOLD
		DEFINE MSDIALOG oDlg FROM 88,22  TO 350,619 TITLE STR0134 Of oMainWnd PIXEL  //'Apontamentos : Gerenciamento de Projetos - Receitas'
			@ 16 ,3   TO 18 ,310 LABEL '' OF oDlg PIXEL
			@ 6,010 SAY STR0035+cPrefixo+"-"+cNum+cParcela SIZE 150,7 OF oDlg PIXEL //"Documento : "
			oGetDados := MSGetDados():New(23,3,112,296,nOpcao,'PMSAFTLOK','PMSAFTTOK','+AFT_ITEM',.T.,,,,100,'PMSAFTFOK')
			@ 118,249 BUTTON STR0027 SIZE 35 ,9   FONT oDlg:oFont ACTION {||If(oGetDados:TudoOk(),(lOk:=.T.,oDlg:End()),(lOk:=.F.))}  OF oDlg PIXEL  //'Confirma'
			@ 118,210 BUTTON STR0028 SIZE 35 ,9   FONT oDlg:oFont ACTION (oDlg:End())  OF oDlg PIXEL  //'Cancelar'
	      If ExistBlock("PMSRCSCR")
	         ExecBlock("PMSRCSCR",.F.,.F.,{oDlg,nOpcao})
	      Endif
		ACTIVATE MSDIALOG oDlg CENTERED
	EndIf

	If nOpcao <> 2 .And. lOk
		If nPosRat > 0
			aRatAFT[nPosRat,2]	:= aClone(aCols)
		Else
			aADD(aRatAFT,{"01",aClone(aCols)})
		EndIf

		If ExistBlock("PMSDLGRC")
			ExecBlock("PMSDLGRC", .F., .F.)
		EndIf
	EndIf
EndIF

SetKey(VK_F4,bSavSetKey)
SetKey(VK_F5,bSavKeyF5)
SetKey(VK_F6,bSavKeyF6)
SetKey(VK_F7,bSavKeyF7)
SetKey(VK_F8,bSavKeyF8)
SetKey(VK_F9,bSavKeyF9)
SetKey(VK_F10,bSavKeyF10)

Return
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSAFTLOK³ Autor ³ Edson Maricate         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de validacao LinOk da GetDados de rateio das Receitas. ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSDLGRC,PMSXFUN                                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PMSAFTLOK()
Local lRet		:= .T.
Local nPosTrf	:= aScan(aHeader,{|x|Alltrim(x[2])=="AFT_TAREFA"})
Local nPosPrj	:= aScan(aHeader,{|x|Alltrim(x[2])=="AFT_PROJET"})
Local nPosEDT	:= aScan(aHeader,{|x|Alltrim(x[2])=="AFT_EDT"})

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica os campos obrigatorios do SX3.              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !aCols[n,Len(aCols[n])]
	lRet := PmsVldFase("AF8",aCols[n,aScan(aHeader,{|x| Substr(x[2],4,7) =="_PROJET" })],"85")
	If lRet
		If Empty(aCols[n,nPosPrj])
			HELP("  ",1,"OBRIGAT2")
			lRet := .F.
		EndIf
		If lRet .And. nPosEDT>0 .And.Empty(aCols[n,nPosEDT]) .And. Empty(aCols[n,nPosTrf])
			HELP("  ",1,"OBRIGAT2")
			lRet := .F.
		EndIf
	EndIf
EndIf

Return lRet
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSAFTTOK³ Autor ³ Edson Maricate         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de validacao TudOk da GetDados de rateio das Receitas  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSDLGRC,PMSXFUN                                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PMSAFTTOK()

Local nx
Local lRet			:= .T.
Local lUsaProj		:= .F.
Local nTotVal		:= 0
Local nPosProjet	:= aScan(aHeader,{|x|AllTrim(x[2])=="AFT_PROJET"})
Local nPosVal1		:= aScan(aHeader,{|x|AllTrim(x[2])=="AFT_VALOR1"})
Local nPosData		:= aScan(aHeader,{|x|AllTrim(x[2])=="AFT_DATA"})
Local nTotTit		:= 0

If M->E1_MOEDA > 1
	nTotTit := Round(NoRound(xMoeda(M->E1_VALOR , M->E1_MOEDA , 1 , Iif(nPosData >0 , aCols[n,nPosData], M->E1_EMISSAO) , 3 , IIF(M->E1_TXMOEDA > 0, M->E1_TXMOEDA , Nil)),3),2)
Else
	nTotTit := M->E1_VALOR
Endif

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica os campos obrigatorios do SX3.              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
For nx := 1 to Len(aCols)
	n	:= nx
	If !aCols[n,len(aCols[n])]
		If !Empty(aCols[n,nPosProjet])
			lUsaProj := .T.
			If !PMSAFTLOK()
				lRet := .F.
				Exit
			EndIf
			nTotVal	+= aCols[n,nPosVal1]
		EndIf
	EndIf
Next

If lRet .And. nTotVal > nTotTit
	Help("   ",1,"PMSVLRC")
	lRet := .F.
EndIf

If lUsaProj
	M->E1_PROJPMS	:= "1"
Else
	M->E1_PROJPMS	:= "2"
EndIf

Return lRet
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSAFTFOK³ Autor ³ Edson Maricate         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de validacao dos campos da GetDados de rateio da Rec.  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSDLGRC,PMSXFUN                                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PMSAFTFOK()


Local cRevisa
Local lRet		:= .T.
Local cCampo	:= AllTrim(ReadVar())
Local nX
Local cEdt		:= ""
Local cEdtPai	:= ""

Do Case
	Case cCampo == 'M->AFT_PROJET'
		lRet := PMSExistCPO("AF8") .And. PmsVldFase("AF8",M->AFT_PROJET,"85")
		aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFT_TAREFA"})] := SPACE(LEN(AFT->AFT_TAREFA))
		If aScan(aHeader,{|x|Alltrim(x[2])=="AFT_EDT"})>0
			aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFT_EDT"})] := SPACE(LEN(AFT->AFT_EDT))
		EndIf
		If lRet .and. len(aCols) > 1
			For nX := 1 to Len(aCols)
				If nX <> N .and. M->AFT_PROJET == aCols[nX,aScan(aHeader,{|x|Alltrim(x[2])=="AFT_PROJET"})];
					.and. aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFT_TAREFA"})] == aCols[nX,aScan(aHeader,{|x|Alltrim(x[2])=="AFT_TAREFA"})];
					.And. aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFT_EDT"})] == aCols[nX,aScan(aHeader,{|x|Alltrim(x[2])=="AFT_EDT"})]
					Help( " ", 1, "PMS",, STR0422, 1, 0 )//"Já existe rateio para este projeto e tarefa!"
					lRet:=.F.
					Exit
				Endif
			Next
		Endif
	Case cCampo == 'M->AFT_TAREFA'
		cProjeto := aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFT_PROJET"})]
		cRevisa  := aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFT_REVISA"})]
		lRet := ExistCpo("AF9",cProjeto+cRevisa+M->AFT_TAREFA,1)
		If aScan(aHeader,{|x|Alltrim(x[2])=="AFT_EDT"})>0
			aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFT_EDT"})] := SPACE(LEN(AFT->AFT_EDT))
		EndIf
		If lRet .and. len(aCols) > 1
			For nX := 1 to Len(aCols)
				If nX <> N .and. M->AFT_TAREFA == aCols[nX,aScan(aHeader,{|x|Alltrim(x[2])=="AFT_TAREFA"})];
					.and. aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFT_PROJET"})] == aCols[nX,aScan(aHeader,{|x|Alltrim(x[2])=="AFT_PROJET"})];
					.And. aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFT_EDT"})] == aCols[nX,aScan(aHeader,{|x|Alltrim(x[2])=="AFT_EDT"})]
					Help( " ", 1, "PMS",, STR0422, 1, 0 )//"Já existe rateio para este projeto e tarefa!"
					lRet:=.F.
					Exit
				Endif
			Next
		Endif
	Case cCampo == 'M->AFT_EDT'
		cProjeto := aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFT_PROJET"})]
		cRevisa  := aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFT_REVISA"})]
		lRet := ExistCpo("AFC",cProjeto+cRevisa+M->AFT_EDT,1)
		aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFT_TAREFA"})] := SPACE(LEN(AFT->AFT_TAREFA))
		If lRet .and. len(aCols) > 1
			For nX := 1 to Len(aCols)
				If nX <> N .and. M->AFT_EDT == aCols[nX,aScan(aHeader,{|x|Alltrim(x[2])=="AFT_EDT"})];
					.and. aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFT_TAREFA"})] == aCols[nX,aScan(aHeader,{|x|Alltrim(x[2])=="AFT_TAREFA"})];
					.And. aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AFT_PROJET"})] == aCols[nX,aScan(aHeader,{|x|Alltrim(x[2])=="AFT_PROJET"})]
					Help( " ", 1, "PMS",, STR0422, 1, 0 )//"Já existe rateio para este projeto e tarefa!"
					lRet:=.F.
					Exit
				Endif
			Next
		Endif
EndCase

If lRet .And. cCampo == "M->AFT_EDT"
	cEdt := &(ReadVar())
	cEdtPai := Posicione("AFC",1,xFilial("AFC")+cProjeto+cRevisa+cEdt,"AFC_EDTPAI")
	lRet := PmsChkUser(cProjeto,Nil,cEdt,cEdtPai,0,"RECEI",cRevisa,__cUserId,.T.)
EndIf

Return lRet
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsWriteRC³ Autor ³ Edson Maricate        ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Programa de gravacao de apontamentos chamado pela rotina de   ³±±
±±³          ³gravacao de Receitas Financeiras .                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpN1 : Evento - [1] - Inclusao de Titulos a Receber          ³±±
±±³          ³                 [2] - Estorno de Titulos a Receber           ³±±
±±³          ³                 [3] - Exclusao de Titulos a Receber          ³±±
±±³          ³                 [4] - Alteracao de Titulos a Receber         ³±±
±±³          ³ExpC2 : Alias da tabela de Titulos a Receber                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³                                                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsWriteRC(nEvento,cAliasSE1)

Local nx
Local nz
Local ny
Local aArea		:= GetArea()
Local aRecAFT	:= {}
Local aTempCols	:= {}

Local cPrefixo := ""
Local cNum     := ""
Local cParcela := ""
Local cTipo    := ""
Local cCliente := ""
Local cLoja    := ""

If Empty(aHeaderAFT)
	aHeaderAFT := {}
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Montagem do aHeaderAFT                                       ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	dbSelectArea("SX3")
	dbSetOrder(1)
	MsSeek("AFT")
	While !EOF() .And. (x3_arquivo == "AFT")
		If X3USO(x3_usado) .AND. cNivel >= x3_nivel
			AADD(aHeaderAFT,{ TRIM(x3titulo()), x3_campo, x3_picture,;
			                  x3_tamanho, x3_decimal, x3_valid,;
				              x3_usado, x3_tipo, x3_arquivo,x3_context } )
		Endif
		dbSkip()
	EndDo
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica o array de amarracao dos Contratos x Projetos    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ

aRatAFT := If(Type('aRatAFT') = 'U', Nil, aRatAFT)

If aRatAFT<>Nil
	Do Case
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Inclusao ou alteracao
		//³ Caso seja uma alteracao, não serah feito a validacao do desdobramento.
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		Case nEvento == 1 .OR. nEvento == 4
			nx	:= aScan(aRatAFT,{|x| x[1] == "01"})
			If nx == 0
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Verifica se o item ja possui itens gravados.              ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				dbSelectArea("AFT")
				dbSetOrder(2)
				If MsSeek(xFilial()+(cAliasSE1)->E1_PREFIXO+(cAliasSE1)->E1_NUM+(cAliasSE1)->E1_PARCELA+(cAliasSE1)->E1_TIPO+(cAliasSE1)->E1_CLIENTE+(cAliasSE1)->E1_LOJA)
					While !Eof() .And. xFilial()+(cAliasSE1)->E1_PREFIXO+(cAliasSE1)->E1_NUM+(cAliasSE1)->E1_PARCELA+(cAliasSE1)->E1_TIPO+(cAliasSE1)->E1_CLIENTE+(cAliasSE1)->E1_LOJA==;
												AFT->AFT_FILIAL+AFT->AFT_PREFIX+AFT->AFT_NUM+AFT->AFT_PARCEL+AFT->AFT_TIPO+AFT->AFT_CLIENT+AFT->AFT_LOJA
						If AFT->AFT_REVISA==PmsAF8Ver(AFT->AFT_PROJET)
							aADD(aTempCols,Array(Len(aHeaderAFT)+1))
							For ny := 1 to Len(aHeaderAFT)
								If ( aHeaderAFT[ny,10] != "V")
									aTempCols[Len(aTempCols),ny] := FieldGet(ColumnPos(aHeaderAFT[ny,2]))
								ElseIf AllTrim(aHeaderAFT[ny,02]) $ "AFT_ALI_WT | AFT_REC_WT"
									If AllTrim(aHeaderAFT[ny,02]) == "AFT_ALI_WT"
										aTempCols[Len(aTempCols),ny] := "AFT"
									ElseIf AllTrim( aHeaderAFT[ny,02]) == "AFT_REC_WT"
										aTempCols[Len(aTempCols),ny] := AFT->(Recno())
									EndIf
								Else
									aTempCols[Len(aTempCols),ny] := CriaVar(aHeaderAFT[ny,2])
								EndIf
								aTempCols[Len(aTempCols),Len(aHeaderAFT)+1] := .F.
							Next ny
						EndIf
						dbSkip()
					EndDo
					aAdd(aRatAFT,{"01",aClone(aTempCols)})
					nx := Len(aRatAFT)
				EndIf
			EndIf
			If nx > 0
				// Se for inclucao verifica a necessidade do desdobramento.
				// gerado a partir de desdobramento
				// (SE1->E1_DESDOBR == "1")
				If nEvento == 1 .AND. (cAliasSE1)->E1_DESDOBR == "1"
					cPrefixo := (cAliasSE1)->E1_PREFIXO
					cNum     := (cAliasSE1)->E1_NUM
					cParcela := (cAliasSE1)->E1_PARCELA
					cTipo    := (cAliasSE1)->E1_TIPO
					cCliente := (cAliasSE1)->E1_CLIENTE
					cLoja    := (cAliasSE1)->E1_LOJA
					nParc    := SE1ParcNo(xFilial(), cPrefixo, cNum, cTipo)
					nSE1Recno := (cAliasSE1)->(Recno())

					dbSelectArea(cAliasSE1)
					(cAliasSE1)->(dbSetOrder(1)) //E1_FILIAL+E1_PREFIXO+E1_NUM+E1_PARCELA+E1_TIPO
					(cAliasSE1)->(MsSeek(xFilial() + cPrefixo + cNum))

	    			While !(cAliasSE1)->(Eof()) .And. (cAliasSE1)->E1_FILIAL + (cAliasSE1)->E1_PREFIXO + (cAliasSE1)->E1_NUM == ;
	    			                                  xFilial()              + cPrefixo                + cNum                .And.;
	    			                                  (cAliasSE1)->E1_DESDOBR == "1"

						//Desconsiderar o título original do desdobramento que fica como baixado
						If 	 (cAliasSE1)->E1_STATUS = "B"
							(cAliasSE1)->(DbSkip())
							Loop
						EndIf

						dbSelectArea("AFT")
						dbSetOrder(2)
						MsSeek(xFilial()+(cAliasSE1)->E1_PREFIXO+(cAliasSE1)->E1_NUM+(cAliasSE1)->E1_PARCELA+(cAliasSE1)->E1_TIPO+(cAliasSE1)->E1_CLIENTE+(cAliasSE1)->E1_LOJA)
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Carrega no array os registros ja existentes.         ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						aRecAFT:={}
						While !Eof() .And. xFilial()+(cAliasSE1)->E1_PREFIXO+(cAliasSE1)->E1_NUM+(cAliasSE1)->E1_PARCELA+(cAliasSE1)->E1_TIPO+(cAliasSE1)->E1_CLIENTE+(cAliasSE1)->E1_LOJA==;
													AFT->AFT_FILIAL+AFT->AFT_PREFIX+AFT->AFT_NUM+AFT->AFT_PARCEL+AFT->AFT_TIPO+AFT->AFT_CLIENT+AFT->AFT_LOJA
							If AFT->AFT_REVISA==PmsAF8Ver(AFT->AFT_PROJET)
								aAdd(aRecAFT,AFT->(RecNo()))
							EndIf
							dbSkip()
						EndDo
						For nz := 1 to Len(aRatAFT[nx,2])
							If !aRatAFT[nx,2,nz,Len(aRatAFT[nx,2,nz])]
								dbSelectArea('AFT')
							 	If nz <= Len(aRecAFT)
							 		AFT->(dbGoto(aRecAFT[nz]))
							 		RecLock('AFT',.F.)
							 	Else
						 			RecLock('AFT',.T.)
							 	EndIf
								//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
								//³ Atualiza os dados contidos na GetDados                   ³
								//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
								For ny := 1 to Len(aHeaderAFT)
									If aHeaderAFT[ny,10] # "V"
										cVar := Trim(aHeaderAFT[ny,2])

										If Subs(Upper(AllTrim(cVar)),1,9) $ "AFT_VALOR"
											Replace &cVar. With aRatAFT[nx,2,nz,ny] / nParc
										Else
											Replace &cVar. With aRatAFT[nx,2,nz,ny]
										EndIf
									Endif
								Next nY
								AFT->AFT_FILIAL		:= xFilial("AFT")
								AFT->AFT_PREFIX		:= (cAliasSE1)->E1_PREFIXO
								AFT->AFT_NUM		:= (cAliasSE1)->E1_NUM
								AFT->AFT_PARCEL		:= (cAliasSE1)->E1_PARCELA
								AFT->AFT_TIPO		:= (cAliasSE1)->E1_TIPO
								AFT->AFT_CLIENT		:= (cAliasSE1)->E1_CLIENTE
								AFT->AFT_LOJA		:= (cAliasSE1)->E1_LOJA
								AFT->AFT_VENREA		:= (cAliasSE1)->E1_VENCREA
								MsUnlock()
								//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
								//³ Atualiza os valores da Tarefa                        ³
								//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							Else
								If nz <= Len(aRecAFT)
									MsGoto(aRecAFT[nz])
									RecLock("AFT",.F.,.T.)
							        dbDelete()
							        msUnLock()
								EndIf
							EndIf
						Next nZ
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Deleta os demais registros.                          ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						If Len(aRecAFT) > Len(aRatAFT[nx,2])
							For nz := (Len(aRatAFT[nx,2])+1) to Len(aRecAFT)
								MsGoto(aRecAFT[nz])
								RecLock("AFT",.F.,.T.)
						        dbDelete()
						        msUnLock()
							Next nz
						EndIf

						(cAliasSE1)->(dbSkip())
					EndDo
				Else

					dbSelectArea("AFT")
					dbSetOrder(2)
					MsSeek(xFilial()+(cAliasSE1)->E1_PREFIXO+(cAliasSE1)->E1_NUM+(cAliasSE1)->E1_PARCELA+(cAliasSE1)->E1_TIPO+(cAliasSE1)->E1_CLIENTE+(cAliasSE1)->E1_LOJA)
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Carrega no array os registros ja existentes.         ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					While !Eof() .And. xFilial()+(cAliasSE1)->E1_PREFIXO+(cAliasSE1)->E1_NUM+(cAliasSE1)->E1_PARCELA+(cAliasSE1)->E1_TIPO+(cAliasSE1)->E1_CLIENTE+(cAliasSE1)->E1_LOJA==;
												AFT->AFT_FILIAL+AFT->AFT_PREFIX+AFT->AFT_NUM+AFT->AFT_PARCEL+AFT->AFT_TIPO+AFT->AFT_CLIENT+AFT->AFT_LOJA
						If AFT->AFT_REVISA==PmsAF8Ver(AFT->AFT_PROJET)
							aAdd(aRecAFT,AFT->(RecNo()))
						EndIf
						dbSkip()
					EndDo
					For nz := 1 to Len(aRatAFT[nx,2])
						If !aRatAFT[nx,2,nz,Len(aRatAFT[nx,2,nz])]
							dbSelectArea('AFT')
						 	If nz <= Len(aRecAFT)
						 		AFT->(dbGoto(aRecAFT[nz]))
						 		RecLock('AFT',.F.)
						 	Else
					 			RecLock('AFT',.T.)
						 	EndIf
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³ Atualiza os dados contidos na GetDados                   ³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							For ny := 1 to Len(aHeaderAFT)
								If aHeaderAFT[ny,10] # "V"
									cVar := Trim(aHeaderAFT[ny,2])
									Replace &cVar. With aRatAFT[nx,2,nz,ny]
								Endif
							Next nY
							AFT->AFT_FILIAL		:= xFilial("AFT")
							AFT->AFT_PREFIX		:= (cAliasSE1)->E1_PREFIXO
							AFT->AFT_NUM		:= (cAliasSE1)->E1_NUM
							AFT->AFT_PARCEL		:= (cAliasSE1)->E1_PARCELA
							AFT->AFT_TIPO		:= (cAliasSE1)->E1_TIPO
							AFT->AFT_CLIENT		:= (cAliasSE1)->E1_CLIENTE
							AFT->AFT_LOJA		:= (cAliasSE1)->E1_LOJA
							AFT->AFT_VENREA		:= (cAliasSE1)->E1_VENCREA
							MsUnlock()
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³ Atualiza os valores da Tarefa                        ³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						Else
							If nz <= Len(aRecAFT)
								MsGoto(aRecAFT[nz])
								RecLock("AFT",.F.,.T.)
						        dbDelete()
						        msUnLock()
							EndIf
						EndIf
					Next nZ
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Deleta os demais registros.                          ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					If Len(aRecAFT) > Len(aRatAFT[nx,2])
						For nz := (Len(aRatAFT[nx,2])+1) to Len(aRecAFT)
							MsGoto(aRecAFT[nz])
							RecLock("AFT",.F.,.T.)
					        dbDelete()
					        msUnLock()
						Next nz
					EndIf
				EndIf
			EndIf
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Estorno
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		Case nEvento == 2
			dbSelectArea("AFT")
			dbSetOrder(2)
			If MsSeek(xFilial()+(cAliasSE1)->E1_PREFIXO+(cAliasSE1)->E1_NUM+(cAliasSE1)->E1_PARCELA+(cAliasSE1)->E1_TIPO+(cAliasSE1)->E1_CLIENTE+(cAliasSE1)->E1_LOJA)
				While !Eof() .And. xFilial()+(cAliasSE1)->E1_PREFIXO+(cAliasSE1)->E1_NUM+(cAliasSE1)->E1_PARCELA+(cAliasSE1)->E1_TIPO+(cAliasSE1)->E1_CLIENTE+(cAliasSE1)->E1_LOJA==;
											AFT->AFT_FILIAL+AFT->AFT_PREFIX+AFT->AFT_NUM+AFT->AFT_PARCEL+AFT->AFT_TIPO+AFT->AFT_CLIENT+AFT->AFT_LOJA

			   		dbSelectArea("AFT")
					dbSkip()
				EndDo
			EndIf
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Exclusao
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		Case nEvento == 3
			dbSelectArea("AFT")
			dbSetOrder(2)
			If MsSeek(xFilial()+(cAliasSE1)->E1_PREFIXO+(cAliasSE1)->E1_NUM+(cAliasSE1)->E1_PARCELA+(cAliasSE1)->E1_TIPO+(cAliasSE1)->E1_CLIENTE+(cAliasSE1)->E1_LOJA)
				While !Eof() .And. xFilial()+(cAliasSE1)->E1_PREFIXO+(cAliasSE1)->E1_NUM+(cAliasSE1)->E1_PARCELA+(cAliasSE1)->E1_TIPO+(cAliasSE1)->E1_CLIENTE+(cAliasSE1)->E1_LOJA==;
											AFT->AFT_FILIAL+AFT->AFT_PREFIX+AFT->AFT_NUM+AFT->AFT_PARCEL+AFT->AFT_TIPO+AFT->AFT_CLIENT+AFT->AFT_LOJA
					If AFT->AFT_REVISA==PmsAF8Ver(AFT->AFT_PROJET)
						RecLock("AFT",.F.,.T.)
						dbDelete()
						MsUnlock()
					EndIf
					dbSkip()
				EndDo
			EndIf
	EndCase
EndIf

RestArea(aArea)
Return
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PmsPergPrjºAutor  ³Michel Dantas       º Data ³  21/06/01   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Integracao com o Project                                    º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP6                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsPergPrj()
Local oDlg, oBut1, oBut2
Local lOk       := .F.

DEFINE MSDIALOG oDlg TITLE STR0003 FROM 0,0 TO 300,350 OF oMainWnd Pixel //"Parametros"
@ 0, 0 BITMAP RESNAME BMP_LOGIN oF oDlg SIZE 30,(oDlg:nBottom/2.1) ADJUST WHEN .F. PIXEL NOBORDER
DEFINE FONT oBold NAME "Arial" SIZE 0, -13 BOLD
@ 03, 40 SAY STR0004 FONT oBold PIXEL //"Integração com o MsProject"
@ 14, 30 TO 16 ,400 LABEL "" OF oDlg PIXEL
@ 30, 35 SAY STR0036 PIXEL //"Projeto de"
@ 30, 85 MSGET cProjeti SIZE 50, 10 PIXEL F3 "AF8"
@ 48, 35 SAY  STR0037 PIXEL //"Projeto até"
@ 48, 85 MSGET cProjetf SIZE 50, 10 PIXEL F3 "AF8"
@ 66, 35 SAY STR0038 PIXEL //"Nivel"
@ 66, 85 MSGET cNivel SIZE 50, 10 PIXEL
@ 84, 35 SAY STR0039 PIXEL //"Fase"
@ 84, 85 MSGET cFase SIZE 50, 10 PIXEL
@ 102, 35 SAY STR0040 PIXEL //"Versão"
@ 102, 85 MSGET cVersao SIZE 50, 10 PIXEL
@ 120, 35 SAY STR0041 PIXEL //"Data de Referencia"
@ 120, 85 MSGET dDataRef SIZE 50, 10 PIXEL
@ (oDlg:nBottom/2-25),  99 BUTTON oBut1 PROMPT STR0042 SIZE 35,10  ACTION (oDlg:End() ) PIXEL //"Cancela"
@ (oDlg:nBottom/2-25), 132 BUTTON oBut2 PROMPT STR0043 SIZE 35,10 ACTION ( lOk := .T.,oDlg:End() ) PIXEL //"Confirma"

ACTIVATE MSDIALOG oDlg CENTERED

Return(lOk)
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSAvalAFP³ Autor ³ Edson Maricate        ³ Data ³ 18-05-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Rotina de avaliacao dos eventos de um Evento Marco            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Alias da tabela de Eventos                             ³±±
±±³          ³ExpN2: Codigo do Evento                                       ³±±
±±³          ³       [1] Implantacao de um Evento                           ³±±
±±³          ³       [2] Estorno de um Evento                               ³±±
±±³          ³       [3] Exclusao de um Evento                              ³±±
±±³          ³ExpN3:Tipo de associacao : 1 - Tarefa, 2 - EDT                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                        ³±±
±±³          ³                                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo atualizar os eventos vinculados ³±±
±±³          ³a um Evento de EDT ou Tarefa.                                 ³±±
±±³          ³A) Atualizacao das tabelas complementares.                    ³±±
±±³          ³B) Atualizacao das informacoes complementares das EDTs e Proj.³±±
±±³          ³                                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³SIGAPMS                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PMSAvalAFP(cAlias,nEvento,nTipo,lCopy)

Local aArea 	:= GetArea()
Local aAreaAF9 	:= AF9->(GetArea())
Local aAreaAFC 	:= AFC->(GetArea())
Local cParcel	:=	Space(TamSX3("E1_PARCELA")[1])
Local nRecSE1  := 0
Local nRecAFT  := 0

DEFAULT nTipo	:= 1

Do Case
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Inclusao de um Evento                                   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Case nEvento == 1
		If nTipo == 1
			AF9->(dbSetOrder(1))
			AF9->(MsSeek(xFilial("AF9")+AFP->AFP_PROJET+AFP->AFP_REVISA+AFP->AFP_TAREFA))
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Recalcula a Data Teorica                                ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			If !lCopy //Se nao for copia de tarefa com evento
				RecLock("AFP",.F.)
				AFP->AFP_DTCALC	:= PmsDtPrv(AF9->AF9_START,AF9->AF9_FINISH,AFP->AFP_PERC,AF9->AF9_TPMEDI)
				MsUnlock()
			EndIf
		Else
			AFC->(dbSetOrder(1))
			AFC->(MsSeek(xFilial("AFC")+AFP->AFP_PROJET+AFP->AFP_REVISA+AFP->AFP_EDT))
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Recalcula a Data Teorica                                ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			RecLock("AFP",.F.)
			AFP->AFP_DTCALC	:= PmsDtPrv(AFC->AFC_START,AFC->AFC_FINISH,AFP->AFP_PERC,"10")
			MsUnlock()
		EndIf
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Gera o Titulo no Contas a Receber - Provisorio          ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !Empty(AFP->AFP_CLIENT) .And. !Empty(AFP->AFP_LOJA) .And. AFP->AFP_GERPRV!="3" .And. Empty(AFP->AFP_DTATU)

			dbSelectArea("SE1")
			dbSetOrder(1)
			If !dbSeek(xFilial("SE1")+AFP->(AFP_PREFIX+AFP_NUM+cParcel+MVPROVIS))
				RecLock("SE1",.T.)
				SE1->E1_FILIAL	:= xFilial("SE1")
				SE1->E1_PREFIXO	:= AFP->AFP_PREFIX
				SE1->E1_NUM		:= AFP->AFP_NUM
				SE1->E1_TIPO	:= MVPROVIS
				SE1->E1_NATUREZ	:= AFP->AFP_NATURE
				SE1->E1_CLIENTE	:= AFP->AFP_CLIENT
				SE1->E1_LOJA	:= AFP->AFP_LOJA
				SE1->E1_VENCTO	:= If(AFP->AFP_GERPRV=="1",AFP->AFP_DTPREV,AFP->AFP_DTCALC)
				SE1->E1_VENCREA	:= DataValida(SE1->E1_VENCTO)
				SE1->E1_VALOR	:= AFP->AFP_VALOR
				SE1->E1_VLCRUZ:= AFP->AFP_VALOR
				SE1->E1_FLUXO	:= "S"
				SE1->E1_MOEDA	:= AFP->AFP_MOEDA
				SE1->E1_EMISSAO := dDataBase
				SE1->E1_PROJPMS := "1"
				SE1->E1_ORIGEM	:= "PMSXFUN3"
				A040DupRec("FINA040")
				MsUnlock()

				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Atualizacao dos dados do Modulo SIGAPMS    ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				RecLock("AFT",.T.)
				AFT->AFT_FILIAL		:= xFilial("AFT")
				AFT->AFT_PREFIX		:= SE1->E1_PREFIXO
				AFT->AFT_NUM		:= SE1->E1_NUM
				AFT->AFT_PARCEL		:= SE1->E1_PARCELA
				AFT->AFT_TIPO		:= SE1->E1_TIPO
				AFT->AFT_CLIENT		:= SE1->E1_CLIENTE
				AFT->AFT_LOJA		:= SE1->E1_LOJA
				AFT->AFT_VENREA		:= SE1->E1_VENCREA
				AFT->AFT_PROJET		:= AFP->AFP_PROJET
				AFT->AFT_REVISA		:= AFP->AFP_REVISA
				AFT->AFT_TAREFA		:= AFP->AFP_TAREFA
				AFT->AFT_EVENTO 	:= AFP->AFP_ITEM
				AFT->AFT_VALOR1		:= xMoeda(SE1->E1_VALOR,SE1->E1_MOEDA,1,SE1->E1_EMISSAO)
				AFT->AFT_VALOR2		:= xMoeda(SE1->E1_VALOR,SE1->E1_MOEDA,2,SE1->E1_EMISSAO)
				AFT->AFT_VALOR3		:= xMoeda(SE1->E1_VALOR,SE1->E1_MOEDA,3,SE1->E1_EMISSAO)
				AFT->AFT_VALOR4		:= xMoeda(SE1->E1_VALOR,SE1->E1_MOEDA,4,SE1->E1_EMISSAO)
				AFT->AFT_VALOR5		:= xMoeda(SE1->E1_VALOR,SE1->E1_MOEDA,5,SE1->E1_EMISSAO)
				If AFT->(ColumnPos("AFT_EDT"))>0
					AFT->AFT_EDT		:= AFP->AFP_EDT
				EndIf
				MsUnlock()
			else
				MSGAlert(STR0404, STR0405)
			EndIf
		EndIf
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Gera o Titulo no Contas a Receber - Normal              ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If !Empty(AFP->AFP_CLIENT) .And. !Empty(AFP->AFP_LOJA) .And. AFP->AFP_GERTIT=="1" .And. !Empty(AFP->AFP_DTATU)
			dbSelectArea("SE1")
			dbSetOrder(1)
			If !dbSeek(xFilial("SE1")+AFP->(AFP_PREFIX+AFP_NUM+cParcel+MVNOTAFIS))
				RecLock("SE1",.T.)
				SE1->E1_FILIAL	:= xFilial("SE1")
				SE1->E1_PREFIXO	:= AFP->AFP_PREFIX
				SE1->E1_NUM		:= AFP->AFP_NUM
				SE1->E1_TIPO	:= MVNOTAFIS
				SE1->E1_NATUREZ	:= AFP->AFP_NATURE
				SE1->E1_CLIENTE	:= AFP->AFP_CLIENT
				SE1->E1_LOJA	:= AFP->AFP_LOJA
				SE1->E1_VENCTO	:= AFP->AFP_DTATU
				SE1->E1_VENCREA	:= DataValida(SE1->E1_VENCTO)
				SE1->E1_VALOR	:= AFP->AFP_VALOR
				SE1->E1_VLCRUZ  := AFP->AFP_VALOR
				SE1->E1_FLUXO	:= "S"
				SE1->E1_MOEDA	:= AFP->AFP_MOEDA
				SE1->E1_EMISSAO := dDataBase
				SE1->E1_PROJPMS := "1"
				A040DupRec("FINA040")
				MsUnlock()
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Atualizacao dos dados do Modulo SIGAPMS    ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				RecLock("AFT",.T.)
				AFT->AFT_FILIAL		:= xFilial("AFT")
				AFT->AFT_PROJET		:= AFP->AFP_PROJET
				AFT->AFT_REVISA		:= AFP->AFP_REVISA
				If AFT->(ColumnPos("AFT_EDT"))>0
					AFT->AFT_EDT		:= AFP->AFP_EDT
				EndIf
				AFT->AFT_TAREFA		:= AFP->AFP_TAREFA
				AFT->AFT_PREFIX		:= SE1->E1_PREFIXO
				AFT->AFT_NUM		:= SE1->E1_NUM
				AFT->AFT_PARCEL		:= SE1->E1_PARCELA
				AFT->AFT_TIPO		:= SE1->E1_TIPO
				AFT->AFT_CLIENT		:= SE1->E1_CLIENTE
				AFT->AFT_LOJA		:= SE1->E1_LOJA
				AFT->AFT_VENREA		:= SE1->E1_VENCREA
				AFT->AFT_EVENTO 	:= AFP->AFP_ITEM
				AFT->AFT_VALOR1		:= xMoeda(SE1->E1_VALOR,SE1->E1_MOEDA,1,SE1->E1_EMISSAO)
				AFT->AFT_VALOR2		:= xMoeda(SE1->E1_VALOR,SE1->E1_MOEDA,2,SE1->E1_EMISSAO)
				AFT->AFT_VALOR3		:= xMoeda(SE1->E1_VALOR,SE1->E1_MOEDA,3,SE1->E1_EMISSAO)
				AFT->AFT_VALOR4		:= xMoeda(SE1->E1_VALOR,SE1->E1_MOEDA,4,SE1->E1_EMISSAO)
				AFT->AFT_VALOR5		:= xMoeda(SE1->E1_VALOR,SE1->E1_MOEDA,5,SE1->E1_EMISSAO)
				MsUnlock()
			else
				MSGAlert(STR0404, STR0405)
			EndIf
		EndIf
		nRecSE1 := SE1->(Recno())
		nRecAFT := AFT->(Recno())
		If ExistBlock("PMSSE1AFT")
			ExecBlock("PMSSE1AFT",.F.,.F.)
		EndIf
		SE1->(dbGoTo(nRecSE1))
		AFT->(dbGoTo(nRecAFT))
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Estorno de um Evento                                    ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Case nEvento == 2

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Estorno de um Evento                                    ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	Case nEvento == 3
		dbSelectArea("SE1")
		dbSetOrder(2)
		MsSeek(PmsFilial("SE1","AFP")+AFP->AFP_CLIENT+AFP->AFP_LOJA+AFP->AFP_PREFIX+AFP->AFP_NUM)
		While !Eof() .And. PmsFilial("SE1","AFP")+AFP->AFP_CLIENT+AFP->AFP_LOJA+AFP->AFP_PREFIX+AFP->AFP_NUM==;
							E1_FILIAL+E1_CLIENTE+E1_LOJA+E1_PREFIXO+E1_NUM

			If SE1->E1_TIPO$MVPROVIS
				dbSelectArea("AFT")
				dbSetOrder(2)

				// é necessário utilizar a chave toda para pesquisar
				// caso contrário, se existirem mais de uma revisão no projeto
				// o MsSeek() fará com que seja apagado o registro errado

				If MsSeek(xFilial("AFT")+SE1->E1_PREFIXO+SE1->E1_NUM+SE1->E1_PARCELA+SE1->E1_TIPO+SE1->E1_CLIENTE+SE1->E1_LOJA + ;
							AFP->AFP_PROJET+AFP->AFP_REVISA+AFP->AFP_TAREFA) .And. AFT->AFT_EVENTO==AFP->AFP_ITEM
					RecLock("AFT",.F.,.T.)
					dbDelete()
					MsUnlock()
					dbCommit()
					RecLock("SE1",.F.,.T.)
					dbDelete()
					MsUnlock()
				EndIf
			EndIf
			dbSelectArea("SE1")
			dbSkip()
		EndDo
		dbSelectArea("SE1")
		dbSetOrder(2)
		MsSeek(PmsFilial("SE1","AFP")+AFP->AFP_CLIENT+AFP->AFP_LOJA+AFP->AFP_PREFIX+AFP->AFP_NUM)
		While !Eof() .And. PmsFilial("SE1","AFP")+AFP->AFP_CLIENT+AFP->AFP_LOJA+AFP->AFP_PREFIX+AFP->AFP_NUM==;
							E1_FILIAL+E1_CLIENTE+E1_LOJA+E1_PREFIXO+E1_NUM
			If SE1->E1_TIPO$MVNOTAFIS .And. Empty(SE1->E1_BAIXA) .And. SE1->E1_VALOR == SE1->E1_SALDO .And. SE1->E1_SITUACA == "0"
				dbSelectArea("AFT")
				dbSetOrder(2)

				// é necessário utilizar a chave toda para pesquisar
				// caso contrário, se existirem mais de uma revisão no projeto
				// o MsSeek() fará com que seja apagado o registro errado

				If MsSeek(xFilial("AFT")+SE1->E1_PREFIXO+SE1->E1_NUM+SE1->E1_PARCELA+SE1->E1_TIPO+SE1->E1_CLIENTE+SE1->E1_LOJA + ;
							AFP->AFP_PROJET+AFP->AFP_REVISA+AFP->AFP_TAREFA) .And. AFT->AFT_EVENTO==AFP->AFP_ITEM
					RecLock("AFT",.F.,.T.)
					dbDelete()
					MsUnlock()
					dbCommit()
					RecLock("SE1",.F.,.T.)
					dbDelete()
					MsUnlock()
				EndIf
			EndIf
			dbSelectArea("SE1")
			dbSkip()
		EndDo
EndCase

RestArea(aAreaAFC)
RestArea(aAreaAF9)
RestArea(aArea)
Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSDlgAF8³ Autor ³ Edson Maricate         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Monta a Dialog de visualizacao do Projeto                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsDlgAF8(cTitle,oMenu,cVersao,oTree,cFilhos,bChange,lConfirma,cRevisao,aMenu,oDlg,aConfig,cArquivo,lChgVersao,bContext)

Local lCalcTrib := IIf(AF8->(ColumnPos("AF8_PAR006")) > 0 .AND. AF8->AF8_PAR006 == '1' ,.T.,.F.)
Local lPmsTree 	:= SuperGetMV("MV_PMSTREE")== "2"
Local lPMS200Vis := ExistBlock("PMS200VISU")

// força busca no SX6 do parametro, pois o SUPERGETMV cacheia o valor
// Neste ponto de entrada existe a possibilidade de alteração deste parametro (PutMv())
If lPMS200Vis
   	lPmsTree := GetMV("MV_PMSTREE")== "2"
Endif

If !IsBlind() //Proteção para automação de testes
	If lPmsTree
		// Visualizacao do projeto com objeto Tree
		AuxDlgAF81(@cTitle,@oMenu,@cVersao,@oTree,@cFilhos,@bChange,@lConfirma,@cRevisao,@aMenu,@oDlg,@aConfig,@cArquivo,@lChgVersao,bContext,lCalcTrib)
	Else
		// Visualizacao do projeto com objeto Browse
		AuxDlgAF82(@cTitle,@oMenu,@cVersao,@oTree,@cFilhos,@bChange,@lConfirma,@cRevisao,@aMenu,@oDlg,@aConfig,@cArquivo,@lChgVersao,lCalcTrib)
	EndIf
EndIf

If lECMDisp <> NIL
	lECMDisp := NIL //Limpa a variável quando o usuário retorno ao browse.
EndIf

Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³AuxDlgAF8³ Autor ³ Edson Maricate         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Monta a Dialog de visualizacao do Projeto com painel a        ³±±
±±³           esquerda com objeto Tree e a da direita visualizando os dados ³±±
±±³           do cabecalho do projeto, edt e tarefa conforme a posicao que  ³±±
±±³           se encontrar no Tree.                                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function AuxDlgAF81(cTitle,oMenu,cVersao,oTree,cFilhos,bChange,lConfirma,cRevisao,aMenu,oDlg,aConfig,cArquivo,lChgVersao,bContext,lCalcTrib)

Local oPanel
Local oPanelV
Local aSVAlias	:= {}
Local aEnch[9]
Local nTop      := oMainWnd:nTop+35
Local nLeft     := oMainWnd:nLeft+10
Local nBottom   := oMainWnd:nBottom-12
Local nRight    := oMainWnd:nRight-10
Local nOldEnch	:= 7
Local oFont
Local nX        := 0
Local lFWGetVersao := .T.
Local aButtons	:= {}
Local nTamTree	:=	If(oMainWnd:nClientWidth > 800,210,152)
Local aTitlesTAR	:= PmsDetCom(AF8->AF8_PROJET)
Local aTitlesEDT	:= { STR0332,; //'Tarefas'
						 STR0329 } //'Eventos'
Local oFolderTar
Local oFolderEDT
Local aHeaderSV1	:= {{},{}}
Local aColsSV1		:= {{},{}}
Local aHeaderSV2	:= {{},{},{},{},{},{},{}}
Local aColsSV2		:= {{},{},{},{},{},{},{}}
Local aPosObj	:=	{}
Local nI
Local lExibirOK := .T.

PRIVATE aMemos := {{"AF9_CODMEM","AF9_OBS"}}
PRIVATE bRefresh	:= {|| PMSTreeEDT(@oTree,cRevisa,,cFilhos,Nil,.T.,cRevisao,aConfig),Eval(oTree:bChange)}
PRIVATE bReCalc     := bRefresh //
PRIVATE bRefreshAll	:= bRefresh //bRefreshAll - sem utilizacao

DEFAULT bChange := {|| Nil }
DEFAULT cFilhos := "AF8,AFC,AF9,AFD"// Alias que sao amarrados ao TREE
DEFAULT cRevisao:= AF8->AF8_REVISA
DEFAULT lChgVersao	:= .F.
DEFAULT bContext	:=	{|| Nil}
DEFAULT aConfig		:= {1, PMS_MIN_DATE, PMS_MAX_DATE, Space(TamSX3("AE8_RECURS")[1])}
DEFAULT lCalcTrib	:= .F.

If lCalcTrib
	AADD(aHeaderSV2,{})
	AADD(aColsSV2,{})
EndIf

SaveInter()

If FindProfDef( __cUSerID, FunName(), AF8->AF8_PROJET, "PMSFILTRO" )
	aConfig[1] := Val(AllTrim(RetProfDef(__cUSerID, FunName(), AF8->AF8_PROJET, "PMSFILTRO")))
EndIf

Private aCoordScroll	:=	{}

If ExistBlock("PMSAF801")
	cFilhos := ExecBlock("PMSAF801", .F., .F., {cFilhos})
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ ExecBlock para inclusao de botoes customizados       ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ExistBlock("PMSAF8BD")
	aButtons := ExecBlock("PMSAF8BD",.F.,.F.)
	For nx := 1 to Len(aButtons)
		aAdd(aMenu,{aButtons[nx,1],aButtons[nx,2],aButtons[nx,3],aButtons[nx,4]})
	Next
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Carrega as variaveis de memoria do AF8.              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
RegToMemory("AF8",.F.)
RegToMemory("AFA",.T.)
RegToMemory("AFB",.T.)
RegToMemory("AFD",.T.)

If "USR"$cFilhos
	RegToMemory("AFX",.F.)
	RegToMemory("AFV",.F.)
EndIf

If "ACB" $ cFilhos
	RegToMemory("ACB",.T.)
EndIf

If "AFD" $ cFilhos
	RegToMemory("AFD",.T.)
EndIf

M->AF8_REVISA	:= cVersao
DEFINE FONT oFont NAME "Arial" SIZE 0, -10
DEFINE MSDIALOG oDlg TITLE cTitle OF oMainWnd PIXEL FROM nTop,nLeft TO nBottom,nRight
oDlg:lMaximized := .T.

If SetMdiChild()

	For nx := 1 to Len(aMenu)
		AADD(aButtons, {aMenu[nx,3] , aMenu[nx,2], aMenu[nx,1]})
	Next
	AADD(aButtons, {BMP_INTERROGACAO, {|| HelProg()}, STR0135})
    lExibirOK := lConfirma<>Nil
	EnchoiceBar(oDlg,{|| (lConfirma:=.T.,oDlg:End()) },{|| oDlg:End()},,aButtons,,,,,.F.,lExibirOK)

Else
	oPanel := TPanel():New(0,0,'',oDlg, oDlg:oFont, .T., .T.,, ,1245,23,.T.,.T. )
	oPanel:Align := CONTROL_ALIGN_TOP
	@00,00 BITMAP oBmp1 RESNAME BMP_FAIXA_SUPERIOR SIZE 1200,50 NOBORDER PIXEL Of oPanel
	oBmp1:align:= CONTROL_ALIGN_TOP

	If !lFWGetVersao .or. GetVersao(.F.) == "P10"

		nCol := 2
		For nx := 1 to Len(aMenu)
			oBtn := TButton():New( 10, nCol,aMenu[nx,4],oPanel,aMenu[nx,2],24,12, , , ,.T.)
			oBtn:cToolTip := aMenu[nx,1]
			nCol += 24
		Next

		oBtn := TButton():New( 10, nCol,STR0069,oPanel,{|| HelProg() },24,12, , , ,.T.)
		oBtn:cToolTip := STR0135
		nCol += 24

		If lConfirma<>Nil
			// OK
			oBtn := TButton():New( 10, nCol,STR0203,oPanel,{|| (lConfirma:=.T.,oDlg:End()) },24,12, , , ,.T.)
			oBtn:cToolTip := STR0203 + " < Ctrl-O >"
			nCol += 24
		EndIf
		// Sair
		oBtn := TButton():New( 10, nCol,STR0202,oPanel,{|| oDlg:End() },24,12, , , ,.T.)
		oBtn:cToolTip := STR0202+" < Ctrl-X >"
		nCol += 24
	Else
		For Nx := 1 to Len(aMenu)
			AADD(aButtons, {aMenu[nx,3] , aMenu[nx,2], aMenu[nx,1]})
		Next
		AADD(aButtons, {BMP_INTERROGACAO, {|| HelProg()}, STR0135})
		lExibirOK := lConfirma<>Nil
		EnchoiceBar(oDlg,{|| (lConfirma:=.T.,oDlg:End()) },{|| oDlg:End()},,aButtons,,,,,.F.,lExibirOK)
	Endif
EndIf

oPanelV := PmsPanelV(oDLg,!lChgVersao)
oPanelV:Align := CONTROL_ALIGN_TOP

oPanel := TPanel():New(52,nTamTree,'',oDlg, oDlg:oFont, .T., .T.,, ,(nRight-nLeft)/2-nTamTree,((nBottom-nTop)/2),.T.,.T. )
oPanel:Align := CONTROL_ALIGN_ALLCLIENT
lOneColumn := If((nRight-nLeft)/2-(nTamTree)>312,.F.,.T.)

aAdd(aSVAlias,"AF9")
RegToMemory("AF9",.F.)
aPosObj	:=	{((((nBottom-nTop)/2)-40)*0.4)+5,; //40% da tela em altura + 5 (onde comeca o browse)
				0,;
				((nBottom-nTop)/2)-46,;   //Ultimo pixel (altura)
				(nRight-nLeft)/2-(nTamTree+3)} //Ultimo pixel (largura)

aCoordScroll:=	{((nBottom-nTop)/2)-40, (nRight-nLeft)/2-(nTamTree)}  //Ultimos pixels para o Scroll (altura e largura)

aEnch[1]	:=	{Nil,Nil,{Nil,Nil,Nil,Nil,Nil,Nil,Nil}} //aEnch[1]	:=	{Nil,Nil,{Nil,Nil,Nil,Nil,Nil,Nil,Nil,Nil}}

IIf(lCalcTrib,AADD(aEnch[1,3],Nil),)

aEnch[1,1]:=	TScrollBox():New( oPanel, 0, 0,aCoordScroll[1],aCoordScroll[2],.T.,.T.,.T.)
aEnch[1,2]:= MsMGet():New("AF9",AF9->(RecNo()),2,,,,,{0,0,((((nBottom-nTop)/2)-40)*0.4),(nRight-nLeft)/2-(nTamTree+3)},,3,,,,aEnch[1,1],,)
oFolderTar := TFolder():New(aPosObj[1],aPosObj[2],aTitlesTar,{},aEnch[1,1],,,, .T., .T.,aPosObj[4]-aPosObj[2],aPosObj[3]-aPosObj[1])

For ni := 1 to Len(oFolderTar:aDialogs)
	DEFINE SBUTTON FROM 5000,5000 TYPE 5 ACTION Allwaystrue() ENABLE OF oFolderTar:aDialogs[ni]
Next

PMS203Vis(aHeaderSV2,aColsSV2,.F.)

For nX := 1 To Len(aEnch[1,3])
	aEnch[1,3,nX]		:= MsNewGetDados():New(2,2,aPosObj[3]-aPosObj[1]-16,aPosObj[4]-6,0,,,,,,,,,,oFolderTar:aDialogs[nX],aHeaderSV2[nX],aColsSV2[nX])
Next
aEnch[1,1]:Hide()

aAdd(aSVAlias,"AFC")
// Posicionar AFC
AFC->(DbSetorder(1))
AFC->( MsSeek(xFilial("AF8")+AF8->AF8_PROJET+AF8->AF8_REVISA))
RegToMemory("AFC",.F.)
aEnch[5]	:=	{Nil,Nil,{Nil,Nil}}
aEnch[5,1]:=	TScrollBox():New( oPanel, 0, 0,aCoordScroll[1],aCoordScroll[2],.T.,.T.,.T.)
aEnch[5,2]:= MsMGet():New("AFC",AFC->(RecNo()),2,,,,,{0,0,((((nBottom-nTop)/2)-40)*0.4),(nRight-nLeft)/2-(nTamTree+3)},,3,,,,aEnch[5,1],,)
oFolderEDT := TFolder():New(aPosObj[1],aPosObj[2],aTitlesEDT,{},aEnch[5,1],,,, .T., .T.,aPosObj[4]-aPosObj[2],aPosObj[3]-aPosObj[1])

For ni := 1 to Len(oFolderEDT:aDialogs)
	DEFINE SBUTTON FROM 5000,5000 TYPE 5 ACTION Allwaystrue() ENABLE OF oFolderEDT:aDialogs[ni]
Next
PMS201Vis(aHeaderSV1,aColsSV1,.F.)
For nX := 1 To 2
	aEnch[5,3,nX]		:= MsNewGetDados():New(2,2,aPosObj[3]-aPosObj[1]-16,aPosObj[4]-6,0,,,,,,,,,,oFolderEDT:aDialogs[nX],aHeaderSV1[nX],aColsSV1[nX])
Next
aEnch[5,1]:Hide()

If "USR"$cFilhos
	aAdd(aSVAlias,"AFX")
	aEnch[8]:= MsMGet():New("AFX",AFX->(RecNo()),2,,,,,{0,0,((nBottom-nTop)/2)-40,(nRight-nLeft)/2-nTamTree},,3,,,,oPanel,,,lOneColumn)
	aEnch[8]:Hide()
	aEnch[8]:oBox:Align := CONTROL_ALIGN_ALLCLIENT

	aAdd(aSVAlias,"AFV")
	aEnch[9]:= MsMGet():New("AFV",AFV->(RecNo()),2,,,,,{0,0,((nBottom-nTop)/2)-40,(nRight-nLeft)/2-nTamTree},,3,,,,oPanel,,,lOneColumn)
	aEnch[9]:Hide()
	aEnch[9]:oBox:Align := CONTROL_ALIGN_ALLCLIENT
EndIf

aAdd(aSVAlias,"AF8")
aEnch[7]:= MsMGet():New("AF8",AF8->(RecNo()),2,,,,,{0,0,((nBottom-nTop)/2)-40,(nRight-nLeft)/2-nTamTree},,3,,,,oPanel,,,lOneColumn)
aEnch[7]:oBox:Align := CONTROL_ALIGN_ALLCLIENT

oTree := dbTree():New(52, 2,(nBottom/2)+5, nTamTree-2, oDlg,,,.T.)
oTree:Align := CONTROL_ALIGN_LEFT
oTree:bChange := {|| PMSDlgView(@oTree,@aSVAlias,@aEnch,{0,0,((nBottom-nTop)/2)-40,(nRight-nLeft)/2-nTamTree},@nOldEnch,@oPanel,,{aColsSV1,aColsSV2},{aHeaderSV1,aHeaderSV2}),Eval(bChange)}
oTree:SetFont(oFont)
oTree:lShowHint:= .F.

PMSTreeEDT(@oTree,cVersao,,cFilhos,Nil,.T.,cRevisao,aConfig)
//Posiciona no primeiro registro do tree
//oTree:TreeSeek("AF8"+StrZero(AF8->(RecNo()),12))
oTree:BrClicked	:= bContext
Eval(oTree:bChange)

FATPDLogUser("AUXDLGAF81")

ACTIVATE MSDIALOG oDlg

If FindProfDef( __cUSerID, FunName(), AF8->AF8_PROJET, "PMSFILTRO" )
	WriteProfDef(__cUSerID, FunName(), AF8->AF8_PROJET, "PMSFILTRO", __cUSerID, FunName(), AF8->AF8_PROJET, "PMSFILTRO", Str(aConfig[1],1,0) )
Else
	WriteNewProf( __cUSerID, FunName(), AF8->AF8_PROJET, "PMSFILTRO", Str(aConfig[1],1,0) )
Endif

RestInter()
Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³AuxDlgAF8³ Autor ³ Edson Maricate         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Monta a Dialog de visualizacao do Projeto com painel a        ³±±
±±³           esquerda com browse e a da direita visualizando os dados do   ³±±
±±³           cabecalho do projeto, edt e tarefa conforme a posicao que se  ³±±
±±³           encontrar no browse.                                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function AuxDlgAF82(cTitle,oMenu,cVersao,oTree,cFilhos,bChange,lConfirma,cUsrRev,aMenu,oDlg,aConfig,cArquivo,lChgVersao,lCalcTrib)

Local aAuxRet
Local aBOD
Local aAlter	:= {}
Local aExpand	:= {}
Local nTop		:= oMainWnd:nTop+35
Local nLeft		:= oMainWnd:nLeft+10
Local nBottom	:= oMainWnd:nBottom-12
Local nRight	:= oMainWnd:nRight-10
Local oBrowse
Local oPanel
Local oMenos	:= LoadBitmap( GetResources(), BMP_SHORTCUTMINUS )
Local oMais		:=	LoadBitmap( GetResources(), BMP_SHORTCUTPLUS )
Local oAll		:= LoadBitmap( GetResources(), BMP_EXPALL )
Local oCmp		:= LoadBitmap( GetResources(), BMP_EXPCMP )
Local nX			:= 0
Local nOldEnch	:= 1
Local aSVAlias	:= {}
Local aEnch[9]
Local lFWGetVersao := .T.
Local aButtons		 := {}
Local nTamTree		 := If(oMainWnd:nClientWidth > 800,210,152)

Local aTitlesTAR:= PmsDetCom(AF8->AF8_PROJET)
Local aTitlesEDT:= { STR0332,; //'Tarefas'
					 STR0329 } //'Eventos'
Local oFolderTar
Local oFolderEDT
Local aHeaderSV1	:= {{},{}}
Local aColsSV1		:= {{},{}}
Local aHeaderSV2	:= {{},{},{},{},{},{},{}}
Local aColsSV2		:= {{},{},{},{},{},{},{}}
Local aPosObj		:=	{}
Local nI
Local lExibirOK := .T.
Local nTamanho	:= 0
Local nTamTsk	:= TamSX3("AF9_TAREFA")[1]
Local nTamPrj	:= TamSX3("AF9_PROJET")[1]

PRIVATE aMemos			:= {{"AF9_CODMEM","AF9_OBS"}}
PRIVATE aCampos 		:= {{"AF9_TAREFA","AFC_EDT",8,,,.F.,"",},{"AF9_DESCRI","AFC_DESCRI",55,,,.F.,"",150}}
PRIVATE aHEDTCPM		:= {}
PRIVATE aHTaskCPM		:= {}
PRIVATE aHandCP		:= {}
PRIVATE aHandCR		:= {}
PRIVATE aHandCRTE		:= {}
PRIVATE aHandCOTP		:= {}
PRIVATE aHandFin		:= {}
PRIVATE aHandCOTE		:= {}
PRIVATE aStru			:= {}
PRIVATE aHeader 		:= {}
PRIVATE aCols 			:= {}
PRIVATE aAuxCps		:= aClone(aCampos)
PRIVATE bRefresh		:= {|| (PmsAtuPln2(cRevisa,cArquivo,nNivelMax,cUsrRev,,@aExpand,aConfig,,cFilhos),Eval(oBrowse:bChange),oBrowse:Refresh())}
PRIVATE bReCalc		:= bRefresh //
PRIVATE bRefreshAll 	:= bRefresh //bRefreshAll - sem utilizacao

DEFAULT lChgVersao	:= .F.
DEFAULT cUsrRev 		:= AF8->AF8_REVISA
DEFAULT bChange 		:= {|| Nil }
DEFAULT cFilhos 		:= "AF8,AFC,AF9,AFD"// Alias que sao amarrados ao TREE
DEFAULT lCalcTrib		:= .F.

If lCalcTrib
	AADD(aHeaderSV2,{})
	AADD(aColsSV2,{})
EndIf

cArquivo		:= GetNextAlias() 
SaveInter()

If ExistBlock("PMSAF801")
	cFilhos := ExecBlock("PMSAF801", .F., .F., {cFilhos})
EndIf

If ExistBlock("PMSAF8DLG")
	aCampos := ExecBlock("PMSAF8DLG",.F.,.F.,{aCampos})
	aAuxCps := aClone(aCampos)
EndIf

Processa({||PmsPlnField(aCampos)})

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Carrega as variaveis de memoria do AF8.              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
RegToMemory("AF8",.F.)
RegToMemory("AFA",.T.)
RegToMemory("AFB",.T.)
RegToMemory("AFD",.T.)

If "USR"$cFilhos
	RegToMemory("AFX",.F.)
	RegToMemory("AFV",.F.)
EndIf

If "ACB" $ cFilhos
	RegToMemory("ACB",.T.)
EndIf

If "AFD" $ cFilhos
	RegToMemory("AFD",.T.)
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ ExecBlock para inclusao de botoes customizados       ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ExistBlock("PMSAF8BD")
	aBOD := ExecBlock("PMSAF8BD",.F.,.F.)
	For nx := 1 to Len(aBOD)
		aAdd(aMenu,{aBOD[nx,1],aBOD[nx,2],aBOD[nx,3],aBOD[nx,4]})
	Next
EndIf

For nx := 1 to Len(aCampos)
	dbSelectArea("SX3")
	dbSetOrder(2)
	If MsSeek(aCampos[nx,1])
		If aCampos[nx,1] == "AF9_TAREFA" .AND. nTamTsk < nTamPrj
			nTamanho := nTamPrj
		Else
			nTamanho := X3_TAMANHO
		EndIf
		aAdd(aHeader,{If(Empty(aCampos[nx,5]),X3TITULO(),aCampos[nx,5]),"X"+Substr(X3_CAMPO,2,Len(X3_CAMPO)-1),X3_PICTURE,If(aCampos[nx,3]!=Nil,aCampos[nx,3],X3_TAMANHO),If(aCampos[nx,4]!=Nil,aCampos[nx,4],X3_DECIMAL),aCampos[nx,7]+"('"+aCampos[nx,1]+"','"+aCampos[nx,2]+"','"+cArquivo+"')",X3_USADO,X3_TIPO,cArquivo,X3_CONTEXT})
		aAdd(aStru,{"X"+Substr(X3_CAMPO,2,Len(X3_CAMPO)),X3_TIPO,nTamanho,X3_DECIMAL})
		If aCampos[nx,6]
			aAdd(aAlter,"X"+Substr(X3_CAMPO,2,Len(X3_CAMPO)))
		EndIf
	ElseIf Substr(aCampos[nx,1],1,1) == "$"
		aAdd(aStru,aClone(&(Substr(aCampos[nx,1],2,Len(aCampos[nx,1])-1)+"(1)")))
	ElseIf Substr(aCampos[nx,1],1,1) == "%"
//%123456789012%C%99%2%12345678901234567890123456789012345%123456789012345678901234567890123456789012345678901234567890
		aAdd(aStru,{"FORM"+StrZero(nx,2,0),Substr(aCampos[nx,1],15,1),Val(Substr(aCampos[nx,1],17,2)),Val(Substr(aCampos[nx,1],20,2))})
	EndIf
Next
aAdd(aStru,{"CTRLNIV","C",1,0})
aAdd(aStru,{"L_I_XO","C",1,0})
aAdd(aStru,{"ALIAS","C",3,0})
aAdd(aStru,{"NIVTREE","N",3,0})
aAdd(aStru,{"RECNO","N",14,0})
aAdd(aStru,{"FLAG","L",1,0})
aAdd(aStru,{"RECIND","C",128,0})

If _oPMSXFUN1 <> Nil
	_oPMSXFUN1:Delete()
	_oPMSXFUN1 := Nil
Endif

_oPMSXFUN1 := FWTemporaryTable():New( cArquivo )  
_oPMSXFUN1:SetFields(aStru)
_oPMSXFUN1:AddIndex("1", {"RECIND"})

//------------------
//Criação da tabela temporaria
//------------------
_oPMSXFUN1:Create()

If AF8->(ColumnPos("AF8_NMAX"))> 0
	nNivelMax := PmsAtuPlan(cRevisa,cArquivo,If(AF8->AF8_NMAX>0,AF8->AF8_NMAX,1),cUsrRev,,aExpand,,,cFilhos)
Else
	nNivelMax := PmsAtuPlan(cRevisa,cArquivo,2000,cUsrRev,,aExpand,,,cFilhos)
EndIf

DEFINE FONT oFont NAME "Arial" SIZE 0, -11 BOLD
DEFINE MSDIALOG oDlg TITLE cTitle OF oMainWnd PIXEL FROM nTop,nLeft TO nBottom,nRight //STYLE nOR(WS_VISIBLE,WS_POPUP)
oDlg:lMaximized := .T.

If SetMdiChild()

	For nx := 1 to Len(aMenu)
		AADD(aButtons, {aMenu[nx,3] , aMenu[nx,2], aMenu[nx,1]})
	Next

	AADD(aButtons, {BMP_PESQUISA	, {|| PmsStrPesq(cArquivo ,oBrowse:bChange ,"AF8") }, STR0316})
	AADD(aButtons, {BMP_EXCEL		, {|| PmsPlnExcel(aCampos,cUsrRev,nNivelMax,2,cArquivo)}, STR0315})
	AADD(aButtons, {BMP_IMPRIMIR	, {|| PMSR260(cArquivo,aCampos,cTitle) }, TIP_IMPRIMIR})
	AADD(aButtons, {BMP_INTERROGACAO, {|| HelProg() }, STR0135})
    lExibirOK := lConfirma<>Nil
	EnchoiceBar(oDlg,{|| (lConfirma:=.T.,oDlg:End()) },{|| oDlg:End()},,aButtons,,,,,.F.,lExibirOK)

	aCoordScroll:=	{((nBottom-nTop)/2)-20, (nRight-nLeft)/2-(nTamTree-5)}  //Ultimos pixels para o Scroll (altura e largura)
Else
	oPanel := TPanel():New(0,0,'',oDlg, oDlg:oFont, .T., .T.,, ,1245,23,.T.,.T. )
	oPanel:Align := CONTROL_ALIGN_TOP
	@00,00 BITMAP oBmp1 RESNAME BMP_FAIXA_SUPERIOR SIZE 1200,50 NOBORDER PIXEL Of oPanel
	oBmp1:align:= CONTROL_ALIGN_TOP

	If !lFWGetVersao .or. GetVersao(.F.) == "P10"

		nCol := 2
		For nx := 1 to Len(aMenu)
			oBtn := TButton():New( 10, nCol,aMenu[nx,4],oPanel,aMenu[nx,2],24,12, , , ,.T.)
			oBtn:cToolTip := aMenu[nx,1]
			nCol += 24
		Next

		oBtn := TButton():New( 10, nCol,STR0316,oPanel,{||PmsStrPesq(cArquivo ,oBrowse:bChange ,"AF8")},24,12, , , ,.T.)
		oBtn:cToolTip := STR0316
		nCol += 24

		oBtn := TButton():New( 10, nCol,BMP_EXCEL ,oPanel,{||PmsPlnExcel(aCampos,cUsrRev,nNivelMax,2,cArquivo)},24,12, , , ,.T.)
		oBtn:cToolTip := STR0315  //"Exportar para o Microsoft Excel"
		nCol += 24

		oBtn := TButton():New( 10, nCol,TOOL_IMPRIMIR,oPanel,{|| PMSR260(cArquivo,aCampos,cTitle) },24,12, , , ,.T.)
		oBtn:cToolTip := TIP_IMPRIMIR
		nCol += 24

		oBtn := TButton():New( 10, nCol,STR0069,oPanel,{|| HelProg() },24,12, , , ,.T.)
		oBtn:cToolTip := STR0135
		nCol += 24

		If lConfirma<>Nil
			// OK
			oBtn := TButton():New( 10, nCol,STR0203,oPanel,{|| (lConfirma:=.T.,oDlg:End()) },24,12, , , ,.T.)
			oBtn:cToolTip := STR0203 + " < Ctrl-O >"
			nCol += 24
		EndIf

		// Sair
		oBtn := TButton():New( 10, nCol,STR0202,oPanel,{|| oDlg:End() },24,12, , , ,.T.)
		oBtn:cToolTip := STR0202+" < Ctrl-X >"
		nCol += 24

	Else
		For nx := 1 to Len(aMenu)
			AADD(aButtons, {aMenu[nx,3] , aMenu[nx,2], aMenu[nx,1]})
		Next

		AADD(aButtons, {BMP_PESQUISA	, {|| PmsStrPesq(cArquivo ,oBrowse:bChange ,"AF8")}, STR0316})
		AADD(aButtons, {BMP_EXCEL		, {|| PmsPlnExcel(aCampos,cUsrRev,nNivelMax,2,cArquivo)}, STR0315})
		AADD(aButtons, {BMP_IMPRIMIR	, {|| PMSR260(cArquivo,aCampos,cTitle) }, TIP_IMPRIMIR})
		AADD(aButtons, {BMP_INTERROGACAO, {|| HelProg() }, STR0135})
		lExibirOK := lConfirma<>Nil
		EnchoiceBar(oDlg,{|| (lConfirma:=.T.,oDlg:End())},{|| oDlg:End()},,aButtons,,,,,.F.,lExibirOK)
	Endif
	aCoordScroll:=	{((nBottom-nTop)/2)-40, (nRight-nLeft)/2-(nTamTree)}  //Ultimos pixels para o Scroll (altura e largura)
EndIf

oPanelV := PmsPanelV(oDLg,!lChgVersao)
oPanelV:Align := CONTROL_ALIGN_TOP

oPanel := TPanel():New(20,nTamTree,'',oDlg, oDlg:oFont, .T., .T.,, ,(nRight-nLeft)/2-nTamTree,((oDLg:nBottom-oDLg:nTop)/2)-38,.T.,.T. )
oPanel:Align := CONTROL_ALIGN_ALLCLIENT
lOneColumn := If((nRight-nLeft)/2-nTamTree>312,.F.,.T.)
aAdd(aSVAlias,"AF9")
RegToMemory("AF9",.F.)
aPosObj	:=	{((((nBottom-nTop)/2)-40)*0.4)+5,; //40% da tela em altura + 5 (onde comeca o browse)
				0,;
				((nBottom-nTop)/2)-46,;   //Ultimo pixel (altura)
				(nRight-nLeft)/2-(nTamTree+3)} //Ultimo pixel (largura)

aEnch[1]	:=	{Nil,Nil,{Nil,Nil,Nil,Nil,Nil,Nil,Nil}}

IIf(lCalcTrib,AADD(aEnch[1,3],Nil),)

aEnch[1,1]:=	TScrollBox():New( oPanel, 2, 0,aCoordScroll[1],aCoordScroll[2],.T.,.T.,.T.)
aEnch[1,2]:= MsMGet():New("AF9",AF9->(RecNo()),2,,,,,{0,0,((((nBottom-nTop)/2)-40)*0.4),(nRight-nLeft)/2-(nTamTree+3)},,3,,,,aEnch[1,1],,)
oFolderTar := TFolder():New(aPosObj[1]+2,aPosObj[2],aTitlesTar,{},aEnch[1,1],,,, .T., .T.,aPosObj[4]-aPosObj[2],aPosObj[3]-aPosObj[1])
For ni := 1 to Len(oFolderTar:aDialogs)
	DEFINE SBUTTON FROM 5000,5000 TYPE 5 ACTION Allwaystrue() ENABLE OF oFolderTar:aDialogs[ni]
Next

PMS203Vis(aHeaderSV2,aColsSV2,.F.,/*lTrava*/,/*lAltOuExc*/)

For nX := 1 To Len(aEnch[1,3])
	aEnch[1,3,nX]		:= MsNewGetDados():New(2,2,aPosObj[3]-aPosObj[1]-16,aPosObj[4]-6,0,,,,,,,,,,oFolderTar:aDialogs[nX],aHeaderSV2[nX],aColsSV2[nX])
Next
aEnch[1,1]:Hide()

aAdd(aSVAlias,"AFC")
// Posicionar AFC
AFC->(DbSetorder(1))
AFC->( MsSeek(xFilial("AF8")+AF8->AF8_PROJET+AF8->AF8_REVISA))
RegToMemory("AFC",.F.)
aEnch[5]	:=	{Nil,Nil,{Nil,Nil}}
aEnch[5,1]:=	TScrollBox():New( oPanel, 2, 0,aCoordScroll[1],aCoordScroll[2],.T.,.T.,.T.)
aEnch[5,2]:= MsMGet():New("AFC",AFC->(RecNo()),2,,,,,{0,0,((((nBottom-nTop)/2)-40)*0.4),(nRight-nLeft)/2-(nTamTree+3)},,3,,,,aEnch[5,1],,)
oFolderEDT := TFolder():New(aPosObj[1]+2,aPosObj[2],aTitlesEDT,{},aEnch[5,1],,,, .T., .T.,aPosObj[4]-aPosObj[2],aPosObj[3]-aPosObj[1])
For ni := 1 to Len(oFolderEDT:aDialogs)
	DEFINE SBUTTON FROM 5000,5000 TYPE 5 ACTION Allwaystrue() ENABLE OF oFolderEDT:aDialogs[ni]
Next
PMS201Vis(aHeaderSV1,aColsSV1,.F.)
For nX := 1 To 2
	aEnch[5,3,nX]		:= MsNewGetDados():New(2,2,aPosObj[3]-aPosObj[1]-16,aPosObj[4]-6,0,,,,,,,,,,oFolderEDT:aDialogs[nX],aHeaderSV1[nX],aColsSV1[nX])
Next
aEnch[5,1]:Hide()

aAdd(aSVAlias,"AF8")
aEnch[7]:= MsMGet():New("AF8",AF8->(RecNo()),2,,,,,{0,0,((oDLg:nBottom-oDLg:nTop)/2)-39,(nRight-nLeft)/2-nTamTree},,3,,,,oPanel,,,lOneColumn)
aEnch[7]:oBox:Align := CONTROL_ALIGN_ALLCLIENT

dbSelectArea(cArquivo)
dbGotop()
nAlias	:= Select()

oBrowse := TcBrowse():New( 23, 1,nTamTree, 70, , , , oDlg, ,,,,{|| If(PmsPlnExp(cArquivo,aExpand,@nNivelMax),  PmsAtuPlan(cRevisa,cArquivo,nNivelMax,cUsrRev,,aExpand,aConfig,,cFilhos),PmsAtuPln2(cRevisa,cArquivo,nNivelMax,cUsrRev,,aExpand,aConfig,,cFilhos,,.F.)),oBrowse:Refresh() },,oFont,,,,, .F.,cArquivo, .T.,, .F., , ,.f. )
oBrowse:bChange := {|| PMSDlgView(@oTree,@aSVAlias,@aEnch,{0,0,((oDLg:nBottom-oDLg:nTop)/2)-39,(nRight-nLeft)/2-nTamTree},@nOldEnch,@oPanel,@cArquivo,{aColsSV1,aColsSV2},{aHeaderSV1,aHeaderSV2}),Eval(bChange),oBrowse:Refresh()}
oBrowse:AddColumn( TCColumn():New( "",{ || If((cArquivo)->CTRLNIV=="-",oMenos,If((cArquivo)->CTRLNIV=="+",oMais,If((cArquivo)->CTRLNIV=="*",oAll,If((cArquivo)->CTRLNIV=="!",oCmp,Nil) )))},,,,"RIGHT" , 6, .T., .F.,,,, .T., ))
oBrowse:AddColumn( TCColumn():New( "",{ || PmsRetRes((cArquivo)->ALIAS,(cArquivo)->RECNO ) },,,, "LEFT", 15, .T., .F.,,,, .T., ))
oBrowse:Align := CONTROL_ALIGN_LEFT
For nx := 1 to Len(aCampos)
	If Substr(aCampos[nx,1],1,1)=="$"
		aAuxRet := &(Substr(aCampos[nx,1],2,Len(aCampos[nx,1])-1)+"(2)")
		oBrowse:AddColumn( TCColumn():New( aAuxRet[1], FieldWBlock( aAuxRet[2] , nAlias ),AllTrim(aAuxRet[3]),,, if(aAuxRet[5]=="N","RIGHT","LEFT"), If(aCampos[nx,8]!=Nil,aCampos[nx,8],If(aAuxRet[4]>Len(aAuxRet[1]),(aAuxRet[4]*3),(LEN(aAuxRet[1])*3))), .F., .F.,,,, .F., ) )
	ElseIf Substr(aCampos[nx,1],1,1)=="%"
//%123456789012%C%99%2%12345678901234567890123456789012345%123456789012345678901234567890123456789012345678901234567890
		oBrowse:AddColumn( TCColumn():New( Trim(Substr(aCampos[nx,1],2,12)), FieldWBlock( "FORM"+StrZero(nx,2,0) , nAlias ) ,Substr(aCampos[nx,1],22,35),,, if(Substr(aCampos[nx,1],15,1)=="N","RIGHT","LEFT"), If(Val(Substr(aCampos[nx,1],17,2))>Len(AllTrim(Substr(aCampos[nx,1],2,12))),(Val(Substr(aCampos[nx,1],17,2))*3),(Len(AllTrim(Substr(aCampos[nx,1],2,12)))*3)), .F., .F.,,,, .F., ) )
	Else
		dbSelectArea("SX3")
		dbSetOrder(2)
		If MsSeek(aCampos[nx,1])
			oBrowse:AddColumn( TCColumn():New( Trim(x3titulo()), FieldWBlock( "X"+Substr(X3_CAMPO,2,Len(X3_CAMPO)), nAlias ),AllTrim(X3_PICTURE),,, if(X3_TIPO=="N","RIGHT","LEFT"), If(aCampos[nx,8]!=Nil,aCampos[nx,8],If(X3_TAMANHO>Len(X3_TITULO),(X3_TAMANHO*5),(LEN(X3_TITULO)*5))), .F., .F.,,,, .F., ) )
		EndIf
	EndIf
Next
oBrowse:AddColumn( TCColumn():New( "",{|| " " },,,, "LEFT", 5, .T., .F.,,,, .T., ))
dbSelectArea(cArquivo)
oBrowse:Refresh()

FATPDLogUser("AUXDLGAF82")

ACTIVATE MSDIALOG oDlg ON INIT (oBrowse:Refresh())

dbSelectArea(cArquivo)
dbCloseArea()

//Deleta tabela temporária do banco de dados
If _oPMSXFUN1 <> Nil
	_oPMSXFUN1:Delete()
	_oPMSXFUN1 := Nil
Endif

RestInter()

Return lConfirma
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSDlgView³ Autor ³ Edson Maricate        ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao que monta a Tarefa no Tree do Projeto.                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSA200                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function PMSDlgView(oTree,aSVAlias,aEnch,aPos,nOldEnch,oPanel,cArquivo,aColsO,aHeaderO)

Local cAlias
Local nRecView
Local nPosAlias
Local lOneColumn:= If(aPos[4]-aPos[2]>312,.F.,.T.)
Local nX
Local nTotaPast := Len(aEnch[1,3])

If oTree == Nil
	cAlias	:= (cArquivo)->ALIAS
	nRecView	:= (cArquivo)->RECNO
Else
	cAlias	:= SubStr(oTree:GetCargo(),1,3)
	nRecView	:= Val(SubStr(oTree:GetCargo(),4,12))
EndIf
nPosAlias	:= aScan(aSVAlias,cAlias)

If nRecView <> 0
	If ValType(aEnch[nOldEnch])=="A"
		aEnch[nOldEnch,1]:Hide()
	Else
		aEnch[nOldEnch]:Hide()
	Endif
	dbSelectArea(cAlias)
	MsGoto(nRecView)
	RegToMemory(cAlias,.F.)
	Do Case
		Case cAlias == "AFA"
			SB1->(dbSetOrder(1))
			SB1->(MsSeek(xFilial()+AFA->AFA_PRODUT))
			M->AFA_TIPO	:= SB1->B1_TIPO
			M->AFA_UM	:= SB1->B1_UM
			M->AFA_SEGUM := SB1->B1_SEGUM
			M->AFA_DESCRI:= SB1->B1_DESC
		Case cAlias == "AFB"
			SX5->(dbSetOrder(1))
			SX5->(MsSeek(xFilial()+"FD"+AFB->AFB_TIPOD))
			M->AFB_DESCTP := X5DESCRI()
			M->AFB_SIMBMO := GetMv("MV_SIMB"+Alltrim(STR(AFB->AFB_MOEDA,2,0)))
		Case cAlias == "AFD"
			AF9->(dbSetOrder(1))
			AF9->(MsSeek(xFilial()+AFD->AFD_PROJET+AFD->AFD_REVISA+AFD->AFD_PREDEC)) // Verificar
			M->AFD_DESCRI := AF9->AF9_DESCRI
		Case  cAlias == "AF9"
			If AF8ComAJT(AF8->AF8_PROJET)
				AF9->(dbGoTo(nRecView))
				nTotaPast := 5
			EndIf
			MsgRun(STR0333,STR0005+"...", { || PMS203Vis(aHeaderO[2],aColsO[2],.T.)}) //"Atualizando dados da tarefa..."
		Case  cAlias == "AFC"
			MsgRun(STR0334,STR0005+"...", { || PMS201Vis(aHeaderO[1],aColsO[1],.T.)})//"Atualizando dados da EDT..."
	EndCase
	If nPosAlias > 0
		Do Case
			Case cAlias == "AF9"
				aEnch[1,1]:Refresh()
				For nX:=1 To Len(	aEnch[1,3])
					aEnch[1,3,nX]:aCols	:=	aColsO[2,nX]
					If nX <= nTotaPast
						aEnch[1,3,nx]:oBrowse:Refresh()
					EndIf
				Next
				aEnch[1,2]:EnchRefreshAll()
				aEnch[1,1]:Show()
				nOldEnch:=1
			Case cAlias == "AFA"
				aEnch[2]:EnchRefreshAll()
				aEnch[2]:Show()
				noldEnch:=2
			Case cAlias == "AFB"
				aEnch[3]:EnchRefreshAll()
				aEnch[3]:Show()
				noldEnch:=3
			Case cAlias == "AFD"
				aEnch[4]:EnchRefreshAll()
				aEnch[4]:Show()
				noldEnch:=4
			Case cAlias == "AFC"
				aEnch[5,1]:Refresh()
				For nX:=1 To Len(	aEnch[5,3])
					aEnch[5,3,nX]:aCols	:=	aColsO[1,nX]
					aEnch[5,3,nX]:oBrowse:Refresh()
				Next
				aEnch[5,2]:EnchRefreshAll()
				aEnch[5,1]:Show()
				nOldEnch:=5
			Case cAlias == "ACB"
				aEnch[6]:EnchRefreshAll()
				aEnch[6]:Show()
				noldEnch:=6
			Case cAlias == "AF8"
				aEnch[7]:EnchRefreshAll()
				aEnch[7]:Show()
				noldEnch:=7
			Case cAlias == "AFX"
				aEnch[8]:EnchRefreshAll()
				aEnch[8]:Show()
				noldEnch:=8
			Case cAlias == "AFV"
				aEnch[9]:EnchRefreshAll()
				aEnch[9]:Show()
				noldEnch:=9
		EndCase
	Else
		Do Case
			Case cAlias == "AFA"
				aAdd(aSVAlias,"AFA")
				oPanel:Hide()
				aEnch[2]:= MsMGet():New("AFA",AFA->(RecNo()),2,,,,,aPos,,3,,,,oPanel,,,lOneColumn,,,.T.)
				aEnch[2]:oBox:Align := CONTROL_ALIGN_ALLCLIENT
				oPanel:Show()
				SB1->(dbSetOrder(1))
				SB1->(MsSeek(xFilial()+AFA->AFA_PRODUT))
				M->AFA_TIPO	:= SB1->B1_TIPO
				M->AFA_UM	:= SB1->B1_UM
				M->AFA_SEGUM := SB1->B1_SEGUM
				M->AFA_DESCRI:= SB1->B1_DESC
				aEnch[2]:EnchRefreshAll()
				nOldEnch:=2
			Case cAlias == "AFB"
				aAdd(aSVAlias,"AFB")
				oPanel:Hide()
				aEnch[3]:= MsMGet():New("AFB",AFB->(RecNo()),2,,,,,aPos,,3,,,,oPanel,,,lOneColumn,,,.T.)
				aEnch[3]:oBox:Align := CONTROL_ALIGN_ALLCLIENT
				oPanel:Show()
				SX5->(dbSetOrder(1))
				SX5->(MsSeek(xFilial()+"FD"+AFB->AFB_TIPOD))
				M->AFB_DESCTP := X5DESCRI()
				M->AFB_SIMBMO := GetMv("MV_SIMB"+Alltrim(STR(AFB->AFB_MOEDA,2,0)))
				aEnch[3]:EnchRefreshAll()
				nOldEnch:=3
			Case cAlias == "AFD"
				aAdd(aSVAlias,"AFD")
				oPanel:Hide()
				aEnch[4]:= MsMGet():New("AFD",AFD->(RecNo()),2,,,,,aPos,,3,,,,oPanel,,,lOneColumn,,,.T.)
				aEnch[4]:oBox:Align := CONTROL_ALIGN_ALLCLIENT
				oPanel:Show()
				AF9->(dbSetOrder(1))
				AF9->(MsSeek(xFilial()+AFD->AFD_PROJET+AFD->AFD_REVISA+AFD->AFD_PREDEC)) // Verificar
				M->AFD_DESCRI := AF9->AF9_DESCRI
				aEnch[4]:EnchRefreshAll()
				nOldEnch:=4
			Case cAlias == "ACB"
				aAdd(aSVAlias,"ACB")
				oPanel:Hide()
				aEnch[6]:= MsMGet():New("ACB",AFD->(RecNo()),2,,,,,aPos,,3,,,,oPanel,,,lOneColumn,,,.T.)
				aEnch[6]:oBox:Align := CONTROL_ALIGN_ALLCLIENT
				oPanel:Show()
				nOldEnch:=6
			Case cAlias == "AFX"
				aAdd(aSVAlias,"AFX")
				oPanel:Hide()
				aEnch[8]:= MsMGet():New("AFX",AFX->(RecNo()),2,,,,,aPos,,3,,,,oPanel,,,lOneColumn,,,.T.)
				aEnch[8]:oBox:Align := CONTROL_ALIGN_ALLCLIENT
				oPanel:Show()
				nOldEnch:=8
			Case cAlias == "AFV"
				aAdd(aSVAlias,"AFV")
				oPanel:Hide()
				aEnch[9]:= MsMGet():New("AFV",AFV->(RecNo()),2,,,,,aPos,,3,,,,oPanel,,,lOneColumn,,,.T.)
				aEnch[9]:oBox:Align := CONTROL_ALIGN_ALLCLIENT
				oPanel:Show()
				nOldEnch:=9
		EndCase
	EndIf
EndIf

Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSPrjInf³ Autor ³ Edson Maricate         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Monta uma tela de informacao sobre a fase do projeto.         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsPrjInf()
Local oBmp
Local oDlg
Local oList
Local aListBox	:= {}
Local aArea		:= GetArea()
Local oCinza	:= LoadBitmap( GetResources(), BMP_CINZA )
Local oVerde	:= LoadBitmap( GetResources(), BMP_VERDE )
Local oVermelho	:= LoadBitmap( GetResources(), BMP_VERMELHO )
Local cFolder
Local nx

dbSelectArea("AEA")
dbSetOrder(1)
MsSeek(xFilial()+AF8->AF8_FASE)
For nx := 1 to FCount()
	If "_EVEN"$FieldName(nx)
		SX3->(dbSetOrder(2))
		SX3->(MsSeek(AllTrim(AEA->(FieldName(nx)))))
		If SXA->(MsSeek(SX3->X3_ARQUIVO+SX3->X3_FOLDER))
			cFolder := XADESCRIC()
		Else
			cFolder := ""
		EndIf
		aAdd(aListBox,{If(AEA->(FieldGet(nx))=="1",oVerde,oCinza),If(AEA->(FieldGet(nx))=="2",oVermelho,oCinza),cFolder,X3DESCRIC()})
	EndIf
Next


DEFINE MSDIALOG oDlg TITLE STR0055 OF oMainWnd PIXEL FROM 0,0 TO 400,500 //"Legenda/Fase"

@ 2,4 to 65,248 Label STR0056 PIXEL  //"Legenda"
@ 8,10 BITMAP oBmp RESNAME BMP_EDT1 SIZE 16,16 NOBORDER PIXEL
@ 8,20 SAY STR0057 of oDlg PIXEL //"EDT nao iniciada/atrasada"
@ 20,10 BITMAP oBmp RESNAME BMP_EDT2 SIZE 16,16 NOBORDER PIXEL
@ 20,20 SAY STR0058 of oDlg PIXEL //"EDT em execucao"
@ 32,10 BITMAP oBmp RESNAME BMP_EDT3 SIZE 16,16 NOBORDER PIXEL
@ 32,20 SAY STR0059 of oDlg PIXEL //"EDT nao iniciada/dentro do prazo"
@ 44,10 BITMAP oBmp RESNAME BMP_EDT4 SIZE 16,16 NOBORDER PIXEL
@ 44,20 SAY STR0060 of oDlg PIXEL //"EDT finalizada"
@ 8,130 BITMAP oBmp RESNAME BMP_TASK1 SIZE 16,16 NOBORDER PIXEL
@ 8,140 SAY STR0061 of oDlg PIXEL //"Tarefa nao iniciada/atrasada"
@ 20,130 BITMAP oBmp RESNAME BMP_TASK2 SIZE 16,16 NOBORDER PIXEL
@ 20,140 SAY STR0062 of oDlg PIXEL //"Tarefa em execucao"
@ 32,130 BITMAP oBmp RESNAME BMP_TASK4 SIZE 16,16 NOBORDER PIXEL
@ 32,140 SAY STR0063 of oDlg PIXEL //"Tarefa nao iniciada/dentro do prazo"
@ 44,130 BITMAP oBmp RESNAME BMP_TASK3 SIZE 16,16 NOBORDER PIXEL
@ 44,140 SAY STR0064 of oDlg PIXEL //"Tarefa finalizada"
@ 53,08 BITMAP oBmp RESNAME BMP_TABLE SIZE 16,16 NOBORDER PIXEL
@ 55,20 SAY "Projeto" of oDlg PIXEL //"Projeto"

@ 68,2 to 185,248 Label STR0065 PIXEL  //"Informacoes da Fase"
@ 75,8 SAY STR0066 + AEA->AEA_COD+" - "+AEA->AEA_DESCRI Of oDlg PIXEL //"Fase : "
oList := TWBrowse():New( 85,5,240,95,,{"  ","  ",STR0067,STR0068},{10,10,90,70},oDlg,,,,,,,,,,,,.F.,,.T.,,.F.,,, ) //"Processo"###"Descricao"
oList:SetArray(aListBox)
oList:bLine := {|| aListBox[oList:nAT] }
@ 190,210 BUTTON STR0006 SIZE 40 ,9   FONT oDlg:oFont ACTION {||oDlg:End()}  OF oDlg PIXEL //"Fechar"

Activate MSDIALOG oDlg CENTERED

RestArea(aArea)
Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSDlgAF1³ Autor ³ Edson Maricate         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Monta a Dialog de visualizacao do Orcamento                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PmsDlgAF1(cTitle,oMenu,oTree,cFilhos,bChange,lConfirma,aMenu,oDlg)

Local oPanel
Local aSVAlias	:= {}
Local aEnch[12]
Local nTop      := oMainWnd:nTop+35
Local nLeft     := oMainWnd:nLeft+10
Local nBottom   := oMainWnd:nBottom-12
Local nRight    := oMainWnd:nRight-10
Local nOldEnch	:= 10
Local oFont
Local aButtons	:= {}
Local nX        := 0
Local lFWGetVersao := .T.

PRIVATE bRefresh	:= {|| PMSTreeOrc(@oTree,,cFilhos,Nil,.T.),Eval(oTree:bChange)}
PRIVATE bRefreshAll	:= bRefresh //bRefreshAll - sem utilizacao

DEFAULT bChange := {|| Nil }
DEFAULT cFilhos := "AF1,AF5,AF2,AF7"// Alias que sao amarrados ao TREE

If ExistBlock("PMSAF101")
	cFilhos := ExecBlock("PMSAF101", .F., .F., {cFilhos})
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ ExecBlock para inclusao de botoes customizados       ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ExistBlock("PMSAF1BD")
	aButtons := ExecBlock("PMSAF1BD",.F.,.F.)
	For nx := 1 to Len(aButtons)
		aAdd(aMenu,{aButtons[nx,1],aButtons[nx,2],aButtons[nx,3],aButtons[nx,4]})
	Next
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Carrega as variaveis de memoria do AF1.              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
RegToMemory("AF1",.F.)
RegToMemory("AF3",.T.)
RegToMemory("AF4",.T.)
RegToMemory("AF5",.F.)
RegToMemory("AF7",.F.)
If ("ACB" $ cFilhos)
	RegToMemory("ACB",.T.)
EndIf

If "USR"$cFilhos
	RegToMemory("AJG",.T.)
	RegToMemory("AJF",.T.)
EndIf

DEFINE FONT oFont NAME "Arial" SIZE 0, -10
DEFINE MSDIALOG oDlg TITLE cTitle OF oMainWnd PIXEL FROM nTop,nLeft TO nBottom,nRight
oDlg:lMaximized := .T.

If SetMdiChild()

	For nx := 1 to Len(aMenu)
		AADD(aButtons, {aMenu[nx,3] , aMenu[nx,2], aMenu[nx,1]})
	Next
	AADD(aButtons, {BMP_INTERROGACAO, {|| HelProg()}, STR0135})
	lExibirOK := lConfirma<>Nil
	EnchoiceBar(oDlg,{|| (lConfirma:=.T.,oDlg:End()) },{|| oDlg:End()},,aButtons,,,,,.F.,lExibirOK)

Else
	oPanel := TPanel():New(0,0,'',oDlg, oDlg:oFont, .T., .T.,, ,1245,23,.T.,.T. )
	oPanel:Align := CONTROL_ALIGN_TOP
	@00,00 BITMAP oBmp1 RESNAME BMP_FAIXA_SUPERIOR SIZE 1200,50 NOBORDER PIXEL Of oPanel
	oBmp1:align:= CONTROL_ALIGN_TOP

	If !lFWGetVersao .or. GetVersao(.F.) == "P10"
		nCol := 2
		For nx := 1 to Len(aMenu)
			oBtn := TButton():New( 10, nCol,aMenu[nx,4],oPanel,aMenu[nx,2],24,12, , , ,.T.)
			oBtn:cToolTip := aMenu[nx,1]
			nCol += 24
		Next

		oBtn := TButton():New( 10, nCol,STR0069,oPanel,{|| HelProg() },24,12, , , ,.T.)
		oBtn:cToolTip := STR0135
		nCol += 24

		If lConfirma<>Nil
			// OK
			oBtn := TButton():New( 10, nCol,STR0203,oPanel,{|| (lConfirma:=.T.,oDlg:End()) },24,12, , , ,.T.)
			oBtn:cToolTip := STR0203 + " < Ctrl-O >"
			nCol += 24
		EndIf

		// Sair
		oBtn := TButton():New( 10, nCol,STR0202,oPanel,{|| oDlg:End() },24,12, , , ,.T.)
		oBtn:cToolTip := STR0202+" < Ctrl-X >"
		nCol += 24
	Else
		For nx := 1 to Len(aMenu)
			AADD(aButtons, {aMenu[nx,3] , aMenu[nx,2], aMenu[nx,1]})
		Next
		AADD(aButtons, {BMP_INTERROGACAO, {|| HelProg()}, STR0135})
		lExibirOK := lConfirma<>Nil
	    EnchoiceBar(oDlg,{|| (lConfirma:=.T.,oDlg:End()) },{|| oDlg:End()},,aButtons,,,,,.F.,lExibirOK)
	Endif
EndIf

oPanel := TPanel():New(14,152,'',oDlg,oDlg:oFont, .T., .T.,, ,(nRight-nLeft)/2-152,((oDLg:nBottom-oDLg:nTop)/2)-38,.T.,.T. )
oPanel:Align := CONTROL_ALIGN_ALLCLIENT
lOneColumn := If((nRight-nLeft)/2-178>312,.F.,.T.)

aAdd(aSVAlias,"AF2")
aEnch[1]:= MsMGet():New("AF2",AF2->(RecNo()),2,,,,,{0,0,((oDlg:nBottom-oDlg:nTop)/2)-40,(nRight-nLeft)/2-152},,3,,,,oPanel,,,lOneColumn)
aEnch[1]:Hide()

aAdd(aSVAlias,"AF5")
aEnch[5]:= MsMGet():New("AF5",AF5->(RecNo()),2,,,,,{0,0,((oDlg:nBottom-oDlg:nTop)/2)-40,(nRight-nLeft)/2-152},,3,,,,oPanel,,,lOneColumn)
aEnch[5]:Hide()

aAdd(aSVAlias,"AF1")
aEnch[10]:= MsMGet():New("AF1",AF1->(RecNo()),2,,,,,{0,0,((oDlg:nBottom-oDlg:nTop)/2)-40,(nRight-nLeft)/2-152},,3,,,,oPanel,,,lOneColumn)

oTree := dbTree():New(14, 2,((oDLg:nBottom-oDLg:nTop)/2)-25, 150, oDlg,,,.T.)
oTree:Align := CONTROL_ALIGN_LEFT
oTree:bChange := {|| PMSViewOrc(@oTree,@aSVAlias,@aEnch,{0,0,((oDlg:nBottom-oDlg:nTop)/2)-40,(nRight-nLeft)/2-152},@nOldEnch,@oPanel),Eval(bChange)}
oTree:SetFont(oFont)
oTree:lShowHint:= .F.

PMSTreeOrc(@oTree,,cFilhos,Nil,.T.)

ACTIVATE MSDIALOG oDlg

Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSViewOrc³ Autor ³ Edson Maricate        ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao que monta o a Tarefa no Tree do Orcamento.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSA100                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function PMSViewOrc(oTree,aSVAlias,aEnch,aPos,nOldEnch,oPanel)

Local cAlias	:= SubStr(oTree:GetCargo(),1,3)
Local nRecView	:= Val(SubStr(oTree:GetCargo(),4,12))
Local nPosAlias	:= aScan(aSVAlias,cAlias)
Local lOneColumn:= If(aPos[4]-aPos[2]>312,.F.,.T.)

If nRecView <> 0
	aEnch[nOldEnch]:Hide()
	dbSelectArea(cAlias)
	MsGoto(nRecView)
	RegToMemory(cAlias,.F.)
	Do Case
		Case cAlias == "AF3"
			SB1->(dbSetOrder(1))
			SB1->(MsSeek(xFilial()+AF3->AF3_PRODUT))
			M->AF3_TIPO	:= SB1->B1_TIPO
			M->AF3_UM	:= SB1->B1_UM
			M->AF3_SEGUM := SB1->B1_SEGUM
			M->AF3_DESCRI:= SB1->B1_DESC
		Case cAlias == "AF4"
			SX5->(dbSetOrder(1))
			SX5->(MsSeek(xFilial()+"FD"+AF4->AF4_TIPOD))
			M->AF4_DESCTP := X5DESCRI()
			M->AF4_SIMBMO := GetMv("MV_SIMB"+Alltrim(STR(AF4->AF4_MOEDA,2,0)))
		Case cAlias == "AF7"
			AF2->(dbSetOrder(1))
			AF2->(MsSeek(xFilial()+AF7->AF7_ORCAME+AF7->AF7_PREDEC)) // Verificar
			M->AF7_DESCRI := AF2->AF2_DESCRI
		Case cAlias == "AJ1"
			AF5->(dbSetOrder(1))
			AF5->(MsSeek(xFilial()+AJ1->AJ1_ORCAME+AJ1->AJ1_PREDEC)) // Verificar
			M->AJ1_DESCRI := AF5->AF5_DESCRI
		Case cAlias == "AJ2"
			AF2->(dbSetOrder(1))
			AF2->(MsSeek(xFilial()+AJ2->AJ2_ORCAME+AJ2->AJ2_PREDEC)) // Verificar
			M->AJ2_DESCRI := AF2->AF2_DESCRI
		Case cAlias == "AJ3"
			AF5->(dbSetOrder(1))
			AF5->(MsSeek(xFilial()+AJ3->AJ3_ORCAME+AJ3->AJ3_PREDEC)) // Verificar
			M->AJ3_DESCRI := AF5->AF5_DESCRI
	EndCase
	If nPosAlias > 0
		Do Case
			Case cAlias == "AF2"
				aEnch[1]:EnchRefreshAll()
				aEnch[1]:Show()
				nOldEnch:=1
			Case cAlias == "AF3"
				aEnch[2]:EnchRefreshAll()
				aEnch[2]:Show()
				noldEnch:=2
			Case cAlias == "AF4"
				aEnch[3]:EnchRefreshAll()
				aEnch[3]:Show()
				noldEnch:=3
			Case cAlias == "AF7"
				aEnch[4]:EnchRefreshAll()
				aEnch[4]:Show()
				noldEnch:=4
			Case cAlias == "AF5"
				aEnch[5]:EnchRefreshAll()
				aEnch[5]:Show()
				noldEnch:=5
			Case cAlias == "ACB"
				aEnch[6]:EnchRefreshAll()
				aEnch[6]:Show()
				noldEnch:=6
			Case cAlias == "AJ1"
				aEnch[7]:EnchRefreshAll()
				aEnch[7]:Show()
				noldEnch:=7
			Case cAlias == "AJ2"
				aEnch[8]:EnchRefreshAll()
				aEnch[8]:Show()
				noldEnch:=8
			Case cAlias == "AJ3"
				aEnch[9]:EnchRefreshAll()
				aEnch[9]:Show()
				noldEnch:=9
			Case cAlias == "AF1"
				aEnch[10]:EnchRefreshAll()
				aEnch[10]:Show()
				noldEnch:=10
			Case cAlias == "AJF"
				aEnch[11]:EnchRefreshAll()
				aEnch[11]:Show()
				noldEnch:=11
			Case cAlias == "AJG"
				aEnch[12]:EnchRefreshAll()
				aEnch[12]:Show()
				noldEnch:=12
		EndCase
	Else
		Do Case
			Case cAlias == "AF3"
				aAdd(aSVAlias,"AF3")
				oPanel:Hide()
				aEnch[2]:= MsMGet():New("AF3",AF3->(RecNo()),2,,,,,aPos,,3,,,,oPanel,,,lOneColumn)
				oPanel:Show()
				SB1->(dbSetOrder(1))
				SB1->(MsSeek(xFilial()+AF3->AF3_PRODUT))
				M->AF3_TIPO	:= SB1->B1_TIPO
				M->AF3_UM	:= SB1->B1_UM
				M->AF3_SEGUM := SB1->B1_SEGUM
				M->AF3_DESCRI:= SB1->B1_DESC
				aEnch[2]:EnchRefreshAll()
				nOldEnch:=2
			Case cAlias == "AF4"
				aAdd(aSVAlias,"AF4")
				oPanel:Hide()
				aEnch[3]:= MsMGet():New("AF4",AF4->(RecNo()),2,,,,,aPos,,3,,,,oPanel,,,lOneColumn)
				oPanel:Show()
				SX5->(dbSetOrder(1))
				SX5->(MsSeek(xFilial()+"FD"+AF4->AF4_TIPOD))
				M->AF4_DESCTP := X5DESCRI()
				M->AF4_SIMBMO := GetMv("MV_SIMB"+Alltrim(STR(AF4->AF4_MOEDA,2,0)))
				aEnch[3]:EnchRefreshAll()
				nOldEnch:=3
			Case cAlias == "AF7"
				aAdd(aSVAlias,"AF7")
				oPanel:Hide()
				aEnch[4]:= MsMGet():New("AF7",AF7->(RecNo()),2,,,,,aPos,,3,,,,oPanel,,,lOneColumn)
				oPanel:Show()
				AF2->(dbSetOrder(1))
				AF2->(MsSeek(xFilial()+AF7->AF7_ORCAME+AF7->AF7_PREDEC)) // Verificar
				M->AF7_DESCRI := AF2->AF2_DESCRI
				aEnch[4]:EnchRefreshAll()
				nOldEnch:=4
			Case cAlias == "ACB"
				aAdd(aSVAlias,"ACB")
				oPanel:Hide()
				aEnch[6]:= MsMGet():New("ACB",AF7->(RecNo()),2,,,,,aPos,,3,,,,oPanel,,,lOneColumn)
				oPanel:Show()
				nOldEnch:=6
			Case cAlias == "AJ1"
				aAdd(aSVAlias,"AJ1")
				oPanel:Hide()
				aEnch[7]:= MsMGet():New("AJ1",AJ1->(RecNo()),2,,,,,aPos,,3,,,,oPanel,,,lOneColumn)
				oPanel:Show()
				nOldEnch:=7
			Case cAlias == "AJ2"
				aAdd(aSVAlias,"AJ2")
				oPanel:Hide()
				aEnch[8]:= MsMGet():New("AJ2",AJ2->(RecNo()),2,,,,,aPos,,3,,,,oPanel,,,lOneColumn)
				oPanel:Show()
				nOldEnch:=8
			Case cAlias == "AJ3"
				aAdd(aSVAlias,"AJ3")
				oPanel:Hide()
				aEnch[9]:= MsMGet():New("AJ3",AJ3->(RecNo()),2,,,,,aPos,,3,,,,oPanel,,,lOneColumn)
				oPanel:Show()
				nOldEnch:=9
			Case cAlias == "AJF"
				aAdd(aSVAlias,"AJF")
				oPanel:Hide()
				aEnch[11]:= MsMGet():New("AJF",AJF->(RecNo()),2,,,,,aPos,,3,,,,oPanel,,,lOneColumn)
				oPanel:Show()
				nOldEnch:=11
			Case cAlias == "AJG"
				aAdd(aSVAlias,"AJG")
				oPanel:Hide()
				aEnch[12]:= MsMGet():New("AJG",AJF->(RecNo()),2,,,,,aPos,,3,,,,oPanel,,,lOneColumn)
				oPanel:Show()
				nOldEnch:=12
		EndCase
	EndIf
EndIf

Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsTreeOrc³ Autor ³ Edson Maricate        ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao que realiza a montagem do Tree da Estrutura do Orcamen ³±±
±±³          ³to atual.                                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³SIGAPMS                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/

Function PMSTreeOrc(oTree,aEstrutura,cFilhos,bCondicao,lReset)
Local lRet

PmsNewProc()
lRet := Processa({||AuxTreeOrc(oTree,aEstrutura,cFilhos,bCondicao,lReset)},STR0204)

Return lRet
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³AuxTreeOrc³ Autor ³ Cristiano G. da Cunha ³ Data ³ 17.04.2002 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao que monta o Tree do Orcamento por EDT                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function AuxTreeOrc(oTree,aEstrutura,cFilhos,bCondicao,lReset)

Local aArea		:= GetArea()
Local lViewCod	:= GetMV("MV_PMSVCOD")
Local cChaveAnt
Local cFilAF5		:= xFilial("AF5")

DEFAULT cFilhos 	:= "AF1,AF5,AF2,AF3,AF4,AF7"// Alias que sao amarrados ao TREE
DEFAULT lReset 		:= .T.

If lReset
	cChaveAnt := oTree:GetCargo()
	oTree:BeginUpdate()
	oTree:Reset()
	oTree:EndUpdate()
EndIf
oTree:Hide()
oTree:BeginUpdate()
oTree:TreeSeek("")
oTree:AddItem(OemToAnsi(AF1->AF1_DESCRI),"AF1"+StrZero(AF1->(RecNo()),12),BMP_TABLE_PQ,BMP_TABLE_PQ,,,1)

dbSelectArea("AF5")
dbSetOrder(3)
MsSeek(xFilial()+AF1->AF1_ORCAME+"001")
While !Eof() .And. AF5->AF5_FILIAL+AF5->AF5_ORCAME+AF5->AF5_NIVEL == ;
					cFilAF5+AF1->AF1_ORCAME+"001"
	PMSOrcTrf(@oTree,AF5->AF5_ORCAME+AF5->AF5_EDT,,cFilhos, bCondicao,, 2,lViewCod,"AF1"+StrZero(AF1->(RecNo()),12))
	dbSkip()
End

oTree:EndUpdate()
oTree:TreeSeek(cChaveAnt)
oTree:Show()

RestArea(aArea)
Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsOrcTrf³ Autor ³ Michel Dantas          ³ Data ³ 23-07-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao que monta o a Tarefa no Tree do Orcamento.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSA100                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function PMSOrcTrf(oTree,cChave,aEstrutura,cFilhos,bCondicao,nPaiMat,nNivel,lViewCod,cSeekAdd)

Local nx		:= 0
Local aArea		:= GetArea()
Local aAreaAF5	:= AF5->(GetArea())
Local aAreaAF2	:= AF2->(GetArea())
Local aAuxArea  := {}
Local aDocAF5	:= {}
Local cFilAJ2		:= xFilial("AJ2")
Local cFilAJ3		:= xFilial("AJ3")
Local cFilAF2		:= xFilial("AF2")
Local cFilAF5		:= xFilial("AF5")
Local cFilAJF		:= xFilial("AJF")

Local aNodes := {}
Local nNode  := 0

If PmsOrcUser(AF5->AF5_ORCAME,,AF5->AF5_EDT,AF5->AF5_EDTPAI,1,"ESTRUT")
	PmsIncProc(.T.,1)
	oTree:TreeSeek(cSeekAdd)
	oTree:AddItem(If(lViewCod,Alltrim(AF5->AF5_EDT)+"-","")+Alltrim(Substr(AF5->AF5_DESCRI,1,50)),"AF5"+StrZero(AF5->(RecNo()),12),BMP_EDT4,BMP_EDT4,,,2)
	cSeekAdd := "AF5"+StrZero(AF5->(RecNo()),12)
	oTree:TreeSeek(cSeekAdd)

	If "USR"$cFilhos
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Insere os usuarios do Projeto no Tree                   ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		dbSelectArea("AJF")
		dbSetOrder(1)
		MsSeek(cFilAJF+AF5->AF5_ORCAME+AF5->AF5_EDT)
		While AJF->(! Eof()) .And. AJF->AJF_FILIAL == cFilAJF .AND. AJF->AJF_ORCAME == AF5->AF5_ORCAME .AND. AJF->AJF_EDT == AF5->AF5_EDT
			oTree:AddItem(UsrRetName(AJF->AJF_USER),"AJF"+StrZero(AJF->(RecNo()),12),BMP_USER_PQ,BMP_USER_PQ,,,2)
			dbSkip()
		End
	EndIf

	If "ACB"$cFilhos

		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Insere os documentos da EDT no Tree                     ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		PMSDocTree("AF5", AF5->(RecNo()), @aDocAF5)
		For nx := 1 to Len(aDocAF5)
			ACB->(dbGoto(aDocAF5[nx]))
			oTree:AddItem(Substr(ACB->ACB_DESCRI,1,50),"ACB"+StrZero(ACB->(RecNo()),12),BMP_CLIPS_PQ,BMP_CLIPS_PQ,,,2)
		Next
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Inclui os Relacionamentos AF7                           ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If "AF7"$cFilhos
		aAuxArea := AF2->(GetArea())
		AF2->(dbSetOrder(1))
		dbSelectArea("AJ2")
		dbSetOrder(1)
		MsSeek(cFilAJ2+cChave)
		While !Eof() .And. AJ2->AJ2_FILIAL+AJ2->AJ2_ORCAME+AJ2->AJ2_EDT == cFilAJ2+cChave
			AF2->(MsSeek(xFilial()+AJ2->AJ2_ORCAME+AJ2->AJ2_PREDEC))
			oTree:AddItem(AF2->AF2_DESCRI,"AJ2"+StrZero(AJ2->(RecNo()),12),BMP_RELAC_DIREITA_PQ,BMP_RELAC_DIREITA_PQ,,,2)
			dbSelectArea("AJ2")
			dbSkip()
		EndDo
		RestArea(aAuxArea)
		aAuxArea := AF5->(GetArea())
		AF5->(dbSetOrder(1))
		dbSelectArea("AJ3")
		dbSetOrder(1)
		MsSeek(cFilAJ3+cChave)
		While !Eof() .And. AJ3->AJ3_FILIAL+AJ3->AJ3_ORCAME+AJ3->AJ3_EDT == cFilAJ3+cChave
			AF5->(MsSeek(xFilial()+AJ3->AJ3_ORCAME+AJ3->AJ3_EDT))
			oTree:AddItem(AF5->AF5_DESCRI,"AJ3"+StrZero(AJ3->(RecNo()),12),BMP_RELAC_DIREITA_PQ,BMP_RELAC_DIREITA_PQ,,,2)
			dbSelectArea("AJ3")
			dbSkip()
		EndDo
		RestArea(aAuxArea)
	EndIf
EndIf

dbSelectArea("AF2")
dbSetOrder(2)
MsSeek(cFilAF2+cChave)
While !Eof() .And. AF2->AF2_FILIAL+AF2->AF2_ORCAME+AF2->AF2_EDTPAI == cFilAF2+cChave
	If PmsOrcUser(AF2->AF2_ORCAME,AF2->AF2_ORCAME,,AF2->AF2_EDTPAI,1,"ESTRUT")
		aAdd(aNodes, {PMS_TASK,;
		              AF2->(Recno()),;
		IIf(Empty(AF2->AF2_ORDEM), "000", AF2->AF2_ORDEM),;
		              AF2->AF2_TAREFA})
	EndIf
	dbSkip()
End


dbSelectArea("AF5")
dbSetOrder(2)
MsSeek(cFilAF5+cChave)
While !Eof() .And. AF5->AF5_FILIAL+AF5->AF5_ORCAME+AF5->AF5_EDTPAI == cFilAF5+cChave
	aAdd(aNodes, {PMS_WBS,;
	              AF5->(Recno()),;
	IIf(Empty(AF5->AF5_ORDEM), "000", AF5->AF5_ORDEM),;
	              AF5->AF5_EDT})
	dbSkip()
EndDo

aSort(aNodes, , , {|x, y| x[3]+x[4] < y[3]+y[4]})

For nNode := 1 To Len(aNodes)
	If aNodes[nNode,1] = PMS_TASK
		AF2->(dbGoto(aNodes[nNode,2]))

		PMSAdd2Trf(@oTree,AF2->AF2_ORCAME+AF2->AF2_TAREFA,aEstrutura,cFilhos,bCondicao,,;
		           nNivel,lViewCod,cSeekAdd)
	Else
		AF5->(dbGoto(aNodes[nNode,2]))

		PMSOrcTrf(@oTree,AF5->AF5_ORCAME+AF5->AF5_EDT,aEstrutura,cFilhos,bCondicao,,;
		          nNivel,lViewCod,cSeekAdd)
	EndIf
Next

RestArea(aAreaAF2)
RestArea(aAreaAF5)
RestArea(aArea)
Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSAdd2Trf³ Autor ³ Michel Dantas         ³ Data ³ 23-07-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao que monta a tarefa no Tree do Orcamento.               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSXFUN                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PmsAdd2Trf(oTree,cChave,aEstrutura,cFilhos,bCondicao,nPaiEdt,nNivel,lViewCod,cSeekAdd)

Local nx
Local aDocAF2	:= {}
Local aArea		:= GetArea()
Local aAreaAF2	:= AF2->(GetArea())
Local aAreaAF3	:= AF3->(GetArea())
Local aAreaAF4	:= AF4->(GetArea())
Local aAreaAF5	:= AF5->(GetArea())
Local cFilAF3		:= xFilial("AF3")
Local cFilAF4		:= xFilial("AF4")
Local cFilAF7		:= xFilial("AF7")
Local cFilAJ1		:= xFilial("AJ1")
Local cFilAJG		:= xFilial("AJG")

PmsIncProc(.T.,1)

oTree:TreeSeek(cSeekAdd)
oTree:AddItem(If(lViewCod,AllTrim(AF2->AF2_TAREFA)+"-","")+AllTrim(Substr(AF2->AF2_DESCRI,1,50)),"AF2"+StrZero(AF2->(RecNo()),12),BMP_TASK3,BMP_TASK3,,,2)
oTree:TreeSeek("AF2"+StrZero(AF2->(RecNo()),12))

If "USR"$cFilhos
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Insere os usuarios do Projeto no Tree                   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	dbSelectArea("AJG")
	dbSetOrder(1)
	MsSeek(cFilAJG+AF2->AF2_ORCAME+AF2->AF2_TAREFA)
	While AJG->(! Eof()) .And. AJG->AJG_FILIAL == cFilAJG .AND. AJG->AJG_ORCAME == AF2->AF2_ORCAME .AND. AJG->AJG_TAREFA == AF2->AF2_TAREFA
		oTree:AddItem(UsrRetName(AJG->AJG_USER),"AJG"+StrZero(AJG->(RecNo()),12),BMP_USER_PQ,BMP_USER_PQ,,,2)
		dbSkip()
	End
EndIf

If "ACB"$cFilhos
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Insere os documentos da Tarefa no Tree                  ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	PMSDocTree("AF2", AF2->(RecNo()), @aDocAF2)
	For nx := 1 to Len(aDocAF2)
		ACB->(dbGoto(aDocAF2[nx]))
		oTree:AddItem(Substr(ACB->ACB_DESCRI,1,50),"ACB"+StrZero(ACB->(RecNo()),12),BMP_CLIPS_PQ,BMP_CLIPS_PQ,,,2)
	Next
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Inclui os produtos da tarefa AF3                        ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If "AF3"$cFilhos
	SB1->(dbSetOrder(1))
	dbSelectArea("AF3")
	dbSetOrder(1)
	MsSeek(xFilial()+cChave)
	While !Eof() .And. AF3->AF3_FILIAL+AF3->AF3_ORCAME+AF3->AF3_TAREFA == ;
						cFilAF3+cChave
		SB1->(MsSeek(xFilial()+AF3->AF3_PRODUT))
		oTree:AddItem(SB1->B1_DESC,"AF3"+StrZero(AF3->(RecNo()),12),BMP_MATERIAL,BMP_MATERIAL,,,2)
		dbSkip()
	End
EndIf
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Inclui as despesas da tarefa AF4                        ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If "AF4"$cFilhos
	dbSelectArea("AF4")
	dbSetOrder(1)
	MsSeek(xFilial()+cChave)
	While !Eof() .And. AF4->AF4_FILIAL+AF4->AF4_ORCAME+AF4->AF4_TAREFA == ;
						cFilAF4+cChave
		oTree:AddItem(AF4->AF4_DESCRI,"AF4"+StrZero(AFB->(RecNo()),12),BMP_BUDGET,BMP_BUDGET,,,2)
		dbSkip()
	End
Endif
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Inclui os Relacionamentos AF7                           ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If "AF7"$cFilhos
	aAuxArea := AF2->(GetArea())
	AF2->(dbSetOrder(1))
	dbSelectArea("AF7")
	dbSetOrder(1)
	MsSeek(xFilial()+cChave)
	While !Eof() .And. AF7->AF7_FILIAL+AF7->AF7_ORCAME+AF7->AF7_TAREFA == ;
						cFilAF7+cChave
		AF2->(MsSeek(xFilial()+AF7->AF7_ORCAME+AF7->AF7_PREDEC))
		oTree:AddItem(AF2->AF2_DESCRI,"AF7"+StrZero(AF7->(RecNo()),12),BMP_RELAC_DIREITA_PQ,BMP_RELAC_DIREITA_PQ,,,2)
		dbSelectArea("AF7")
		dbSkip()
	EndDo
	RestArea(aAuxArea)
	aAuxArea := AF5->(GetArea())
	AF5->(dbSetOrder(1))
	dbSelectArea("AJ1")
	dbSetOrder(1)
	MsSeek(xFilial()+cChave)
	While !Eof() .And. AJ1->AJ1_FILIAL+AJ1->AJ1_ORCAME+AJ1->AJ1_TAREFA == ;
						cFilAJ1+cChave
		AF5->(MsSeek(xFilial()+AJ1->AJ1_ORCAME+AJ1->AJ1_PREDEC))
		oTree:AddItem(AF5->AF5_DESCRI,"AJ1"+StrZero(AJ1->(RecNo()),12),BMP_RELAC_DIREITA_PQ,BMP_RELAC_DIREITA_PQ,,,2)
		dbSelectArea("AJ1")
		dbSkip()
	EndDo
	RestArea(aAuxArea)
EndIf

RestArea(aAreaAF2)
RestArea(aAreaAF3)
RestArea(aAreaAF4)
RestArea(aAreaAF5)
RestArea(aArea)
Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSOrcInf³ Autor ³ Edson Maricate         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Monta uma tela de informacao sobre a fase do Orcamento        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PmsOrcInf(oTree)
Local oBmp
Local oDlg
Local oList
Local aListBox	:= {}
Local aArea		:= GetArea()
Local oCinza	:= LoadBitmap( GetResources(), BMP_CINZA )
Local oVerde	:= LoadBitmap( GetResources(), BMP_VERDE )
Local oVermelho	:= LoadBitmap( GetResources(), BMP_VERMELHO )
Local cFolder
Local nx

dbSelectArea("AE9")
dbSetOrder(1)
MsSeek(xFilial()+AF1->AF1_FASE)
For nx := 1 to FCount()
	If "_EVEN"$FieldName(nx)
		SX3->(dbSetOrder(2))
		SX3->(MsSeek(AllTrim(AE9->(FieldName(nx)))))
		If SXA->(MsSeek(SX3->X3_ARQUIVO+SX3->X3_FOLDER))
			cFolder := XADESCRIC()
		Else
			cFolder := ""
		EndIf
		aAdd(aListBox,{If(AE9->(FieldGet(nx))=="1",oVerde,oCinza),If(AE9->(FieldGet(nx))=="2",oVermelho,oCinza),cFolder,X3DESCRIC()})
	EndIf
Next

DEFINE MSDIALOG oDlg TITLE STR0055 OF oMainWnd PIXEL FROM 0,0 TO 400,500 //"Legenda/Fase"
@ 2,4 to 60,248 Label STR0056 PIXEL  //"Legenda"
@ 8,10 BITMAP oBmp RESNAME BMP_EDT4 SIZE 16,16 NOBORDER PIXEL
@ 8,20 SAY STR0071 of oDlg PIXEL //"EDT - Estrutura de decomposicao do trabalho"
@ 20,10 BITMAP oBmp RESNAME BMP_TASK3 SIZE 16,16 NOBORDER PIXEL
@ 20,20 SAY STR0072 of oDlg PIXEL //"Tarefa do orcamento"
@ 32,10 BITMAP oBmp RESNAME BMP_CLIPS_PQ SIZE 16,16 NOBORDER PIXEL
@ 32,20 SAY STR0073 of oDlg PIXEL //"Documento - Banco de conhecimentos"
@ 44,05 BITMAP oBmp RESNAME BMP_MATERIAL SIZE 16,16 NOBORDER PIXEL
@ 44,20 SAY STR0074 of oDlg PIXEL //"Produto / Servico"
@ 8,150 BITMAP oBmp RESNAME BMP_RELAC_DIREITA_PQ SIZE 16,16 NOBORDER PIXEL
@ 8,160 SAY STR0075 of oDlg PIXEL //"Relacionamento"
@ 20,145 BITMAP oBmp RESNAME BMP_TABLE SIZE 16,16 NOBORDER PIXEL
@ 20,160 SAY STR0286 of oDlg PIXEL  //"Orcamento"

@ 68,2 to 185,248 Label STR0065 PIXEL  //"Informacoes da Fase"
@ 75,8 SAY STR0066 + AE9->AE9_COD+" - "+AE9->AE9_DESCRI Of oDlg PIXEL //"Fase : "
oList := TWBrowse():New( 85,5,240,95,,{"  ","  ",STR0067,STR0068},{10,10,90,70},oDlg,,,,,,,,,,,,.F.,,.T.,,.F.,,, ) //"Processo"###"Descricao"
oList:SetArray(aListBox)
oList:bLine := {|| aListBox[oList:nAT] }
@ 190,210 BUTTON STR0006 SIZE 40 ,9   FONT oDlg:oFont ACTION {||oDlg:End()}  OF oDlg PIXEL //"Fechar"

Activate MSDIALOG oDlg CENTERED

RestArea(aArea)
Return
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PMSR130   ºAutor  ³Michel Dantas       º Data ³  26/04/01   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Quebra de campos memos                                      º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP5                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function QuebraMemo(cMemo,nTamanho)  // String , Tamanho a ser quebrado

Local aMemo := {}, nMemo

For nMemo := 1 To MlCount(cMemo, nTamanho)
   Aadd(aMemo, Memoline(cMemo, nTamanho, nMemo))
Next
Return aMemo
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³MaViewOP³ Autor ³ Edson Maricate          ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Chama o programa de visualizacao de uma OP.                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function MaViewOP(cNumOP, cFilOri)

Local aArea	:= GetArea()
Local aAreaSC2	:= SC2->(GetArea())

SC2->(dbSetOrder(1))
If SC2->(MsSeek(cFilOri+cNumOP))
	MATA650(,2)
EndIf
RestArea(aAreaSC2)
RestArea(aArea)
Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³MaChkAE9³ Autor ³ Edson Maricate          ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Verifica a existencias das fases default do Orcamento.        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsChkAE9()
Local aArea	 := GetArea()
Local aFases
Local nY     := 0
Local nX      := 0
Local cFilAE9	:= xFilial("AE9")

dbSelectArea("AE9")
dbSetOrder(1)
If !MsSeek(xFilial()+"01")
	aFases :=	{{"01",STR0076,"2",; //"ORC. ATUALIZACAO"
				{{"11","1"},{"12","1"},{"13","1"},{"14","1"},{"15","1"},{"16","1"},;
				{"17","1"},{"18","1"},{"19","1"},{"27","1"},{"28","1"},{"29","1"},;
				{"30","1"},{"31","1"},{"32","1"},{"33","1"},{"34","1"},{"35","1"},;
				{"41","1"},{"42","1"},{"43","2"}},STR0077},; //"43=Este orcamento se encontra em fase de atualizacao e nao podera gerar projeto."
				{"02",STR0078,"4",; //"ORC. APROVADO"
				{{"11","2"},{"12","2"},{"13","2"},{"14","2"},{"15","2"},{"16","2"},;
				{"17","2"},{"18","2"},{"19","2"},{"27","2"},{"28","2"},{"29","2"},;
				{"30","2"},{"31","2"},{"32","2"},{"33","2"},{"34","2"},{"35","2"},;
				{"41","1"},{"42","1"},{"43","1"}},STR0079},;  //"**=Este orcamento ja foi aprovado, esta aguardando a geracao do projeto e nao podera ser mais alterado. Verifique a fase atual do orcamento."
				{"03",STR0080,"1",; //"ORC. REJEITADO"
				{{"11","2"},{"12","2"},{"13","2"},{"14","2"},{"15","2"},{"16","2"},;
				{"17","2"},{"18","2"},{"19","2"},{"27","2"},{"28","2"},{"29","2"},;
				{"30","2"},{"31","2"},{"32","2"},{"33","2"},{"34","2"},{"35","2"},;
				{"41","2"},{"42","2"},{"43","2"}},STR0118},;  //"**=Este orcamento foi rejeitado e nao podera ser mais alterado. Verifique a fase atual do orcamento."
				{"04",STR0081,"3",; //"ORC. EM PROJETO"
				{{"11","2"},{"12","2"},{"13","2"},{"14","2"},{"15","2"},{"16","2"},;
				{"17","2"},{"18","2"},{"19","2"},{"27","2"},{"28","2"},{"29","2"},;
				{"30","2"},{"31","2"},{"32","2"},{"33","2"},{"34","2"},{"35","2"},;
				{"41","2"},{"42","2"},{"43","2"}},STR0082}} //"**=Este orcamento ja gerou um projeto para execucao e nao podera mais ser alterado."

	For ny := 1 to Len(aFases)
		RecLock("AE9",.T.)
		AE9->AE9_FILIAL := cFilAE9
		AE9->AE9_COD		:= aFases[ny,1]
		AE9->AE9_DESCRI		:= aFases[ny,2]
		AE9->AE9_CORBRW		:= aFases[ny,3]
		AE9->AE9_MSG1		:= aFases[ny,5]
		For nx	:= 1 to Len(aFases[ny,4])
			FieldPut(ColumnPos("AE9_EVEN"+aFases[ny,4,nx,1]),aFases[ny,4,nx,2])
		Next
		MsUnlock()
	Next
EndIf
RestArea(aArea)
Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³MaChkAEA³ Autor ³ Edson Maricate          ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Verifica a existencias das fases default do Orcamento.        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsChkAEA()
Local aFases := {}
Local aArea  := GetArea()
Local nY     := 0
Local nX     := 0
Local cFilAEA	:= xFilial("AEA")

dbSelectArea("AEA")
dbSetOrder(1)
If !dbSeek(cFilAEA+"01")
	aAdd(aFases,{"01",STR0083,"2",; //"PROJETO EM ATUALIZACAO"
				{{"11","1"},{"12","1"},{"13","1"},{"14","1"},{"15","1"},{"16","1"},;
				{"17","1"},{"18","1"},{"19","1"},{"20","1"},{"21","1"},{"22","1"},{"23","1"},{"24","1"},{"25","1"},{"26","1"},{"27","1"},{"28","1"},{"29","1"},;
				{"30","1"},{"31","1"},{"32","1"},{"33","1"},{"34","1"},{"35","1"},;
				{"36","1"},{"50","2"},{"51","2"},{"52","2"},{"53","2"},{"54","2"},;
				{"55","2"},{"61","1"},{"62","2"},{"71","1"},{"72","1"},{"81","2"},;
				{"82","2"},{"83","2"},{"84","2"},{"85","2"},{"86","2"},{"87","2"},;
				{"88","2"},{"89","2"},{"91","2"},{"92","2"},{"93","2"},{"94","2"},;
				{"95","2"},{"96","2"},{"97","2"}},STR0084}) //"**=Opcao invalida nesta fase do projeto.;"
	aAdd(aFases,{"02",STR0085,"4",; //"APROVADO EM PLANEJAMENTO"
				{{"11","2"},{"12","2"},{"13","2"},{"14","2"},{"15","2"},{"16","2"},;
				{"17","2"},{"18","2"},{"19","2"},{"20","2"},{"21","2"},{"22","2"},{"23","2"},{"24","2"},{"25","2"},{"26","2"},{"27","2"},{"28","2"},{"29","2"},;
				{"30","2"},{"31","2"},{"32","2"},{"33","2"},{"34","2"},{"35","2"},;
				{"36","1"},{"50","1"},{"51","1"},{"52","1"},{"53","1"},{"54","1"},;
				{"55","1"},{"61","1"},{"62","1"},{"71","1"},{"72","1"},{"81","2"},;
				{"82","2"},{"83","2"},{"84","2"},{"85","2"},{"86","2"},{"87","2"},;
				{"88","2"},{"89","2"},{"91","2"},{"92","2"},{"93","2"},{"94","2"},;
				{"95","2"},{"96","2"},{"97","2"}},STR0086}) //"**=Este projeto esta em fase de planejamento e nao podera ser alterado. Verifique a fase atual do projeto.;"
	aAdd(aFases,{"03",STR0087,"5",; //"APROVADO EM EXECUCAO"
				{{"11","2"},{"12","2"},{"13","2"},{"14","2"},{"15","2"},{"16","2"},;
				{"17","2"},{"18","2"},{"19","2"},{"20","2"},{"21","2"},{"22","2"},{"23","2"},{"24","2"},{"25","2"},{"26","2"},{"27","2"},{"28","2"},{"29","2"},;
				{"30","2"},{"31","2"},{"32","2"},{"33","2"},{"34","2"},{"35","2"},;
				{"36","1"},{"50","2"},{"51","2"},{"52","2"},{"53","2"},{"54","2"},;
				{"55","2"},{"61","1"},{"62","1"},{"71","1"},{"72","1"},{"81","1"},;
				{"82","1"},{"83","1"},{"84","1"},{"85","1"},{"86","1"},{"87","1"},;
				{"88","1"},{"89","1"},{"91","1"},{"92","1"},{"93","1"},{"94","1"},;
				{"95","1"},{"96","1"},{"97","2"}},STR0088}) //"**=Operacao invalida. Este projeto ja se encontra em execucao. Verifique a fase atual do projeto.;"
	aAdd(aFases,{"04",STR0089,"1",; //"PROJETO FINALIZADO EXECUTADO"
				{{"11","2"},{"12","2"},{"13","2"},{"14","2"},{"15","2"},{"16","2"},;
				{"17","2"},{"18","2"},{"19","2"},{"20","2"},{"21","2"},{"22","2"},{"23","2"},{"24","2"},{"25","2"},{"26","2"},{"27","2"},{"28","2"},{"29","2"},;
				{"30","2"},{"31","2"},{"32","2"},{"33","2"},{"34","2"},{"35","2"},;
				{"36","1"},{"50","2"},{"51","2"},{"52","2"},{"53","2"},{"54","2"},;
				{"55","2"},{"61","2"},{"62","2"},{"71","2"},{"72","2"},{"81","2"},;
				{"82","2"},{"83","2"},{"84","2"},{"85","2"},{"86","2"},{"87","2"},;
				{"88","2"},{"89","2"},{"91","2"},{"92","2"},{"93","2"},{"94","2"},;
				{"95","2"},{"96","2"},{"97","1"}},STR0090}) //"**=Este projeto ja foi finalizado e nao podera ser mais alterado.Verifique a fase atual do projeto.;"
	aAdd(aFases,{"05",STR0091,"1",; //"PROJETO AGUARD. LIBERACAO"
				{{"11","2"},{"12","2"},{"13","2"},{"14","2"},{"15","2"},{"16","2"},;
				{"17","2"},{"18","2"},{"19","2"},{"20","2"},{"21","2"},{"22","2"},{"23","2"},{"24","2"},{"25","2"},{"26","2"},{"27","2"},{"28","2"},{"29","2"},;
				{"30","2"},{"31","2"},{"32","2"},{"33","2"},{"34","2"},{"35","2"},;
				{"36","1"},{"50","2"},{"51","2"},{"52","2"},{"53","2"},{"54","2"},;
				{"55","2"},{"61","2"},{"62","2"},{"71","2"},{"72","2"},{"81","2"},;
				{"82","2"},{"83","2"},{"84","2"},{"85","2"},{"86","2"},{"88","2"},;
				{"89","2"},{"87","2"},{"91","2"},{"92","2"},{"93","2"},{"94","2"},;
				{"95","2"},{"96","2"},{"97","2"}},STR0092}) //"**=Este projeto esta aguardando liberacao e nao podera ser alterado nesta momento. Verifique a fase atual do projeto.;"

	For ny := 1 to Len(aFases)
		RecLock("AEA",.T.)
		AEA->AEA_FILIAL := cFilAEA
		AEA->AEA_COD    := aFases[ny,1]
		AEA->AEA_DESCRI := aFases[ny,2]
		AEA->AEA_CORBRW := aFases[ny,3]
		AEA->AEA_MSG1   := aFases[ny,5]

		For nx := 1 to Len(aFases[ny,4])
			FieldPut(ColumnPos("AEA_EVEN"+aFases[ny,4,nx,1]),aFases[ny,4,nx,2])
		Next
		MsUnlock()
	Next
EndIf
RestArea(aArea)
Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsDlgPlan³ Autor ³ Edson Maricate        ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Monta uma janela contendo uma planilha de informacoes.        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsDlgPlan(aArray,aTitle,aColX,aColVlr,aCombo1,aCombo2)

Local oBold
Local oDlg
Local oListBox
Local nNivel	:= 1

DEFINE FONT oBold NAME "Arial" SIZE 0, -13 BOLD
DEFINE MSDIALOG oDlg FROM 88 ,22  TO 450,519 TITLE STR0136 Of oMainWnd PIXEL //"Teste"
oListBox := TWBrowse():New( 17,1,248,120,,aCabec,,oDlg,,,,,,,,,,,,.F.,,.T.,,.F.,,,)
MontaView(@oListBox,aArray,aColVlr,nNivel)

ACTIVATE MSDIALOG oDlg CENTERED ON INIT EnchoiceBar(oDlg,{|| },{|| })

Return

Function MontaView(oListBox,aArray,nColVlr,nNivel)

Local aView	:= {}
Local nx

For nx := 1 to Len(aArray)
	nPos := aScan(aView,{|x| x[1]==aArray[nx,nNivel]})
	If nPos > 0
		aView[nPos,2] += aArray[nx,nColVlr]
	Else
		aAdd(aView,{aArray[nx,nNivel],aArray[nx,nColVlr]})
	EndIf
Next

For nx := 1 to Len(aView)
	aView[nx,2] := Transform(aView[nx,2],"@E 999,999,999.99")
Next

If !Empty(aView)
	oListBox:SetArray(aView)
	oListBox:bLine := { || aView[oListBox:nAT]}
	oListBox:refresh()
EndIf
Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsAF8Calc³ Autor ³ Edson Maricate        ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Efetua o calculo das datas Previstas para execucao da tarefa  ³±±
±±³          ³de acordo com o metodo de calculo escolhido.                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsAF8Calc(nRecAF8,nMetodo,dData,lProcessa,cRevisa,oTree,cArquivo,cRecDe,cRecAte,cEquipDe,cEquipAte,lReprParc,lFixNaoIni,cHoraI)

Local aArea		:= GetArea()
Local aAreaAF9	:= AF9->(GetArea())
Local aAreaAF8	:= AF8->(GetArea())
Local aAreaAJ4	:= AJ4->(GetArea())
Local cAlias	:= ""
Local nRecAlias	:= 0
Local aTsk		:= {}
Local aAllEDT 	:= {}
Local aAllTRF 	:= {}
Local nx			:= 0
Local aTskRestri	:= {}
Local cFilAFD		:= xFilial("AFD")

DEFAULT lReprParc	:= .F.
DEFAULT lProcessa	:= .F.
DEFAULT cRevisa	  	:= ""
DEFAULT lFixNaoIni  := .F.
DEFAULT cHoraI	:= "00:00"

dbSelectArea("AF8")
MsGoto(nRecAF8)

cRevisa := AF8->AF8_REVISA

If oTree!= Nil
	cAlias	:= SubStr(oTree:GetCargo(),1,3)
	nRecAlias	:= Val(SubStr(oTree:GetCargo(),4,12))
ElseIf cArquivo <> Nil
	cAlias := (cArquivo)->ALIAS
	nRecAlias := (cArquivo)->RECNO
Else
	cAlias := "AF8"
	nRecAlias := nRecAF8
EndIf

If cAlias == "AF8"
	dbSelectArea("AF8")
	dbGoto(nRecAlias)
	dbSelectArea("AFC")
	dbSetOrder(1)
	dbSeek(xFilial()+AF8->AF8_PROJET+AF8->AF8_REVISA+Padr(AF8->AF8_PROJET,Len(AFC->AFC_EDT)))
	PmsLoadTsk(AFC->AFC_PROJET+AFC->AFC_REVISA+AFC->AFC_EDT,aTsk,,cRecDe,cRecAte,cEquipDe,cEquipAte,"( Empty(AF9->AF9_DTATUI).Or. "+If(lReprParc,".T.",".F.")+") .And. AF9->AF9_PRIORI < 1000 .And. Empty(AF9->AF9_DTATUF)")
ElseIf cAlias == "AFC"
	dbSelectArea("AFC")
	dbGoto(nRecAlias)
	PmsLoadTsk(AFC->AFC_PROJET+AFC->AFC_REVISA+AFC->AFC_EDT,aTsk,,cRecDe,cRecAte,cEquipDe,cEquipAte,"( Empty(AF9->AF9_DTATUI).Or. "+If(lReprParc,".T.",".F.")+") .And. AF9->AF9_PRIORI < 1000 .And. Empty(AF9->AF9_DTATUF)")
ElseIf cAlias == "AF9"
	dbSelectArea("AF9")
	dbGoto(nRecAlias)
	PmsLoadTsk(AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA,aTsk,.T.,cRecDe,cRecAte,cEquipDe,cEquipAte,"( Empty(AF9->AF9_DTATUI).Or. "+If(lReprParc,".T.",".F.")+") .And. AF9->AF9_PRIORI < 1000 .And. Empty(AF9->AF9_DTATUF)")
Endif

If lProcessa
	ProcRegua(Len(aTsk) * 2)
EndIf

// calcula as datas previstas pelo inicio do projeto
If nMetodo == 1
	AFD->(dbSetOrder(1)) //AFD_FILIAL+AFD_PROJET+AFD_REVISA+AFD_TAREFA+AFD_ITEM
	AF9->(dbSetOrder(1))
	For nx := 1 to Len(aTsk)
		If lProcessa
			IncProc(STR0240)//"Recalculando datas do projeto..."
		EndIf
		AF9->(dbGoto(aTsk[nx]))
		dbSelectArea("AFD")
		If !MsSeek(cFilAFD+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA)
			If ( Empty(AF9->AF9_DTATUI).Or. lReprParc ) .And. AF9->AF9_PRIORI < 1000 .And. Empty(AF9->AF9_DTATUF) .And. !(lFixNaoIni .AND. AF9->AF9_START > dData)
				If !Empty(AF9->AF9_DTATUI) .AND. lReprParc 	//Verifica se nao foi escolhido Fixar datas previstas das tarefas em execucao,
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³Faz o Tratamento das tarefas que ja iniciaram.³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					aAuxRet := PMSCalcRe(AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_TAREFA,dData)
    	     	Else
					aAuxRet := PMSDTaskF(dData,"00:00",AF9->AF9_CALEND,AF9->AF9_HDURAC,AF9->AF9_PROJET,Nil)
	   			Endif
		   		RecLock("AF9",.F.)
				AF9->AF9_START	:= aAuxRet[1]
				AF9->AF9_HORAI	:= aAuxRet[2]
				AF9->AF9_FINISH	:= aAuxRet[3]
				AF9->AF9_HORAF	:= aAuxRet[4]


	   			If AF9->AF9_RESTRICAO == "8" // mais tarde possivel
					aAdd(aTskRestri, {nX , AF9->AF9_RESTRICAO })
		   		Elseif AF9->AF9_RESTRICAO <> "7" // qualquer outra restricao faremos agora o recalculo
			   		aAuxRet := PMSCalRest( AF9->AF9_RESTRICAO , AF9->AF9_DTREST, AF9->AF9_HRREST ,aAuxRet,AF9->AF9_CALEND,AF9->AF9_HDURAC,AF9->AF9_PROJET, .T.)
					AF9->AF9_START	:= aAuxRet[1]
					AF9->AF9_HORAI	:= aAuxRet[2]
					AF9->AF9_FINISH	:= aAuxRet[3]
					AF9->AF9_HORAF	:= aAuxRet[4]
			   	Endif
				MsUnlock()
				If !(PMSVldRes(aAuxRet, , .T. ))
					Return
				Endif
				PmsAtuNec(AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_TAREFA)
				dbSelectArea("AF9")
				If aScan(aAllEDT,AF9->AF9_EDTPAI) <= 0
					aAdd(aAllEDT,AF9->AF9_EDTPAI)
				EndIf
				If aScan(aAllTRF,AF9->AF9_TAREFA) <= 0
					aAdd(aAllTRF,AF9->AF9_TAREFA)
				EndIf
			EndIf
		EndIf
	//	atualiza das EDT's
	Next nx
	For nx := 1 to Len(aTsk)
		If lProcessa
			IncProc(STR0240)//"Recalculando datas do projeto..."
		EndIf
		AF9->(dbGoto(aTsk[nx]))

		If aScan(aAllTRF,AF9->AF9_TAREFA) <= 0
			dbSelectArea("AFD")
			dbSetOrder(1) //AFD_FILIAL+AFD_PROJET+AFD_REVISA+AFD_TAREFA+AFD_ITEM
			lSeek1 := MsSeek(cFilAFD+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA)
			dbSelectArea("AFD")
			dbSetOrder(2) //AFD_FILIAL+AFD_PROJET+AFD_REVISA+AFD_PREDEC+AFD_ITEM
			lSeek2 := MsSeek(cFilAFD+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA)
			If lSeek1 // se a tarefa depende de outra (se tem predecessora)
				If AF9->AF9_START < dData
					If ( Empty(AF9->AF9_DTATUI).Or. lReprParc ) .And. AF9->AF9_PRIORI < 1000 .And. Empty(AF9->AF9_DTATUF)

						If !Empty(AF9->AF9_DTATUI) .AND. lReprParc 	//Verifica se nao foi escolhido Fixar datas previstas das tarefas em execucao,
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³Faz o Tratamento das tarefas que ja iniciaram.³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							aAuxRet := PMSCalcRe(AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_TAREFA,dData)
		         	Else
							aAuxRet := PMSDTaskF(dData,"00:00",AF9->AF9_CALEND,AF9->AF9_HDURAC,AF9->AF9_PROJET,Nil)
		   			Endif

						RecLock("AF9",.F.)
						AF9->AF9_START	:= aAuxRet[1]
						AF9->AF9_HORAI	:= aAuxRet[2]
						AF9->AF9_FINISH	:= aAuxRet[3]
						AF9->AF9_HORAF	:= aAuxRet[4]

			   			If AF9->AF9_RESTRICAO == "8" // mais tarde possivel
							aAdd(aTskRestri, {nX , AF9->AF9_RESTRICAO })

				   		Elseif AF9->AF9_RESTRICAO <> "7" // qualquer outra restricao faremos agora o recalculo
					   		aAuxRet := PMSCalRest( AF9->AF9_RESTRICAO , AF9->AF9_DTREST, AF9->AF9_HRREST ,aAuxRet,AF9->AF9_CALEND,AF9->AF9_HDURAC,AF9->AF9_PROJET, .T.)
							RecLock("AF9",.F.)
								AF9->AF9_START	:= aAuxRet[1]
								AF9->AF9_HORAI	:= aAuxRet[2]
								AF9->AF9_FINISH	:= aAuxRet[3]
								AF9->AF9_HORAF	:= aAuxRet[4]
						Endif

						If !(PMSVldRes(aAuxRet, , .T. ))
							Return
						Endif
						PmsAtuNec(AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_TAREFA)
						dbSelectArea("AF9")
						If aScan(aAllEDT,AF9->AF9_EDTPAI) <= 0
							aAdd(aAllEDT,AF9->AF9_EDTPAI)
						EndIf
						aAdd(aAllTRF,AF9->AF9_TAREFA)
					EndIf
				EndIf
			Endif
			If lSeek2 // se a tarefa tem sucessora (se alguma outra tarefa/predecessora é amarrada a esta)
				PmsAtuSuces(aTsk,lReprParc,nMetodo)
				aAdd(aAllTRF,AF9->AF9_TAREFA)
			EndIf
		Endif
	Next nx
	aSort( aTskRestri , , , { |x,y| x[2] < y[2]  }) // ordena por codigo de restrição (deixar o "mais tarde possivel por ultimo)

	AF9->(MsUnlockAll())
	If lProcessa
		ProcRegua(Len(aAllEDT))
	EndIf
	For nX := 1 to Len(aAllEDT)
		If lProcessa
			IncProc(STR0239)//"Atualizando datas da estrutura..."
		EndIf
		PmsAtuEDT(AF8->AF8_PROJET, cRevisa, aAllEDT[nX], , , , , .T.)
	Next nX

	For nx := 1 to len(aTskRestri)
		dbSelectArea("AF9")
		AF9->(dbGoto(aTsk[ aTskRestri[nx,1] ]))
   		If aTskRestri[nx,2] == "8"
			PA203Tarde(AF9->AF9_PROJET, AF9->AF9_REVISA, AF9->AF9_TAREFA, .F.)
	   	Endif
	Next nx
Else
	AFD->(dbSetOrder(1))
	AF9->(dbSetOrder(1))
	For nx := 1 to Len(aTsk)
		If lProcessa
			IncProc(STR0240)//"Recalculando datas do projeto..."
		EndIf
		AF9->(dbGoto(aTsk[nx]))
		dbSelectArea("AFD")
		dbSetOrder(1)
		lSeek1 := MsSeek(xFilial()+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA)
		dbSelectArea("AFD")
		dbSetOrder(2)
		lSeek2 := MsSeek(xFilial()+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA)
		If (lSeek1 .And. !lSeek2) .Or.(!lSeek1 .And. !lSeek2)
			If (Empty(AF9->AF9_DTATUI).Or. lReprParc ) .And. AF9->AF9_PRIORI < 1000 .And. Empty(AF9->AF9_DTATUF)
				aAuxRet := PMSDTaskI(dData,"24:00",AF9->AF9_CALEND,AF9->AF9_HDURAC,AF9->AF9_PROJET,Nil)
				RecLock("AF9",.F.)
				AF9->AF9_START	:= aAuxRet[1]
				AF9->AF9_HORAI	:= aAuxRet[2]
				AF9->AF9_FINISH	:= aAuxRet[3]
				AF9->AF9_HORAF	:= aAuxRet[4]
				MsUnlock()
				PmsAtuNec(AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_TAREFA)
				dbSelectArea("AF9")
				If aScan(aAllEDT,AF9->AF9_EDTPAI) <= 0
					aAdd(aAllEDT,AF9->AF9_EDTPAI)
				EndIf
				PmsAtuNec(AF9_PROJET,AF9_REVISA,AF9_TAREFA)
				//PmsAtuScsI(AF9_PROJET,AF9_REVISA,AF9_TAREFA,.F., nMetodo, aRecsAF9, aAllEDT,lReprParc)
			EndIf
		EndIf
	Next nx

	AF9->(dbSetOrder(1))
	For nx := 1 to Len(aTsk)
		If lProcessa
			IncProc(STR0240)//"Recalculando datas do projeto..."
		EndIf
		AF9->(dbGoto(aTsk[nx]))
		dbSelectArea("AFD")
		dbSetOrder(1)
		lSeek1 := MsSeek(cFilAFD+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA)
		dbSelectArea("AFD")
		dbSetOrder(2)
		lSeek2 := MsSeek(cFilAFD+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA)
		If lSeek1 .Or. lSeek2
			If AF9->AF9_FINISH < dData
				If ( Empty(AF9->AF9_DTATUI).Or. lReprParc ) .And. AF9->AF9_PRIORI < 1000 .And. Empty(AF9->AF9_DTATUF)
					aAuxRet := PMSDTaskI(dData,"24:00",AF9->AF9_CALEND,AF9->AF9_HDURAC,AF9->AF9_PROJET,Nil)
					RecLock("AF9",.F.)
					AF9->AF9_START	:= aAuxRet[1]
					AF9->AF9_HORAI	:= aAuxRet[2]
					AF9->AF9_FINISH	:= aAuxRet[3]
					AF9->AF9_HORAF	:= aAuxRet[4]
					MsUnlock()
					PmsAtuNec(AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_TAREFA)
					dbSelectArea("AF9")
					If aScan(aAllEDT,AF9->AF9_EDTPAI) <= 0
						aAdd(aAllEDT,AF9->AF9_EDTPAI)
					EndIf
					PmsAtuNec(AF9_PROJET,AF9_REVISA,AF9_TAREFA)
					PmsAtuPred(AF9->AF9_TAREFA,AF9->AF9_PROJET,AF9->AF9_REVISA,dData,aAllEDT,nMetodo)
					//PmsAtuScs(AF9_PROJET,AF9_REVISA,AF9_TAREFA,.F.,aAllEDT,lReprParc)
					//PmsAtuScsI(AF9_PROJET,AF9_REVISA,AF9_TAREFA,.F., nMetodo, aRecsAF9, aAllEDT,lReprParc)
				EndIf
			EndIf
		EndIf
		dbSelectArea("AF9")
		dbSkip()
	Next nx
	If lProcessa
		ProcRegua(Len(aAllEDT))
	EndIf
	For nX := 1 to Len(aAllEDT)
		If lProcessa
			IncProc(STR0239)//"Atualizando datas da estrutura..."
		EndIf
		PmsAtuEDT(AF8->AF8_PROJET, cRevisa, aAllEDT[nX],,,,, .T.)
	Next nX
EndIf

RestArea(aAreaAJ4)
RestArea(aAreaAF8)
RestArea(aAreaAF9)
RestArea(aArea)
Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ParamBox³ Autor ³ Edson Maricate          ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Cria uma tela de parametros.                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpA1 : Array contendo os parametros                          ³±±
±±³          ³        [1] Tipo do parametro -                               ³±±
±±³          ³         1 - MsGet                                            ³±±
±±³          ³           [2] : Descricao                                    ³±±
±±³          ³           [3] : String contendo o inicializador do campo     ³±±
±±³          ³           [4] : String contendo a Picture do campo           ³±±
±±³          ³           [5] : String contendo a validacao                  ³±±
±±³          ³           [6] : Consulta F3                                  ³±±
±±³          ³           [7] : String contendo a validacao When             ³±±
±±³          ³           [8] : Tamanho do MsGet                             ³±±
±±³          ³           [9] : Flag .T./.F. Parametro Obrigatorio ?         ³±±
±±³          ³         2 - Combo                                            ³±±
±±³          ³           [2] : Descricao                                    ³±±
±±³          ³           [3] : Numerico contendo a opcao inicial do combo   ³±±
±±³          ³           [4] : Array contendo as opcoes do Combo            ³±±
±±³          ³           [5] : Tamanho do Combo                             ³±±
±±³          ³           [6] : Validacao                                    ³±±
±±³          ³           [7] : Flag .T./.F. Parametro Obrigatorio ?         ³±±
±±³          ³         3 - Radio                                            ³±±
±±³          ³           [2] : Descricao                                    ³±±
±±³          ³           [3] : Numerico contendo a opcao inicial do Radio   ³±±
±±³          ³           [4] : Array contendo as opcoes do Radio            ³±±
±±³          ³           [5] : Tamanho do Radio                             ³±±
±±³          ³           [6] : Validacao                                    ³±±
±±³          ³           [7] : Flag .T./.F. Parametro Obrigatorio ?         ³±±
±±³          ³           [8] : String contendo a validacao When             ³±±
±±³          ³         4 - CheckBox ( Com Say )                             ³±±
±±³          ³           [2] : Descricao                                    ³±±
±±³          ³           [3] : Indicador Logico contendo o inicial do Check ³±±
±±³          ³           [4] : Texto do CheckBox                            ³±±
±±³          ³           [5] : Tamanho do Radio                             ³±±
±±³          ³           [6] : Validacao                                    ³±±
±±³          ³           [7] : Flag .T./.F. Parametro Obrigatorio ?         ³±±
±±³          ³         5 - CheckBox ( linha inteira )                       ³±±
±±³          ³           [2] : Descricao                                    ³±±
±±³          ³           [3] : Indicador Logico contendo o inicial do Check ³±±
±±³          ³           [4] : Tamanho do Radio                             ³±±
±±³          ³           [5] : Validacao                                    ³±±
±±³          ³           [6] : Flag .T./.F. Parametro Obrigatorio ?         ³±±
±±³          ³         6 - File                                             ³±±
±±³          ³           [2] : Descricao                                    ³±±
±±³          ³           [3] : String contendo o inicializador do campo     ³±±
±±³          ³           [4] : String contendo a Picture do campo           ³±±
±±³          ³           [5] : String contendo a validacao                  ³±±
±±³          ³           [6] : String contendo a validacao When             ³±±
±±³          ³           [7] : Tamanho do MsGet                             ³±±
±±³          ³           [8] : Flag .T./.F. Parametro Obrigatorio ?         ³±±
±±³          ³           [9] : Texto contendo os tipos de arquivo           ³±±
±±³          ³                 Ex.: "Arquivos .CSV |*.CSV"                  ³±±
±±³          ³           [10]: Diretorio inicial do cGetFile                ³±±
±±³          ³           [11]: PARAMETROS do cGETFILE                       ³±±
±±³          ³           [12]: Se .T. apresenta árvore do servidor          ³±±
±±³          ³         7 - Montagem de expressao de filtro                  ³±±
±±³          ³           [2] : Descricao                                    ³±±
±±³          ³           [3] : Alias da tabela                              ³±±
±±³          ³           [4] : Filtro inicial                               ³±±
±±³          ³           [5] : Opcional - Clausula When Botao Editar Filtro ³±±
±±³          ³         8 - MsGet Password                                   ³±±
±±³          ³           [2] : Descricao                                    ³±±
±±³          ³           [3] : String contendo o inicializador do campo     ³±±
±±³          ³           [4] : String contendo a Picture do campo           ³±±
±±³          ³           [5] : String contendo a validacao                  ³±±
±±³          ³           [6] : Consulta F3                                  ³±±
±±³          ³           [7] : String contendo a validacao When             ³±±
±±³          ³           [8] : Tamanho do MsGet                             ³±±
±±³          ³           [9] : Flag .T./.F. Parametro Obrigatorio ?         ³±±
±±³          ³         9 - MsGet Say                                        ³±±
±±³          ³           [2] : String Contendo o Texto a ser apresentado    ³±±
±±³          ³           [3] : Tamanho da String                            ³±±
±±³          ³           [4] : Altura da String                             ³±±
±±³          ³           [5] : Negrito (logico)                             ³±±
±±³          ³         10- Range (experimental)                             ³±±
±±³          ³           [2] : Descricao                                    ³±±
±±³          ³           [3] : Range Inicial                                ³±±
±±³          ³           [4] : ConsultaF3                                   ³±±
±±³          ³           [5] : Largo em pixels do Get                       ³±±
±±³          ³           [6] : Tipo                                         ³±±
±±³          ³           [7] : Tamanho do campo (em chars)                  ³±±
±±³          ³           [8] : String contendo a validacao When             ³±±
±±³          ³         11-MultiGet (MEMO)                                   ³±±
±±³          ³           [2] : Descrição                                    ³±±
±±³          ³           [3] : Inicializador padrão                         ³±±
±±³          ³           [4] : String contendo o VALID                      ³±±
±±³          ³           [5] : String contendo o WHEN                       ³±±
±±³          ³           [6] : Flag .T./.F. Parametro Obrigatorio ?         ³±±
±±³          ³         12-Filtro de usuario por rotina                      ³±±
±±³          ³           [2] : Titulo do filtro                             ³±±
±±³          ³           [3] : Alias da tabela onde vai aplicar o filtro    ³±±
±±³          ³           [4] : Expressao de filtro de inicio                ³±±
±±³          ³           [5] : String contendo o WHEN                       ³±±
±±³          ³ExpC2  : Titulo da Janela                                     ³±±
±±³          ³ExpA3  : Array passado por referencia que contem o retorno    ³±±
±±³          ³         dos parametros.                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function ParamBox(aParametros,cTitle,aRet,bOk,aButtons,lCentered,nPosx,nPosy, oDlgWizard, cLoad, lCanSave,lUserSave)

Local nx
Local oDlg
Local cPath     := ""
Local oPanel
Local oPanelB
Local cTextSay
Local lOk			:= .F.
Local nLinha		:= 8
Local cArquivos := ""
Local nBottom
Local oFntVerdana
Local cOpcoes	:=	""
Local lWizard  := .F.
Local cBlkWhen2
Local cRotina
Local cAux
Local aOpcoes
Local cAlias
Local cServidor		:= ".T."
Local cWhen	:= ""
Local cCodUsr := ""
Local lGrpAdm := .F.
Local loMainWnd := .F.
Local cFilAN7	:= xFilial("AN7")

DEFAULT bOk			:= {|| (.T.)}
DEFAULT aButtons	:= {}
DEFAULT lCentered	:= .T.
DEFAULT nPosX		:= 0
DEFAULT nPosY		:= 0
DEFAULT cLoad     := ProcName(1)
DEFAULT lCanSave	:= .T.
DEFAULT lUserSave	:= .F.
DEFAULT aButtons	:= {}

cRotina := PADR(cLoad,10)

If Type("cCadastro") == "U"
	cCadastro := ""
EndIf

If !lCanSave
	lUserSave	:= .F.
	cLoad := "99_NOSAVE_"
Else
	//Se nao esta bloqueado
	If ParamLoad(cLoad,aParametros,0,"1")== "2"
		lUserSave:= .F.
	//Se o usuario pode ter a sua propria configuracao
	ElseIf lUserSave
		cLoad	:=	__cUserID+"_"+cLoad
	Endif
Endif

DEFINE FONT oFntVerdana NAME "Verdana" SIZE 0, -10 BOLD

If oDlgWizard == NIL

	If Type("oMainWnd") == "U"
		DEFINE MSDIALOG oDlg TITLE cCadastro+" - "+cTitle FROM nPosX,nPosY TO nPosX+300,nPosY+445 Pixel
		loMainWnd := .F.
	Else
		If IsInCallStack("Pms320Per") .OR. IsInCallStack("P320ExPer")
			DEFINE MSDIALOG oDlg TITLE cCadastro+" - "+cTitle FROM nPosX,nPosY TO nPosX+300,nPosY+500 OF oMainWnd Pixel
		Else
			DEFINE MSDIALOG oDlg TITLE cCadastro+" - "+cTitle FROM nPosX,nPosY TO nPosX+300,nPosY+445 OF oMainWnd Pixel
		EndIf
		loMainWnd := .T.
	EndIF
	lWizard := .F.
Else
	oDlg := oDlgWizard
	lWizard := .T.
EndIf

oPanel := TScrollBox():New( oDlg, 8,10,104,203)
oPanel:Align := CONTROL_ALIGN_ALLCLIENT

For nx := 1 to Len(aParametros)
	Do Case
		Case aParametros[nx,1]==1 // SAY + GET
			If ! lWizard
				SetPrvt("MV_PAR"+AllTrim(STRZERO(nx,2,0)))
				&("MV_PAR"+AllTrim(STRZERO(nx,2,0))) := ParamLoad(cLoad,aParametros,nx,aParametros[nx,3],Iif(Len(aParametros[nx])>9,aParametros[nx,10],.F.))
			EndIf
			if aParametros[nx,9] // Campo Obrigatorio
				cTextSay :="{||'<b>"+STRTRAN(aParametros[nx,2],"'",'"')+" ? "+ "<font color=red size=2 face=verdana,helvetica>*</font></b>"+"'}"
				TSay():New( nLinha, 15 , MontaBlock(cTextSay)  , oPanel , ,,,,,.T.,CLR_BLACK,,100,  ,,,,,,.T.)
			else
				cTextSay:= "{||'"+STRTRAN(aParametros[nx,2],"'",'"')+" ? "+"'}"
				TSay():New( nLinha, 15 , MontaBlock(cTextSay) , oPanel , ,,,,,.T.,CLR_BLACK,,100,,,,,,)
			endif	
			cWhen	:= Iif(Empty(aParametros[nx,7]),".T.",aParametros[nx,7])
			cValid	:=Iif(Empty(aParametros[nx,5]),".T.",aParametros[nx,5])
			cF3		:=Iif(Empty(aParametros[nx,6]),NIL,aParametros[nx,6])
			If ! lWizard
				cBlkGet := "{ | u | If( PCount() == 0, "+"MV_PAR"+AllTrim(STRZERO(nx,2,0))+","+"MV_PAR"+AllTrim(STRZERO(nx,2,0))+":= u ) }"
			Else
				cBlkGet := "{ | u | If( PCount() == 0, "+"aRet["+AllTrim(STRZERO(nx,2,0))+"],"+"aRet["+AllTrim(STRZERO(nx,2,0))+"] := "+"MV_PAR"+AllTrim(STRZERO(nx,2,0))+":= u ) }"
			EndIf
			cBlKVld := "{|| "+cValid+"}"
			cBlKWhen := "{|| "+cWhen+"}"
			If ParamLoad(cLoad,aParametros,0,"1")=="2"
				cBlKWhen := "{|| .F. }"
			EndIf
			//*****************************************************
			// Auto Ajusta da Get para Campos Caracter e Numerico *
			// Somente para o Modulo PCO - Acacio Egas            *
			//*****************************************************
			If Type("cModulo")=="C" .and. cModulo=="PCO" .and. !lWizard
				cType := Type("MV_PAR"+AllTrim(STRZERO(nx,2,0)))
				If cType $ "C"
					nWidth	:= CalcFieldSize(cType,Len(aParametros[nx,3]),,aParametros[nx,4],"") + 10 + If(!Empty(cF3),10,0)
				ElseIf cType $ "N"
					nWidth	:= CalcFieldSize(cType,,,aParametros[nx,4],"") + 10
				Else
					nWidth	:= aParametros[nx,8]
				EndIf
			Else
				nWidth	:= aParametros[nx,8]
			EndIf
			// 'If' para corrigir um problema do campo get quando possui F3 (Lupa) em um panel do wizard. Quando campo menor que 50, a lupa some.
			If lWizard
				IF Type("nWidth")<> "U"
					TGet():New( nLinha,100,&cBlKGet,oPanel,If(nWidth<30,30,nWidth),,aParametros[nx,4], &(cBlkVld),,,, .T.,, .T.,, .T., &(cBlkWhen), .F., .F.,, .F., .F. ,cF3,"MV_PAR"+AllTrim(STRZERO(nx,2,0)),,,,.T.)
				Else
					cType := ValType(aRet[nx])
					nWidth := ParBGetSize(cType,aParametros,cF3,nx)
					TGet():New( nLinha,100,&cBlKGet,oPanel,nWidth,,aParametros[nx,4], &(cBlkVld),,,, .T.,, .T.,, .T., &(cBlkWhen), .F., .F.,, .F., .F. ,cF3,"MV_PAR"+AllTrim(STRZERO(nx,2,0)),,,,.T.)
				Endif
			Else
				TGet():New( nLinha,100,&cBlKGet,oPanel,nWidth,,aParametros[nx,4], &(cBlkVld),,,, .T.,, .T.,, .T., &(cBlkWhen), .F., .F.,, .F., .F. ,cF3,"MV_PAR"+AllTrim(STRZERO(nx,2,0)),,,,.T.)
			Endif
		Case aParametros[nx,1]==2 // SAY + COMBO
			If ! lWizard
				SetPrvt("MV_PAR"+AllTrim(STRZERO(nx,2,0)))
				&("MV_PAR"+AllTrim(STRZERO(nx,2,0))) := ParamLoad(cLoad,aParametros,nx,aParametros[nx,3])
			EndIf
			
    		if aParametros[nx,7] // Campo Obrigatorio
				cTextSay :="{||'<b>"+STRTRAN(aParametros[nx,2],"'",'"')+" ? "+ "<font color=red size=2 face=verdana,helvetica>*</font></b>"+"'}"
				TSay():New( nLinha, 15 , MontaBlock(cTextSay)  , oPanel , ,,,,,.T.,CLR_BLACK,,100,  ,,,,,,.T.)
			else
				cTextSay:= "{||'"+STRTRAN(aParametros[nx,2],"'",'"')+" ? "+"'}"
				TSay():New( nLinha, 15 , MontaBlock(cTextSay) , oPanel , ,,,,,.T.,CLR_BLACK,,100,,,,,,)
			endif	
			
			cWhen   := ".T."
			If Len(aParametros[nx]) > 7
				If aParametros[nx,8] != NIL .And. ValType(aParametros[nx,8])=="L"
					cWhen	:=If(aParametros[nx,8],".T.",".F.")
				Else
					cWhen	:= Iif(Len(aParametros[nx]) < 8 .Or. Empty(aParametros[nx,8]) .Or. aParametros[nx,8] == Nil,".T.",aParametros[nx,8])
				EndIf
			EndIf
			cValid	:=Iif(Empty(aParametros[nx,6]),".T.",aParametros[nx,6])
			cBlKVld := "{|| "+cValid+"}"
			If ! lWizard
				cBlkGet := "{ | u | If( PCount() == 0, "+"MV_PAR"+AllTrim(STRZERO(nx,2,0))+","+"MV_PAR"+AllTrim(STRZERO(nx,2,0))+":= u ) }"
         Else
				cBlkGet := "{ | u | If( PCount() == 0, "+"aRet["+AllTrim(STRZERO(nx,2,0))+"],"+"aRet["+AllTrim(STRZERO(nx,2,0))+"] := "+"MV_PAR"+AllTrim(STRZERO(nx,2,0))+":= u ) }"
			EndIf
			cBlkWhen := "{|| "+cWhen+" }"
			If ParamLoad(cLoad,aParametros,0,"1")=="2"
				cBlKWhen := "{|| .F. }"
			EndIf
			TComboBox():New( nLinha,100, &cBlkGet,aParametros[nx,4], aParametros[nx,5], 10, oPanel, ,,       ,,,.T.,,,.F.,&(cBlkWhen),.T.,,,,"MV_PAR"+AllTrim(STRZERO(nx,2,0)))

		Case aParametros[nx,1]==3 // SAY + RADIO
			nLinha += 8
			If ! lWizard
				SetPrvt("MV_PAR"+AllTrim(STRZERO(nx,2,0)))
				&("MV_PAR"+AllTrim(STRZERO(nx,2,0))) := ParamLoad(cLoad,aParametros,nx,aParametros[nx,3])
			EndIf
			cTextSay:= "{||'"+aParametros[nx,2]+" ? "+"'}"
			TGroup():New( nLinha-8,15, nLinha+(Len(aParametros[nx,4])*9)+7,205,aParametros[nx,2]+ " ? ",oPanel,If(aParametros[nx,7],CLR_HBLUE,CLR_BLACK),,.T.)
			cWhen   := ".T."
			If Len(aParametros[nx]) > 7
				If aParametros[nx,8] != NIL .And. ValType(aParametros[nx,8])=="L"
					cWhen	:=If(aParametros[nx,8],".T.",".F.")
				Else
					cWhen	:= Iif(Len(aParametros[nx]) < 8 .Or. Empty(aParametros[nx,8]) .Or. aParametros[nx,8] == Nil,".T.",aParametros[nx,8])
				EndIf
			EndIf
			If ! lWizard
				cBlkGet := "{ | u | If( PCount() == 0, "+"MV_PAR"+AllTrim(STRZERO(nx,2,0))+","+"MV_PAR"+AllTrim(STRZERO(nx,2,0))+":= u ) }"
            Else
				cBlkGet := "{ | u | If( PCount() == 0, "+"aRet["+AllTrim(STRZERO(nx,2,0))+"],"+"aRet["+AllTrim(STRZERO(nx,2,0))+"] := "+"MV_PAR"+AllTrim(STRZERO(nx,2,0))+":= u ) }"
			EndIf
			cBlkWhen := "{|| " + cWhen  +  "}"
			If ParamLoad(cLoad,aParametros,0,"1")=="2"
				cBlKWhen := "{|| .F. }"
			EndIf
			TRadMenu():New( nLinha, 30, aParametros[nx,4],&cBlkGet, oPanel,,,,,,,&(cBlkWhen),aParametros[nx,5],9, ,,,.T.)
			nLinha += (Len(aParametros[nx,4])*10)-3

		Case aParametros[nx,1]==4 // SAY + CheckBox
			If ! lWizard
				SetPrvt("MV_PAR"+AllTrim(STRZERO(nx,2,0)))
				&("MV_PAR"+AllTrim(STRZERO(nx,2,0))) := ParamLoad(cLoad,aParametros,nx,aParametros[nx,3])
			EndIf
			
			If ! lWizard
				cBlkGet := "{ | u | If( PCount() == 0, "+"MV_PAR"+AllTrim(STRZERO(nx,2,0))+","+"MV_PAR"+AllTrim(STRZERO(nx,2,0))+":= u ) }"
			Else
				cBlkGet := "{ | u | If( PCount() == 0, "+"aRet["+AllTrim(STRZERO(nx,2,0))+"],"+"aRet["+AllTrim(STRZERO(nx,2,0))+"] := "+"MV_PAR"+AllTrim(STRZERO(nx,2,0))+":= u ) }"
			EndIf
			if aParametros[nx,7] // Campo Obrigatorio
				cTextSay :="{||'<b>"+STRTRAN(aParametros[nx,2],"'",'"')+"  "+ "<font color=red size=2 face=verdana,helvetica>*</font></b>"+"'}"
				TSay():New( nLinha, 15 , MontaBlock(cTextSay)  , oPanel , ,,,,,.T.,CLR_BLACK,,100,  ,,,,,,.T.)
			else
				cTextSay:= "{||'"+STRTRAN(aParametros[nx,2],"'",'"')+"  "+"'}"
				TSay():New( nLinha, 15 , MontaBlock(cTextSay) , oPanel , ,,,,,.T.,CLR_BLACK,,100,,,,,,)
			endif	
			cBlkWhen := Iif(Len(aParametros[nx]) > 7 .And. !Empty(aParametros[nx,8]),aParametros[nx,8],"{|| .T. }")
			If (Len(aParametros[nx]) > 6 .And. aParametros[nx,7]).Or. ParamLoad(cLoad,aParametros,0,"1")=="2"
				cBlKWhen := "{|| .F. }"
			EndIf
			TCheckBox():New(nLinha,100,aParametros[nx,4], &cBlkGet,oPanel, aParametros[nx,5],10,,,,,,,,.T.,,,&(cBlkWhen))

		Case aParametros[nx,1]==5 // CheckBox Linha Inteira
			If ! lWizard
				SetPrvt("MV_PAR"+AllTrim(STRZERO(nx,2,0)))
				&("MV_PAR"+AllTrim(STRZERO(nx,2,0))) := ParamLoad(cLoad,aParametros,nx,aParametros[nx,3])
			EndIf
			If ! lWizard
				cBlkGet := "{ | u | If( PCount() == 0, "+"MV_PAR"+AllTrim(STRZERO(nx,2,0))+","+"MV_PAR"+AllTrim(STRZERO(nx,2,0))+":= u ) }"
            Else
				cBlkGet := "{ | u | If( PCount() == 0, "+"aRet["+AllTrim(STRZERO(nx,2,0))+"],"+"aRet["+AllTrim(STRZERO(nx,2,0))+"] := "+"MV_PAR"+AllTrim(STRZERO(nx,2,0))+":= u ) }"
			EndIf
			cBlkWhen := "{|| .T. }"
			If (Len(aParametros[nx]) > 6 .And. aParametros[nx,7]) .Or. ParamLoad(cLoad,aParametros,0,"1")=="2"
				cBlKWhen := "{|| .F. }"
			EndIf
			TCheckBox():New(nLinha,15,aParametros[nx,2], &cBlkGet,oPanel, aParametros[nx,4],10,,,,,,,,.T.,,,&(cBlkWhen))

		Case aParametros[nx,1]==6 // File + Procura de Arquivo
			If ! lWizard
				SetPrvt("MV_PAR"+AllTrim(STRZERO(nx,2,0)))
				&("MV_PAR"+AllTrim(STRZERO(nx,2,0))) := ParamLoad(cLoad,aParametros,nx,aParametros[nx,3])
			EndIf
			
			if aParametros[nx,8] // Campo Obrigatorio
				cTextSay :="{||'<b>"+STRTRAN(aParametros[nx,2],"'",'"')+" ? "+ "<font color=red size=2 face=verdana,helvetica>*</font></b>"+"'}"
				TSay():New( nLinha, 15 , MontaBlock(cTextSay)  , oPanel , ,,,,,.T.,CLR_BLACK,,100,  ,,,,,,.T.)
			else
				cTextSay:= "{||'"+STRTRAN(aParametros[nx,2],"'",'"')+" ? "+"'}"
				TSay():New( nLinha, 15 , MontaBlock(cTextSay) , oPanel , ,,,,,.T.,CLR_BLACK,,100,,,,,,)
			endif	
			
			cWhen	    := Iif(Empty(aParametros[nx,6]),".T.",aParametros[nx,6])
			cValid	  := Iif(Empty(aParametros[nx,5]),".T.","("+aParametros[nx,5]+").Or.Vazio("+"MV_PAR"+AllTrim(STRZERO(nx,2,0))+")")
			If ! lWizard
				cBlkGet := "{ | u | If( PCount() == 0, "+"MV_PAR"+AllTrim(STRZERO(nx,2,0))+","+"MV_PAR"+AllTrim(STRZERO(nx,2,0))+":= u ) }"
            Else
				cBlkGet := "{ | u | If( PCount() == 0, "+"aRet["+AllTrim(STRZERO(nx,2,0))+"],"+"aRet["+AllTrim(STRZERO(nx,2,0))+"] := "+"MV_PAR"+AllTrim(STRZERO(nx,2,0))+":= u ) }"
			EndIf
			cBlKVld   := "{|| " + cValid + "}"
			cBlKWhen  := "{|| " + cWhen + "}"
			
			cArquivos := aParametros[nx,9]
			If ValType(cArquivos) <> "C"
				cArquivos := ""
			EndIf
			
			If Len(aParametros[nx]) >= 10
				cPath := aParametros[nx,10]
				If ValType(cPath) <> "C"
					cPath := ""
				EndIf 
			EndIf

			If ParamLoad(cLoad,aParametros,0,"1")=="2"
				cBlKWhen := "{|| .F. }"
			EndIf

			If Len(aParametros[nX]) >= 11
				If ValType(aParametros[nx,11]) <> "N"
					cOpcoes := AllTrim(Str(GETF_LOCALHARD+GETF_LOCALFLOPPY))
				Else
					cOpcoes := AllTrim(Str(aParametros[nx,11]))
				EndIf
			Else
				cOpcoes := AllTrim(Str(GETF_LOCALHARD+GETF_LOCALFLOPPY))
			EndIf

			If Len(aParametros[nX]) >= 12
				cServidor := cValToChar(aParametros[nx,12])
			Else
				cServidor := ".T." 
			Endif

			If lWizard
				cGetfile := "{|| aRet["+AllTrim(STRZERO(nx,2,0))+"] := MV_PAR"+AllTrim(STRZERO(nx,2,0))+" := cGetFile('"+cArquivos+"','"+;
								STR0176+"',0,'"+cPath+"',.T.,"+cOpcoes+;
								","+cServidor+")+SPACE(40), If(Empty(MV_PAR"+AllTrim(STRZERO(nx,2,0))+;
								"), MV_PAR"+AllTrim(STRZERO(nx,2,0))+" := '"+;
								aParametros[nx,3]+"',)  }"
		 	Else
				cGetfile := "{|| MV_PAR"+AllTrim(STRZERO(nx,2,0))+" := cGetFile('"+cArquivos+"','"+;
								STR0176+"',0,'"+cPath+"',.T.,"+cOpcoes+;
								","+cServidor+")+SPACE(40), If(Empty(MV_PAR"+AllTrim(STRZERO(nx,2,0))+;
								"), MV_PAR"+AllTrim(STRZERO(nx,2,0))+" := '"+;
								aParametros[nx,3]+"',)  }" 
			EndIf

			TGet():New( nLinha,100 ,&cBlKGet,oPanel,aParametros[nx,7],,aParametros[nx,4], &(cBlkVld),,,, .T.,, .T.,, .T., &(cBlkWhen), .F., .F.,, .F., .F. ,,"MV_PAR"+AllTrim(STRZERO(nx,2,0)))
			TButton():New( nLinha,100+aParametros[nx,7], STR0175, oPanel,&(cGetFile), 29, 12, , oDlg:oFont, ,.T.,.F.,,.T., ,, .F.)
 
		Case aParametros[nx,1]==7 //.And. ! lWizard// Filtro de Arquivos
			nLinha += 8
			If !lWizard
				SetPrvt("MV_PAR"+AllTrim(STRZERO(nx,2,0)))
				&("MV_PAR"+AllTrim(STRZERO(nx,2,0))) := ParamLoad(cLoad,aParametros,nx,aParametros[nx,4])
				SetPrvt("MV_FIL"+AllTrim(STRZERO(nx,2,0)))
				&("MV_FIL"+AllTrim(STRZERO(nx,2,0))) := MontDescr(aParametros[nx,3],ParamLoad(cLoad,aParametros,nx,aParametros[nx,4]))
			EndIf
			TGroup():New( nLinha-8,15, nLinha+40,170,aParametros[nx,2]+ " ? ",oPanel,,,.T.)
			cWhen   := ".T."
			If Len(aParametros[nx]) > 4
				If aParametros[nx,5] != NIL .And. ValType(aParametros[nx,5])=="L"
					cWhen	:=If(aParametros[nx,5],".T.",".F.")
				Else
					cWhen	:= Iif(Len(aParametros[nx]) < 5 .Or. Empty(aParametros[nx,5]) .Or. aParametros[nx,5] == Nil,".T.",aParametros[nx,5])
				EndIf
			EndIf
			cValid	:=".T."
			If !lWizard
				cBlkGet := "{ | u | If( PCount() == 0, "+"MV_FIL"+AllTrim(STRZERO(nx,2,0))+","+"MV_FIL"+AllTrim(STRZERO(nx,2,0))+":= u ) }"
			Else
				cBlkGet := "{ | u | If( PCount() == 0, MontDescr('"+aParametros[nx,3]+"',aRet["+AllTrim(STRZERO(nx,2,0))+"]),"+;
																	" MV_FIL"+AllTrim(STRZERO(nx,2,0))+":= u ) }"

			EndIf
			cBlKVld := "{|| "+cValid+"}"
			cBlKWhen := "{|| "+cWhen+"}"
			If ParamLoad(cLoad,aParametros,0,"1")=="2"
				cBlKWhen := "{|| .F. }"
			EndIf
			If !lWizard
				cGetFilter := "{|| MV_PAR"+AllTrim(STRZERO(nx,2,0))+" := BuildExpr('"+aParametros[nx,3]+"',,MV_PAR"+AllTrim(STRZERO(nx,2,0))+"),MV_FIL"+AllTrim(STRZERO(nx,2,0))+":=MontDescr('"+aParametros[nx,3]+"',MV_PAR"+AllTrim(STRZERO(nx,2,0))+") }"
			Else
				cGetFilter := "{|| aRet["+AllTrim(STRZERO(nx,2,0))+"] := MV_PAR"+AllTrim(STRZERO(nx,2,0))+" := BuildExpr('"+aParametros[nx,3]+"',,aRet["+AllTrim(STRZERO(nx,2,0))+"]),MV_FIL"+AllTrim(STRZERO(nx,2,0))+":=MontDescr('"+aParametros[nx,3]+"',aRet["+AllTrim(STRZERO(nx,2,0))+"]) }"
			EndIf
			TButton():New( nLinha,18, "Editar", oPanel,&(cGetFilter), 35, 14, , oDlg:oFont, ,.T.,.F.,,.T.,&(cBlkWhen),, .F.)
			TMultiGet():New( nLinha, 55, &cBlKGet,oPanel,109,33,,,,,,.T.,,.T.,&(cBlkWhen),,,.T.,&(cBlkVld),,.T.,.F., )
			nLinha += 31
		Case aParametros[nx,1]==8 // SAY + GET PASSWORD
			If ! lWizard
				SetPrvt("MV_PAR"+AllTrim(STRZERO(nx,2,0)))
				&("MV_PAR"+AllTrim(STRZERO(nx,2,0))) := ParamLoad(cLoad,aParametros,nx,aParametros[nx,3])
			EndIf
			if aParametros[nx,9] // Campo Obrigatorio
				cTextSay :="{||'<b>"+STRTRAN(aParametros[nx,2],"'",'"')+" ? "+ "<font color=red size=2 face=verdana,helvetica>*</font></b>"+"'}"
				TSay():New( nLinha, 15 , MontaBlock(cTextSay)  , oPanel , ,,,,,.T.,CLR_BLACK,,100,  ,,,,,,.T.)
			else
				cTextSay:= "{||'"+STRTRAN(aParametros[nx,2],"'",'"')+" ? "+"'}"
				TSay():New( nLinha, 15 , MontaBlock(cTextSay) , oPanel , ,,,,,.T.,CLR_BLACK,,100,,,,,,)
			endif	
			
			cWhen	:= Iif(Empty(aParametros[nx,7]),".T.",aParametros[nx,7])
			cValid	:=Iif(Empty(aParametros[nx,5]),".T.",aParametros[nx,5])
			cF3		:=Iif(Empty(aParametros[nx,6]),NIL,aParametros[nx,6])
			If ! lWizard
				cBlkGet := "{ | u | If( PCount() == 0, "+"MV_PAR"+AllTrim(STRZERO(nx,2,0))+","+"MV_PAR"+AllTrim(STRZERO(nx,2,0))+":= u ) }"
            Else
				cBlkGet := "{ | u | If( PCount() == 0, "+"aRet["+AllTrim(STRZERO(nx,2,0))+"],"+"aRet["+AllTrim(STRZERO(nx,2,0))+"] := "+"MV_PAR"+AllTrim(STRZERO(nx,2,0))+":= u ) }"
			EndIf
			cBlKVld := "{|| "+cValid+"}"
			cBlKWhen := "{|| "+cWhen+"}"
			If ParamLoad(cLoad,aParametros,0,"1")=="2"
				cBlKWhen := "{|| .F. }"
			EndIf
			TGet():New( nLinha,100 ,&cBlKGet,oPanel,aParametros[nx,8],,aParametros[nx,4], &(cBlkVld),,,, .T.,, .T.,, .T., &(cBlkWhen), .F., .F.,, .F., .T. ,cF3,"MV_PAR"+AllTrim(STRZERO(nx,2,0)),,,,.T.)
		Case aParametros[nx,1]==9 // SAY
            cTextSay:= "{||'"+STRTRAN(aParametros[nx,2],"'",'"')+"'}"
			If aParametros[nx,5]
				TSay():New( nLinha, 15 , MontaBlock(cTextSay) , oPanel , ,oFntVerdana,,,,.T.,CLR_BLACK,,aParametros[nx,3],aParametros[nx,4],,,,,)
			Else
				TSay():New( nLinha, 15 , MontaBlock(cTextSay) , oPanel , ,,,,,.T.,CLR_BLACK,,aParametros[nx,3],aParametros[nx,4],,,,,)
			EndIf
		Case aParametros[nx,1]==10 // Range (fase experimental)
			nLinha += 8
			SetPrvt("MV_PAR"+AllTrim(STRZERO(nx,2,0)))
			&("MV_PAR"+AllTrim(STRZERO(nx,2,0))) := ParamLoad(cLoad,aParametros,nx,aParametros[nx,3])
			SetPrvt("MV_RAN"+AllTrim(STRZERO(nx,2,0)))
			&("MV_RAN"+AllTrim(STRZERO(nx,2,0))) := PMSRangeDesc(	&("MV_PAR"+AllTrim(STRZERO(nx,2,0))),aParametros[nx,7])
			TGroup():New( nLinha-8,15, nLinha+40,170,STR0382+aParametros[nx,2],oPanel,,,.T.)		//"Range de "
			If Type(aParametros[nx,8])=="L" .And. !Empty(aParametros[nx,8])
				cWhen	:= aParametros[nx,8]
			Else
				cWhen	:= ".T."
			EndIf
			cValid	:=".T."
			cBlkGet := "{ | u | If( PCount() == 0, "+"MV_RAN"+AllTrim(STRZERO(nx,2,0))+","+"MV_RAN"+AllTrim(STRZERO(nx,2,0))+":= u ) }"
			cBlKWhen := "{|| "+cWhen+"}"
			If ParamLoad(cLoad,aParametros,0,"1")=="2"
				cBlKWhen := "{|| .F. }"
			EndIf
			cGetRange := "{|| MV_PAR"+AllTrim(STRZERO(nx,2,0))+" := PmsRange('"+aParametros[nx,2]+"','"+aParametros[nx,4]+"',"+Str(aParametros[nx,5])+",MV_PAR"+AllTrim(STRZERO(nx,2,0))+",'"+aParametros[nx,6]+"',"+Str(aParametros[nx,7])+"),	MV_RAN"+AllTrim(STRZERO(nx,2,0))+" := PMSRangeDesc( MV_PAR"+AllTrim(STRZERO(nx,2,0))+","+Str(aParametros[nx,7])+") }"
	   		TButton():New( nLinha-2,18, STR0381, oPanel,MontaBlock(cGetRange), 35, 14, , oDlg:oFont, ,.T.,.F.,,.T.,&(cBlkWhen),, .F.) //"Editar"
			TMultiGet():New( nLinha, 55, &cBlKGet,oPanel,109,33,,,,,,.T.,,.T.,&(cBlkWhen),,,.T.,/*&(cBlkVld)*/,,.T.,.F., )
			nLinha += 31
		Case aParametros[nx,1]==11 // MULTIGET - campo memo
			nLinha += 10
			SetPrvt("MV_PAR"+AllTrim(STRZERO(nx,2,0)))
			&("MV_PAR"+AllTrim(STRZERO(nx,2,0))) := ParamLoad(cLoad,aParametros,nx,aParametros[nx,3])
			TGroup():New( nLinha-8,15, nLinha+40,170,"",oPanel,,,.T.)
			if aParametros[nx,6] // Campo Obrigatorio
				cTextSay :="{||'<b>"+STRTRAN(aParametros[nx,2],"'",'"')+" ? "+ "<font color=red size=2 face=verdana,helvetica>*</font></b>"+"'}"
				TSay():New( nLinha - 6, 23 , MontaBlock(cTextSay)  , oPanel , ,,,,,.T.,CLR_BLACK,,100,  ,,,,,,.T.)
			else
				cTextSay:= "{||'"+STRTRAN(aParametros[nx,2],"'",'"')+" ? "+"'}"
				TSay():New( nLinha - 6, 23 , MontaBlock(cTextSay) , oPanel , ,,,,,.T.,CLR_BLACK,,100,,,,,,)
			endif	
			
			cValid := Iif(Empty(aParametros[nx,4]),".T.",aParametros[nx,4])
			cWhen  := Iif(Empty(aParametros[nx,5]),".T.",aParametros[nx,5])
			cBlkGet  := "{ | u | If( PCount() == 0, "+"MV_PAR"+AllTrim(STRZERO(nx,2,0))+","+"MV_PAR"+AllTrim(STRZERO(nx,2,0))+":= u ) }"
			cBlkVld  := "{|| " + cValid + "}"
			cBlkWhen := "{|| " + cWhen + "}"
			If ParamLoad(cLoad,aParametros,0,"1")=="2"
				cBlKWhen := "{|| .F. }"
			Endif
			TMultiGet():New(nLinha+1,23,&cBlkGet,oPanel,140,33,/*oFont*/,/*lHScroll*/,/*nClrFore*/,/*nClrBack*/,/*oCursor*/,.T.,/*cMg*/,;
			.T.,&(cBlkWhen),/*lCenter*/,/*lRight*/,.F.,&(cBlkVld),/*bChange*/,.T.,.F.)
			nLinha += 31
		Case aParametros[nx,1]==12 // FILTROS DE USUARIO POR ROTINA
			nLinha += 8
			SetPrvt("MV_FIL"+AllTrim(STRZERO(nx,2,0)))
			If len(aParametros[nx])>3
				&("MV_FIL"+AllTrim(STRZERO(nx,2,0))) := ParamLoad(cLoad,aParametros,nx,aParametros[nx,4])
			Else
				&("MV_FIL"+AllTrim(STRZERO(nx,2,0))) := ""
			EndIf
			SetPrvt("MV_PAR"+AllTrim(STRZERO(nx,2,0)))
			&("MV_PAR"+AllTrim(STRZERO(nx,2,0))) := ""
			cTextSay := ""
			If Len(aParametros[nx]) > 1
				If aParametros[nx,2] != Nil .And. ValType(aParametros[nx,2])=="C"
					cTextSay := aParametros[nx,2]
				EndIf
			Else
				AADD(aParametros[nx], "")
			EndIf
			cAlias := ""
			If Len(aParametros[nx]) > 2
				If aParametros[nx,3] != Nil .And. ValType(aParametros[nx,3])=="C"
					cAlias	:= aParametros[nx,3]
				EndIf
			Else
				AADD(aParametros[nx], "")
			EndIf
			If empty(cAlias)
				If PcoX2ConPad(cAlias)
					cAlias := PcoSX2Cons()
				Else
					cAlias := ALIAS()
				EndIf
			EndIf
			If empty(aParametros[nx,3])
				aParametros[nx,3] := cAlias
			EndIf
			cWhen   := ".T."
			If Len(aParametros[nx]) > 4
				If aParametros[nx,5] != Nil .And. ValType(aParametros[nx,5])=="L"
					cWhen	:= If(aParametros[nx,5],".T.",".F.")
				EndIf
			EndIf
			cBlkWhen := "{|| "+cWhen+" }"
			If ParamLoad(cLoad,aParametros,0,"1")=="2"
				cBlKWhen := "{|| .F. }"
			EndIf
			aOpcoes := {"Visualizar todos os registros"}
			cBlkWhen2:=cBlKWhen
			dbSelectArea("AN7")
			AN7->(dbSetOrder(1))
			AN7->(MsSeek(cFilAN7+oApp:cUserID+cRotina+cAlias))
			Do While !AN7->(Eof()) .And. AN7->(AN7_FILIAL+AN7_USER+AN7_FUNCAO+AN7_ALIAS)==cFilAN7+oApp:cUserID+cRotina+cAlias
				AADD(aOpcoes, AN7->AN7_FILTR)
				AN7->(dbSkip())
			EndDo
			TGroup():New( nLinha-8,15, nLinha+20,170, cTextSay,oPanel,,,.T.)
			cBlKVld := "{|| .T.}"
			cBlkGet := "{ | u | If( PCount() == 0, MV_FIL"+AllTrim(STRZERO(nx,2,0))+", MV_FIL"+AllTrim(STRZERO(nx,2,0))+":= u) }"
			SetPrvt("oCombo"+AllTrim(STRZERO(nx,2,0)))
			&("oCombo"+AllTrim(STRZERO(nx,2,0))) := TComboBox():New( nLinha+4, 20, &cBlkGet, aOpcoes, 100, 10, oPanel,,,,,,.T.,,,.F.,&(cBlkWhen),.T.,,,,"MV_FIL"+AllTrim(STRZERO(nx,2,0)))

			cAux := "{|| MV_PAR"+AllTrim(STRZERO(nx,2,0))+" := PmsGetFilt( oApp:cUserID, cRotina, '"+cAlias+"', MV_FIL"+AllTrim(STRZERO(nx,2,0))+" )}"
	   		TBtnBmp2():New( (nLinha+4)*2, 120*2, 25, 25, "FILTRO1"  , , , , &cAux , oPanel, "Aplicar filtro selecionado", &(cBlkWhen), )
			cAux := "{|| PmsIncFilt( aParametros, oApp:cUserID, cRotina, '"+cAlias+"' )}"
	   		TBtnBmp2():New( (nLinha+4)*2, 132*2, 25, 25, "BPMSDOCI" , , , , &cAux , oPanel, "Novo filtro", &(cBlkWhen2), )
			cAux := "{|| PmsAltFilt( aParametros, oCombo"+AllTrim(STRZERO(nx,2,0))+":nAt, oApp:cUserID, cRotina, '"+cAlias+"', MV_FIL"+AllTrim(STRZERO(nx,2,0))+" )}"
	   		TBtnBmp2():New( (nLinha+4)*2, 144*2, 25, 25, "BPMSDOCA" , , , , &cAux , oPanel, "Editar filtro selecionado", &(cBlkWhen2), )
			cAux := "{|| PmsExcFilt( aParametros, oCombo"+AllTrim(STRZERO(nx,2,0))+":nAt, oApp:cUserID, cRotina, '"+cAlias+"', MV_FIL"+AllTrim(STRZERO(nx,2,0))+" )}"
	   		TBtnBmp2():New( (nLinha+4)*2, 156*2, 25, 25, "BPMSDOCE" , , , , &cAux , oPanel, "Excluir o filtro selecionado", &(cBlkWhen2), )
			nLinha += 11
    EndCase
	nLinha += 17
Next


lGrpAdm := .F.
cCodUsr := RetCodUsr()
If !Empty(cCodUsr)
	lGrpAdm := PswAdmin( /*cUser*/, /*cPsw*/,cCodUsr)==0
EndIf

If !lWizard .And.  lGrpAdm .And. lCanSave
	@ nlinha+8,10 BUTTON oButton PROMPT "+" SIZE 10 ,7   ACTION {|| ParamSave(cLoad,aParametros,"1") } OF oPanel PIXEL
	@ nlinha+8,22 SAY STR0307 SIZE 120,7 Of oPanel FONT oFntVerdana COLOR RGB(80,80,80) PIXEL //"Administrador: Salvar configuações"
	oButton:cToolTip := STR0308 + cTitle //"Clique aqui para salvar as configurações de: "

	@ nlinha+15,10 BUTTON oButton PROMPT "+" SIZE 10 ,7   ACTION {|| ParamSave(cLoad,aParametros,"2"),Alert(STR0313) } OF oPanel PIXEL  //"Bloqueio efetuado. Os parametros estarão bloqueados a partir da próxima chamada."
	@ nlinha+15,22 SAY STR0309 SIZE 120,7 Of oPanel FONT oFntVerdana COLOR RGB(80,80,80) PIXEL //"Administrador: Bloquear"
	oButton:cToolTip := STR0310 + cTitle //"Clique aqui para bloquear as configurações de: "

	@ nlinha+22,10 BUTTON oButton PROMPT "+" SIZE 10 ,7   ACTION {|| ParamSave(cLoad,aParametros,"1"),Alert(STR0314)  } OF oPanel PIXEL  //"Desbloqueio efetuado. Os parametros estarão desbloqueados a partir da próxima chamada."
	@ nlinha+22,22 SAY STR0311 SIZE 120,7 Of oPanel FONT oFntVerdana COLOR RGB(80,80,80) PIXEL //"Administrador: Desbloquear"
	oButton:cToolTip := STR0312 + cTitle //"Clique aqui para desbloquear as configurações de: "
EndIf

If loMainWnd
	oMainWnd:CoorsUpdate()
EndIf

If ! lWizard
	oPanelB := TPanel():New(0,0,'',oDlg, oDlg:oFont, .T., .T.,, ,40,20,.T.,.T. )
	oPanelB:Align := CONTROL_ALIGN_BOTTOM

	For nx := 1 to Len(aButtons)
		SButton():New( 4, 157-(nx*33), aButtons[nx,1],aButtons[nx,2],oPanelB,.T.,IIf(Len(aButtons[nx])==3,aButtons[nx,3],Nil),)
	Next
	//DEFINE SBUTTON FROM 4, 114   TYPE 4 ENABLE OF oDlg ACTION ParamSave(cLoad,aParametros)
	DEFINE SBUTTON FROM 4, 157   TYPE 1 ENABLE OF oPanelB ACTION (If(ParamOk(aParametros,@aRet).And.Eval(bOk),(oDlg:End(),lOk:=.T.),(lOk:=.F.)))
	DEFINE SBUTTON FROM 4, 190   TYPE 2 ENABLE OF oPanelB ACTION (lOk:=.F.,oDlg:End())
	If loMainWnd .AND. (nLinha*2) + 80 > oMainWnd:nBottom-oMainWnd:nTop
		nBottom  := oDLg:nTop + oMAinWnd:nBottom-oMAinWnd:nTop - 105
	Else
		nBottom := oDLg:nTop + (nLinha*2) + 80
	EndIf
	nBottom := MAX(310,nBottom)
	oDlg:nBottom := nBottom
EndIf
If ! lWizard
	ACTIVATE MSDIALOG oDlg CENTERED
	If lOk .And. lUserSave
		ParamSave(cLoad,aParametros,"1")
	Endif
EndIf
Return lOk

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ParamOk ³ Autor ³ Edson Maricate          ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Valida a digitacao de todos oa parametros.                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function ParamOk(aParametros,aRet)
Local nx
Local lRet	:= .T.

For nx := 1 to Len(aParametros)
	Do case
		Case aParametros[nx,1]==1
			If aParametros[nx,9] .And. Empty(&("MV_PAR"+AllTrim(STRZERO(nx,2,0))))
				lRet := .F.
				HELP("   ",1,"OBRIGAT",,STR0174+aParametros[nx,2]+SPACE(40),3,0) //"Campo : "
				Exit
			EndIf
		Case aParametros[nx,1]==3
			If aParametros[nx,7] .And. Empty(&("MV_PAR"+AllTrim(STRZERO(nx,2,0))))
				lRet := .F.
				HELP("   ",1,"OBRIGAT",,STR0174+aParametros[nx,2]+SPACE(40),3,0) //"Campo : "
				Exit
			EndIf
		Case aParametros[nx,1]==6
			If aParametros[nx,8] .And. Empty(&("MV_PAR"+AllTrim(STRZERO(nx,2,0))))
				lRet := .F.
				HELP("   ",1,"OBRIGAT",,STR0174+aParametros[nx,2]+SPACE(40),3,0) //"Campo : "
				Exit
			EndIf
		Case aParametros[nx,1]==11
			If aParametros[nx,6] .And. Empty(&("MV_PAR"+AllTrim(STRZERO(nx,2,0))))
				lRet := .F.
				HELP("   ",1,"OBRIGAT",,STR0174+aParametros[nx,2]+SPACE(40),3,0) //"Campo : "
				Exit
			EndIf
	EndCase
Next

If lRet
	aRet := Array(Len(aParametros))
	For nx := 1 to Len(aParametros)
		aRet[nx] := &("MV_PAR"+AllTrim(STRZERO(nx,2,0)))
	Next
EndIf

Return lRet

Function ParamSave(cLoad,aParametros,cBloq)
local nx

Local cWrite := cBloq+"Arquivo de configuração - Parambox Protheus "+CRLF
Local cBarra := If(issrvunix(), "/", "\")

For nx := 1 to Len(aParametros)
	Do Case
		Case ValType(&("MV_PAR"+AllTrim(STRZERO(nx,2,0)))) == "C"
			cWrite += "C"+&("MV_PAR"+AllTrim(STRZERO(nx,2,0)))+CRLF
		Case ValType(&("MV_PAR"+AllTrim(STRZERO(nx,2,0)))) == "N"
			cWrite += "N"+Str(&("MV_PAR"+AllTrim(STRZERO(nx,2,0))))+CRLF
		Case ValType(&("MV_PAR"+AllTrim(STRZERO(nx,2,0)))) == "L"
			cWrite += "L"+If(&("MV_PAR"+AllTrim(STRZERO(nx,2,0))),"T","F")+CRLF
		Case ValType(&("MV_PAR"+AllTrim(STRZERO(nx,2,0)))) == "D"
			cWrite += "D"+DTOC(&("MV_PAR"+AllTrim(STRZERO(nx,2,0))))+CRLF
		OtherWise
			cWrite += "X"+CRLF
	EndCase
Next
If !ExistDir(cBarra + "PROFILE")
	MakeDir(cBarra + "PROFILE")
EndIf
MemoWrit(cBarra + "PROFILE" + cBarra +Alltrim(cLoad)+".PRB",cWrite)
Return

Function ParamLoad(cLoad,aParametros,nx,xDefault,lDefault)
local ny
Local cBarra 		:= If(issrvunix(), "/", "\")
Local cTypeData 	:= NIL
DEFAULT lDefault 	:= .F.

If File(cBarra + "PROFILE" + cBarra +Alltrim(cLoad)+".PRB")
	If FT_FUse(cBarra +"PROFILE"+cBarra+Alltrim(cLoad)+".PRB")<> -1
		FT_FGOTOP()
		If nx == 0
			cLinha := FT_FREADLN()
			FT_FUSE()
			Return Substr(cLinha,1,1)
		EndIf
		For ny := 1 to nx
			FT_FSKIP()
		Next
		cLinha := FT_FREADLN()
		If !lDefault
			cTypeData := Valtype(xDefault)
			Do case
				Case Substr(cLinha,1,1) == "L" .And. cTypeData == "L"
					xRet := If(Substr(cLinha,2,1)=="F",.F.,.T.)
				Case Substr(cLinha,1,1) == "D" .And. cTypeData == "D"
					xRet := CTOD(Substr(cLinha,2,10))
				Case Substr(cLinha,1,1) == "C" .And. cTypeData == "C"
					//**********************************************
					// Tratamento para aumentar o tamanha do campo *
					//**********************************************
					If VALTYPE(xDefault)=="C"
						xRet := Padr(Substr(cLinha,2,Len(cLinha)),Len(xDefault))
					Else
						xRet := Substr(cLinha,2,Len(cLinha))
					EndIf
				Case Substr(cLinha,1,1) == "N" .And. cTypeData == "N"
					xRet := Val(Substr(cLinha,2,Len(cLinha)))
				OtherWise
					xRet := xDefault
			EndCase
		Else
			xRet := xDefault
		Endif
		FT_FUSE()
	EndIf
Else
	xRet := xDefault
EndIf

Return xRet
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsDlgAF8Gnt³ Autor ³ Edson Maricate      ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Monta a tela de visualizacao do Gantt do projeto.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsDlgAF8Gnt(cVersao,aCfgTsk,oDLg,oTree,cArquivo)

Local aArea		:= GetArea()
Local aAreaAF8	:= AF8->(GetArea())
Local aConfig	:= {6,1,.F.,.T.,.T.,.T.,.F.,.F.,.F.,99}
Local dIni
Local aGantt
Local nTsk
Local nTop      := oMainWnd:nTop+35
Local nLeft     := oMainWnd:nLeft+10
Local nBottom   := oMainWnd:nBottom-12
Local nRight    := oMainWnd:nRight-10
Local cAlias := ""
Local nRecAlias := 0
Local lAuth := .F.

If oTree != Nil
	cAlias := SubStr(oTree:GetCargo(), 1, 3)
	nRecAlias := Val(SubStr(oTree:GetCargo(), 4, 12))
Else
	cAlias := (cArquivo)->ALIAS
	nRecAlias := (cArquivo)->RECNO
EndIf

dbSelectArea(cAlias)
dbGoto(nRecAlias)

Do Case
	Case cAlias == "AF8"
		lAuth := PmsChkUser(AF8->AF8_PROJET, , ;
		                    Padr(AF8->AF8_PROJET, Len(AFC->AFC_EDT)), ;
		                    "  ", 1, "ESTRUT", AF8->AF8_REVISA)
	Case cAlias == "AFC"

		lAuth := PmsChkUser(AFC->AFC_PROJET, , AFC->AFC_EDT, ;
		                    AFC->AFC_EDTPAI, 1, "ESTRUT", AFC->AFC_REVISA)
	Case cAlias == "AF9"
		lAuth := PmsChkUser(AF9->AF9_PROJET, AF9->AF9_TAREFA, , ;
		                    AF9->AF9_EDTPAI, 1, "ESTRUT", AF9->AF9_REVISA)
	Otherwise
		lAuth := .F.

EndCase

If PmsCfgGnt(cVersao, , aConfig, dIni, aGantt)
	If lAuth
		MsgRun(STR0096,cCadastro,{|| AuxDlgAF8Gnt(@cVersao,@aConfig,@dIni,@aGantt,@nTsk,nTop,nLeft,nBottom,nRight,aCfgTsk,@oTree,cArquivo) })
	Else
		Aviso(STR0324,STR0325,{STR0006},2)
	EndIf
EndIf

RestArea(aAreaAF8)
RestArea(aArea)
Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³AuxDlgAF8Gnt³ Autor ³ Edson Maricate      ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Monta a tela de visualizacao do Gantt do projeto.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function AuxDlgAF8Gnt(cVersao,aConfig,dIni,aGantt,nTsk,nTop,nLeft,nBottom,nRight,aCfgTsk,oTree,cArquivo,aArraySim)

Local aAuxCfg	:= {}
Local aTaskCPM
Local oFont
Local oDlg
Local oBtn
Local oBar
Local oArialBold
Local lRet := .T.
Local lAtualiza := .F.
Local aDep := {}
Local oGantt
Local cAlias
Local lSimula := .F.
Local lFWGetVersao := .T.
Local aButtons	:= {}

DEFAULT aConfig	:= {6,1,.F.,.T.,.T.,.T.,.F.,.F.,.F.,99}
DEFAULT aArraySim := Nil //Parametro usado para identificar a chamada da rotina foi feita pelo simulador.

DEFINE FONT oFont NAME "Arial" SIZE 0, -10
If aArraySim != Nil .AND. ValType (aArraySim) == "A"
	lSimula :=.T.
Endif

If oTree!= Nil
	cAlias	:= SubStr(oTree:GetCargo(),1,3)
	nRecAlias	:= Val(SubStr(oTree:GetCargo(),4,12))
Else
	cAlias := (cArquivo)->ALIAS
	nRecAlias := (cArquivo)->RECNO
EndIf

While lRet

	lRet := .F.

	If (aGantt==Nil) .OR. lAtualiza
		DEFINE FONT oArialBold NAME "Arial" SIZE 0, -11 BOLD
		If aConfig[9]
			aTaskCPM := PmsCalcCPM(AF8->AF8_PROJET,cVersao)[1]
		EndIf
		aGantt := {}
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Monta o array contendo os dados do Gantt                ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		If cAlias == "AF8"
			dbSelectArea("AF8")
			dbGoto(nRecAlias)
			dbSelectArea("AFC")
			dbSetOrder(1)
			dbSeek(xFilial()+AF8->AF8_PROJET+cVersao+Padr(AF8->AF8_PROJET,Len(AFC->AFC_EDT)))
		ElseIf cAlias == "AFC"
			dbSelectArea("AFC")
			dbGoto(nRecAlias)
		ElseIf cAlias == "AF9"
			dbSelectArea("AF9")
			dbGoto(nRecAlias)
			dbSelectArea("AFC")
			dbSetOrder(1)
			MsSeek(xFilial()+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_EDTPAI)
		EndIf
		If !lSimula //Caso nao seja simulacao faz a chamada padrao
			PmsArrayGnt(aGantt,AFC->AFC_PROJET+AFC->AFC_REVISA+AFC->AFC_EDT,aConfig[8],aConfig[2],oArialBold,aCfgTsk,aTaskCPM,aConfig[10],,aDep,(Len(aConfig) <  11 .Or. !aConfig[11]),If(Len(aConfig) <  12,Nil,aConfig[12]),If(Len(aConfig) <  13,Nil,aConfig[13]))
		Else
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³Monta o Array para o Grafico de Gantt baseado no ³
			//³vetor de simulacao.                              ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			PmsSimGnt(aGantt,AFC->AFC_PROJET+AFC->AFC_REVISA+AFC->AFC_EDT,aConfig[8],aConfig[2],oArialBold,aCfgTsk,aTaskCPM,aConfig[10],,aDep,aArraySim)
		Endif
		lAtualiza := .F.
	EndIf

	DEFINE MSDIALOG oDlg TITLE STR0096 OF oMainWnd PIXEL FROM nTop,nLeft TO nBottom,nRight //"Grafico de Gantt"
	oDlg:lMaximized := .T.

	aAuxCfg := {aConfig[1],aConfig[3],aConfig[4],aConfig[5],aConfig[6],aConfig[7],aConfig[9],aConfig[2]}

	AADD(aButtons, {BMP_OPCOES			, {|| If(PmsCfgGnt(cVersao,@oDlg,aConfig,@dIni,aGantt),(oDlg:End(),aButtons := {},lRet := .T.),Nil) }, STR0003})
	AADD(aButtons, {BMP_RETROCEDER_CAL	, {|| (PmsPrvGnt(cVersao,@oDlg,aConfig,@dIni,aGantt,@nTsk),(oDlg:End(),aButtons := {}),lRet := .T.) }, TIP_RETROCEDER_CAL})
	AADD(aButtons, {BMP_AVANCAR_CAL		, {|| (PmsNxtGnt(cVersao,@oDlg,aConfig,@dIni,aGantt,@nTsk),(oDlg:End(),aButtons := {}),lRet := .T.) }, STR0276})
	AADD(aButtons, {BMP_CORES			, {|| cCargoAtu := If(PMSColorGantt("MV_PMSGCOR") ,(oDlg:End(),aButtons := {},lRet := .T. ,lAtualiza := .T.),Nil)}, TIP_CORES })
	EnchoiceBar(oDlg,{|| oDlg:End()},{|| oDlg:End()},,aButtons,,,,,.F.,.F.)

	oGantt := PmsGantt(aGantt,aAuxCfg,@dIni,,oDlg,{14,1,(nBottom/2)-40,(nRight/2)-4},{{STR0098,35},{STR0068,105},{STR0099,28},{STR0100,28},{STR0101,28},{STR0279,28}},@nTsk ,aDep,AF8->AF8_PROJET+CRLF+STR0093+DTOC(AF8->AF8_START)+SPACE(15)+STR0094+DTOC(AF8->AF8_FINISH)) //"Codigo"###"Descricao"###"Data Inic."###"Data Fin."###"Durac."
	aConfig[1] := aAuxCfg[1]
	ACTIVATE MSDIALOG oDlg
End

If !lFWGetVersao .or. GetVersao(.F.) == "P10"
	PMSFreeObj(oBtn)
	PMSFreeObj(oBar)
	PMSFreeObj(oGantt)
	PMSFreeObj(oDlg)
Else
	PMSFreeObj(oBtn)
	PMSFreeObj(oBar)
	PMSFreeObj(oGantt)
	PMSFreeObj(oDlg)
Endif

Return( lRet )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsDownGnt³ Autor ³ Edson Maricate        ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Exibe uma tela com as configuracoes de visualizacao do Gantt  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsDownGnt(cVersao,oDlg,aConfig,dIni,aGantt,nTsk)
	nTsk += 10
Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsUpGnt³ Autor ³ Edson Maricate          ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Exibe uma tela com as configuracoes de visualizacao do Gantt  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsUpGnt(cVersao,oDlg,aConfig,dIni,aGantt,nTsk)
nTsk -= 10
nTsk := MAX(nTsk,1)
Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsNxtGnt³ Autor ³ Edson Maricate         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Exibe uma tela com as configuracoes de visualizacao do Gantt  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsNxtGnt(cVersao,oDlg,aConfig,dIni,aGantt,nTsk)

Do Case
	Case aConfig[1] == 0 .Or. aConfig[1] == -1
		dIni += 1
	Case aConfig[1] == 1
		dIni += 2
	Case aConfig[1] == 2
		dIni += 14
	Case aConfig[1] == 3
		dIni += 35
		dIni := FirstDay(dIni)
	Case aConfig[1] == 4
		dIni += 70
		dIni := FirstDay(dIni)
	Case aConfig[1] == 5
		dIni += 130
		dIni := FirstDay(dIni)
EndCase
//PmsDlgAF8Gnt(cVersao,aConfig,dIni,aGantt,nTsk)


Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsPrvGnt³ Autor ³ Edson Maricate         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Exibe uma tela com as configuracoes de visualizacao do Gantt  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsPrvGnt(cVersao,oDlg,aConfig,dIni,aGantt,nTsk)

Do Case
	Case aConfig[1] == 0 .Or. aConfig[1] == -1
		dIni -= 1
	Case aConfig[1] == 1
		dIni -= 2
	Case aConfig[1] == 2
		dIni -= 14
	Case aConfig[1] == 3
		dIni -= 10
		dIni := FirstDay(dIni)
	Case aConfig[1] == 4
		dIni -= 40
		dIni := FirstDay(dIni)
	Case aConfig[1] == 5
		dIni -= 100
		dIni := FirstDay(dIni)
EndCase

//PmsDlgAF8Gnt(cVersao,aConfig,dIni,aGantt,nTsk)

Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsArrayGnt³ Autor ³ Edson Maricate       ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Monta o array contendo os dados do Gantt.                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametro ³ aGant : Array contendo os dados do projeto.              	³±±
±±³          ³      [x,1] : Array contendo os dados das tarefas.         	³±±
±±³          ³         [1,1] : Codigo da Edt/Tarefa                        ³±±
±±³          ³         [1,2] : Descricao da Edt/Tarefa                     ³±±
±±³          ³         [1,3] : Data de Inicio                              ³±±
±±³          ³         [1,4] : Data de Fim                                 ³±±
±±³          ³         [1,5] : Qtde de Horas                               ³±±
±±³          ³         [1,6] : <Desconhecido>                              ³±±
±±³          ³         [1,7] : Descrição da tarefa Formatada               ³±±
±±³          ³         [1,8] : Status da Tarefa                            ³±±
±±³          ³         [1,9] : Status da Tarefa                            ³±±
±±³          ³                        P - Previsto                   	    ³±±
±±³          ³                        R - Realizado                         ³±±
±±³          ³      [x,2] : Array contendo os intervalos das tarefas    	³±±
±±³          ³         [2, 1] : Data de Inicio (Prevista/Realizada)        ³±±
±±³          ³         [2, 2] : Hora de Inicio (Prevista/Realizada)        ³±±
±±³          ³         [2, 3] : Data de Fim (Prevista/Realizada)           ³±±
±±³          ³         [2, 4] : Hora de Fim (Prevista/Realizada)           ³±±
±±³          ³         [2, 5] : Percentual Executado                       ³±±
±±³          ³         [2, 6] : <Desconhecido>                             ³±±
±±³          ³         [2, 7] : CodeBlock do L-Click para visualizar       ³±±
±±³          ³         [2, 8] : Metodo de Alinhamento         	            ³±±
±±³          ³                              1 - Normal                    	³±±
±±³          ³                              2 - Acima a Direita           	³±±
±±³          ³         [2, 9] : Código da Cor da fonte de letra            ³±±
±±³          ³         [2,10] : Status do Intervaldo da Tarefa             ³±±
±±³          ³                        P - Previsto                   	    ³±±
±±³          ³                        R - Realizado                         ³±±
±±³          ³         [2,11] : CodeBlock do R-Click                       ³±±
±±³          ³      [x,3] : Código da Cor da barra do Gantt                ³±±
±±³          ³      [x,4] : Objeto Fonte    	                            ³±±
±±³          ³      [x,5] : Status da Tarefa                               ³±±
±±³          ³                 P - Previsto                   	            ³±±
±±³          ³                 R - Realizado                                ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsArrayGnt(aGant,cChave,lViewRec,nTpData,oBold,aConfig,aTaskCPM,nMaxNiveis,nNivelAtu,aTarefasDep,lShowTasks,cFiltAFC,cFiltAF9)

Local aArea		:= GetArea()
Local aAreaAFC	:= AFC->(GetArea())
Local aAreaAF9	:= AF9->(GetArea())
Local cCritica	:= ""
Local nPosTsk
Local aCorBarras := LoadCorBarra( "MV_PMSGCOR" )
Local lAdiciona := .T.
Local nEspaco := 0
Local nRealEspaco := 0
Local cDescri := ""
Local cDesc		:= ""
Local nContLin:= 0
Local nFaz		:= 0
Local d_DTATUF := stod("")
Local cFilAF9		:= xFilial("AF9")
Local cFilAFD		:= xFilial("AFD")
Local cFilAJ4		:= xFilial("AJ4")

Local aNodes := {}
Local nNode  := 0

DEFAULT aTarefasDep := {}
DEFAULT nNivelAtu := 1
DEFAULT aConfig	:= {1, PMS_MIN_DATE, PMS_MAX_DATE}
DEFAULT lShowTasks := .T.
DEFAULT cFiltAFC	:=	""
DEFAULT cFiltAF9	:= ""

	If (AFC->AFC_NIVEL=='001' .Or. Empty(cFiltAFC) .Or. &(cFiltAFC)) .And. PmsChkUser(AFC->AFC_PROJET,,AFC->AFC_EDT,AFC->AFC_EDTPAI,1,"ESTRUT",AFC->AFC_REVISA)
		If 	(aConfig[1]==1) .Or.;
			(aConfig[1]==2 .And. !Empty(AFC->AFC_DTATUF)).Or.;
			(aConfig[1]==3 .And. Empty(AFC->AFC_DTATUF))
			If !(AFC->AFC_FINISH<aConfig[2].Or.AFC->AFC_START>aConfig[3]) .Or. Empty(AFC->AFC_START)
				/*
					Adiciona itens de tarefas PREVISTAS ao aGantt
				   ---------------------------------------------
					.: nTpData :.
					1 -> Previsto
					3 -> Previsto X Realizado
				*/
				If nTpData==1 .Or. nTpData == 3
					nRealEspaco := (VAL(AFC->AFC_NIVEL)-1)
					nEspaco := nRealEspaco*3
					If Len(AllTrim( AFC->AFC_DESCRI )) <= (31-(nRealEspaco))
						cDescri := SPACE(nEspaco)+Substr( AFC->AFC_DESCRI,1,31-(nRealEspaco) )
					Else
						cDescri := SPACE(nEspaco)+Substr( AFC->AFC_DESCRI,1,28-(nRealEspaco) )+ "..."
					EndIf

					nContLin:=0
					If Len(space(nEspaco)+alltrim(AFC->AFC_DESCRI)) >= 30
						nTmpLin	:=	Len(space(nEspaco)+alltrim(AFC->AFC_DESCRI))/29
						nTmpLin	:=	If(Int(nTmpLin)<>nTmpLin,Int(nTmpLin)+1,nTmpLin)
						For nFaz := 1 to nTmpLin
							nContlin+=1
						Next nFaz
					Else
						nContLin := 1
					EndIf

					Do Case
						Case !Empty(AFC->AFC_DTATUF)
							aAdd(aGant,{{AFC->AFC_EDT,cDescri,DTOC(AFC->AFC_START),DTOC(AFC->AFC_FINISH),Transform(AFC->AFC_HDURAC,"@E 99999.99h"),"",SPACE(nEspaco)+Alltrim(AFC->AFC_DESCRI),nContlin ,"P"},{{AFC->AFC_START,AFC->AFC_HORAI,AFC->AFC_FINISH,AFC->AFC_HORAF,STR0139+AllTrim(TransForm(PmsPOCAFC(AFC->AFC_PROJET,AFC->AFC_REVISA,AFC->AFC_EDT,CTOD("01/12/2020")),"@E 999.99%")),,"PmsViewEDT("+STR(AFC->(RecNo()))+")",1,CLR_GRAY ,"P"}},ValorCorBarra( "1" ,aCorBarras ) ,oBold ,"P"}) //"POC:"
						Case !Empty(AFC->AFC_DTATUI)
							aAdd(aGant,{{AFC->AFC_EDT,cDescri,DTOC(AFC->AFC_START),DTOC(AFC->AFC_FINISH),Transform(AFC->AFC_HDURAC,"@E 99999.99h"),"",SPACE(nEspaco)+Alltrim(AFC->AFC_DESCRI),nContlin ,"P"},{{AFC->AFC_START,AFC->AFC_HORAI,AFC->AFC_FINISH,AFC->AFC_HORAF,STR0139+AllTrim(TransForm(PmsPOCAFC(AFC->AFC_PROJET,AFC->AFC_REVISA,AFC->AFC_EDT,CTOD("01/12/2020")),"@E 999.99%")),,"PmsViewEDT("+STR(AFC->(RecNo()))+")",1,CLR_BROWN ,"P"}},ValorCorBarra( "1" ,aCorBarras ),oBold ,"P"}) //"POC:"
						Case dDataBase > AFC->AFC_START
							aAdd(aGant,{{AFC->AFC_EDT,cDescri,DTOC(AFC->AFC_START),DTOC(AFC->AFC_FINISH),Transform(AFC->AFC_HDURAC,"@E 99999.99h"),"",SPACE(nEspaco)+Alltrim(AFC->AFC_DESCRI),nContlin ,"P"},{{AFC->AFC_START,AFC->AFC_HORAI,AFC->AFC_FINISH,AFC->AFC_HORAF,STR0139+AllTrim(TransForm(PmsPOCAFC(AFC->AFC_PROJET,AFC->AFC_REVISA,AFC->AFC_EDT,CTOD("01/12/2020")),"@E 999.99%")),,"PmsViewEDT("+STR(AFC->(RecNo()))+")",1,CLR_HRED ,"P"}},ValorCorBarra( "1" ,aCorBarras ) ,oBold ,"P"}) //"POC:"
						OtherWise
							aAdd(aGant,{{AFC->AFC_EDT,cDescri,DTOC(AFC->AFC_START),DTOC(AFC->AFC_FINISH),Transform(AFC->AFC_HDURAC,"@E 99999.99h"),"",SPACE(nEspaco)+Alltrim(AFC->AFC_DESCRI),nContlin  ,"P"},{{AFC->AFC_START,AFC->AFC_HORAI,AFC->AFC_FINISH,AFC->AFC_HORAF,STR0139+AllTrim(TransForm(PmsPOCAFC(AFC->AFC_PROJET,AFC->AFC_REVISA,AFC->AFC_EDT,CTOD("01/12/2020")),"@E 999.99%")),,"PmsViewEDT("+STR(AFC->(RecNo()))+")",1,CLR_GREEN ,"P"}},ValorCorBarra( "1" ,aCorBarras ),oBold ,"P"}) //"POC:"
					EndCase
				EndIf
				/*
					Adiciona itens de tarefas REALIZADAS ao aGantt
				   ----------------------------------------------
					.: nTpData :.
					2 -> Realizado
					3 -> Previsto X Realizado
				*/
				If nTpData== 2 .Or. nTpData == 3
					nRealEspaco := (VAL(AFC->AFC_NIVEL)-1)//(VAL(AF9->AF9_NIVEL)-1)
					nEspaco := nRealEspaco*3
					If Len(AllTrim( AFC->AFC_DESCRI/*AF9->AF9_DESCRI*/ )) <= (34-(nRealEspaco))
						cDescri := SPACE(nEspaco)+Substr( AFC->AFC_DESCRI/*AF9->AF9_DESCRI*/,1,34-(nRealEspaco) )
					Else
						cDescri := SPACE(nEspaco)+Substr( AFC->AFC_DESCRI/*AF9->AF9_DESCRI*/,1,31-(nRealEspaco) )+"..."
					EndIf
					If AFC->(ColumnPos("AFC_HRATUI")) > 0
						If !Empty(AFC->AFC_DTATUI)
							If !Empty(AFC->AFC_DTATUF)
								aAdd(aGant,{{AFC->AFC_EDT,cDescri,DTOC(AFC->AFC_DTATUI),DTOC(AFC->AFC_DTATUF),Transform(AFC->AFC_HDURAC,"@E 99999.99h"),"",SPACE(nEspaco)+Alltrim(AFC->AFC_DESCRI),nContlin ,"R"},{{AFC->AFC_DTATUI,AFC->AFC_HRATUI,AFC->AFC_DTATUF,AFC->AFC_HRATUF,STR0139+AllTrim(TransForm(PmsPOCAFC(AFC->AFC_PROJET,AFC->AFC_REVISA,AFC->AFC_EDT,CTOD("01/12/2020")),"@E 999.99%")),,"PmsViewEDT("+STR(AFC->(RecNo()))+")",1,CLR_BLACK ,"R"}},CLR_GRAY ,oBold ,"R"}) //"POC:"
							Else
								d_DTATUF := dDatabase
								If d_DTATUF < AFC->AFC_DTATUI
									d_DTATUF := AFC->AFC_DTATUI
							EndIf
								aAdd(aGant,{{AFC->AFC_EDT,cDescri,DTOC(AFC->AFC_DTATUI),DTOC(AFC->AFC_DTATUF),Transform(AFC->AFC_HDURAC,"@E 99999.99h"),"",SPACE(nEspaco)+Alltrim(AFC->AFC_DESCRI),nContlin ,"R"},{{AFC->AFC_DTATUI,AFC->AFC_HRATUI,d_DTATUF,AFC->AFC_HRATUF,STR0139+AllTrim(TransForm(PmsPOCAFC(AFC->AFC_PROJET,AFC->AFC_REVISA,AFC->AFC_EDT,CTOD("01/12/2020")),"@E 999.99%")),,"PmsViewEDT("+STR(AFC->(RecNo()))+")",1,CLR_BLACK ,"R"}},CLR_GRAY ,oBold ,"R"}) //"POC:"
						EndIf
					Else
							aAdd(aGant,{{AFC->AFC_EDT,cDescri,DTOC(AFC->AFC_DTATUI),DTOC(AFC->AFC_DTATUF),Transform(AFC->AFC_HDURAC,"@E 99999.99h"),"",SPACE(nEspaco)+Alltrim(AFC->AFC_DESCRI),nContlin ,"R"},{{dDataBase,"00:00",dDataBase,"00:00",STR0139+AllTrim(TransForm(PmsPOCAFC(AFC->AFC_PROJET,AFC->AFC_REVISA,AFC->AFC_EDT,CTOD("01/12/2020")),"@E 999.99%")),,"PmsViewEDT("+STR(AFC->(RecNo()))+")",1,CLR_BLACK ,"R"}},CLR_GRAY ,oBold ,"R"}) //"POC:"
						EndIf
					Else
						If !Empty(AFC->AFC_DTATUI)
							If !Empty(AFC->AFC_DTATUF)
								aAdd(aGant,{{AFC->AFC_EDT,cDescri,DTOC(AFC->AFC_DTATUI),DTOC(AFC->AFC_DTATUF),Transform(AFC->AFC_HDURAC,"@E 99999.99h"),"",SPACE(nEspaco)+Alltrim(AFC->AFC_DESCRI),nContlin ,"R"},{{AFC->AFC_DTATUI,"08:00",AFC->AFC_DTATUF,"18:00",STR0139+AllTrim(TransForm(PmsPOCAFC(AFC->AFC_PROJET,AFC->AFC_REVISA,AFC->AFC_EDT,CTOD("01/12/2020")),"@E 999.99%")),,"PmsViewEDT("+STR(AFC->(RecNo()))+")",1,CLR_BLACK ,"R"}},CLR_GRAY ,oBold ,"R"}) //"POC:"
							Else
								d_DTATUF := dDatabase
								If d_DTATUF < AFC->AFC_DTATUI
									d_DTATUF := AFC->AFC_DTATUI
								EndIf
								aAdd(aGant,{{AFC->AFC_EDT,cDescri,DTOC(AFC->AFC_DTATUI),DTOC(AFC->AFC_DTATUF),Transform(AFC->AFC_HDURAC,"@E 99999.99h"),"",SPACE(nEspaco)+Alltrim(AFC->AFC_DESCRI),nContlin ,"R"},{{AFC->AFC_DTATUI,"08:00",d_DTATUF,"18:00",STR0139+AllTrim(TransForm(PmsPOCAFC(AFC->AFC_PROJET,AFC->AFC_REVISA,AFC->AFC_EDT,CTOD("01/12/2020")),"@E 999.99%")),,"PmsViewEDT("+STR(AFC->(RecNo()))+")",1,CLR_BLACK ,"R"}},CLR_GRAY ,oBold ,"R"}) //"POC:"
							EndIf
						Else
							aAdd(aGant,{{AFC->AFC_EDT,cDescri,DTOC(AFC->AFC_DTATUI),DTOC(AFC->AFC_DTATUF),Transform(AFC->AFC_HDURAC,"@E 99999.99h"),"",SPACE(nEspaco)+Alltrim(AFC->AFC_DESCRI),nContlin ,"R"},{{dDataBase,"00:00",dDataBase,"00:00",STR0139+AllTrim(TransForm(PmsPOCAFC(AFC->AFC_PROJET,AFC->AFC_REVISA,AFC->AFC_EDT,PMS_MAX_DATE),"@E 999.99%")),,"PmsViewEDT("+STR(AFC->(RecNo()))+")",1,CLR_BLACK ,"R"}},CLR_GRAY ,oBold}) //"POC:"
						EndIf
					EndIf
				EndIf
			EndIf
		EndIf
	EndIf

If nNivelAtu < nMaxNiveis
	nNivelAtu++
	If lShowTasks
		dbSelectArea("AF9")
		dbSetOrder(2)
		MsSeek(xFilial()+cChave)
		While !Eof() .And. AF9->AF9_FILIAL+AF9->AF9_PROJET+AF9->AF9_REVISA+;
							AF9->AF9_EDTPAI==cFilAF9+cChave
			lAdiciona := .T.
			If (Empty(cFiltAF9) .Or. &(cFiltAF9)) .And. PmsChkUser(AF9->AF9_PROJET,AF9->AF9_TAREFA,,AF9->AF9_EDTPAI,1,"ESTRUT",AF9->AF9_REVISA)
				If 	(aConfig[1]==1) .Or.;
					(aConfig[1]==2 .And. !Empty(AF9->AF9_DTATUF)).Or.;
					(aConfig[1]==3 .And. Empty(AF9->AF9_DTATUF))

					If (Len(aConfig)>3)
						If !Empty(aConfig[4])
							lAdiciona := PmsHasRsrc(AF9->AF9_PROJET, AF9->AF9_REVISA, AF9->AF9_TAREFA, aConfig[4])
						EndIf
					EndIf

					If lAdiciona
						aAdd(aNodes, {PMS_TASK,;
						              AF9->(Recno()),;
						IIf(Empty(AF9->AF9_ORDEM), "000", AF9->AF9_ORDEM),;
						              AF9->AF9_TAREFA})

						dbSelectArea("AFD")
						dbSetOrder(1)

						If MsSeek(cFilAFD+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA)
							While !AFD->(EOF()) .And.  cFilAFD+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA== AFD->AFD_FILIAL+AFD->AFD_PROJET+AFD->AFD_REVISA+AFD->AFD_TAREFA
								nPos := aScan( aTarefasDep ,{|aTarefa| aTarefa[1] == AFD->AFD_TAREFA})
								If nPos > 0
									aadd( aTarefasDep[nPos,2],{ AFD->AFD_PREDEC ,AFD->AFD_TIPO } )
								Else
									aadd( aTarefasDep ,{ AFD->AFD_TAREFA ,{ {AFD->AFD_PREDEC ,AFD->AFD_TIPO} }} )
								Endif
								AFD->(dbSkip())
							End

						EndIf

						dbSelectArea("AJ4")
						dbSetOrder(1)

						If MsSeek(cFilAJ4+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA)
							While !AJ4->(EOF()) .And.  cFilAJ4+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA== AJ4->AJ4_FILIAL+AJ4->AJ4_PROJET+AJ4->AJ4_REVISA+AJ4->AJ4_TAREFA
								nPos := aScan( aTarefasDep ,{|aTarefa| aTarefa[1] == AJ4->AJ4_TAREFA})
								If nPos > 0
									aadd( aTarefasDep[nPos,2],{ AJ4->AJ4_PREDEC ,AJ4->AJ4_TIPO } )
								Else
									aadd( aTarefasDep ,{ AJ4->AJ4_TAREFA ,{ {AJ4->AJ4_PREDEC ,AJ4->AJ4_TIPO} }} )
								Endif
								AJ4->(dbSkip())
							End

						EndIf

					EndIf
				EndIf
			EndIf
			dbSelectArea("AF9")
			dbSkip()
		End
	Endif
	dbSelectArea("AFC")
	dbSetOrder(2)
	MsSeek(xFilial()+cChave)
	While !Eof() .And. AFC->AFC_FILIAL+AFC->AFC_PROJET+AFC->AFC_REVISA+;
						AFC->AFC_EDTPAI==xFilial("AFC")+cChave
		If (Empty(cFiltAFC) .Or. &(cFiltAFC))
			aAdd(aNodes, {PMS_WBS,;
			              AFC->(Recno()),;
			IIf(Empty(AFC->AFC_ORDEM), "000", AFC->AFC_ORDEM),;
			              AFC->AFC_EDT})
		Endif
		dbSkip()
	EndDo

	aSort(aNodes, , , {|x, y| x[3]+x[4] < y[3]+y[4]})

	For nNode := 1 To Len(aNodes)
		If aNodes[nNode,1] == PMS_TASK
			// Tarefa
			dbSelectArea("AF9")
			AF9->(dbGoto(aNodes[nNode,2]))


			If !(AF9->AF9_FINISH<aConfig[2].Or.AF9->AF9_START>aConfig[3]) .Or. Empty(AF9->AF9_START)
				/*
					Adiciona itens de tarefas PREVISTAS ao aGantt
				   ---------------------------------------------
					.: nTpData :.
					1 -> Previsto
					3 -> Previsto X Realizado
				*/
				If nTpData==1 .Or. nTpData == 3
	        		If aTaskCPM <> Nil
	        			nPosTsk := aScan(aTaskCPM,{|x| x[1] == AF9->AF9_TAREFA })
	        			If nPosTsk > 0
	        				If 	DTOS(AF9->AF9_FINISH)+AF9->AF9_HORAF==;
								DTOS(aTaskCPM[nPosTsk,12,3])+aTaskCPM[nPosTsk,12,4]
	        					cCritica := STR0179
     						Else
	        					cCritica := STR0180
        					EndIf
	        			Else
	        				cCritica := STR0180
	        			EndIf
	        		EndIf
					nRealEspaco := (VAL(AF9->AF9_NIVEL)-1)
					nEspaco := nRealEspaco*3
					If Len(AllTrim( AF9->AF9_DESCRI )) <= (34-(nRealEspaco))
						cDescri := SPACE(nEspaco)+Substr( AF9->AF9_DESCRI,1,34-(nRealEspaco) )
					Else
						cDescri := SPACE(nEspaco)+Substr( AF9->AF9_DESCRI,1,31-(nRealEspaco) )+"..."
					EndIf
					cDesc := SPACE(nEspaco)+Alltrim(AF9->AF9_DESCRI)
					nContLin:=0
					If Len(cDesc) > 30
						nTmpLin	:=	Len(cDesc)/29
						nTmpLin	:=	If(Int(nTmpLin)<>nTmpLin,Int(nTmpLin)+1,nTmpLin)
						For nFaz := 1 to nTmpLin
							nContlin+=1
						Next nFaz
					Else
						nContLin := 1
					EndIf

					Do Case
						Case !Empty(AF9->AF9_DTATUF)
							aAdd(aGant,{{AF9->AF9_TAREFA,cDescri,DTOC(AF9->AF9_START),DTOC(AF9->AF9_FINISH),Transform(AF9->AF9_HDURAC,"@E 99999.99h"),cCritica,SPACE(nEspaco)+Alltrim(AF9->AF9_DESCRI),nContlin ,"P"},{{AF9->AF9_START,AF9->AF9_HORAI,AF9->AF9_FINISH,AF9->AF9_HORAF,STR0139+AllTrim(TransForm(PmsPOCAF9(AF9->AF9_PROJET, AF9->AF9_REVISA,AF9->AF9_TAREFA,PMS_MAX_DATE,AF9->AF9_QUANT),"@E 999.99%")),,"PmsViewTask("+STR(AF9->(RecNo()))+")",1,CLR_GRAY ,"P"}},ValorCorBarra( "2" ,aCorBarras ),}) //"POC:"
						Case !Empty(AF9->AF9_DTATUI)
							aAdd(aGant,{{AF9->AF9_TAREFA,cDescri,DTOC(AF9->AF9_START),DTOC(AF9->AF9_FINISH),Transform(AF9->AF9_HDURAC,"@E 99999.99h"),cCritica,SPACE(nEspaco)+Alltrim(AF9->AF9_DESCRI),nContlin ,"P"},{{AF9->AF9_START,AF9->AF9_HORAI,AF9->AF9_FINISH,AF9->AF9_HORAF,STR0139+AllTrim(TransForm(PmsPOCAF9(AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_TAREFA,PMS_MAX_DATE,AF9->AF9_QUANT),"@E 999.99%")),,"PmsViewTask("+STR(AF9->(RecNo()))+")",1,CLR_BROWN ,"P"}},ValorCorBarra( "2" ,aCorBarras ),}) //"POC:"
						Case dDataBase > AF9->AF9_START
							aAdd(aGant,{{AF9->AF9_TAREFA,cDescri,DTOC(AF9->AF9_START),DTOC(AF9->AF9_FINISH),Transform(AF9->AF9_HDURAC,"@E 99999.99h"),cCritica,SPACE(nEspaco)+Alltrim(AF9->AF9_DESCRI),nContlin ,"P"},{{AF9->AF9_START,AF9->AF9_HORAI,AF9->AF9_FINISH,AF9->AF9_HORAF,STR0139+AllTrim(TransForm(PmsPOCAF9(AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_TAREFA,PMS_MAX_DATE,AF9->AF9_QUANT),"@E 999.99%")),,"PmsViewTask("+STR(AF9->(RecNo()))+")",1,CLR_HRED ,"P"}},ValorCorBarra( "2" ,aCorBarras ),}) //"POC:"
						OtherWise
							aAdd(aGant,{{AF9->AF9_TAREFA,cDescri,DTOC(AF9->AF9_START),DTOC(AF9->AF9_FINISH),Transform(AF9->AF9_HDURAC,"@E 99999.99h"),cCritica,SPACE(nEspaco)+Alltrim(AF9->AF9_DESCRI),nContlin ,"P"},{{AF9->AF9_START,AF9->AF9_HORAI,AF9->AF9_FINISH,AF9->AF9_HORAF,STR0139+AllTrim(TransForm(PmsPOCAF9(AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_TAREFA,PMS_MAX_DATE,AF9->AF9_QUANT),"@E 999.99%")),,"PmsViewTask("+STR(AF9->(RecNo()))+")",1,CLR_GREEN ,"P"}},ValorCorBarra( "2" ,aCorBarras ),}) //"POC:"
					EndCase

					If lViewRec
						PmsAddRsrG(@aGant, AF9->AF9_PROJET, AF9->AF9_REVISA, AF9->AF9_TAREFA, nContLin, SPACE((VAL(AF9->AF9_NIVEL)-1)*2), ValorCorBarra( "3" ,aCorBarras ))
					EndIf

				EndIf
				/*
					Adiciona itens de tarefas REALIZADAS ao aGantt
				   ----------------------------------------------
					.: nTpData :.
					2 -> Realizado
					3 -> Previsto X Realizado
				*/
    		    If nTpData == 2 .Or. nTpData == 3
	        		If aTaskCPM <> Nil
	        			nPosTsk := aScan(aTaskCPM,{|x| x[1] == AF9->AF9_TAREFA })
	        			If nPosTsk > 0
	        				If 	DTOS(AF9->AF9_FINISH)+AF9->AF9_HORAF==;
								DTOS(aTaskCPM[nPosTsk,12,3])+aTaskCPM[nPosTsk,12,4]
	        					cCritica := STR0179
        						Else
	        					cCritica := STR0180
        					EndIf
	        			Else
	        				cCritica := STR0180
	        			EndIf
	        		EndIf
					nRealEspaco := (VAL(AF9->AF9_NIVEL)-1)
					nEspaco := nRealEspaco*3
					If Len(AllTrim( AF9->AF9_DESCRI )) <= (34-(nRealEspaco))
						cDescri := SPACE(nEspaco)+Substr( AF9->AF9_DESCRI,1,34-(nRealEspaco) )
					Else
						cDescri := SPACE(nEspaco)+Substr( AF9->AF9_DESCRI,1,31-(nRealEspaco) )+"..."
					EndIf
					If AF9->(ColumnPos("AF9_HRATUI")) > 0
						If !Empty(AF9->AF9_DTATUI)
							If !Empty(AF9->AF9_DTATUF)
								aAdd(aGant,{{AF9->AF9_TAREFA,cDescri,DTOC(AF9->AF9_DTATUI),DTOC(AF9->AF9_DTATUF),Transform(AF9->AF9_HDURAC,"@E 99999.99h"),cCritica,SPACE(nEspaco)+Alltrim(AF9->AF9_DESCRI),nContlin ,"R"},{{AF9->AF9_DTATUI,AF9->AF9_HRATUI,AF9->AF9_DTATUF,AF9->AF9_HRATUF,STR0139+AllTrim(TransForm(PmsPOCAF9(AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_TAREFA,CTOD("01/12/2020"),AF9->AF9_QUANT),"@E 999.99%")),,"PmsViewTask("+STR(AF9->(RecNo()))+")",1,CLR_BLACK ,"R"}} ,CLR_GRAY ,,"R"}) //"POC:"
							Else
								d_DTATUF := dDataBase
								If dDataBase < AF9->AF9_DTATUI
									d_DTATUF := AF9->AF9_DTATUI
							EndIf
								aAdd(aGant,{{AF9->AF9_TAREFA,cDescri,DTOC(AF9->AF9_DTATUI),DTOC(AF9->AF9_DTATUF),Transform(AF9->AF9_HDURAC,"@E 99999.99h"),cCritica,SPACE(nEspaco)+Alltrim(AF9->AF9_DESCRI),nContlin ,"R"},{{AF9->AF9_DTATUI,AF9->AF9_HRATUI,d_DTATUF,AF9->AF9_HRATUF,STR0139+AllTrim(TransForm(PmsPOCAF9(AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_TAREFA,CTOD("01/12/2020"),AF9->AF9_QUANT),"@E 999.99%")),,"PmsViewTask("+STR(AF9->(RecNo()))+")",1,CLR_BLACK ,"R"}} ,CLR_GRAY ,,"R"}) //"POC:"
						EndIf
					Else
							aAdd(aGant,{{AF9->AF9_TAREFA,cDescri,DTOC(AF9->AF9_DTATUI),DTOC(AF9->AF9_DTATUF),Transform(AF9->AF9_HDURAC,"@E 99999.99h"),cCritica,SPACE(nEspaco)+Alltrim(AF9->AF9_DESCRI),nContlin ,"R"},{{dDataBase,"00:00",dDataBase,"00:00",STR0139+AllTrim(TransForm(PmsPOCAF9(AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_TAREFA,CTOD("01/12/2020"),AF9->AF9_QUANT),"@E 999.99%")),,"PmsViewTask("+STR(AF9->(RecNo()))+")",1,CLR_BLACK ,"R"}} ,CLR_GRAY ,,"R"}) //"POC:"
						EndIf
					Else
						If !Empty(AF9->AF9_DTATUI)
							If !Empty(AF9->AF9_DTATUF)
								aAdd(aGant,{{AF9->AF9_TAREFA,cDescri,DTOC(AF9->AF9_DTATUI),DTOC(AF9->AF9_DTATUF),Transform(AF9->AF9_HDURAC,"@E 99999.99h"),cCritica,SPACE(nEspaco)+Alltrim(AF9->AF9_DESCRI),nContlin ,"R"},{{AF9->AF9_DTATUI,"08:00",AF9->AF9_DTATUF,"18:00",STR0139+AllTrim(TransForm(PmsPOCAF9(AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_TAREFA,PMS_MAX_DATE,AF9->AF9_QUANT),"@E 999.99%")),,"PmsViewTask("+STR(AF9->(RecNo()))+")",1,CLR_BLACK ,"R"}},CLR_GRAY,}) //"POC:"
							Else
								d_DTATUF := dDataBase
								If dDataBase < AF9->AF9_DTATUI
									d_DTATUF := AF9->AF9_DTATUI
								EndIf
								aAdd(aGant,{{AF9->AF9_TAREFA,cDescri,DTOC(AF9->AF9_DTATUI),DTOC(AF9->AF9_DTATUF),Transform(AF9->AF9_HDURAC,"@E 99999.99h"),cCritica,SPACE(nEspaco)+Alltrim(AF9->AF9_DESCRI),nContlin ,"R"},{{AF9->AF9_DTATUI,"08:00",d_DTATUF,"18:00",STR0139+AllTrim(TransForm(PmsPOCAF9(AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_TAREFA,CTOD("01/12/2020"),AF9->AF9_QUANT),"@E 999.99%")),,"PmsViewTask("+STR(AF9->(RecNo()))+")",1,CLR_BLACK  ,"R"}} ,CLR_GRAY ,,"R"}) //"POC:"
							EndIf
						Else
							aAdd(aGant,{{AF9->AF9_TAREFA,cDescri,DTOC(AF9->AF9_DTATUI),DTOC(AF9->AF9_DTATUF),Transform(AF9->AF9_HDURAC,"@E 99999.99h"),cCritica,SPACE(nEspaco)+Alltrim(AF9->AF9_DESCRI),nContlin ,"R"},{{dDataBase,"00:00",dDataBase,"00:00",STR0139+AllTrim(TransForm(PmsPOCAF9(AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_TAREFA,PMS_MAX_DATE,AF9->AF9_QUANT),"@E 999.99%")),,"PmsViewTask("+STR(AF9->(RecNo()))+")",1,CLR_BLACK ,"R"}},CLR_GRAY,}) //"POC:"
						EndIf
					EndIf
				EndIf
			EndIf

		Else
			// EDT
			dbSelectArea("AFC")
			AFC->(dbGoto(aNodes[nNode,2]))
			PmsArrayGnt(aGant,AFC->AFC_PROJET+AFC->AFC_REVISA+AFC->AFC_EDT,lViewRec,nTpData,oBold,aConfig,aTaskCPM,nMaxNiveis,nNivelAtu,aTarefasDep,lShowTasks,cFiltAFC,cFiltAF9)
		EndIf
	Next
EndIf

RestArea(aAreaAF9)
RestArea(aAreaAFC)
RestArea(aArea)

Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsCfgGnt³ Autor ³ Edson Maricate         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Exibe uma tela com as configuracoes de visualizacao do Gantt  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsCfgGnt(cVersao,oDlg,aConfig,dIni,aGantt)
Local lRet		:= .F.
Local nSavCfg1	:= aConfig[1]
Local nOldTp	:= aConfig[2]
Local lSavCfg8	:= aConfig[8]
Local lCritico	:= aConfig[9]
Local nNiveis	:= aConfig[10]
Local lTasks	:=	.F.
Local cFiltAFC	:=	""
Local cFiltAF9	:=	""
If Len(aConfig) < 11
	Aadd(aConfig,.F.)
Endif
If Len(aConfig) < 12
	Aadd(aConfig,"")
Endif
If Len(aConfig) < 13
	Aadd(aConfig,"")
Endif
lTasks	:=	aConfig[11]
cFiltAFC	:=	aConfig[12]
cFiltAF9	:=	aConfig[13]

If ParamBox({	{3,STR0102,aConfig[1],{STR0103,STR0104,STR0105,STR0192,STR0193,STR0342},60,,.F.},; //"Escala de Tempo"###"Diario"###"Semanal"###"Mensal"###"Mensal (Zoom 30%)"###"Bimestral"
				{3,STR0185,aConfig[2],{STR0186,STR0187,STR0188},70,,.F.},; //"Exibir Gantt"###"Previsto"###"Realizado"###"PrevistoxRealizado"
				{4,STR0106,aConfig[3],STR0098,40,,.F.},; //"Exibir detalhes :"###"Codigo"
				{4,"",aConfig[4],STR0068,40,,.F.},; //"Descricao"
				{4,"",aConfig[5],STR0107,40,,.F.},; //"Data Inicial"
				{4,"",aConfig[6],STR0108,40,,.F.},; //"Data Final"
				{4,"",aConfig[7],STR0109,40,,.F.},; //"Duracao"
				{4,"",aConfig[8],STR0141,55,,.F.},; //"Mostrar Recursos"
				{4,"",aConfig[9],STR0278,75,,.F.},;
				{1,STR0372,aConfig[10],"@E 99","","","",20 ,.T. },; //"Niveis do Gantt"
				{4,"",aConfig[11],STR0373,70,,.F.},; //"Nao mostrar tarefas"
				{7,STR0374,'AFC',aConfig[12]},;//"Filtro EDTS"
				{7,STR0353,'AF9',aConfig[13],"!MV_PAR11"};//"Filtro Tarefas"
				},STR0110,aConfig,,,.F.,120,3) //"Configuracoes do Gantt"

	If nSavCfg1 != aConfig[1]
		dIni := PMS_EMPTY_DATE
	EndIf
	lRet := .T.
	If aConfig[2]!=nOldTp .Or. aConfig[8]!=lSavCfg8.Or. aConfig[9]!=lCritico .Or. nNiveis<>aConfig[10] .Or.;
		lTasks<> aConfig[11] .Or. cFiltAFC	<>	aConfig[12] .Or. cFiltAF9	<>	aConfig[13]
		aGantt := Nil
	EndIf
EndIf

Return lRet


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡ao    ³PmsImpoReg³ Autor ³ Michel Dantas         ³ Data ³ 04-11-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡ao ³Funcao que copia um registro do arquivo de alias diferente.   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1 : Alias Destino.                                        ³±±
±±³          ³ExpA2 : Relacionamento para campos com nomes diferentes.      ³±±
±±³          ³        [x,1] - Campo Destino                                ³±±
±±³          ³        [x,2] - Valor                                        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observacao³Esta funcao copia o registro de um outro alias para o alias   ³±±
±±³          ³destino informado. Os campos com mesmo nome serao copiados    ³±±
±±³          ³automaticamente .Ex: AF1_START para AF8_START.                ³±±
±±³          ³Os campos com nomes diferentes deverao estar relacionados no  ³±±
±±³          ³array ExpA2.                                                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsImpoReg(cAlias,aCampos)

Local nx
Local aArea     := GetArea()
Local cAliasOri := Alias()
Local cCampo    := ""
Local nRecno    := 0

DEFAULT aCampos	:= {}

RegToMemory(cAliasOri,.F.)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Efetua a gravacao do novo registro                              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
DbSelectArea(cAlias)
RecLock(cAlias,.T.)

For nx := 1 TO FCount()
	cCampo := cAliasOri + Substr( FieldName(nx),4 )
	If ( cAliasOri )->( ColumnPos(cCampo) ) <> 0
		FieldPut(nx,M->&cCampo )
    EndIf
Next

For nx := 1 to Len(aCampos)
	FieldPut(ColumnPos(aCampos[nx,1]),aCampos[nx,2])
next
MsUnlock()

nRecno := Recno()

RestArea(aArea)
Return nRecno

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSAvalAFU³ Autor ³ Edson Maricate        ³ Data ³ 18-05-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Rotina de avaliacao dos apontamentos de recursos da tarefa.   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Alias da tabela de Apontamentos                        ³±±
±±³          ³ExpN2: Codigo do Evento                                       ³±±
±±³          ³       [1] Implantacao de um Apontamento                      ³±±
±±³          ³       [2] Estorno de um Apontamento                          ³±±
±±³          ³       [3] Exclusao de um Apontamento                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                        ³±±
±±³          ³                                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo atualizar os eventos vinculados ³±±
±±³          ³a um Apontamento de Recursos :                                ³±±
±±³          ³A) Atualizacao das tabelas complementares.                    ³±±
±±³          ³B) Gravacao do registro de movimentacao interna no SD3.       ³±±
±±³          ³                                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³SIGAPMS                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PMSAvalAFU(cAlias,nEvento)

Local aArea 	:= GetArea()
Local aAreaAFU  := AFU->(GetArea())
Local aAreaAE8  := AE8->(GetArea())
Local aArraySD3	:= {}
Local nValor    := 0
Local cLocPad   := ""
Local lContinua := .T.
Local aAreaAN2

PRIVATE lMsErroAuto := .F.
PRIVATE lAvalAFU    := .T.

Do Case
	Case nEvento == 1

		// verifica o tipo de movimento
		dbSelectArea("AE8")
		dbSetOrder(1)
		MsSeek(xFilial()+(cAlias)->AFU_RECURS)
		Do Case
			Case AE8->AE8_TPREAL == "1" //Custo Medio/FIFO

				// efetua a gravacao registro no SD3
				If !Empty(AE8->AE8_TMPAD) .And. !Empty(AE8->AE8_PRDREA)
					SB1->(dbSetOrder(1))
					SB1->(dbSeek(xFilial("SB1")+AE8->AE8_PRDREA))

					cLocPad	:= PMSReadValue("AF8", 1, xFilial("AF8") + AFU->AFU_PROJET, "AF8_LOCPAD", "")
					If Empty(cLocPad)
						cLocPad	:= RetFldProd(SB1->B1_COD,"B1_LOCPAD")
					EndIf

					//Verifico se o tipo de movimento é valorizado ou não (F5_VAL)
					//Se o Tipo de Movimento não for valorizado, não passo valor para a rotina automática
					If PMSReadValue("SF5",1,xFilial("SF5")+AE8->AE8_TMPAD,"F5_VAL","N") == "S"
						If AE8->AE8_CUSFIX > 0
							nValor := AE8->AE8_CUSFIX
						Else
							nValor := RetFldProd(SB1->B1_COD,"B1_CUSTD")
						EndIf
	     			EndIf

					If ExistBlock("PMSAFUSD3")
						lContinua := ExecBlock("PMSAFUSD3", .F., .F.,{nEvento ,cAlias})
					EndIf

					If lContinua
						aArraySD3 := {{"D3_TM"      ,AE8->AE8_TMPAD       ,Nil}, ;
						              {"D3_COD"     ,AE8->AE8_PRDREA      ,Nil}, ;
						              {"D3_QUANT"   ,(cAlias)->AFU_HQUANT ,Nil}, ;
							           {"D3_LOCAL"   ,cLocPad              ,Nil}, ;
						              {"D3_EMISSAO" ,(cAlias)->AFU_DATA   ,Nil}, ;
							           {"D3_CUSTO1"  ,NoRound((cAlias)->AFU_HQUANT * nValor), Nil}, ;
						              {"D3_PROJPMS" ,(cAlias)->AFU_PROJET ,Nil}, ;
						              {"D3_TASKPMS" ,(cAlias)->AFU_TAREFA ,Nil}}

						If ExistBlock("PMSSD3AFU")
							aArraySD3 := ExecBlock("PMSSD3AFU",.F.,.F.,{nEvento,aArraySD3})
						EndIf

						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Efetua a gravacao registro no SD3 atraves da chamada automatica ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						MATA240(aArraySD3)
						If lMsErroAuto
							dbSelectArea("AFU")
							RecLock("AFU",.F.,.T.)
							dbDelete()
							MsUnlock()
							MostraErro()
							Final(STR0142)				 //"Erro na inclusao do apontamento no arquivo de movimentacoes."
						EndIf

							// atualizar o custo do apontamento a partir do custo cálculado pelo estoque
						dbSelectArea("AFU")
						RecLock("AFU",.F.)
						AFU->AFU_NUMSEQ	:= SD3->D3_NUMSEQ
						AFU->AFU_CUSTO1	:= SD3->D3_CUSTO1
						AFU->AFU_COD	:= SD3->D3_COD
						AFU->AFU_LOCAL	:= SD3->D3_LOCAL
						AFU->AFU_TPREAL	:= AE8->AE8_TPREAL
						MsUnlock()
					EndIf
				EndIf

			Case AE8->AE8_TPREAL <> "1" // Valor Fixo // Folha de Pagamento // FIXO MENSAL
					dbSelectArea("AFU")
					RecLock("AFU", .F.)
					AFU->AFU_TPREAL	:= AE8->AE8_TPREAL
					MsUnlock()
		EndCase
		/////////////////////////////////////////////////////////////////
		// Integração com TOP, gera a apropriacao para o projeto.
		/////////////////////////////////////////////////////////////////
		SLMPMSCOST(0, "AFU", dDatabase, (cAlias)->AFU_PROJET, (cAlias)->AFU_TAREFA, (cAlias)->AFU_COD, (cAlias)->AFU_HQUANT, (cAlias)->AFU_CUSTO1/(cAlias)->AFU_HQUANT)
		/////////////////////////////////////////////////////////////////
	Case nEvento == 2
		Do Case
			Case (cAlias)->AFU_TPREAL == "1" //Centro de Custo
				dbSelectArea("SD3")
				dbSetOrder(7)
				If MsSeek(xFilial()+(cAlias)->AFU_COD+(cAlias)->AFU_LOCAL+DTOS((cAlias)->AFU_DATA)+(cAlias)->AFU_NUMSEQ)
					If ExistBlock("PMSAFUSD3")
						lContinua := ExecBlock("PMSAFUSD3", .F., .F.,{nEvento ,cAlias})
					EndIf
					If lContinua
						aArraySD3 	:= {	{"D3_TM",SD3->D3_TM,Nil},;
											{"D3_COD",SD3->D3_COD,Nil},;
											{"D3_QUANT",SD3->D3_QUANT,Nil},;
											{"D3_LOCAL",SD3->D3_LOCAL,Nil},;
											{"D3_CHAVE",SD3->D3_CHAVE,Nil},;
											{"D3_EMISSAO",SD3->D3_EMISSAO,Nil},;
											{"D3_NUMSEQ",SD3->D3_NUMSEQ,Nil},;
											{"D3_PROJPMS",SD3->D3_PROJPMS,Nil},;
											{"D3_TASKPMS",SD3->D3_TASKPMS,Nil},;
											{"INDEX",4,Nil} }

						If ExistBlock("PMSSD3AFU")
							aArraySD3 := ExecBlock("PMSSD3AFU",.F.,.F.,{nEvento,aArraySD3})
						EndIf

						MATA240(aArraySD3,5)
						If lMsErroAuto
							MostraErro()
							Final(STR0378) //"Erro no estorno do apontamento no arquivo de movimentacoes."
						EndIf
					EndIf
				EndIf
		EndCase
		/////////////////////////////////////////////////////////////////
		// Integração com TOP, gera a apropriacao para o projeto.
		/////////////////////////////////////////////////////////////////
		SLMPMSCOST(2, "AFU")
		/////////////////////////////////////////////////////////////////
	Case nEvento == 3
		/////////////////////////////////////////////////////////////////
		// Integração com TOP, gera a apropriacao para o projeto.
		/////////////////////////////////////////////////////////////////
		SLMPMSCOST(2, "AFU")
		/////////////////////////////////////////////////////////////////

		aAreaAN2  := AN2->(GetArea())
		dbSelectArea("AN2")
		AN2->(dbSetOrder(1)) //AN2_FILIAL+AN2_CTRRVS+AN2_PROJET+AN2_REVISA+AN2_TAREFA+AN2_RECURS+DTOS(AN2_DATA)
		If AN2->(MsSeek( AFU->(AFU_FILIAL+AFU_CTRRVS+AFU_PROJET+AFU_REVISA+AFU_TAREFA+AFU_RECURS+DTOS(AFU_DATA)) ))
			RecLock("AN2",.F.,.T.)
			dbDelete()
			MsUnlock()
		EndIf
		RestArea(aAreaAN2)
		dbSelectArea("AFU")

		RecLock("AFU",.F.,.T.)
		dbDelete()
		AFU->(MsUnlock())
EndCase

RestArea(aAreaAE8)
RestArea(aAreaAFU)
RestArea(aArea)
Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsChkAFU³ Autor ³ Edson Maricate         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Verifica a existencia do arquivo AFU criado no SX3.           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsChkAFU(lAviso)
Local lRet := .F.
Local aArea	:= GetArea()

dbSelectArea("SX2")
dbSetOrder(1)
If MsSeek("AFU")
	lRet := .T.
Else
	If lAviso
		Aviso(STR0143,STR0144,{STR0006},2) //"Atencao"###"Opcao nao disponivel nesta versao. Verifique a existecia do arquivio AFU no SX atual."###"Fechar"
	EndIf
EndIf

RestArea(aArea)
Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡ao    ³PmsCopyCon| Autor ³ Michel Dantas         ³ Data ³ 29-10-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡ao ³Funcao que copia um conhecimento para outro registro          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³cAlias: Alias de origem                                       ³±±
±±³          ³nRecno: Recno de origem                                       ³±±
±±³          ³                                                              ³±±
±±³          ³                                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observacao³Esta funcao copia o registro de um outro alias para o alias   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsCopyCon(cAlias,nRecno)
Local aDocs     := {}
Local aEntidade := {}
Local nx        := 0
Local nScan     := 0
Local cCodEnt   := ""
Local aChave    := {}
Local ny        := 0
Local cNewAlias := Alias()
Local cFilNew	:= xFilial(cNewAlias)
Local cFilAC9	:= xFilial("AC9")
Local nQdtDocs	:= 0

PMSDocTree(cAlias, nRecno, @aDocs)
nQdtDocs	:= Len(aDocs)
For nx := 1 to nQdtDocs
	ACB->(dbGoto(aDocs[nx]))
	aEntidade := MsRelation()
	If !Empty( nScan := AScan( aEntidade, { |x| x[1] == cNewAlias } ) )
		cCodEnt  := ""
		aChave   := aEntidade[ nScan, 2 ]
		DbSelectArea(cNewAlias)
		For ny := 1 To Len( aChave )
			cCodEnt += FieldGet( ColumnPos( aChave[ ny ] ) )
		Next
		cCodEnt  := PadR( cCodEnt, Len( AC9->AC9_CODENT ) )
	EndIf
	RecLock("AC9",.T.)
	AC9->AC9_FILIAL := cFilAC9
	AC9->AC9_FILENT	:= cFilNew
	AC9->AC9_CODENT	:= cCodEnt
	AC9->AC9_CODOBJ := ACB->ACB_CODOBJ
	AC9->AC9_ENTIDA := cNewAlias
	MsUnlock()
Next
Return .T.

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡ao    ³PmsImpoCon| Autor ³ Michel Dantas         ³ Data ³ 29-10-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡ao ³Funcao que copia um conhecimento para um mesmo alias          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³nRecno: Registro de origem                                    ³±±
±±³          ³                                                              ³±±
±±³          ³                                                              ³±±
±±³          ³                                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Observacao³Esta funcao copia o registro de um outro alias para o alias   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsImpoCon(nRecno)
Local aDocs     := {}
Local aEntidade := {}
Local nx        := 0
Local nScan     := 0
Local cCodEnt   := ""
Local aChave    := {}
Local ny        := 0
Local cAlias    := Alias()
Local aArea     := GetArea()
Local nRecAtu   := Recno()

Dbgoto(nRecno)

PMSDocTree(cAlias, nRecno, @aDocs)

DbGoto(nRecAtu)

For nx := 1 to Len(aDocs)
	ACB->(dbGoto(aDocs[nx]))
	aEntidade := MsRelation()
	If !Empty( nScan := AScan( aEntidade, { |x| x[1] == cAlias } ) )
		cCodEnt  := ""
		aChave   := aEntidade[ nScan, 2 ]
		DbSelectArea(cAlias)
		For ny := 1 To Len( aChave )
			cCodEnt += FieldGet( ColumnPos( aChave[ ny ] ) )
		Next
		cCodEnt  := PadR( cCodEnt, Len( AC9->AC9_CODENT ) )
	EndIf
	RecLock("AC9",.T.)
	AC9->AC9_FILIAL := xFilial()
	AC9->AC9_FILENT	:= xFilial(cAlias)
	AC9->AC9_CODENT	:= cCodEnt
	AC9->AC9_CODOBJ := ACB->ACB_CODOBJ
	AC9->AC9_ENTIDA := cAlias
	MsUnlock()
Next
RestArea(aArea)
Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsDlgAF8Rec³ Autor ³ Edson Maricate      ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Monta a tela de visualizacao de Alocacao de Recursos          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsDlgAF8Rec(cVersao,oTree,cArquivo)

Local aConfig	:= {6,;		// Escala do Gantt
					.F.,;	// Exibir Projeto/Tarefa
					.T.,;	// Exibir Codigo
					.T.,;	// Exibir Nome
					.T.,;	// Exibir Tarefas
					3}		// Considerar tarefas

Local aDependencia := {}
Local aArea		:= GetArea()
Local aAreaAF8	:= AF8->(GetArea())
Local dIni
Local aGantt
Local nTsk
Local lRet		:= .T.
Local nTop      := oMainWnd:nTop+35
Local nLeft     := oMainWnd:nLeft+10
Local nBottom   := oMainWnd:nBottom-12
Local nRight    := oMainWnd:nRight-10

If PmsCfgRec(,aConfig,dIni,aGantt)

	While lRet
		MsgRun(STR0117 ,cCadastro,{|| lRet := AuxDlgAF8Rec(@cVersao,@aConfig,@dIni,@aGantt,@nTsk,nTop,nLeft,nBottom,nRight,@oTree,cArquivo,@aDependencia) })
	End

EndIf
RestArea(aAreaAF8)
RestArea(aArea)
Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³AuxDlgAF8Rec³ Autor ³ Edson Maricate      ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Monta a tela de visualizacao de Alocacao de Recursos          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function AuxDlgAF8Rec(cVersao,aConfig,dCfgIni,aGantt,nTsk,nTop,nLeft,nBottom,nRight,oTree,cArquivo,aDependencia)

Local oFont
Local aRecAF9	:= {}
Local oDlg
Local oBtn
Local oBar
Local nColor
Local lRet		 := .T.
Local aRecursos	 := {}
Local aAloc		 := {}
Local lAtualiza  := .F.
Local cAlias
Local nRecAlias
Local lFWGetVersao := .T.
Local aButtons	:= {}

Local aCorBarras := {}
Local aRGB       := {}
Local nX         := 0
Local nZ         := 0
Local nLenRec	 :=	30
Local nLenTar	 :=	75
Local cProjeto	 := ""
Local cTrf		 := ""
Local lPrjdeAte	 := Len(aConfig)>6
Local cFilAF9		:= xFilial("AF9")
Local cFilAFD		:= xFilial("AFD")

If oTree!= Nil
	cAlias	:= SubStr(oTree:GetCargo(),1,3)
	nRecAlias	:= Val(SubStr(oTree:GetCargo(),4,12))
Else
	cAlias := (cArquivo)->ALIAS
	nRecAlias := (cArquivo)->RECNO
EndIf

While lRet

	lRet := .F.

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Monta o array contendo os dados do Gantt                ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If (aGantt==NIL) .OR. (lAtualiza)
		lAtualiza := .F.
		aGantt := {}

		aCorBarras := LoadCorBarra( "MV_PMSACOR" )

		aAuxArea := AF8->(GetArea())
		aRecursos:= {}

		If cAlias == "AF8"
			dbSelectArea("AF8")
			dbGoto(nRecAlias)
			dbSelectArea("AFC")
			dbSetOrder(1)
			dbSeek(xFilial()+AF8->AF8_PROJET+cVersao+Padr(AF8->AF8_PROJET,Len(AFC->AFC_EDT)))
			PmsLoadRec(AFC->AFC_PROJET+AFC->AFC_REVISA+AFC->AFC_EDT,aRecursos)
		ElseIf cAlias == "AFC"
			dbSelectArea("AFC")
			dbGoto(nRecAlias)
			PmsLoadRec(AFC->AFC_PROJET+AFC->AFC_REVISA+AFC->AFC_EDT,aRecursos)
		ElseIf cAlias == "AF9"
			dbSelectArea("AF9")
			dbGoto(nRecAlias)
			PmsLoadRec(AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA,aRecursos,.T.)
		Endif

		If cAlias == "AF9"
			cProjeto	:= AF9->AF9_PROJET
			cTrf		:= AF9->AF9_TAREFA
		Else
			cProjeto	:= AFC->AFC_PROJET
			cTrf		:= ""
		EndIf

		If AF8ComAJT( cProjeto )
			getRecursosCU( cProjeto, cVersao, cTrf, @aRecursos )
		EndIf

		For nZ := 1 to Len(aRecursos)
			AE8->(dbSetOrder(1))
			AE8->(MsSeek(xFilial()+aRecursos[nz]))
			aRecAF9	:= {}

			If AF8ComAJT( cProjeto )
				If cAlias == "AF9"
					aAloc := PmsRetCUAloc(aRecursos[nz],AF9->AF9_START,AF9->AF9_HORAI,AF9->AF9_FINISH,AF9->AF9_HORAF,aCOnfig[6],AF9->AF9_PROJET,cVersao,,aRecAF9)
					// Quando o recurso estiver em alguma subcomposicao, assume a data da tarefa/edt
					If Empty( aAloc )
						aAdd( aAloc, { AF9->AF9_START, AF9->AF9_HORAI, 0 } )
						aAdd( aRecAF9, AF9->( RecNo() ) )
					EndIf
				Else
					aAloc := PmsRetCUAloc(aRecursos[nz],AFC->AFC_START,AFC->AFC_HORAI,AFC->AFC_FINISH,AFC->AFC_HORAF,aCOnfig[6],AFC->AFC_PROJET,cVersao,,aRecAF9)
					// Quando o recurso estiver em alguma subcomposicao, assume a data da tarefa/edt
					If Empty( aAloc )
						If AFC->AFC_EDT == cProjeto
							AF9->( DbSetOrder( 2 ) )
							If AF9->( DbSeek( cFilAF9 + AFC->( AFC_PROJET + AFC_REVISA ) ) )
								aAdd( aAloc, { AF9->AF9_START, AF9->AF9_HORAI, 0 } )
								aAdd( aRecAF9, AF9->( RecNo() ) )
							EndIf
						Else
							AF9->( DbSetOrder( 2 ) )
							If AF9->( DbSeek( cFilAF9 + AFC->( AFC_PROJET + AFC_REVISA + AFC_EDT ) ) )
								aAdd( aAloc, { AF9->AF9_START, AF9->AF9_HORAI, 0 } )
								aAdd( aRecAF9, AF9->( RecNo() ) )
							EndIf
						EndIf
					EndIf
				EndIf
			Else
				If cAlias == "AF9"
					aAloc := PmsRetAloc(aRecursos[nz],AF9->AF9_START,AF9->AF9_HORAI,AF9->AF9_FINISH,AF9->AF9_HORAF,aCOnfig[6],AF9->AF9_PROJET,cVersao,,aRecAF9,,,,,Iif(lPrjdeAte, aConfig[7], ""),Iif(lPrjdeAte, aConfig[8], ""))
				Else
					aAloc := PmsRetAloc(aRecursos[nz],AFC->AFC_START,AFC->AFC_HORAI,AFC->AFC_FINISH,AFC->AFC_HORAF,aCOnfig[6],AFC->AFC_PROJET,cVersao,,aRecAF9,,,,,Iif(lPrjdeAte, aConfig[7], ""),Iif(lPrjdeAte, aConfig[8], ""))
				EndIf
			EndIf

			aAdd(aGantt,{{"",aRecursos[nz],AE8->AE8_DESCRI},{},CLR_HBLUE,})
			nLenRec	:=	 Max(nLenRec,Len(Alltrim(aRecursos[nz]))*3.7)
			For nX := 1 to Len(aAloc)-1
				If aAloc[nx,3] > 0
					dIni	:= aAloc[nx,1]
					cHIni	:= aAloc[nx,2]
					dFim	:= aAloc[nx+1,1]
					cHFim	:= aAloc[nx+1,2]
					cView	:= "PmsDispBox({	{'"+STR0145+"','"+AE8->AE8_RECURS+"'},"+; //'Recurso '
											"	{'"+STR0146+"','"+AE8->AE8_DESCRI+"'},"+; //'Descricao'
											"	{'"+STR0147+"','"+Transform(AE8->AE8_UMAX,"@E 9999.99%")+"'},"+; //'% Aloc.Max.'
											"	{'"+STR0148+"','"+If(AE8->AE8_SUPALO=="1",STR0179,STR0180)+"'},"+; //'Perm.Sup.Alo.' //"Sim"###"Nao"
											"	{'"+STR0149+"','"+DTOC(dIni)+"-"+cHIni+"'},"+; //'Data Inicial'
											"	{'"+STR0150+"','"+DTOC(dFim)+"-"+cHFim+"'},"+; //'Data Final'
											"	{'"+STR0151+"','"+Transform(aAloc[nx,3],"@E 9999.99%")+"'}},2,'"+STR0152+"',{40,120},,1)" //'% Aloc.Periodo'###'Detalhes'
					// barra de alocacao do recurso
					//aAdd(aGantt[Len(aGantt),2],{dIni,cHIni,dFim,cHFim,"",If(aAloc[nx,3]>AE8->AE8_UMAX,RGB(255,0,0) ,RGB(0, Int(255 - ((155 * aAloc[nx,3]) / AE8->AE8_UMAX)), 0)),cView,2,CLR_BLACK })
					aRGB := ValorCorBarra( "2" ,aCorBarras ,2 )
					aAdd(aGantt[Len(aGantt),2],{dIni,cHIni,dFim,cHFim,"",If(aAloc[nx,3]>AE8->AE8_UMAX ,ValorCorBarra( "1" ,aCorBarras ) ;
																									 		,RGB( (255-Int(aAloc[nx,3]*((255-aRGB[1])/100))) ,(255-Int(aAloc[nx,3]*((255-aRGB[2])/100))) ,(255-Int(aAloc[nx,3]*((255-aRGB[3])/100))) ) ;
																				),cView,2,CLR_BLACK})
				EndIf
			Next nX
			If aConfig[5]
				For nx := 1 to Len(aRecAF9)
					dbSelectArea("AF9")
					dbGoto(aRecAF9[nx])
					If 	(aConfig[6]==1).Or.; //Todas as tarefas
						(aConfig[6]==2.And.!Empty(AF9->AF9_DTATUF)).Or.; //Tarefas finalizadas
						(aConfig[6]==3.And.Empty(AF9->AF9_DTATUF)) // Tarefas a executar
						// barra das tarefas de projetos
					 	nColor	:=	RGB( (255-Int(MAx(AF9->AF9_PRIORI,100)/10*((255-ValorCorBarra( "3" ,aCorBarras,2 )[1])/100))) ,(255-Int(Max(AF9->AF9_PRIORI,100)/10*((255-ValorCorBarra( "3" ,aCorBarras,2 )[2])/100))) ,(255-Int(Max(AF9->AF9_PRIORI,100)/10*((255-ValorCorBarra( "3" ,aCorBarras,2 )[3])/100))) )
						Do Case
							Case !Empty(AF9->AF9_DTATUF)
								aAdd(aGantt,{{AF9->AF9_PROJET+AF9->AF9_REVISA+"/"+AF9->AF9_TAREFA,"",""},{{AF9->AF9_START,AF9->AF9_HORAI,AF9->AF9_FINISH,AF9->AF9_HORAF,"["+AllTrim(AF9->AF9_PROJET)+AF9->AF9_TAREFA+"]:"+Alltrim(AF9->AF9_DESCRI)+" POC :"+AllTrim(TransForm(PmsPOCAF9(AF9_PROJET,AF9_REVISA,AF9_TAREFA,PMS_MAX_DATE,AF9->AF9_QUANT),"@E 999.99%")),,"PmsViewTask("+STR(AF9->(RecNo()))+")",1,CLR_GRAY}},nColor ,})
							Case !Empty(AF9->AF9_DTATUI)
								aAdd(aGantt,{{AF9->AF9_PROJET+AF9->AF9_REVISA+"/"+AF9->AF9_TAREFA,"",""},{{AF9->AF9_START,AF9->AF9_HORAI,AF9->AF9_FINISH,AF9->AF9_HORAF,"["+AllTrim(AF9->AF9_PROJET)+AF9->AF9_TAREFA+"]:"+Alltrim(AF9->AF9_DESCRI)+" POC :"+AllTrim(TransForm(PmsPOCAF9(AF9_PROJET,AF9_REVISA,AF9_TAREFA,PMS_MAX_DATE,AF9->AF9_QUANT),"@E 999.99%")),,"PmsViewTask("+STR(AF9->(RecNo()))+")",1,CLR_BROWN}},nColor ,})
							Case dDataBase > AF9->AF9_START
								aAdd(aGantt,{{AF9->AF9_PROJET+AF9->AF9_REVISA+"/"+AF9->AF9_TAREFA,"",""},{{AF9->AF9_START,AF9->AF9_HORAI,AF9->AF9_FINISH,AF9->AF9_HORAF,"["+AllTrim(AF9->AF9_PROJET)+AF9->AF9_TAREFA+"]:"+Alltrim(AF9->AF9_DESCRI)+" POC :"+AllTrim(TransForm(PmsPOCAF9(AF9_PROJET,AF9_REVISA,AF9_TAREFA,PMS_MAX_DATE,AF9->AF9_QUANT),"@E 999.99%")),,"PmsViewTask("+STR(AF9->(RecNo()))+")",1,CLR_HRED}},nColor ,})
							OtherWise
								aAdd(aGantt,{{AF9->AF9_PROJET+AF9->AF9_REVISA+"/"+AF9->AF9_TAREFA,"",""},{{AF9->AF9_START,AF9->AF9_HORAI,AF9->AF9_FINISH,AF9->AF9_HORAF,"["+AllTrim(AF9->AF9_PROJET)+AF9->AF9_TAREFA+"]:"+Alltrim(AF9->AF9_DESCRI)+" POC :"+AllTrim(TransForm(PmsPOCAF9(AF9_PROJET,AF9_REVISA,AF9_TAREFA,PMS_MAX_DATE,AF9->AF9_QUANT),"@E 999.99%")),,"PmsViewTask("+STR(AF9->(RecNo()))+")",1,CLR_GREEN}},nColor ,})
						EndCase
					 	// o fator eh 3 porque geralmente a tarefa esta composta por numeros.
						nLenTar	:=	 Max(nLenTar,Len(Alltrim(AF9->AF9_PROJET+AF9->AF9_REVISA+"/"+AF9->AF9_TAREFA))*3)
						dbSelectArea("AFD")
						dbSetOrder(1)
						If MsSeek(cFilAFD+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA)
							While !AFD->(EOF()) .And. cFilAFD+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA==AFD_FILIAL+AFD_PROJET+AFD_REVISA+AFD_TAREFA
								nPos := aScan( aDependencia ,{|aTarefa| aTarefa[1] == AFD->AFD_PROJET+AFD->AFD_REVISA+"/"+AFD->AFD_TAREFA})
								If nPos > 0
									aadd( aDependencia[nPos,2],{ AFD->AFD_PROJET+AFD->AFD_REVISA+"/"+AFD->AFD_PREDEC ,AFD->AFD_TIPO } )
								Else
									aadd( aDependencia ,{ AFD->AFD_PROJET+AFD->AFD_REVISA+"/"+AFD->AFD_TAREFA ,{ {AFD->AFD_PROJET+AFD->AFD_REVISA+"/"+AFD->AFD_PREDEC ,AFD->AFD_TIPO} }} )
								Endif
								AFD->(dbSkip())
							End

						EndIf
					EndIf
				Next nx
			EndIf
		Next nZ
	Else
		For nX := 1 To Len(aGantt)
			If Empty(aGantt[nX,1,2])
	 		// o fator eh 3 porque geralmente a tarefa esta composta por numeros.
				nLenTar	:=	 Max(nLenTar,Len(aGantt[nX,1,1])*3)
			Else
				nLenRec	:=	 Max(nLenRec,Len(aGantt[nX,1,2])*3.7)
			Endif
		Next
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Exibe a tela do Gantt de Alocacao de Recursos           ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	If Empty(aGantt)
		Aviso(STR0143,STR0153,{STR0006},2) //"Atencao"###"Nao existem recursos alocados neste projeto."###"Fechar"
	Else
		DEFINE FONT oFont NAME "Arial" SIZE 0, -10
		DEFINE MSDIALOG oDlg TITLE STR0117 OF oMainWnd PIXEL FROM nTop,nLeft TO nBottom,nRight //"Grafico de Gantt"
		oDlg:lMaximized := .T.

		AADD(aButtons, {BMP_OPCOES			, {|| If(PmsCfgRec(@oDlg,aConfig,@dCfgIni,aGantt),(oDlg:End(),lRet := .T.),Nil) }, TIP_OPCOES })
		AADD(aButtons, {BMP_RETROCEDER_CAL	, {|| (PmsPrvGnt(cVersao,@oDlg,aConfig,@dCfgIni,aGantt,@nTsk),oDlg:End(),lRet := .T.) }, TIP_RETROCEDER_CAL})
		AADD(aButtons, {BMP_AVANCAR_CAL		, {|| (PmsNxtGnt(cVersao,@oDlg,aConfig,@dCfgIni,aGantt,@nTsk),oDlg:End(),lRet := .T.) }, STR0276 })
		AADD(aButtons, {BMP_CORES			, {|| {lAtualiza := PMSColorGantt("MV_PMSACOR") ,oDlg:End() ,lRet := .T. } }, TIP_CORES})
		EnchoiceBar(oDlg,{|| oDlg:End()},{|| oDlg:End()},,aButtons,,,,,.F.,.F.)

		PmsGantt(aGantt,aConfig,@dCfgIni,,oDlg,{14,1,(nBottom/2)-40,(nRight/2)-4},{{STR0341,nLenTar},{STR0098,nLenRec},{STR0154,115}},@nTsk,aDependencia,STR0096,,,{1,2,3})  //"Codigo"###"Nome"

		ACTIVATE MSDIALOG oDlg
	EndIf
End

If !lFWGetVersao .or. GetVersao(.F.) == "P10"
	PMSFreeObj(oBtn)
	PMSFreeObj(oBar)
	PMSFreeObj(oDlg)
Else
	PMSFreeObj(oDlg)
Endif

Return( lRet )

/*/
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³ Carrega recursos alocados nos ranges passados			    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
*/
Function PmsLoadRec(cChave,aRecursos,lTarefa)
Local aArea:= GetArea()
Local aAreaAFA := AFA->(GetArea())
Local aAreaAFC := AFC->(GetArea())
Local aAreaAF9 := AF9->(GetArea())
Local lAF8ComAJT := AF8ComAJT( Left(cChave, TamSX3("AF8_PROJET")[1]) )

Local cTmpAlias := "TMPAFA"
Local cQuerySql := ""

Local cTmpWbs   := "TMPAFC"
Local cQueryWbs := ""

// trata o operador || para não ocorrer erro na ChangeQuery()
Local cOper := Iif("MSSQL" $ Upper(TcGetDb()) .Or.;
                   "SYBASE" $ Upper(TcGetDb()), "+", "||")

Local aWbs := {}
Local i := 0
Local cFilAF9		:= xFilial("AF9")
Local cFilAFC		:= xFilial("AFC")

If Upper(TcGetDb()) == "POSTGRES"
	cChave := StrTran(cChave," ","")
EndIf

DEFAULT lTarefa := .F.

If lAF8ComAJT
	If lTarefa
		PmsLdRecCU(cChave, @aRecursos)
	Else
		dbSelectArea("AF9")
		dbSetOrder(2)
		AF9->(MsSeek(cFilAF9+cChave))
		Do While !AF9->(Eof()) .And. AF9->AF9_FILIAL+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_EDTPAI==;
						cFilAF9+cChave
			PmsLdRecCU(AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA, @aRecursos)
			dbSelectArea("AF9")
			AF9->(dbSkip())
		EndDo
		dbSelectArea("AFC")
		dbSetOrder(2)
		AFC->(MsSeek(xFilial()+cChave))
		Do While !AFC->(Eof()) .And. AFC->AFC_FILIAL+AFC->AFC_PROJET+AFC->AFC_REVISA+;
							AFC->AFC_EDTPAI==cFilAFC+cChave
			PmsLoadRec(AFC->AFC_PROJET+AFC->AFC_REVISA+AFC->AFC_EDT,@aRecursos)
			AFC->(dbSkip())
		EndDo
	EndIf
Else
	If lTarefa

		// para utilizar o operador de concatenação abaixo é necessário
		// atualizar a lib e, por conseqüência, a função ChangeQuery()
		cQuerySql := "SELECT AFA_RECURS "
		cQuerySql += "FROM " + RetSqlName("AFA") + " AFA "
		cQuerySql += "WHERE AFA_FILIAL = '" + xFilial("AFA") + "' AND "
		cQuerySql += "AFA_PROJET " + cOper + " AFA_REVISA " + cOper + " AFA_TAREFA = "
		cQuerySql += "'" + cChave + "' "
		cQuerySql += "AND AFA.D_E_L_E_T_ = ' ' "
		cQuerySql += "ORDER BY AFA_RECURS"
	Else

		cQuerySql := "SELECT AFA_RECURS "
		cQuerySql += "FROM "
		cQuerySql += RetSqlName("AFA") + " AFA, "
		cQuerySql += RetSqlName("AF9") + " AF9 "
		cQuerySql += "WHERE "
		cQuerySql += "AFA_FILIAL = '" + xFilial("AFA") + "' AND "
		cQuerySql += "AFA_PROJET = AF9_PROJET AND "
		cQuerySql += "AFA_REVISA = AF9_REVISA AND "
		cQuerySql += "AFA_TAREFA = AF9_TAREFA AND "
	    cQuerySql += "AF9_FILIAL = '" + xFilial("AF9") + "' AND "
    	cQuerySql += "AF9_PROJET " + cOper + " AF9_REVISA " + cOper + " AF9_EDTPAI = "
	    cQuerySql += "'" + cChave + "' "
		cQuerySql += "AND AFA.D_E_L_E_T_ = ' ' "
		cQuerySql += "AND AF9.D_E_L_E_T_ = ' ' "
		cQuerySql += "ORDER BY AFA_RECURS"

		cQueryWbs := "SELECT AFC_PROJET, AFC_REVISA, AFC_EDT "
		cQueryWbs += "FROM " + RetSqlName("AFC") + " AFC "
		cQueryWbs += "WHERE AFC_FILIAL = '" + xFilial("AFC") + "' AND "
		cQueryWbs += "AFC_PROJET " + cOper + " AFC_REVISA " + cOper + " AFC_EDTPAI = "
		cQueryWbs += "'" + cChave + "' "
		cQueryWbs += "AND AFC.D_E_L_E_T_ = ' ' "
		cQueryWbs += "ORDER BY AFC_EDT"
	EndIf

	cQuerySql := ChangeQuery(cQuerySql)
	dbUseArea(.T., "TOPCONN", TcGenQry(,,cQuerySql), cTmpAlias, .T., .T.)

	dbSelectArea(cTmpAlias)
	(cTmpAlias)->(dbGoTop())

	While (cTmpAlias)->(!Eof())

		If aScan(aRecursos, (cTmpAlias)->AFA_RECURS) == 0
			aAdd(aRecursos, (cTmpAlias)->AFA_RECURS)
		EndIf

		(cTmpAlias)->(dbSkip())
	End

	(cTmpAlias)->(dbCloseArea())


	// verifica as EDTs filhas
	If !lTarefa
		cQueryWbs := ChangeQuery(cQueryWbs)
		dbUseArea(.T., "TOPCONN", TcGenQry(,,cQueryWbs), cTmpWbs, .T., .T.)

		dbSelectArea(cTmpWbs)
		(cTmpWbs)->(dbGoTop())

		While (cTmpWbs)->(!Eof())

			Aadd(aWbs, (cTmpWbs)->AFC_PROJET + (cTmpWbs)->AFC_REVISA + (cTmpWbs)->AFC_EDT)

			(cTmpWbs)->(dbSkip())
		End

		(cTmpWbs)->(dbCloseArea())

		For i := 1 To Len(aWbs)
			PmsLoadRec(aWbs[i], aRecursos)
		Next
	EndIf
EndIf

RestArea(aAreaAF9)
RestArea(aAreaAFC)
RestArea(aAreaAFA)
RestArea(aArea)
Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³                                                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsLoadTsk(cChave,aTsk,lTarefa,cRecDe,cRecAte,cEquipDe,cEquipAte,cVldAF9)
Local aArea:= GetArea()
Local aAreaAFC := AFC->(GetArea())
Local aAreaAF9 := AF9->(GetArea())
Local lAdiciona:= .T.
Local cFilAFA	:= xFilial("AFA")
Local cFilAF9	:= xFilial("AF9")
Local cFilAFC	:= xFilial("AFC")

DEFAULT lTarefa := .F.

DEFAULT cRecDe		:= ""
DEFAULT cRecAte	:= ""
DEFAULT cEquipDe	:= ""
DEFAULT cEquipAte := ""
DEFAULT cVldAF9	:= ""

AE8->(dbSetOrder(1))

If Upper(TcGetDb()) == "POSTGRES"
	cChave := StrTran(cChave," ","")
EndIf

If lTarefa
	If Empty(cVldAF9) .Or. (!Empty(cVldAF9) .And. &cVldAF9)
		If !Empty(cRecDe) .Or. !Empty(cEquipDe) .Or. (!Empty(cRecAte) .and. cRecAte <> Replicate("Z",LEN(AE8->AE8_RECURS))) .Or. (!Empty(cEquipAte) .and. cEquipAte <> Replicate("Z",LEN(AE8->AE8_EQUIP)))
			lAdiciona := .F.
			dbSelectArea("AFA")
			dbSetOrder(1)
			MsSeek(cFilAFA+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA)
			While !Eof() .And. AFA->AFA_FILIAL+AFA->AFA_PROJET+AFA->AFA_REVISA+AFA->AFA_TAREFA==;
							cFilAFA+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA
	        	If !Empty(AFA->AFA_RECURS)
					AE8->(dbSeek(xFilial()+AFA->AFA_RECURS))
					If AE8->AE8_RECURS >= cRecDe .And. AE8->AE8_RECURS <= cRecAte .And. AE8->AE8_EQUIP >= cEquipDe .And. AE8->AE8_EQUIP <= cEquipAte
						lAdiciona := .T.
						Exit
					EndIf
				EndIf
				dbSelectArea("AFA")
				dbSkip()
			End
		Else
			lAdiciona := .T.
		EndIf
		If lAdiciona
			aAdd(aTsk,AF9->(RecNo()))
		EndIf
	EndIf
Else
	dbSelecTArea("AF9")
	dbSetOrder(2)
	MsSeek(cFilAF9+cChave)
	While !Eof() .And. AF9->AF9_FILIAL+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_EDTPAI==;
					cFilAF9+cChave
		If Empty(cVldAF9) .Or. (!Empty(cVldAF9) .And. &cVldAF9)
			If !Empty(cRecDe) .Or. !Empty(cEquipDe) .Or. (!Empty(cRecAte) .and. cRecAte <> Replicate("Z",LEN(AE8->AE8_RECURS))) .Or. (!Empty(cEquipAte) .and. cEquipAte <> Replicate("Z",LEN(AE8->AE8_EQUIP)))
				lAdiciona := .F.
				dbSelectArea("AFA")
				dbSetOrder(1)
				MsSeek(cFilAFA+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA)
				While !Eof() .And. AFA->AFA_FILIAL+AFA->AFA_PROJET+AFA->AFA_REVISA+AFA->AFA_TAREFA==;
								cFilAFA+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA
		        	If !Empty(AFA->AFA_RECURS)
						AE8->(dbSeek(xFilial()+AFA->AFA_RECURS))
						If AE8->AE8_RECURS >= cRecDe .And. AE8->AE8_RECURS <= cRecAte .And. AE8->AE8_EQUIP >= cEquipDe .And. AE8->AE8_EQUIP <= cEquipAte
							lAdiciona := .T.
							Exit
						EndIf
					EndIf
					dbSelectArea("AFA")
					dbSkip()
				End
			Else
				lAdiciona := .T.
			EndIf
			If lAdiciona
				aAdd(aTsk,AF9->(RecNo()))
			EndIf
		EndIf
		dbSelecTArea("AF9")
		dbSkip()
	End
	dbSelectArea("AFC")
	dbSetOrder(2)
	MsSeek(xFilial()+cChave)
	While !Eof() .And. AFC->AFC_FILIAL+AFC->AFC_PROJET+AFC->AFC_REVISA+;
						AFC->AFC_EDTPAI==cFilAFC+cChave
		PmsLoadTsk(AFC->AFC_PROJET+AFC->AFC_REVISA+AFC->AFC_EDT,aTsk,lTarefa,cRecDe,cRecAte,cEquipDe,cEquipAte,cVldAF9)
		dbSkip()
	End
EndIf

RestArea(aAreaAF9)
RestArea(aAreaAFC)
RestArea(aArea)
Return


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsViewTask³ Autor ³ Edson Maricate       ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Chama a funcao de visualizacao da Tarefa .                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsViewTask(nRecAF9)

Local aArea	:= GetArea()

AF9->(MsGoto(nRecAF9))
PMSA203(2,,"000")

RestArea(aArea)
Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsViewEDT ³ Autor ³ Edson Maricate       ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Chama a funcao de visualizacao da EDT                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsViewEDT(nRecAFC)

Local aArea	:= GetArea()

AFC->(MsGoto(nRecAFC))
PMSA201(2,,"000")

RestArea(aArea)
Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsDispBox ³ Autor ³ Edson Maricate       ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Mostra a alocacao do recurso no periodo selecionado.          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsDispBox(aInfo,nCols,cText,aCols,cBackColor,nStyle,cClrLegend,cClrData,oDlg,nColIni,nLinIni,lAllClient,cDescri,cTextSay)

Local cColorSay     := CLR_BLACK
Local lCriaDlg		:= (oDlg==Nil)
Local nDlgX			:= 6
Local aArea			:= GetArea()
Local nDlgY         := If(Len(aInfo)>2,(Len(aInfo)*12)+10,45)
Local nX            := 0
Local nY            := 0

DEFAULT cBackColor	:= CLR_WHITE
DEFAULT nStyle		:= 1
DEFAULT cClrLegend	:= RGB(190,190,200)
DEFAULT cClrData	:= RGB(200,200,200)
DEFAULT nColIni		:= 0
DEFAULT nLinIni		:= 0
DEFAULT lAllClient	:= .F.
DEFAULT cDescri		:= ""

For nx := 1 to Len(aCols)
	nDlgX += aCols[nx]
Next

If lCriaDlg
	DEFINE MSDIALOG oDlg TITLE cText OF oMainWnd PIXEL FROM 0,0 TO MAX(MIN(nDlgY*2,460),130),MIN(nDlgX*2,670) //STYLE nOR(WS_VISIBLE,WS_POPUP)
EndIf


DEFINE FONT oFont NAME "Arial" SIZE 0, -10
//oPanel := TPanel():New(nColIni,nLinIni,"",oDlg,, .T., .T.,,cBackColor,nDlgX+1,nDlgY,.T.,.T. )
oPanel := TScrollBox():New( oDlg, nColIni,nLinIni,MIN(nDlgY,230),MIN(nDlgX+2,338))
If lAllClient
	oPanel:Align := CONTROL_ALIGN_ALLCLIENT
EndIf
nLin := 5
nCol := 3
If !Empty(cDescri)
    cTextSay := "{||' "+STRTRAN(cDescri,"'",'"')+" '}"
	oSay := TSay():New( 2,nCol, MontaBlock(cTextSay) , oPanel, ,oFont,,,,.T.,cColorSay,,400,15,,,,)
	nLin += 15
EndIf
For nx := 1 to Len(aInfo)
	For ny := 1 to nCols
		Do Case
			Case nStyle == 1
				If ny == 1
					cColor := cClrLegend
				Else
					cColor := cClrData
				EndIf
			Case nStyle == 2
				If nx == 1
					cColor := cClrLegend
				Else
					cColor := cClrData
				EndIf
			Case nStyle == 3
				If nx == 1 .Or. ny == 1
					cColor := cClrLegend
				Else
					cColor := cClrData
				EndIf
		EndCase
		oBar := TPanel():New(nLin,nCol,"",oPanel,, .T., .T.,,cColor,aCols[ny],7,.T.,.T. )
		If ValType(aInfo[nx,ny])=="C"
            cTextSay := "{||' "+STRTRAN(aInfo[nx,ny],"'",'"')+" '}"
			cColorSay := CLR_BLACK
		Else
            cTextSay := "{||' "+STRTRAN(aInfo[nx,ny,1],"'",'"')+" '}"
			cColorSay := aInfo[nx,ny,2]
		EndIf
		oSay := TSay():New( 0,0, MontaBlock(cTextSay) , oBar, ,oFont,,,,.T.,cColorSay,,,,,,,,)
		nCol += aCols[ny]
	next ny
	nLin += 9
	nCol := 3
Next

nLin += 7

If lCriaDlg
	@ nLin,(nDlgX)-60 BUTTON STR0006 SIZE 35 ,10  ACTION {||oDlg:End()}  OF oPanel PIXEL  //"Fechar"
	ACTIVATE MSDIALOG oDlg CENTERED
EndIf

RestArea(aArea)
Return

/*/{Protheus.doc} PmsRetAloc

Funcao que retorna um array contendo a alocacao do recurso e seu percent.

@author Edson Maricate

@since 09-02-2001

@version P11

@param cRecurso,	caracter, 	Codigo do recurso
@param dIni, 		data, 		Data de inicio do periodo
@param cIni, 		caracter, 	Hora de inicio do periodo
@param dFim, 		data, 		Data de Fim do periodo
@param cFim, 		caracter, 	Hora de Fim do periodo
@param nFilter, 	numerico,  Tipo de filtro selecionado(1-Todas as tarefas,2-Tarefas finalizadas,3-Tarefas a Executar e 4-Tarefas com restrição)
@param cProjeto, 	caracter,  Codigo do Projeto
@param cVersao, 	caracter,  Codigo da versaod do projeto
@param cAltTrf, 	caracter, 	Ccodigo das tarefas a serem desconsideradas na consulta
@param aRecAF9, 	array,		Recnos da tabela AF9 referente as tarefas em que o recurso esta alocado
@param aDadosSim, array,  	Tarefas com o recurso alocado para simulação
@param aCache, 	array,  	Recnos da tabela AFA referente os projetos e tarefas alocados
@param cFiltAF9, 	caracter,  Filtro em ADVPL para ser aplicado na tabela AF9
@param cTdFil, 	caracter,  Se deve filtrar filiais( 1- Sim e 2-Não)
@param cProjIni, 	caracter, 	Codigo do Projeto Fim do filtro
@param cProjFim, 	caracter, 	Codigo do Projeto Ate do filtro
@param lMonitor, 	logico, 	Se Verdadeiro deve validar o evento 36 da fase do projeto.

@return aAloc, array, tarefas em que o recurso esta alocado no periodo informado

/*/
Function PmsRetAloc(cRecurso,dIni,cHIni,dFim,cHFim,nFilter,cProjeto,cVersao,cAltTrf,aRecAF9,aDadosSim,aCache,cFiltAF9,cTdFil,cProjIni,cProjFim,lMonitor)
Local lSeek		:= .T.
Local lSimula		:= (aDadosSim<>Nil)
Local dAuxRef		:= CTOD("01/12/25")
Local dRef			:= PMS_MIN_DATE
Local nX			:= 0
Local nY			:= 0
Local lCpEncPrj 	:= .F.
Local lTcSrvType	:= .F.
Local lVldFase	:= .F.
Local lRejec		:= .F.
Local cAuxHoraRef	:= "24:00"
Local cHoraRef	:= "00:00"
Local cAliasAFA	:= "AFA"
Local cQryAFA		:=	""
Local cIsNull		:= "COALESCE"
Local cOper		:= ""
Local cCompProj	:= ""
Local cFilialAF9	:= ""
Local cFilialAN8	:= ""
Local aAuxAloc	:= {}
Local aAloc		:= {}
Local aArea		:= GetArea()
Local aAreaAFA	:= AFA->(GetArea())
Local aAreaAN8	:= {}
Local aAreaAF9	:= {}
Local cFilAN8		:= xFilial("AN8")

DEFAULT nFilter	:= 1
DEFAULT cTdFil	:= '2'
DEFAULT cProjIni	:= ""
DEFAULT cProjFim	:= ""
DEFAULT lMonitor  := .F.

cProjIni  := Padr(cProjIni,Len(AF9->AF9_PROJET))
cProjFim  := Padr(cProjFim,Len(AF9->AF9_PROJET))

If aCache==Nil
	aCache := {}
	dbSelectArea("AF8")
	dbSetOrder(1)
	lCpEncPrj := AF8->(ColumnPos("AF8_ENCPRJ")) == 0      // SE O CAMPO NAO EXISTIR

	dbSelectARea("AF9")
	dbSetOrder(1)
	lTcSrvType := TcSrvType() <> "AS/400"
	If TcGetDb() $ "ORACLE.INFORMIX"
		cIsNull := "NVL"
	EndIf
	cOper  := IIf(Upper(TcGetDb())$'ORACLE.POSTGRES.DB2.INFORMIX','||','+')
	
	dbSelectArea("AFA")
	dbSetOrder(3) //"AFA_FILIAL+AFA_RECURS+DTOS(AFA_START)+AFA_HORAI"

	If lTcSrvType
		cAliasAFA	:=	GetNextAlias()
		cQryAFA := " SELECT max(AFA.R_E_C_N_O_) REG_AFA,AFA_FILIAL,AFA_PROJET,AFA_REVISA,AFA_TAREFA,AFA_START,AFA_HORAI,AFA_FINISH,AFA_HORAF,sum(AFA_ALOC) AFA_ALOC,"
		cQryAFA += " AF8.R_E_C_N_O_ REG_AF8,AF8_REVISA,AF8_PROJET,"
		cQryAFA += " AF9.R_E_C_N_O_ REG_AF9 "

		// Projeto TDI TDSFLX - Filtro de Tarefas sem restricao
		If nFilter==4
			cQryAFA += ", MAX(AFD.R_E_C_N_O_) REG_AFD, MAX(AFD.AFD_PREDEC ) AFD_PREDEC "
		Endif

		cQryAFA += " FROM "+RetSQLName("AF8")+" AF8 "
		cQryAFA += " INNER JOIN "+RetSQLName("AF9")+" AF9 "
		cQryAFA += " ON AF8_PROJET = AF9_PROJET "
		cQryAFA += " INNER JOIN "+RetSQLName("AFA")+" AFA "

		// Projeto TDI TDSFLX - Filtro de Tarefas sem restricao
		If nFilter==4
			cQryAFA += " LEFT JOIN "+RetSQLName("AFD")+" AFD "
	   		cQryAFA += " ON AFA_PROJET = AFD_PROJET AND AFA_REVISA = AFD_REVISA AND AFA_TAREFA = AFD_TAREFA  "
		Endif

		cQryAFA += " ON AFA_PROJET = AF9_PROJET "
		cQryAFA += " AND AFA_REVISA = AF9_REVISA "
		cQryAFA += " AND AFA_TAREFA = AF9_TAREFA "
		If AFA->(ColumnPos("AFA_MSBLQL")) > 0
			cQryAFA += " AND AFA_MSBLQL <> '1' "
		EndIf
		cQryAFA += " LEFT OUTER JOIN "+RetSQLName("AN8")+" AN8 "
		cQryAFA += " ON AN8_PROJET = AF9_PROJET "
		cQryAFA += " AND AN8_REVISA = AF9_REVISA "
		cQryAFA += " AND AN8_TAREFA = AF9_TAREFA "
		cQryAFA += " AND AN8_STATUS <> '3' "
		cQryAFA += " AND AN8_STATUS <> '2' "
		cQryAFA += IIF(cTdFil == '2'," AND AN8_FILIAL = '"+xFilial("AN8")+"' ", "")
		cQryAFA += " AND AN8.D_E_L_E_T_  = ' ' "
		cQryAFA += " WHERE "
		If cTdFil == '2'
			cQryAFA += " AFA_FILIAL = '"+xFilial("AFA")+"' "
			cQryAFA += " AND AF8_FILIAL = '"+xFilial("AF8")+"' "
			cQryAFA += " AND AF9_FILIAL = '"+xFilial("AF9")+"' "
			cQryAFA += " AND "
		EndIf
		cQryAFA += " AFA_RECURS = '"+cRecurso+"' "

		cQryAFA += " AND NOT (AFA_START"+cOper+"AFA_HORAI > '"+DTOS(DFim)+cHFim+"' "
		cQryAFA += 			 " OR AFA_FINISH"+cOper+"AFA_HORAF < '"+DTOS(DIni)+cHIni+"') "

		cQryAFA += " AND AFA.D_E_L_E_T_ = ' ' "

		cQryAFA += " AND AF8_ENCPRJ <> '1' "	//APENAS TAREFAS DE PROJETOS NAO ENCERRADOS

		cQryAFA += " AND AF8.D_E_L_E_T_ = ' ' "
		If cAltTrf <> Nil // Se indicou alteraçao de tarefa
			cQryAFA += " AND AF9_TAREFA <> '"+cAltTrf+"' "	// Seleciona apenas as tarefas diferentes
		EndIf
		If nFilter==2
			cQryAFA += " AND AF9_DTATUF <> '' "	//Tarefas Executadas
			cQryAFA += "AND "+cIsNull+"(AN8_TAREFA,'')='' "
		ElseIf nFilter==3 .or. nFilter == 4
			cQryAFA += " AND (AF9_DTATUF = '' "	// Tarefas a Executar
			cQryAFA += "OR "+cIsNull+"(AN8_TAREFA,'')<>'' "
			cQryAFA += ") "
		EndIf
		// Novo filtro de projetos no monitor de tarefas
		if !Empty(cProjIni)
			cQryAFA += " AND AF9_PROJET >= '" + cProjIni + "' "
		Endif
		if ! Empty(cProjFim)
			cQryAFA += " AND AF9_PROJET <= '" + cProjFim + "' "
		Endif
		cQryAFA += " AND AF9.D_E_L_E_T_ = ' ' "

		If cFiltAF9	<> Nil .And. !Empty(cFiltAF9)
			cAF9QryFil	:= PcoParseFil( cFiltAF9, "AF9" )
			If !Empty(cAF9QryFil)
				cQryAFA 	+= " AND ( "+cAF9QryFil +") "
				cFiltAF9	:= Nil
			Endif
		Endif
		cQryAFA += " GROUP BY AFA_FILIAL,AFA_RECURS,AFA_START,AFA_HORAI,AFA_FINISH,AFA_HORAF,AFA_PROJET,AFA_REVISA,AFA_TAREFA,AF8.R_E_C_N_O_,AF8_REVISA,AF8_PROJET,AF9.R_E_C_N_O_ "
		cQryAFA += " ORDER BY "+SqlOrder(IndexKey(3)) //"AFA_FILIAL+AFA_RECURS+DTOS(AFA_START)+AFA_HORAI"

		If Select(cAliasAFA) > 0
			dbSelectArea(cAliasAFA)
			dbCloseArea()
		EndIf

		cQryAFA := ChangeQuery(cQryAFA)
		DbUseArea(.T.,"TOPCONN",TCGENQRY(,,cQryAFA),cAliasAFA,.F.,.T.)

		TCSetField(cAliasAFA,"REG_AFA","N",17,0)
		TCSetField(cAliasAFA,"REG_AF8","N",17,0)
		TCSetField(cAliasAFA,"REG_AF9","N",17,0)
		TCSetField(cAliasAFA,"AFA_START","D",8,0)
		TCSetField(cAliasAFA,"AFA_FINISH","D",8,0)
		TCSetField(cAliasAFA,"AFA_ALOC","N",6,2)

		cCompProj := ""
		lVldFase := .F.

		dbSelectArea(cAliasAFA)
		While (cAliasAFA)->(!Eof())
			If cFiltAF9 <> Nil.And. !Empty(cFiltAF9)
				AF9->(MsGoto((cAliasAFA)->REG_AF9))
				If !AF9->(&cFiltAF9.)
					DbSelectArea(cAliasAFA)
					DbSkip()
					Loop
				EndIf
			EndIf

			If lMonitor // somente se estiver sendo chamado do PMSMONIT
				If cCompProj <> (cAliasAFA)->AF8_PROJET
					cCompProj := (cAliasAFA)->AF8_PROJET
					lVldFase := PmsVldFase( "AF8", (cAliasAFA)->AF8_PROJET, "36", .F. )
				EndIf

				If !lVldFase
					(cAliasAFA)->( DbSkip() )
					Loop
				EndIf
			EndIf

			if nFilter == 4   // tarefas sem restricao
				if ! Empty((cAliasAFA)->AFD_PREDEC)
					(cAliasAFA)->( DbSkip() )
					Loop
				EndIf

			Endif

			If !lSimula .Or. Ascan(aDadosSim,{|x| x[SIM_RECAF9]==(cAliasAFA)->REG_AF9 .And. cRecurso== x[SIM_RECURS]}) ==0// Este registro deve ser ignorado, pois foi enviado um simulado para ele

				If ((cAliasAFA)->AFA_REVISA==(cAliasAFA)->AF8_REVISA .And. cProjeto==Nil) .Or.;
					((cAliasAFA)->AFA_REVISA==(cAliasAFA)->AF8_REVISA .And. cProjeto!=(cAliasAFA)->AF8_PROJET).Or.;
					((cAliasAFA)->AFA_REVISA==cVersao .And. cProjeto==(cAliasAFA)->AF8_PROJET)

					aAdd(aAuxAloc,{(cAliasAFA)->AFA_START,(cAliasAFA)->AFA_HORAI,(cAliasAFA)->AFA_FINISH,(cAliasAFA)->AFA_HORAF,(cAliasAFA)->AFA_ALOC})
					aAdd(aCache,(cAliasAFA)->REG_AFA )
					If aRecAF9 <> Nil
						aAdd(aRecAF9,(cAliasAFA)->REG_AF9 )
					EndIf
				EndIf
			EndIf
			(cAliasAFA)->(dbSkip())
		EndDo
		DbSelectArea(cAliasAFA)
		DbCloseArea()
		DbSelectArea("AFA")
	Else
		MsSeek(xFilial()+cRecurso)
		While !Eof() .And. xFilial()+cRecurso==AFA_FILIAL+AFA_RECURS
			If !PmsVldFase( "AF8", AFA->AFA_PROJET, "36", .F. )
				DbSkip()
				Loop
			EndIf
			AF8->(dbSetOrder(1))
			AF8->(MsSeek(xFilial()+AFA->AFA_PROJET))
			If lCpEncPrj .Or. AF8->AF8_ENCPRJ != "1" //SOMENTE PARA PROJETOS NAO ENCERRADOS
				AF9->(dbSetOrder(1))
				AF9->(MsSeek(xFilial()+AFA->AFA_PROJET+AFA->AFA_REVISA+AFA->AFA_TAREFA))

				If !lSimula .Or. Ascan(aDadosSim,{|x| x[SIM_RECAF9]==AF9->(RECNO()) .And. cRecurso== x[SIM_RECURS]}) ==0// Este registro deve ser ignorado, pois foi enviado um simulado para ele
					If cAltTrf == Nil .Or.( cAltTrf <> Nil .And. AF9->AF9_TAREFA <> cAltTrf )
						If (AFA->AFA_REVISA==AF8->AF8_REVISA .And. cProjeto==Nil) .Or. (AFA->AFA_REVISA==AF8->AF8_REVISA .And. cProjeto!=AF8->AF8_PROJET).Or.(AFA->AFA_REVISA==cVersao .And. cProjeto==AF8->AF8_PROJET)
							If ( DTOS(AFA->AFA_START)+AFA->AFA_HORAI >= DTOS(DIni)+cHIni .And. DTOS(AFA->AFA_START)+AFA->AFA_HORAI  <= DTOS(dFim)+cHFim)  .Or. 	;
								( DTOS(AFA->AFA_FINISH)+AFA->AFA_HORAF >= DTOS(DIni)+cHIni .And. DTOS(AFA->AFA_FINISH)+AFA->AFA_HORAF <= DTOS(dFim)+cHFim) .Or.;
								( DTOS(AFA->AFA_START)+AFA->AFA_HORAI < DTOS(DIni)+cHIni .And. DTOS(AFA->AFA_FINISH)+AFA->AFA_HORAF > DTOS(dFim)+cHFim)
								lRejec := .F.
								dbSelectArea("AN8")
								aAreaAN8 := AN8->(GetArea())
								AN8->(dbSetOrder(1)) //AN8_FILIAL+AN8_PROJET+AN8_REVISA+AN8_TAREFA+DTOS(AN8_DATA)+AN8_HORA+AN8_TRFORI
								If AN8->( MsSeek( cFilAN8+AFA->(AFA_PROJET+AFA_REVISA+AFA_TAREFA) ) )
									Do While !AN8->(Eof()) .And. AN8->(AN8_FILIAL+AN8_PROJET+AN8_REVISA+AN8_TAREFA)==cFilAN8+AFA->(AFA_PROJET+AFA_REVISA+AFA_TAREFA) .And. !lRejec
										If AN8->AN8_STATUS<> '2' .And. AN8->AN8_STATUS<> '3'
											lRejec := .T.
											Exit
										EndIf
										AN8->(dbSkip())
									EndDo
								EndIf
								Do Case
									Case nFilter==1  //Todas
										aAdd(aAuxAloc,{AFA->AFA_START,AFA->AFA_HORAI,AFA->AFA_FINISH,AFA->AFA_HORAF,AFA->AFA_ALOC})
										aAdd(aCache,AFA->(RecNo()) )
										If aRecAF9 <> Nil
											aAdd(aRecAF9,AF9->(RecNo()) )
										EndIf
									Case nFilter==2 .And. !Empty(AF9->AF9_DTATUF) .And. !lRejec //Tarefas Executadas
										aAdd(aAuxAloc,{AFA->AFA_START,AFA->AFA_HORAI,AFA->AFA_FINISH,AFA->AFA_HORAF,AFA->AFA_ALOC})
										aAdd(aCache,AFA->(RecNo()) )
										If aRecAF9 <> Nil
											aAdd(aRecAF9,AF9->(RecNo()) )
										EndIf
									Case ( nFilter==3 .or. nFilter==4) .And. Empty(AF9->AF9_DTATUF) .Or. lRejec //Tarefas a Executar
										aAdd(aAuxAloc,{AFA->AFA_START,AFA->AFA_HORAI,AFA->AFA_FINISH,AFA->AFA_HORAF,AFA->AFA_ALOC})
										aAdd(aCache,AFA->(RecNo()) )
										If aRecAF9 <> Nil
											aAdd(aRecAF9,AF9->(RecNo()) )
										EndIf
								EndCase
								RestArea(aAreaAN8)
							EndIf
						EndIf
					EndIf
				EndIf
			Endif
			dbSkip()
		EndDo
	EndIf
Else
	dbSelectArea("AF9")
	aAreaAF9 := AF9->(GetArea())
	dbSetOrder(1)
	cFilialAF9 := xFilial("AF9")

	dbSelectArea("AN8")
	aAreaAN8 := AN8->(GetArea())
	AN8->(dbSetOrder(1)) //AN8_FILIAL+AN8_PROJET+AN8_REVISA+AN8_TAREFA+DTOS(AN8_DATA)+AN8_HORA+AN8_TRFORI
	cFilialAN8 := xFilial("AN8")

	cCompProj := ""
	lVldFase := .F.
	For nx := 1 to Len(aCache)
		dbSelectArea("AFA")
		dbGoto(aCache[nx])

		If lMonitor // somente se estiver sendo chamado do PMSMONIT
			If cCompProj <> AFA->AFA_PROJET
				cCompProj := AFA->AFA_PROJET
				lVldFase := PmsVldFase( "AF8", AFA->AFA_PROJET, "36", .F. )
			EndIf

			If !lVldFase
				Loop
			EndIf
		EndIf

		AF9->(MsSeek(cFilialAF9+AFA->AFA_PROJET+AFA->AFA_REVISA+AFA->AFA_TAREFA))
		// Quando esta cacheado apenas reavalia o filtro do cache
		lRejec := .F.
		If AN8->( MsSeek( cFilialAN8+AFA->(AFA_PROJET+AFA_REVISA+AFA_TAREFA) ) )
			Do While !AN8->(Eof()) .And. AN8->(AN8_FILIAL+AN8_PROJET+AN8_REVISA+AN8_TAREFA)==cFilialAN8+AFA->(AFA_PROJET+AFA_REVISA+AFA_TAREFA) .And. !lRejec
				If AN8->AN8_STATUS<> '2' .And. AN8->AN8_STATUS<> '3'
					lRejec := .T.
					Exit
				EndIf
				AN8->(dbSkip())
			EndDo
		EndIf
		Do Case
			Case nFilter==1  //Todas
				aAdd(aAuxAloc,{AFA->AFA_START,AFA->AFA_HORAI,AFA->AFA_FINISH,AFA->AFA_HORAF,AFA->AFA_ALOC})
				If aRecAF9 <> Nil
					aAdd(aRecAF9,AF9->(RecNo()) )
				EndIf
			Case nFilter==2 .And. !Empty(AF9->AF9_DTATUF) .And. !lRejec //Tarefas Executadas
				aAdd(aAuxAloc,{AFA->AFA_START,AFA->AFA_HORAI,AFA->AFA_FINISH,AFA->AFA_HORAF,AFA->AFA_ALOC})
				If aRecAF9 <> Nil
					aAdd(aRecAF9,AF9->(RecNo()) )
				EndIf
			Case (nFilter==3 .or. nFilter==4) .And. Empty(AF9->AF9_DTATUF) .Or. lRejec //Tarefas a Executar
				aAdd(aAuxAloc,{AFA->AFA_START,AFA->AFA_HORAI,AFA->AFA_FINISH,AFA->AFA_HORAF,AFA->AFA_ALOC})
				If aRecAF9 <> Nil
					aAdd(aRecAF9,AF9->(RecNo()) )
				EndIf
		EndCase
	Next nX
	restArea(aAreaAN8)
	restArea(aAreaAF9)

EndIf
If lSimula
	For nX := 1 To Len(aDadosSim)
		//		cProjeto	:=
		//		cVersao 	:=	aDadosSim[nX,SIM_REVISA ]
		cTarefa	:=	aDadosSim[nX,SIM_TAREFA]
		AF8->(MsSeek(xFilial()+aDadosSim[nX,SIM_PROJETO]))

		If lMonitor // somente se estiver sendo chamado do PMSMONIT
			If !PmsVldFase( "AF8", AF8->AF8_PROJET, "36", .F. )
				Loop
			EndIf
		EndIf

		If cAltTrf == Nil .Or.( cAltTrf <> Nil .And. cTarefa <> cAltTrf )

			If (aDadosSim[nX,SIM_REVISA]==AF8->AF8_REVISA .And. cProjeto==Nil) .Or. (aDadosSim[nX,SIM_REVISA]==AF8->AF8_REVISA .And. cProjeto!=AF8->AF8_PROJET).Or.(aDadosSim[nX,SIM_REVISA]==cVersao .And. cProjeto==AF8->AF8_PROJET)
				If ( DTOS(aDadosSim[nX,SIM_START])+aDadosSim[nX,SIM_HORAI] >= DTOS(DIni)+cHIni 	.And. DTOS(aDadosSim[nX,SIM_START])+aDadosSim[nX,SIM_HORAI]  <= DTOS(dFim)+cHFim)  .Or. 	;
					( DTOS(aDadosSim[nX,SIM_FINISH])+aDadosSim[nX,SIM_HORAF]>= DTOS(DIni)+cHIni 	.And. DTOS(aDadosSim[nX,SIM_FINISH])+aDadosSim[nX,SIM_HORAI] <= DTOS(dFim)+cHFim) .Or.;
					( DTOS(aDadosSim[nX,SIM_START])+aDadosSim[nX,SIM_HORAI] < DTOS(DIni)+cHIni 	.And. DTOS(aDadosSim[nX,SIM_FINISH])+aDadosSim[nX,SIM_HORAI] > DTOS(dFim)+cHFim)
					aAdd(aAuxAloc,{aDadosSim[nX,SIM_START],aDadosSim[nX,SIM_HORAI],aDadosSim[nX,SIM_FINISH],aDadosSim[nX,SIM_HORAF],aDadosSim[nX,SIM_ALOC]})
					If aRecAF9 <> Nil .And. aDadosSim[nX,SIM_RECAF9] <> 0
						aAdd(aRecAF9,aDadosSim[nX,SIM_RECAF9] )
					EndIf

				EndIf
			Endif
		EndIf
	Next nX
Endif
While lSeek
	lSeek := .F.
	For nx := 1 to Len(aAuxAloc)
		If DTOS(aAuxAloc[nx,1])+aAuxAloc[nx,2]>DTOS(dRef)+cHoraRef .And. ;
			DTOS(aAuxAloc[nx,1])+aAuxAloc[nx,2]<DTOS(dAuxRef)+cAuxHoraRef
			lSeek	:= .T.
			dAuxRef	:= aAuxAloc[nx,1]
			cAuxHoraRef:= aAuxAloc[nx,2]
		EndIf
		If DTOS(aAuxAloc[nx,3])+aAuxAloc[nx,4]>DTOS(dRef)+cHoraRef .And.;
			DTOS(aAuxAloc[nx,3])+aAuxAloc[nx,4]<DTOS(dAuxRef)+cAuxHoraRef
			lSeek	:= .T.
			dAuxRef	:= aAuxAloc[nx,3]
			cAuxHoraRef:= aAuxAloc[nx,4]
		EndIf
	Next
	If lSeek
		dRef := dAuxRef
		cHoraRef := cAuxHoraRef
		aAdd(aAloc,{dAuxRef,cAuxHoraRef,0})
		dAuxRef		:= CTOD("01/12/25")
		cAuxHoraRef	:= "24:00"
	EndIf
End
For nx := 1 to Len(aAloc)-1
	dIni	:= aAloc[nx,1]
	cHIni	:= aAloc[nx,2]
	dFim	:= aAloc[nx+1,1]
	cHFim	:= aAloc[nx+1,2]
	For ny := 1 to Len(aAuxAloc)
		If  ((DTOS(aAuxAloc[ny,1])+aAuxAloc[ny,2] > DTOS(dIni)+cHIni .And.;
			DTOS(aAuxAloc[ny,1])+aAuxAloc[ny,2] < DTOS(dFim)+cHFim) .Or.;
			(DTOS(aAuxAloc[ny,3])+aAuxAloc[ny,4] > DTOS(dIni)+cHIni .And.;
			DTOS(aAuxAloc[ny,3])+aAuxAloc[ny,4] < DTOS(dFim)+cHFim)) .Or.;
			((DTOS(aAuxAloc[ny,1])+aAuxAloc[ny,2]<= DTOS(dIni)+cHIni .And.;
			DTOS(aAuxAloc[ny,3])+aAuxAloc[ny,4] >= DTOS(dFim)+cHFim))
			aAloc[nx,3] += aAuxAloc[ny,5]
		EndIf
	Next nY
Next nX

RestArea(aAreaAFA)
RestArea(aArea)
Return aAloc
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³PmsCfgRec³ Autor ³ Edson Maricate			³ Data ³ 09-02-2001	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Exibe uma tela com as configuracoes de visualizacao do Gantt	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³Generico														³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsCfgRec(oDlg,aConfig,dIni,aGantt)
Local lRet			:= .F.
Local aConfigBKP	:= aClone(aConfig)

If ParamBox({	{3,STR0102,aConfig[1],{STR0103,STR0104,STR0105,STR0192,STR0193,STR0342},60,,.F.},; //"Escala de Tempo"###"Diario"###"Semanal"###"Mensal"###"Mensal (Zoom 30%)"###"Bimestral"
	   			{4,STR0106,aConfig[2],STR0341,70,,.F.},; //
	   			{4,"",aConfig[3],STR0098,40,,.F.},; //"Exibir detalhes :"###"Codigo" //"Codigo"
				{4,"",aConfig[4],STR0068,40,,.F.},; //"Descricao"
				{4,"",aConfig[5],STR0155,45,,.F.},;  // Tarefas
				{3,STR0343,aConfig[6],{STR0344,STR0345,STR0346},60,,.F.},;
				{ 1, STR0036+":", Space(LEN(AF8->AF8_PROJET))		  ,"@!" 	 ,""  ,"AF8" ,"" ,65 ,.F. },;  // Projeto de
				{ 1, STR0037+":", Replicate("Z",LEN(AF8->AF8_PROJET)) ,"@!" 	 ,""  ,"AF8" ,"" ,65 ,.F. }},;  // Projto ate
				STR0003,aConfig,,,.F.,120,3) //"Duracao"###"Configuracoes do Gantt" //"Exibir Tarefas"###"Parametros"
	lRet := .T.
EndIf
aConfig := aClone(aConfigBKP)
aSize(aConfigBKP, 0)

Return lRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsSelTsk³ Autor ³ Edson Maricate         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Monta uma janela de consulta aos projetos para selecionar     ³±±
±±³          ³um determinado elemento.                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Texto a ser exibido na janela da consulta.             ³±±
±±³          ³ExpC2: Filhos a serem exibidos na colsulta Ex: "AF8/AFA/AF9"  ³±±
±±³          ³ExpC3: Objetos a serem aceitos na selecao.                    ³±±
±±³          ³ExpC4: Aviso exibido aos objetos que nao sao permitidos na    ³±±
±±³          ³       selecao do usuario.                                    ³±±
±±³          ³ExpC5: "AF1" - Orcamentos ou "AF8" - Projetos                 ³±±
±±³          ³ExpC6: Codigo do projeto atual                                ³±±
±±³          ³ExpC7: Permite alterar o codigo do projeto atual              ³±±
±±³          ³ExpC8: Permite alterar a versao do projeto atual              ³±±
±±³          ³ExpC9: Numero da versao do projeto atual                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsSelTsk(cTexto, cFilhos, cOk, cAviso, cAlias, ;
                   cPrj, lChgPrj, lVersao, cVersao, aVetSel)
Local oDlg
Local oBold
Local oFont
Local oBrowse
Local oPanelTop
Local oPanelBottom
Local oAll       := LoadBitmap( GetResources(), BMP_EXPALL )
Local oCmp       := LoadBitmap( GetResources(), BMP_EXPCMP )
Local oMenos     := LoadBitmap( GetResources(), BMP_SHORTCUTMINUS )
Local oMais      := LoadBitmap( GetResources(), BMP_SHORTCUTPLUS )
Local lOk        := .F.
Local aRet       := {}
Local aStru      := {}
Local aArea      := GetArea()
Local aAreaAF8   := AF8->(GetArea())
Local aAreaAFC   := AFC->(GetArea())
Local aAreaAF1   := AF1->(GetArea())
Local cArquivo   := GetNextAlias() 
Local aVersoes   := {}
Local aExpand    := {}
Local nNivelMax  := 0
Local nX         := 0
Local oMarkT     := LoadBitmap(GetResources(), "LBOK")
Local oMarkF     := LoadBitmap(GetResources(), "LBNO")
Local oMarkNo    := LoadBitmap(GetResources(), "BR_VERMELHO")
Local aMarks     := {}
Local bActF7New  := {}
Local cPaiFilho  := "1"
Local cSelMarka  := "1"
Local lCpyMark   := .F.
Local cPrjAnt    := ""
Local cVersaoPrj := cVersao
Local oCBX
Local lBotao := ExistBlock("PMSBOTAO")
Local nTamanho	:= 0

PRIVATE aAuxCps

DEFAULT lVersao := .F.
DEFAULT lChgPrj := .T.
DEFAULT cPrj    := CriaVar("AF8_PROJET")
DEFAULT cTexto  := ""
DEFAULT cAlias  := "AF8"

If cAlias == "AF8"
	bActF7New := {|| cSelMarka := "1", CPYMarkP(cArquivo, @aMarks, cPaiFilho), ;
	                 Markados(cArquivo, aMarks), oBrowse:Refresh()}
Else
	bActF7New := {|| cSelMarka := "1", CPYMarkB(cArquivo, @aMarks, cPaiFilho), ;
	                 MarkadosB(cArquivo, aMarks), oBrowse:Refresh()}
EndIf

If aVetSel != Nil .And. SuperGetMV("MV_PMSCPSL",,"2") == "1"
	SetKey(VK_F7, bActF7New)
	lCpyMark  := .T.
EndIf

Default aVetSel := {}

DEFINE FONT oFont NAME "Arial" SIZE 0, -10
DEFINE FONT oBold NAME "Arial" SIZE 0, -13 BOLD
DEFINE MSDIALOG oDlg FROM 0, 0  TO 450, 600 TITLE IIf(cAlias == "AF8",STR0156,STR0163) + cTexto Of oMainWnd PIXEL //"Consulta Projetos - " //"Consulta Orcamento - "

// painel superior - projetos
oPanelTop := TPanel():New( oDlg:nTop ,0 ,'' ,oDlg ,oDlg:oFont ,.T. ,.T. ,,,(oDlg:nRight-oDlg:nLeft),25,.T.,.T. )
oPanelTop:Align := CONTROL_ALIGN_TOP

If cAlias=="AF1"
	aAuxCps := {{"AF2_TAREFA","AF5_EDT",8,,,.F.,"",},{"AF2_DESCRI","AF5_DESCRI",55,,,.F.,"",150}}
Else
	aAuxCps := {{"AF9_TAREFA","AFC_EDT",8,,,.F.,"",},{"AF9_DESCRI","AFC_DESCRI",55,,,.F.,"",150}}
EndIf


For nx := 1 to Len(aAuxCps)
	dbSelectArea("SX3")
	dbSetOrder(2)
	If MsSeek(aAuxCps[nx,1])
		If aAuxCps[nx,1] == "AF9_TAREFA" .AND. TamSX3("AF9_TAREFA")[1] < TamSX3("AF9_PROJET")[1]
			nTamanho := TamSX3("AF9_PROJET")[1]
		Else
			nTamanho := X3_TAMANHO
		EndIf
		aAdd(aStru,{"X"+Substr(X3_CAMPO,2,Len(X3_CAMPO)),X3_TIPO,nTamanho,X3_DECIMAL})
		If aAuxCps[nx,6]
			aAdd(aAlter,"X"+Substr(X3_CAMPO,2,Len(X3_CAMPO)))
		EndIf
	ElseIf Substr(aAuxCps[nx,1],1,1) == "$"
		aAdd(aStru,aClone(&(Substr(aAuxCps[nx,1],2,Len(aAuxCps[nx,1])-1)+"(1)")))
	EndIf
Next
aAdd(aStru,{"CTRLNIV","C",1,0})
aAdd(aStru,{"L_I_XO","C",1,0})
aAdd(aStru,{"NIVTREE","N",3,0})
aAdd(aStru,{"ALIAS","C",3,0})
aAdd(aStru,{"RECNO","N",14,0})
aAdd(aStru,{"FLAG","L",1,0})

If lCpyMark
	aAdd(aStru, {"CPYMARK", "L", 1, 0})
EndIf

If _oPMSXFUN2 <> Nil
	_oPMSXFUN2:Delete()
	_oPMSXFUN2 := Nil
Endif

_oPMSXFUN2 := FWTemporaryTable():New( cArquivo )  
_oPMSXFUN2:SetFields(aStru) 	

//------------------
//Criação da tabela temporaria
//------------------
_oPMSXFUN2:Create()	

dbSelectArea(cArquivo)
dbGotop()
nAlias	:= Select()
If cAlias=="AF1"

	If !lCpyMark
		oBrowse := TcBrowse():New( 22,05 ,215 ,110 , , , , oDlg, ,,,,{|| (PmsExpOrc(cArquivo,@aExpand,@nNivelMax),(PmsAtuPOrc(cArquivo,nNivelMax,,aExpand),oBrowse:Refresh())) },,oFont,,,,, .F.,cArquivo, .T.,, .F., , ,.f. )
	Else
		oBrowse := TcBrowse():New( 22,05 ,215 ,110 , , , , oDlg, ,,,,{|| (PmsExpOrc(cArquivo,@aExpand,@nNivelMax),(PmsAtuPOrc(cArquivo,nNivelMax,,aExpand),Markados(cArquivo,aMarks),oBrowse:Refresh())) },,oFont,,,,, .F.,cArquivo, .T.,, .F., , ,.f. )
	EndIf
Else

	If !lCpyMark
		oBrowse := TcBrowse():New( 22,05 ,215 ,110 , , , , oDlg, ,,,,{|| (PmsPlnExp(cArquivo,@aExpand,@nNivelMax),(PmsAtuPlan(cVersaoPrj,cArquivo,nNivelMax,,,aExpand),oBrowse:Refresh())) },,oFont,,,,, .F.,cArquivo, .T.,, .F., , ,.f. )
	Else
		oBrowse := TcBrowse():New( 22,05 ,215 ,110 , , , , oDlg, ,,,,{|| (PmsPlnExp(cArquivo,@aExpand,@nNivelMax),(PmsAtuPlan(cVersaoPrj,cArquivo,nNivelMax,,,aExpand),Markados(cArquivo,aMarks),oBrowse:Refresh())) },,oFont,,,,, .F.,cArquivo, .T.,, .F., , ,.f. )
	EndIf
EndIf

oBrowse:Align := CONTROL_ALIGN_ALLCLIENT

oBrowse:AddColumn( TCColumn():New( "",{ || If((cArquivo)->CTRLNIV=="-",oMenos,If((cArquivo)->CTRLNIV=="+",oMais,If((cArquivo)->CTRLNIV=="*",oAll,If((cArquivo)->CTRLNIV=="!",oCmp,Nil) )))},,,,"RIGHT" , 6, .T., .F.,,,, .T., ))
//oBrowse:AddColumn( TCColumn():New( "",FieldWBlock( "CTRLNIV", nAlias ),,,,"ALIGN" , 5, .F., .F.,,,, .T., ))

If lCpyMark
	oBrowse:AddColumn( TCColumn():New( "",{ || If((cArquivo)->(RecNo()) == PmsPriRecno(cArquivo), oMarkNo , If( (cArquivo)->CPYMARK,oMarkT,oMarkF )) },,,,"RIGHT" , 6, .T., .F.,,,, .T., ))
EndIf

If cAlias=="AF1"
	oBrowse:AddColumn( TCColumn():New( "",{ || PmsOrcBmp((cArquivo)->ALIAS,(cArquivo)->RECNO ) },,,, "LEFT", 15, .T., .F.,,,, .T., ))
Else
	oBrowse:AddColumn( TCColumn():New( "",{ || PmsRetRes((cArquivo)->ALIAS,(cArquivo)->RECNO ) },,,, "LEFT", 15, .T., .F.,,,, .T., ))
EndIf

For nx := 1 to Len(aAuxCps)
	If Substr(aAuxCps[nx,1],1,1)=="$"
		aAuxRet := &(Substr(aAuxCps[nx,1],2,Len(aAuxCps[nx,1])-1)+"(2)")
		oBrowse:AddColumn( TCColumn():New( aAuxRet[1], FieldWBlock( aAuxRet[2] , nAlias ),AllTrim(aAuxRet[3]),,, if(aAuxRet[5]=="N","RIGHT","LEFT"), If(aAuxCps[nx,8]!=Nil,aAuxCps[nx,8],If(aAuxRet[4]>Len(aAuxRet[1]),(aAuxRet[4]*3),(LEN(aAuxRet[1])*3))), .F., .F.,,,, .F., ) )
	Else
		dbSelectArea("SX3")
		dbSetOrder(2)
		If MsSeek(aAuxCps[nx,1])
			oBrowse:AddColumn( TCColumn():New( Trim(x3titulo()), FieldWBlock( "X"+Substr(X3_CAMPO,2,Len(X3_CAMPO)), nAlias ),AllTrim(X3_PICTURE),,, if(X3_TIPO=="N","RIGHT","LEFT"), If(aAuxCps[nx,8]!=Nil,aAuxCps[nx,8],If(X3_TAMANHO>Len(X3_TITULO),(X3_TAMANHO*5),(LEN(X3_TITULO)*5))), .F., .F.,,,, .F., ) )
		EndIf
	EndIf
Next
oBrowse:AddColumn( TCColumn():New( "",{|| " " },,,, "LEFT", 5, .T., .F.,,,, .T., ))
dbSelectArea(cArquivo)
oBrowse:Refresh()


If !Empty(cPrj)
	If cAlias=="AF1"
		AF1->(dbSetOrder(1))
		If AF1->(MsSeek(xFilial()+cPrj))
			If Type(AllTrim(ReadVar()))!="U" .And. !Empty(&(ReadVar()))
				nNivelMax := PmsAtuPOrc(cArquivo,1000)
				dbSelectArea(cArquivo)
				LOCATE FOR XF2_TAREFA = AllTrim(&(ReadVar()))
			Else
				nNivelMax := PmsAtuPOrc(cArquivo,If(AF1->AF1_NMAXF3>0,AF1->AF1_NMAXF3,1))
			EndIf
		EndIf
	Else
		AF8->(dbSetOrder(1))
		If AF8->(MsSeek(xFilial()+cPrj))
			If Type(AllTrim(ReadVar()))!="U" .And. !Empty(&(ReadVar()))
				nNivelMax := PmsAtuPlan(AF8->AF8_REVISA,cArquivo,1000,,,aExpand)
				dbSelectArea(cArquivo)
				LOCATE FOR XF9_TAREFA = AllTrim(&(ReadVar()))
			Else
				nNivelMax := PmsAtuPlan(AF8->AF8_REVISA,cArquivo,If(AF8->AF8_NMAXF3>0,AF8->AF8_NMAXF3,1),,,aExpand)
			EndIf
		EndIf
	EndIf
EndIf

// painel inferior - botoes
oPanelBottom := TPanel():New(oDlg:nBottom-35,0,'',oDlg, oDlg:oFont, .T., .T.,, ,(oDlg:nRight-oDlg:nLeft),35,.T.,.T. )
oPanelBottom:Align := CONTROL_ALIGN_BOTTOM

If lCpyMark
	@ 05, 010 Say "F7 - " + STR0384 Of oPanelBottom Pixel FONT oBold //"Marcar"
	//Implementacao futura...
	//@ 213, 120 Say "Marcação hereditária?"  of oDlg PIXEL FONT oBold
	//@ 212, 200 COMBOBOX cPaiFilho ITEMS {"1=Sim","2=Não"} OF oDlg PIXEL
	@ 05, 120 Say STR0385 + ":" Of oPanelBottom PIXEL FONT oBold //"Copiar Tarefa/EDT"
	@ 05, 200 COMBOBOX cSelMarka ITEMS {"1=" + STR0386, "2=" + STR0387} OF oPanelBottom ; //"Marcada"###"Selecionada"
	  PIXEL ON CHANGE IF(cSelMarka == "2", (aMarks := {}, Markados(cArquivo, aMarks),  oBrowse:Refresh()),)
EndIf

DEFINE SBUTTON FROM 15,10  TYPE 1   ACTION  {|| If((cArquivo)->ALIAS$cOk,(aRet := {(cArquivo)->ALIAS ,(cArquivo)->RECNO},lOk:=.T.,oDlg:End()),Aviso(STR0157,cAviso,{STR0006},2)) } ENABLE OF oPanelBottom //"Selecao Invalida."###"Fechar"
DEFINE SBUTTON FROM 15,40  TYPE 2   ACTION  {|| oDlg:End() } ENABLE OF oPanelBottom
DEFINE SBUTTON FROM 15,70  TYPE 4   ACTION  DISABLE OF oPanelBottom
DEFINE SBUTTON FROM 15,100 TYPE 15  ACTION  {|| SelTskVis(cArquivo) } ENABLE OF oPanelBottom

If lBotao
ExecBlock("PMSBOTAO",.F.,.F.,{oPanelBottom})
EndIf

If cAlias=="AF1"
	@ 06,08 Say STR0181 of oPanelTop PIXEL //"Selecione o Orcamento :"
	@ 05,70 MSGET cPrj Valid ExistCpo("AF1",cPrj,1) .And. SelAtuOrc(@oBrowse,cArquivo,,,,cPrj) F3 "AF1" of oPanelTop PIXEL When lChgPrj SIZE 60,9 HASBUTTON
ElseIf cAlias=="AF8"
	@ 06,08 Say STR0182 of oPanelTop PIXEL //"Selecione o Projeto :"
	@ 05,60 MSGET cPrj Valid PMSExistCPO("AF8",cPrj,1) .And. SelAtuCbx(@cPrjAnt,cPrj,@oCBX,aVersoes,@cVersaoPrj) .And.SelAtuBrw(@oBrowse,cVersaoPrj,cArquivo,,,,aExpand) F3 "AF8" of oPanelTop PIXEL When lChgPrj SIZE 60,9 HASBUTTON
	@ 06,130 Say STR0040 of oPanelTop PIXEL //"Versao"
	@ 05,150 COMBOBOX oCBX VAR cVersaoPrj ITEMS aVersoes SIZE 32,120 OF oPanelTop PIXEL VALID SelAtuBrw(@oBrowse,cVersaoPrj,cArquivo,,,,aExpand) When lVersao
	SelAtuCbx(@cPrjAnt,cPrj,oCBX,aVersoes,@cVersaoPrj)
EndIf

@ 05, 200 Button STR0360 Size PMSResize(75), PMSResize(23) Action {|| PmsStrPesq(cArquivo ,,cAlias) } Pixel of oDlg //"Pesquisar"

@ 05, 2500 Button "" Size 10, 10 Pixel

ACTIVATE MSDIALOG oDlg CENTERED on Init oBrowse:Refresh()

If lOk .And. Len(aMarks) > 0
	(cArquivo)->(DbGoTop())
	(cArquivo)->(DbSkip())

	aRet := {(cArquivo)->ALIAS, (cArquivo)->RECNO}

	If (cArquivo)->CPYMARK
		If cAlias == "AF8"
			CPYMarkP(cArquivo, @aMarks, "2")
		Else
			CPYMarkB(cArquivo, @aMarks, "2")
		EndIf
	EndIf

	aVetSel := AClone(aMarks)
EndIf

//Deleta tabela temporária do banco de dados
If _oPMSXFUN2 <> Nil
	_oPMSXFUN2:Delete()
	_oPMSXFUN2 := Nil
Endif

RestArea(aAreaAFC)
RestArea(aAreaAF1)
RestArea(aAreaAF8)
RestArea(aArea)
Return aRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³SelAtuOrc³ Autor ³                        ³ Data ³            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³                                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ oBrowse -                                                    ³±±
±±³          ³ xPar1 -                                                      ³±±
±±³          ³ xPar2 -                                                      ³±±
±±³          ³ xPar3 -                                                      ³±±
±±³          ³ xPar4 -                                                      ³±±
±±³          ³ cOrc  -                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function SelAtuOrc( oBrowse ,xPar1 ,xPar2 ,xPar3 ,xPar4 ,cOrc )

dbSelectArea("AF1")
dbSetOrder(1)
If MSSeek(xFilial("AF1")+cOrc)
	PmsAtuPOrc(xPar1,xPar2,xPar3,xPar4)
	dbSelectARea(xPar1)
	dbGotop()
	oBrowse:Refresh()
EndIf


Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³SelAtuBrw³ Autor ³                        ³ Data ³            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³                                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ oBrowse -                                                    ³±±
±±³          ³ xPar1 -                                                      ³±±
±±³          ³ xPar2 -                                                      ³±±
±±³          ³ xPar3 -                                                      ³±±
±±³          ³ xPar4 -                                                      ³±±
±±³          ³ xPar5 -                                                      ³±±
±±³          ³ xPar6 -                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function SelAtuBrw(oBrowse,xPar1,xPar2,xPar3,xPar4,xPar5,xPar6)

PmsAtuPlan(xPar1,xPar2,xPar3,xPar4,xPar5,xPar6)
dbSelectARea(xPar2)
dbGotop()

oBrowse:Refresh()

Return .T.

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³SelAtuCbx³ Autor ³                        ³ Data ³            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ monta o array do combo de versão do projeto                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ cPrjAnt - variavel utilizada para guardar o prj anerior      ³±±
±±³          ³ cPrj - variavel com o prj selecionado pelo usuario           ³±±
±±³          ³ oCBX - objeto do tipo COMBOBOX                               ³±±
±±³          ³ aVersoes - array com a lista de versoes do projeto           ³±±
±±³          ³ cVersaoPrj - versao selecionada do projeto                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function SelAtuCbx(cPrjAnt,cPrj,oCBX,aVersoes,cVersaoPrj)
//esta funcao deveria estar no metodo ON CHANGE do MSGET cPrj mas este metodo nao funciona com F3
If !(cPrjAnt==cPrj)
	aVersoes	:= {}
	dbSelectArea("AF8")
	AF8->(dbSetOrder(1)) //AF8_FILIAL+AF8_PROJET+AF8_DESCRI
	AF8->(DbSeek(xFilial()+cPrj))

	dbSelectArea("AFE")
	If AFE->(DbSeek(xFilial()+cPrj))
		While AFE->(!Eof()) .And. AFE->AFE_FILIAL+AFE->AFE_PROJET == xFilial()+cPrj
			aAdd(aVersoes,AFE->AFE_REVISA)
			AFE->(DbSkip())
		End
	EndIf

	oCBx:SetItems(aVersoes)
	oCBx:nAT := Len(aVersoes)
	cPrjAnt  := cPrj
	oCBx:Refresh()
	cVersaoPrj := AF8->AF8_REVISA
EndIf

Return .T.

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³SelTskVis³ Autor ³ Edson Maricate         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Executa a chamada da axVisual do objeto selecionado.          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function SelTskVis(cArquivo)

Local aArea		:= GetArea()
Local cAlias	:= (cArquivo)->ALIAS
Local nRecView	:= (cArquivo)->RECNO

If ValType( cAlias ) == 'C' .And. !( Empty( cAlias ) )
	SaveInter()

	RegToMemory("AFA",.T.)
	RegToMemory("AFB",.T.)

	cCadastro := STR0158 //"Siga Advanced Protheus - Consulta Padrao"
	dbSelectArea(cAlias)
	dbGoto(nRecView)
	If cAlias == "AFC"
		PMSA201(2,,"000")
	ElseIf cAlias == "AF9"
		PMSA203(2,,"000")
	Else
		axVisual(cAlias,nRecView,2)
	Endif

	RestInter()
EndIf

RestArea(aArea)
Return


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsGrafMail³ Autor ³ Edson Maricate       ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Monta uma tela com solicitando os emails dos usuarios.        ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSC100                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsGrafMail(oGraphic,cAssunto,aTexto,aTabela,nEspacos,nColLeft,lEditTxt)

Local cTO	:= SPACE(200)
Local cCC	:= SPACE(200)

Default nColLeft := 1
Default lEditTxt := .F.

DEFINE MSDIALOG oDlg FROM 102 ,43  TO 260,611 TITLE STR0164 Of oMainWnd PIXEL //"Enviar Grafico por e-Mail"
	@ 0, 0 BITMAP oBmp RESNAME BMP_TOOLBAR oF oDlg SIZE 600,20  NOBORDER WHEN .F. PIXEL
	@ 23 ,4   SAY STR0165 Of oDlg PIXEL SIZE 27 ,9 //"Para :"
	@ 37 ,4   SAY STR0166 Of oDlg PIXEL SIZE 23 ,9 //"Cco :"
	@ 54 ,4   SAY STR0167 Of oDlg PIXEL SIZE 23 ,9 //"Assunto:"
	@ 21 ,27  MSGET cTO Picture "@" OF oDlg PIXEL SIZE 250,9
	@ 36 ,27  MSGET cCC Picture "@" OF oDlg PIXEL SIZE 250,9
	@ 53 ,27  MSGET cAssunto Picture "@" OF oDlg PIXEL SIZE 250,9
	If lEditTxt
	    @ 2  ,44   BUTTON STR0381 SIZE 35 ,11  FONT oDlg:oFont ACTION PmsEditTxt(aTexto)  OF oDlg PIXEL //"Editar"
	EndIf
    @ 2  ,4   BUTTON STR0168 SIZE 35 ,11  FONT oDlg:oFont ACTION (If(PmsEnvGraf(oGraphic,cAssunto,aTexto,cTo,cCC,aTabela,nEspacos,nColLeft),oDlg:End(),))  OF oDlg PIXEL //"Enviar"

ACTIVATE MSDIALOG oDlg

Return .T.

Static Function PmsEditTxt(aTexto)
Local oDlg, cMensagem := ""
Local nX
For nX := 1 TO Len(aTexto)
	cMensagem += aTexto[nX]+CRLF
Next
DEFINE MSDIALOG oDlg FROM 10,43  TO 460,611 TITLE STR0381 Of oMainWnd PIXEL //"Editar"
	@ 0, 0 BITMAP oBmp RESNAME BMP_TOOLBAR oF oDlg SIZE 600,20  NOBORDER WHEN .F. PIXEL
	@ 020,003 Get cMensagem MEMO Size 282,202 PIXEL of oDlg

    @ 2  ,4   BUTTON STR0043 SIZE 35 ,11  FONT oDlg:oFont ACTION ( PmsMudaTxt(aTexto, cMensagem), oDlg:End() ) OF oDlg PIXEL  //"Confirma"
    @ 2  ,40  BUTTON STR0042 SIZE 35 ,11  FONT oDlg:oFont ACTION oDlg:End()  OF oDlg PIXEL  //"Cancela"

ACTIVATE MSDIALOG oDlg

Return

Static Function PmsMudaTxt(aTexto, cMensagem)
Local nLinhas, nX

aTexto := {}

nLinhas = MLCOUNT(cMensagem, 65)
For nX = 1 TO nLinhas
    aAdd(aTexto, MEMOLINE(cMensagem, 65, nX) )
Next

Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsEnvGraf³ Autor ³ Edson Maricate        ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de envio do grafico por email.                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSC100                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsEnvGraf(oGraphic,cAssunto,aTexto,cTo,cCC,aTabela,nEspacos,nColLeft)
Local lRet

Default nColLeft := 1

Processa({||lRet := PmsEnvGrff(oGraphic,cAssunto,aTexto,cTo,cCC,aTabela,nEspacos,nColLeft)},STR0159) //"Enviando e-mail. Aguarde..."

Return lRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsNewProc³ Autor ³ Edson Maricate        ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de atualizacao da regua de processamento.              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico: Funcao utilizada para atualizar a regua de processa-³±±
±±³          ³          mento nos casos onde nao e possivel cohecer o nume- ³±±
±±³          ³          total de registros no processamento.                ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsNewProc(cType,cChave)
Local aArea
Local aAreaAF2
Local aAreaAF9
Local nCount := 0
DEFAULT cType := "DEF"

nProcRegua := 0

If cType == "DEF"
	nProcAtu := Nil
	nTimeAtu := Nil
ElseIf cType == "ORC" // Processamento de orcamento varrendo todas as tarefas
	nProcAtu := Nil
	aArea	 := GetArea()
	aAreaAF2 := AF2->(GetArea())
	nCount := 0
	dbSelectArea("AF2")
	dbSetOrder(1)
	dbSeek(xFilial()+cChave)
	While !Eof() .And. xFilial()+cChave == AF2_FILIAL+AF2_ORCAME
		nCount ++
		dbSkip()
	End
	nProcRegua := nCount-1
	RestArea(aAreaAF2)
	RestArea(aArea)
ElseIf cType == "PROJ" // Processamento do projeto varrendo todas as tarefas
	nProcAtu := Nil
	aArea	 := GetArea()
	aAreaAF9 := AF9->(GetArea())
	nCount := 0
	dbSelectArea("AF9")
	dbSetOrder(1)
	dbSeek(xFilial()+cChave)
	While !Eof() .And. xFilial()+cChave == AF9_FILIAL+AF9_PROJET+AF9_REVISA
		nCount ++
		dbSkip()
	End
	nProcRegua := nCount-1
	RestArea(aAreaAF9)
	RestArea(aArea)
EndIf

Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsIncProc³ Autor ³ Edson Maricate        ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de atualizacao da regua de processamento.              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico: Funcao utilizada para atualizar a regua de processa-³±±
±±³          ³          mento nos casos onde nao e possivel cohecer o nume- ³±±
±±³          ³          total de registros no processamento.                ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsIncProc(lProc,nSeconds,cProcType)

DEFAULT lProc := .F.
DEFAULT nSeconds := 2
DEFAULT cProcType := "DEF"

If cProcType == "DEF"
	If nProcAtu==Nil .Or. nProcAtu > 7 .Or. nTimeAtu == Nil .Or.Seconds()-nTimeAtu>50
		If lProc
			ProcRegua(6)
		Else
			SetRegua(6)
		EndIf
		nProcAtu := 0
		nTimeAtu := Seconds()
	EndIf
	If nTimeAtu==Nil .Or. Seconds()-nTimeAtu>nSeconds
		If lProc
			IncProc()
		Else
			IncRegua()
		EndIf
		nTimeAtu := Seconds()
		nProcAtu++
	EndIf
Else
	If nProcAtu == Nil
		If lProc
			ProcRegua(nProcRegua)
		Else
			SetRegua(nProcRegua)
		EndIf
		nProcAtu := nProcRegua
	Else
		If lProc
			IncProc()
		Else
			IncRegua()
		EndIf
	EndIf
EndIf

Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsAvalAFJ³ Autor ³ Edson Maricate        ³ Data ³ 18-05-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³Rotina de avaliacao dos empenhos do Projeto.                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpC1: Alias da tabela de Empenhos do Projeto                 ³±±
±±³          ³ExpN2: Codigo do Evento                                       ³±±
±±³          ³       [1] Inclusao de um Empenho                             ³±±
±±³          ³       [2] Estorno de um Empenho                              ³±±
±±³          ³       [3] Exclusao de um  Empenho                            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum                                                        ³±±
±±³          ³                                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³Esta rotina tem como objetivo atualizar os eventos vinculados ³±±
±±³          ³ao Empenho do Projeto.                                        ³±±
±±³          ³A) Atualizacao das tabelas complementares.                    ³±±
±±³          ³                                                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³SIGAPMS                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsAvalAFJ(cAlias,nEvento)
Local aArea		:= GetArea()
Local aAreaAFJ	:= AFJ->(GetArea())

Do Case
	Case nEvento == 1
		dbSelectArea("SB2")
		dbSetOrder(1)
		If MsSeek(xFilial()+(cAlias)->AFJ_COD+(cAlias)->AFJ_LOCAL)
			RecLock("SB2",.F.)
		Else
			CriaSB2((cAlias)->AFJ_COD,(cAlias)->AFJ_LOCAL)
			MsSeek(xFilial()+(cAlias)->AFJ_COD+(cAlias)->AFJ_LOCAL)
			RecLock("SB2",.F.)
		EndIf
		SB2->B2_QEMPPRJ += Max((cAlias)->AFJ_QEMP-((cAlias)->AFJ_QATU + IIf((cAlias)->(ColumnPos("AFJ_EMPEST")) > 0,(cAlias)->AFJ_EMPEST,0)),0)
		SB2->B2_QEMPPR2 += Max((cAlias)->AFJ_QEMP2-((cAlias)->AFJ_QATU2 + IIf((cAlias)->(ColumnPos("AFJ_EMPES2")) > 0,(cAlias)->AFJ_EMPES2,0)),0)
		If AFJ->(ColumnPos("AFJ_QEMPPR")) > 0
			SB2->B2_QEMPPRE += AFJ->AFJ_QEMPPR
			SB2->B2_QEPRE2  += AFJ->AFJ_QEMPP2
		EndIf
		msUnLock()
	Case nEvento == 2
		dbSelectArea("SB2")
		dbSetOrder(1)
		If MsSeek(xFilial()+(cAlias)->AFJ_COD+(cAlias)->AFJ_LOCAL)
			RecLock("SB2",.F.)
		Else
			CriaSB2((cAlias)->AFJ_COD,(cAlias)->AFJ_LOCAL)
			MsSeek(xFilial()+(cAlias)->AFJ_COD+(cAlias)+AFJ_LOCAL)
			RecLock("SB2",.F.)
		EndIf
		SB2->B2_QEMPPRJ -= Max((cAlias)->AFJ_QEMP-((cAlias)->AFJ_QATU + IIf((cAlias)->(ColumnPos("AFJ_EMPEST")) > 0,(cAlias)->AFJ_EMPEST,0)),0)
		SB2->B2_QEMPPR2 -= Max((cAlias)->AFJ_QEMP2-((cAlias)->AFJ_QATU2 + IIf((cAlias)->(ColumnPos("AFJ_EMPES2")) > 0,(cAlias)->AFJ_EMPES2,0)),0)
		If AFJ->(ColumnPos("AFJ_QEMPPR")) > 0
			SB2->B2_QEMPPRE -= AFJ->AFJ_QEMPPR
			SB2->B2_QEPRE2  -= AFJ->AFJ_QEMPP2
		EndIf
		msUnLock()
	Case nEvento == 3
		RecLock("AFJ",.F.,.T.)
		AFJ->(dbDelete())
		MsUnlock()
	Case nEvento == 4  // Alteracao Previsto --> Firme
		dbSelectArea("SB2")
		dbSetOrder(1)
		If MsSeek(xFilial()+(cAlias)->AFJ_COD+(cAlias)->AFJ_LOCAL)
			RecLock("SB2",.F.)
		Else
			CriaSB2((cAlias)->AFJ_COD,(cAlias)->AFJ_LOCAL)
			MsSeek(xFilial()+(cAlias)->AFJ_COD+(cAlias)->AFJ_LOCAL)
			RecLock("SB2",.F.)
		EndIf
		SB2->B2_QEMPPRJ += Max((cAlias)->AFJ_QEMP-((cAlias)->AFJ_QATU + IIf((cAlias)->(ColumnPos("AFJ_EMPEST")) > 0,(cAlias)->AFJ_EMPEST,0)),0)
		SB2->B2_QEMPPR2 += Max((cAlias)->AFJ_QEMP2-((cAlias)->AFJ_QATU2 + IIf((cAlias)->(ColumnPos("AFJ_EMPES2")) > 0,(cAlias)->AFJ_EMPES2,0)),0)
		SB2->B2_QEMPPRE -= Max((cAlias)->AFJ_QEMP-((cAlias)->AFJ_QATU + IIf((cAlias)->(ColumnPos("AFJ_EMPEST")) > 0,(cAlias)->AFJ_EMPEST,0)),0)
		SB2->B2_QEPRE2  -= Max((cAlias)->AFJ_QEMP2-((cAlias)->AFJ_QATU2 + IIf((cAlias)->(ColumnPos("AFJ_EMPES2")) > 0,(cAlias)->AFJ_EMPES2,0)),0)
		msUnLock()
EndCase

RestArea(aAreaAFJ)
RestArea(aArea)
Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsChkUser³ Autor ³ Edson Maricate        ³ Data ³ 04-01-2002 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao que verifica os direitos do Usuario.                   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³SIGAPMS                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsChkUser(cProjeto,cTarefa,cEDT,cEDTPai,nCheck,cCampo,cRevisa,cUserID,lCheckPai,cGrupoUsr)
Local lRet			:= .F.
Local aArea			:= GetArea()
Local aAreaAFC		:= AFC->(GetArea())
Local aAreaAF8		:= AF8->(GetArea())
Local cSpaceFase	:= ""
Local lAFVGrpUsr 	:= AFV->(ColumnPos("AFV_GRPUSR")) > 0
Local lAFXGrpUsr 	:= AFX->(ColumnPos("AFX_GRPUSR")) > 0
Local lAchou		:= .F.
Local cProj 		:= ''
Local cRev  		:= ''
Local aGrupoUsr		:= {}
Local lPMSVLDUsr	:= ExistBlock( "PMSVLDUsr" )
Local lExisAcol     := .F.
Local lSincroPMS	:= "PMSC010" $ Alltrim(FUNNAME())

DEFAULT cUserID		:= __cUserID
DEFAULT lCheckPai	:= .T.
DEFAULT cGrupoUsr	:= ''

aGrupoUsr	:= UsrRetGrp(cUserID)
If ValType(aGrupoUsr)=="A" .AND. Len(aGrupoUsr)>0
	cGrupoUsr := aGrupoUsr[1]
Endif
AF8->(dbSetOrder(1))
AF8->(MsSeek(xFilial()+cProjeto))

//³Verifica se existe o controle de usuarios esta habilitado³
//³e verifca a existencia dos campos do AFX e AFV.          ³
If AF8->AF8_CTRUSR == "2"
	RestArea(aAreaAF8)
	RestArea(aAreaAFC)
	RestArea(aArea)
	Return(.T.)
Else
	If 	(AFX->(ColumnPos("AFX_"+cCampo)) == 0) .Or. (AFV->(ColumnPos("AFV_"+cCampo)) == 0)
		RestArea(aAreaAF8)
		RestArea(aAreaAFC)
		RestArea(aArea)
		Return(.T.)
	EndIf
EndIf

If cUserID=="000000"
	lRet := .T.
Else
	If AFX->(ColumnPos("AFX_FASE"))>0
		cSpaceFase := SPACE(LEN(AF8->AF8_FASE))
	EndIf

	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Verifica a autorizacao na EDT principal - para aumentar a performance da rotina   ³
	//³Esta verificacao e feita antes pois na maioria dos casos o usuario tem autoriza-  ³
	//³ao na EDT principal.                                                              ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	cProj := Padr(cProjeto,Len(AFC->AFC_EDT))
	cRev  := CriaVar("AFX_REVISA",.F.)
	dbSelectArea("AFX")
	dbSetOrder(1)
	If lCheckPai .And. (AF8->AF8_STATUS=="2") .and.	(lAchou:=MsSeek(xFilial("AFX")+cProjeto+cRevisa+cProj+cUserID+cSpaceFase)) .And. Val(AFX->(FieldGet(ColumnPos("AFX_"+cCampo)))) >=nCheck
		lRet := .T.
	ElseIf lCheckPai .And. (lAchou:=MsSeek(xFilial("AFX")+cProjeto+cRev+cProj+cUserID+cSpaceFase)) .And. Val(AFX->(FieldGet(ColumnPos("AFX_"+cCampo)))) >=nCheck
		lRet := .T.
	ElseIf lCheckPai .And. AFX->(ColumnPos("AFX_FASE"))>0 .And. (lAchou:=MsSeek(xFilial()+cProjeto+cRev+cProj+cUserID+AF8->AF8_FASE)) .And. Val(AFX->(FieldGet(ColumnPos("AFX_"+cCampo)))) >=nCheck
		lRet := .T.
	ElseIf cTarefa != Nil
		dbSelectArea("AFV")
		dbSetOrder(1)
		If (AF8->AF8_STATUS=="2") .And. (lAchou:=MsSeek(xFilial()+cProjeto+cRevisa+cTarefa+cUserID+cSpaceFase)) .And. Val(AFV->(FieldGet(ColumnPos("AFV_"+cCampo))))!=Nil
			If Val(AFV->(FieldGet(ColumnPos("AFV_"+cCampo)))) >=nCheck
				lRet	:= .T.
			Else
				lRet	:= .F.
			EndIf
		ElseIf (lAchou:=MsSeek(xFilial()+cProjeto+CriaVar("AFV_REVISA",.F.)+cTarefa+cUserID+cSpaceFase))  .And. Val(AFV->(FieldGet(ColumnPos("AFV_"+cCampo))))!=Nil
			If Val(AFV->(FieldGet(ColumnPos("AFV_"+cCampo)))) >=nCheck
				lRet	:= .T.
			Else
				lRet	:= .F.
			EndIf
		ElseIf AFV->(ColumnPos("AFV_FASE"))>0 .And. (lAchou:=MsSeek(xFilial()+cProjeto+CriaVar("AFV_REVISA",.F.)+cTarefa+cUserID+AF8->AF8_FASE))  .And. Val(AFV->(FieldGet(ColumnPos("AFV_"+cCampo))))!=Nil
			If Val(AFV->(FieldGet(ColumnPos("AFV_"+cCampo)))) >=nCheck
				lRet	:= .T.
			Else
				lRet	:= .F.
			EndIf
		Else
			AFC->(dbSetOrder(1))
			If AFC->(MsSeek(xFilial()+cProjeto+If(Empty(cRevisa),AF8->AF8_REVISA,cRevisa)+cEDTPai))
				lRet := PmsChkUser(cProjeto,,AFC->AFC_EDT,AFC->AFC_EDTPAI,nCheck,cCampo,cRevisa,cUserID,.F.)
			EndIf
		EndIf
	ElseIf (cEDT != Nil)
		dbSelectArea("AFX")
		dbSetOrder(1)
		If (AF8->AF8_STATUS=="2") .And. (lAchou:=MsSeek(xFilial()+cProjeto+cRevisa+cEDT+cUserID+cSpaceFase)) .And. Val(AFX->(FieldGet(ColumnPos("AFX_"+cCampo)))) >=nCheck
			lRet := .T.
		ElseIf (lAchou:=MsSeek(xFilial()+cProjeto+CriaVar("AFX_REVISA",.F.)+cEDT+cUserID+cSpaceFase)) .And. Val(AFX->(FieldGet(ColumnPos("AFX_"+cCampo)))) >=nCheck
			lRet := .T.
		ElseIf AFX->(ColumnPos("AFX_FASE"))>0.And. (lAchou:=MsSeek(xFilial()+cProjeto+CriaVar("AFX_REVISA",.F.)+cEDT+cUserID+AF8->AF8_FASE)) .And. Val(AFX->(FieldGet(ColumnPos("AFX_"+cCampo)))) >=nCheck
			lRet := .T.
		Else
			AFC->(dbSetOrder(1))
			If !lSincroPMS .AND. AFC->(MsSeek(xFilial()+cProjeto+If(Empty(cRevisa),AF8->AF8_REVISA,cRevisa)+cEDTPai))
				lRet := PmsChkUser(cProjeto,,AFC->AFC_EDT,AFC->AFC_EDTPAI,nCheck,cCampo,cRevisa,cUserID,.F.)
			EndIf
		EndIf
	EndIf
EndIf

//
// se nao liberou acesso, porque não achou o registro nas tabelas AFX ou AFV.
// E tem os campos de grupo de usuario, deve validar o acesso pelo grupo de usuarios
//
If !lRet .and. !lAchou .and. lAFXGrpUsr .AND. lAFVGrpUsr
	// Se o usuario estiver vinculado a um grupo de usuario, deve validar pelo grupo
	If !Empty(cGrupoUsr)
		cProj := Padr(cProjeto,Len(AFC->AFC_EDT))
		cRev  := CriaVar("AFX_REVISA",.F.)
		dbSelectArea("AFX")
		dbSetOrder(2)
		If lCheckPai .And. (AF8->AF8_STATUS=="2") .and.	(lAchou:=MsSeek(xFilial("AFX")+cProjeto+cRevisa+cProj+cGrupoUsr+cSpaceFase)) .And. Val(AFX->(FieldGet(ColumnPos("AFX_"+cCampo)))) >=nCheck
			lRet := .T.
		ElseIf lCheckPai .And. (lAchou:=MsSeek(xFilial("AFX")+cProjeto+cRev+cProj+cGrupoUsr+cSpaceFase)) .And. Val(AFX->(FieldGet(ColumnPos("AFX_"+cCampo)))) >=nCheck
			lRet := .T.
		ElseIf lCheckPai .And. AFX->(ColumnPos("AFX_FASE"))>0 .And. (lAchou:=MsSeek(xFilial()+cProjeto+cRev+cProj+cGrupoUsr+AF8->AF8_FASE)) .And. Val(AFX->(FieldGet(ColumnPos("AFX_"+cCampo)))) >=nCheck
			lRet := .T.
		ElseIf cTarefa != Nil
			dbSelectArea("AFV")
			dbSetOrder(2)
			If (AF8->AF8_STATUS=="2") .And. (lAchou:=MsSeek(xFilial()+cProjeto+cRevisa+cTarefa+cGrupoUsr+cSpaceFase)) .And. Val(AFV->(FieldGet(ColumnPos("AFV_"+cCampo))))!=Nil
				If Val(AFV->(FieldGet(ColumnPos("AFV_"+cCampo)))) >=nCheck
					lRet	:= .T.
				Else
					lRet	:= .F.
				EndIf
			ElseIf (lAchou:=MsSeek(xFilial()+cProjeto+CriaVar("AFV_REVISA",.F.)+cTarefa+cGrupoUsr+cSpaceFase)) .And. Val(AFV->(FieldGet(ColumnPos("AFV_"+cCampo))))!=Nil
				If Val(AFV->(FieldGet(ColumnPos("AFV_"+cCampo)))) >=nCheck
					lRet	:= .T.
				Else
					lRet	:= .F.
				EndIf
			ElseIf AFV->(ColumnPos("AFV_FASE"))>0 .And. (lAchou:=MsSeek(xFilial()+cProjeto+CriaVar("AFV_REVISA",.F.)+cTarefa+cGrupoUsr+AF8->AF8_FASE))  .And. Val(AFV->(FieldGet(ColumnPos("AFV_"+cCampo))))!=Nil
				If Val(AFV->(FieldGet(ColumnPos("AFV_"+cCampo)))) >=nCheck
					lRet	:= .T.
				Else
					lRet	:= .F.
				EndIf
			Else
				AFC->(dbSetOrder(1))
				If AFC->(MsSeek(xFilial()+cProjeto+If(Empty(cRevisa),AF8->AF8_REVISA,cRevisa)+cEDTPai))
					lRet := PmsChkUser(cProjeto,,AFC->AFC_EDT,AFC->AFC_EDTPAI,nCheck,cCampo,cRevisa,cUserID,.F.,cGrupoUsr)
				EndIf
			EndIf
		ElseIf (cEDT != Nil)
			dbSelectArea("AFX")
			dbSetOrder(2)
			If (AF8->AF8_STATUS=="2") .And. MsSeek(xFilial()+cProjeto+cRevisa+cEDT+cGrupoUsr+cSpaceFase) .And. Val(AFX->(FieldGet(ColumnPos("AFX_"+cCampo)))) >=nCheck
				lRet := .T.
			ElseIf MsSeek(xFilial()+cProjeto+CriaVar("AFX_REVISA",.F.)+cEDT+cGrupoUsr+cSpaceFase) .And. Val(AFX->(FieldGet(ColumnPos("AFX_"+cCampo)))) >=nCheck
				lRet := .T.
			ElseIf AFX->(ColumnPos("AFX_FASE"))>0.And. MsSeek(xFilial()+cProjeto+CriaVar("AFX_REVISA",.F.)+cEDT+cGrupoUsr+AF8->AF8_FASE) .And. Val(AFX->(FieldGet(ColumnPos("AFX_"+cCampo)))) >=nCheck
				lRet := .T.
			Else
				AFC->(dbSetOrder(1))
			If !lSincroPMS .AND. AFC->(MsSeek(xFilial()+cProjeto+If(Empty(cRevisa),AF8->AF8_REVISA,cRevisa)+cEDTPai))
					lRet := PmsChkUser(cProjeto,,AFC->AFC_EDT,AFC->AFC_EDTPAI,nCheck,cCampo,cRevisa,cUserID,.F.,cGrupoUsr)
				EndIf
			EndIf
		EndIf
	EndIf
Endif

// Ponto de entrada para validação específica de cliente
if lPMSVLDUsr
	If Type('aCols') = 'A' .and.Type('aHeader') = 'A'
		aColsAux    := aCols
		aHeaderAux := aHeader
		lExisAcol := .T.
	Endif
	lRet := ExecBlock("PMSVLDUsr", .T., .T., { cProjeto, cTarefa, cEDT, cEDTPai, nCheck, cCampo, cRevisa, cUserID, lCheckPai, lRet } )
	If lExisAcol
		aCols := aColsAux
		aHeader := aHeaderAux
		lExisAcol :=.F.
	Endif
endif

RestArea(aAreaAF8)
RestArea(aAreaAFC)
RestArea(aArea)
Return lRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsUser   ³ Autor ³Edson Maricate              ³ Data ³ 26-12-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de configuracao dos usuarios do Projeto.                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³SIGAPMS                                                       	 ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsUser(nOpcx,cVersao,cRevisao)
Local oDlg
Local oMenu
Local oTree
Local cArquivo
Local aConfig		:= {1, PMS_MIN_DATE, PMS_MAX_DATE, Space(TamSX3("AE8_RECURS")[1])}
Local lAFVGrpUsr 	:= AFV->(ColumnPos("AFV_GRPUSR")) > 0
Local lAFXGrpUsr 	:= AFX->(ColumnPos("AFX_GRPUSR")) > 0

DEFAULT cRevisao:= CriaVar("AF8_REVISA",.F.)
DEFAULT cVersao := AF8->AF8_REVISA
DEFAULT nOpcx   := 3
DEFAULT aRotina := {	{ "", "" , 0 , 1},;
						{ "", "" , 0 , 2},;
						{ "", "" , 0 , 3},;
						{ "", "" , 0 , 4, 2},;
						{ "", "" , 0 , 5, 1}}

PRIVATE cRevisa	:= cVersao

If PmsChkUser(AF8->AF8_PROJET,,Padr(AF8->AF8_PROJET,Len(AFC->AFC_EDT)),"  ",3,"ESTRUT",AF8->AF8_REVISA)

	MENU oMenu POPUP
		MENUITEM STR0171 ACTION (PmsUsrDlg(@oTree,nOpcx,cRevisao,1,cArquivo,1),PMSTreeEDT(@oTree, cRevisa,,"AFC/AF9/USR",Nil,.T.,cRevisao,@aConfig),PmsUsrCtrMenu(@oMenu,@oTree,nOpcx,cArquivo)) //"Incluir Usuario"
		If lAFVGrpUsr .AND. lAFXGrpUsr
			MENUITEM STR0426 ACTION (PmsUsrDlg(@oTree,nOpcx,cRevisao,1,cArquivo,2),PMSTreeEDT(@oTree, cRevisa,,"AFC/AF9/USR",Nil,.T.,cRevisao,@aConfig),PmsUsrCtrMenu(@oMenu,@oTree,nOpcx,cArquivo)) //"Incluir GRUPO"
		EndIf
		MENUITEM STR0172 ACTION (PmsUsrDlg(@oTree,nOpcx,cRevisao,2,cArquivo),PMSTreeEDT(@oTree, cRevisa,,"AFC/AF9/USR",Nil,.T.,cRevisao,@aConfig),PmsUsrCtrMenu(@oMenu,@oTree,nOpcx,cArquivo)) //"Alterar Propriedades"
		MENUITEM STR0173 ACTION (PmsUsrDlg(@oTree,nOpcx,cRevisao,3,cArquivo),PMSTreeEDT(@oTree, cRevisa,,"AFC/AF9/USR",Nil,.T.,cRevisao,@aConfig),PmsUsrCtrMenu(@oMenu,@oTree,nOpcx,cArquivo)) //"Excluir Usuario"
	ENDMENU

	aMenu := {;
	         {TIP_PROJ_INFO,     {|| PmsPrjInf()}, BMP_PROJ_INFO, TOOL_PROJ_INFO},;
	         {TIP_FILTRO,        {|| If(PmsCfgDlg(aConfig),Eval(bRefresh),Nil)}, BMP_FILTRO, TOOL_FILTRO},;
	         {TIP_PROJ_USUARIOS, {|| PmsUsrCtrMenu(@oMenu,@oTree,nOpcx,cArquivo),oMenu:Activate(850,490,oDlg)}, BMP_PROJ_USUARIOS, TOOL_PROJ_USUARIOS} }

	PmsDlgAF8(cCadastro,@oMenu,cVersao,@oTree,"AFC/AF9/USR",{||PmsUsrCtrMenu(@oMenu,@oTree,nOpcx,cArquivo)},,cRevisao,aMenu,@oDlg,@aConfig,@cArquivo)
Else
	Aviso(STR0324,STR0371,{STR0006},2)//"Usuário sem permissão"###"Usuário sem permissão para alteração nos usuários do projeto. Verifique as permissões do usuário na estrutura principal do projeto."###"Fechar"
EndIf

Return(.T.)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSUsrDlg   ³ Autor ³ Edson Maricate      ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Programa de Inclusao,Alteracao,Visualizacao e Exclusao        ³±±
±±³          ³dos Usuarios do Projeto                                       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³ Generico                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function PMSUsrDlg(oTree,nOpcx,cRevisa,nMenuItem,cArquivo,nGrpUsr)

Local aArea		:= GetArea()
Local cAlias
Local nReg
Local oDlg
Local oEnchoice
Local nRecAFV
Local nOpc2   := 2
Local lInclui	:= .F.
Local lVisual	:= .F.
Local lAltera	:= .F.
Local lExclui	:= .F.
Local lContinua	:= .T.
Local lOk		:= .F.
Local aButtons  := {}
Local aRotTMP   := {}
Local aAlterar	:= {}

DEFAULT nGrpUsr := 1

If oTree == Nil
	cAlias	:= (cArquivo)->ALIAS
	nReg	:= (cArquivo)->RECNO
Else
	cAlias	:= SubStr(oTree:GetCargo(),1,3)
	nReg	:= Val(SubStr(oTree:GetCargo(),4,12))
EndIf

//³ Define a funcao utilizada ( Incl.,Alt.,Visual.,Exclu.)  ³
Do Case

	//Visualizacao
	Case (aRotina[nOpcx,4] == 2)
		lVisual := .T.
		nOpc2 := 2
	//Inclusao
	Case ((aRotina[nOpcx,4] == 3) .Or. (aRotina[nOpcx,4] == 6)) .And. (nMenuItem == 1)
		lInclui	:= .T.
		Inclui	:= .T.
		Altera	:= .F.
		nOpc2 := 3

	//Alteracao
	Case (aRotina[nOpcx,4] == 4) .Or. (nMenuItem == 2)
		lAltera	:= .T.
		Altera	:= .T.
		Inclui  := .F.
		nOpc2 := 4

	//Exclusao
	Case (aRotina[nOpcx,4] == 5) .Or. (nMenuItem == 3)
		lExclui	:= .T.
		lVisual	:= .T.
		nOpc2 := 5
EndCase

aRotTMP := aClone(aRotina)
aRotina := { { "", "" , 0 , 1};
			,{ "", "" , 0 , 2};
			,{ "", "" , 0 , 3};
			,{ "", "" , 0 , 4, 2};
			,{ "", "" , 0 , 5, 1}}

// adiciona botoes do usuario na EnchoiceBar
If ExistBlock( "PMBTUSR" )
	If ValType( aUsButtons := ExecBlock( "PMBTUSR", .F., .F. ) ) == "A"
		AEval( aUsButtons, { |x| AAdd( aButtons, x ) } )
	EndIf
EndIf

dbSelectArea(cAlias)
dbGoto(nReg)
If cAlias=="AFC"
	cAlias := "AFX"
EndIf
If cAlias=="AF9"
	cAlias := "AFV"
EndIf
RegToMemory(cAlias,lInclui)

If !lInclui
	If !SoftLock(cAlias)
		lContinua := .F.
	Else
		nRecAFV := (cAlias)->(RecNo())
	Endif
EndIf

If nGrpUsr == 2 .or. (lAltera .and. !Empty(&(M->(cAlias+"_GRPUSR"))))
	cCampoBlq := cAlias+"_USER"
Else
	cCampoBlq := cAlias+"_GRPUSR"
Endif

aArea:= GetArea()
DbSelectArea("SX3")
DbSetOrder(1)
MsSeek(cAlias)
While ( !Eof() .And. (SX3->X3_ARQUIVO == cAlias) )
	If	x3uso(SX3->X3_USADO) .And. cNivel >= SX3->X3_NIVEL .AND. (cCampoBlq <> ALLTRIM(SX3->X3_CAMPO))

		Aadd( aAlterar, SX3->X3_CAMPO )
	EndIf
	dbSelectArea("SX3")
	dbSkip()
EndDo
RestArea(aArea)
If lContinua
	DEFINE MSDIALOG oDlg TITLE cCadastro FROM  000,000 TO 400,700 PIXEL OF oMainWnd
		oEnchoice := MsMGet():New(cAlias,nReg,nOpc2,,,,,{30,5,200,350},aAlterar,3,,,,oDlg,,,)
	ACTIVATE MSDIALOG oDlg ON INIT EnchoiceBar(oDlg,{||If(PMSUsrChk(oEnchoice,cAlias,lInclui,lAltera,lExclui),(lOk:=.T.,oDlg:End()),Nil)},{|| oDlg:End()},,aButtons) CENTERED

EndIf

Begin Transaction
	If (lInclui.Or.lAltera.Or.lExclui).And. lOk
		If lContinua
			PMSUsrGrv(cAlias,lExclui,nRecAFV,cRevisa)
		EndIf
	EndIf
End Transaction

RestArea(aArea)

aRotina := aClone(aRotTMP)

Return


/*/{Protheus.doc} PMSUsrChk

Função de validacao da janela de cadastro de usuario do projeto na confirmação

@author Reynaldo Tetsu Miyashita

@since 27/01/2014

@version P10 R4

@param oEnchoice,   objeto,	objeto enchoice com registro da tabela AFV ou AFX
@param cAlias,    caracter,	Tabela em edição, 'AFX' - Usuario da edt ou 'AFV'-usuario da tarefa
@param lInclui,    logico,	Verdadeiro de for uma incluaso de registro
@param lAltera,    logico,	Verdadeiro de for uma alteracao de registro
@param lExclui,    logico,	Verdadeiro de for uma exclusao de registro

@return logico, Se verdadeiro validado as informacoes da janela de cadastro de usuarios do projeto

/*/
Static Function PMSUsrChk(oEnchoice, cAlias, lInclui, lAltera, lExclui)
Local lRet 		:= .T.
Local lPMUSRVLD 	:= ExistBlock("PMUSRVLD")

	// valida os campos obrigatorios
	lRet := Obrigatorio(oEnchoice:aGets,oEnchoice:aTela)

	// verifica se o codigo do usuario ou grupo de usuario foi preenchido
	lRet := lRet .AND. PmsGrpUser(lExclui,cAlias)

	// se existir o ponto de entrada PMUSRVLD, deve executar o mesmo.
	If lRet .AND. lPMUSRVLD
		lRet := ExecBlock('PMUSRVLD',.F.,.F.,{cAlias,lInclui,lAltera,lExclui})
	EndIf

Return lRet


/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSUsrGrv   ³ Autor ³ Edson Maricate      ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Programa de gravacao dos usuarios do Projeto                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function PMSUsrGrv(cAlias,lDeleta,nRecAFV,cRevisa)

Local bCampo 	:= {|n| FieldName(n) }
Local aArea		:= GetArea()
Local nX        := 0
Local lPMGRUSR	:= ExistBLock('PMGRUSR')

If !lDeleta
	If nRecAFV <> Nil
		(cAlias)->(dbGoto(nRecAFV))
		RecLock(cAlias,.F.)
	Else
		RecLock(cAlias,.T.)
	EndIf
	For nx := 1 TO FCount()
		FieldPut(nx,M->&(EVAL(bCampo,nx)))
	Next nx
	FieldPut(ColumnPos(cAlias+"_FILIAL"),xFilial(cAlias))
	FieldPut(ColumnPos(cAlias+"_REVISA"),cRevisa)
	dbCommit()
	MsUnlock()
Else
	(cAlias)->(dbGoto(nRecAFV))
	RecLock(cAlias,.F.,.T.)
	dbDelete()
	MsUnlock()
EndIf

If lPMGRUSR
	ExecBLock('PMGRUSR',.F.,.F.,{cAlias})
Endif

RestArea(aArea)
Return(.T.)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsUsrCtrMenu³ Autor ³Fabio Rogerio Pereira³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao que controla as propriedades do Menu PopUp.             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³SIGAPMS                                                        ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function PmsUsrCtrMenu(oMenu,oTree,nOpcx,cArquivo)
Local aArea		:= GetArea()
Local cAlias
Local nRecView
Local lAFVGrpUsr 	:= AFV->(ColumnPos("AFV_GRPUSR")) > 0
Local lAFXGrpUsr 	:= AFX->(ColumnPos("AFX_GRPUSR")) > 0
Local lDisable		:= FWIsInCallstack("PMS210VUSU")

If oTree == Nil
	cAlias	:= (cArquivo)->ALIAS
	nRecView	:= (cArquivo)->RECNO
Else
	cAlias	:= SubStr(oTree:GetCargo(),1,3)
	nRecView	:= Val(SubStr(oTree:GetCargo(),4,12))
EndIf

dbSelectArea(cAlias)
dbGoto(nRecView)

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Se for visualizacao desabilita as opcoes.³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If (aRotina[nOpcx,4] == 2)
	oMenu:aItems[1]:Disable()
	oMenu:aItems[2]:Disable()
	oMenu:aItems[3]:Disable()
	If lAFVGrpUsr .AND. lAFXGrpUsr
		oMenu:aItems[4]:Disable()
	EndIf
Else
	Do Case
		Case cAlias == "AF8"
			oMenu:aItems[1]:Disable()
			oMenu:aItems[2]:Disable()
			oMenu:aItems[3]:Disable()
			If lAFVGrpUsr .AND. lAFXGrpUsr
				oMenu:aItems[4]:Disable()
			EndIf
		Case cAlias == "AFC"
			oMenu:aItems[1]:Enable()
			If lAFVGrpUsr .AND. lAFXGrpUsr
				oMenu:aItems[2]:Enable()
				oMenu:aItems[3]:Disable()
				oMenu:aItems[4]:Disable()
			Else
				oMenu:aItems[2]:Disable()
				oMenu:aItems[3]:Disable()
			EndIf
		Case cAlias == "AF9"
			oMenu:aItems[1]:Enable()
			If lAFVGrpUsr .AND. lAFXGrpUsr
				oMenu:aItems[2]:Enable()
				oMenu:aItems[3]:Disable()
				oMenu:aItems[4]:Disable()
			Else
				oMenu:aItems[2]:Disable()
				oMenu:aItems[3]:Disable()
			EndIf
		OtherWise
			oMenu:aItems[1]:Disable()
			If lAFVGrpUsr .AND. lAFXGrpUsr
				oMenu:aItems[2]:Disable()
				oMenu:aItems[3]:Enable()
				oMenu:aItems[4]:Enable()
			Else
				oMenu:aItems[2]:Enable()
				oMenu:aItems[3]:Enable()
			EndIf
	EndCase
EndIf

//Independentemente do alias, se a chamada veio da rotina de histórico de revisão
//restrinjo qualquer tipo de ação nesse menu, evitando inconsistências no cadastro
If lDisable
	oMenu:aItems[1]:Disable()
	oMenu:aItems[2]:Disable()
	oMenu:aItems[3]:Disable()
	oMenu:aItems[4]:Disable()	
EndIf

RestArea(aArea)
Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsSE5   ³ Autor ³Fabio Rogerio Pereira   ³ Data ³ 04/02/2002 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Verifica a existencia dos campos de projeto no SE5.           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsSE5()
Local lRet := .F.
Local aArea	:= GetArea()

dbSelectArea("SX3")
dbSetOrder(2)
If MsSeek("E5_PROJPMS")
	lRet := .T.
Else
	lRet:= .F.
EndIf

RestArea(aArea)
Return(lRet)

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡„o    ³PmsGrvSC7 ³ Autor ³Fabio Rogerio Pereira  ³ Data ³ 07/02/02 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡„o ³ Grava Autorizacao de Entrega                               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Sintaxe   ³ PMSGrvSC7(ExpC1,ExpN1,ExpC2,ExpD1)                         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ PMSXFUN                                                    ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function PMSGrvSC7(cProduto,nQuant,dEntrega,nRecSC3,lPrevisto)
Local cNumSolic:= ""
Local cItem    := ""

DEFAULT lPrevisto := .F.
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Posiciona no produto correto.                              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
SB1->(dbSetOrder(1))
SB1->(MsSeek(xFilial("SB1")+cProduto))

SC3->(dbGoto(nRecSC3))

cNumSolic := GetNumSC7(.T.)
cItem     := StrZero(1,Len(SC7->C7_ITEM))

dbSelectArea("SC7")
RecLock("SC7",.T.)
Replace C7_FILIAL  	With xFilial("SC7") ,;
		C7_NUMSC   	With SC3->C3_NUM    ,;
		C7_ITEMSC  	With SC3->C3_ITEM   ,;
		C7_PRECO   	With SC3->C3_PRECO  ,;
		C7_LOJA    	With SC3->C3_LOJA   ,;
		C7_TOTAL   	With nQuant*SC3->C3_PRECO,;
		C7_IPI     	With SC3->C3_IPI    ,;
		C7_COND	  	With SC3->C3_COND   ,;
		C7_CONTATO 	With SC3->C3_CONTATO,;
		C7_FILENT  	With SC3->C3_FILENT	,;
		C7_REAJUST 	With SC3->C3_REAJUST,;
		C7_FRETE   	With SC3->C3_FRETE  ,;
		C7_DATPRF  	With dEntrega,;
		C7_LOCAL   	With SC3->C3_LOCAL  ,;
		C7_FORNECE  With SC3->C3_FORNECE,;
		C7_PRODUTO 	With SC3->C3_PRODUTO,;
		C7_MSG	  	With SC3->C3_MSG    ,;
		C7_TPFRETE 	With SC3->C3_TPFRETE,;
		C7_OBS     	With SC3->C3_OBS    ,;
		C7_RESIDUO 	With SC3->C3_RESIDUO,;
		C7_QUANT   	With nQuant         ,;
		C7_QTDSOL  	With nQuant         ,;
		C7_UM      	With SB1->B1_UM     ,;
		C7_SEGUM   	With SB1->B1_SEGUM  ,;
		C7_CONTA   	With SB1->B1_CONTA  ,;
		C7_CC 		With SB1->B1_CC     ,;
		C7_TIPO		With 2              ,;
		C7_DESCRI  	With SB1->B1_DESC   ,;
		C7_QTSEGUM 	With ConvUm(SB1->B1_COD,nQuant,0,2),;
		C7_NUM	  	With cNumSolic      ,;
		C7_ITEM    	With cItem          ,;
		C7_QUJE	  	With 0              ,;
		C7_DESC1    With 0              ,;
		C7_DESC2   	With 0              ,;
		C7_DESC3    With 0              ,;
		C7_EMISSAO  With dDataBase      ,;
		C7_EMITIDO 	With "S"            ,;         // Emitido o relatorio de PC
		C7_QTDREEM 	With 0              ,;         // Qtde que foi emitido o PC
		C7_CODLIB  	With Space(Len(C7_CODLIB)) ,;  // Controle de Alcada
		C7_NUMCOT  	With Space(Len(C7_NUMCOT)) ,;  // Numero da Cotacao
		C7_TX       With Space(Len(C7_TX))     ,;  // Transmissao de Arquivos
		C7_CONTROL 	With Space(Len(C7_CONTROL)),;  // Controle de Alcadas
		C7_ENCER    With " "                   ,;  // " "- PC em aberto , "E" - PC encerrado
		C7_IPIBRUT 	With "B"                   ,;  // IPI calculado pelo Bruto
		C7_OP       With "",;
		C7_TPOP		With If(lPrevisto,"P","F")

MaAvalPC("SC7",1,.T.)

dbCommit()
MsUnLock()

IF __lSX8
	ConfirmSX8()
EndIf

//
// Ponto de Entrada: PMSSC701
//
If ExistBlock("PMSSC701")
	ExecBlock("PMSSC701", .F., .F., {cNumSolic,cItem})
EndIf

Return(.T.)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSPlanAF8³ Autor ³ Edson Maricate        ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Monta uma planilha para visualizacao do projeto               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³cTitle : Titulo da janela                                     ³±±
±±³          ³cVersao: Versao do projeto a ser visualizado                  ³±±
±±³          ³aCampos: Array contendo os campos a serem visualizados        ³±±
±±³          ³         [1] : Nome do campo AF9                              ³±±
±±³          ³         [2] : Nome do campo AFC                              ³±±
±±³          ³         [3] : Tamanho do campo ( opcional )                  ³±±
±±³          ³         [4] : Decimal do campo ( opcional )                  ³±±
±±³          ³         [5] : Titulo  do campo ( opcional )                  ³±±
±±³          ³         [6] : Permite edicao ( .T./.F. )                     ³±±
±±³          ³         [7] : Validacao                                      ³±±
±±³          ³cArquivo : Nome do arquivo temporario                         ³±±
±±³          ³aButtons : Botoes auxiliares                                  ³±±
±±³          ³         [1] : Titulo do Botao                                ³±±
±±³          ³         [2] : CodeBlock a ser executado                      ³±±
±±³          ³         [3] : Nome do recurso ( BITMAP )                     ³±±
±±³          ³nFreze   : Congelar colunas do Browse                         ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsPlanAF8(cTitle,cReserv,aCampos,cArquivo,aButtons,nFreze,lConfirma,;
					aMenu,oDlg,cUsrRev,lExcel,aConfig,lChgVersao,nIndent)

Local aAuxRet
Local aBOD
Local aExpand	:= {}
Local nTop      := oMainWnd:nTop+35
Local nLeft     := oMainWnd:nLeft+10
Local nBottom   := oMainWnd:nBottom-12
Local nRight    := oMainWnd:nRight-10
Local oBrowse
Local oPanelV
Local oMenos	:= 	LoadBitmap( GetResources(), BMP_SHORTCUTMINUS )
Local oMais		:=	LoadBitmap( GetResources(), BMP_SHORTCUTPLUS )
Local oAll		:= 	LoadBitmap( GetResources(), BMP_EXPALL )
Local oCmp		:= 	LoadBitmap( GetResources(), BMP_EXPCMP )
Local nX		:= 0
Local lFWGetVersao := .T.
Local lExibirOK := .T.
Local nTamanho	:= 0


PRIVATE aHEDTCPM	:= {}
PRIVATE aHTaskCPM	:= {}
PRIVATE aHandCP		:= {}
PRIVATE aHandCR		:= {}
PRIVATE aHandCRTE	:= {}
PRIVATE aHandCEMPOP := {}
PRIVATE aHandCOTP	:= {}
PRIVATE aHandFin	:= {}
Private aHandFat  := {}
PRIVATE aHandCOTE	:= {}
PRIVATE aStru		:= {}
PRIVATE aHeader := {}
PRIVATE aAuxCps	:= aClone(aCampos)
PRIVATE bRefresh	:= {|| (iIf( AF8->(ColumnPos("AF8_AUTCUS")) > 0 .AND. AF8->AF8_AUTCUS == "1",Processa({||PmsPlnField(aAuxCps)}),.T. ) ,PmsAtuPln2(cRevisa,cArquivo,nNivelMax,cUsrRev,,@aExpand,aConfig,,,nIndent) ,oBrowse:Refresh()) }
PRIVATE bReCalc     := {|| (Processa({||PmsPlnField(aAuxCps)}) ,PmsAtuPlan(cRevisa,cArquivo,nNivelMax,cUsrRev,,@aExpand,aConfig,,,nIndent) ,oBrowse:Refresh()) }
PRIVATE bRefreshAll	:= bRefresh //bRefreshAll - sem utilizacao

DEFAULT lChgVersao	:= .F.
DEFAULT cUsrRev		:= AF8->AF8_REVISA
DEFAULT lExcel		:= .F.
DEFAULT nIndent		:= PMS_SHEET_INDENT
DEFAULT aButtons	:= {}

If aConfig # Nil
	If FindProfDef( __cUSerID, FunName(), AF8->AF8_PROJET, "PMSFILTRO" )
		aConfig[1] := Val(AllTrim(RetProfDef(__cUSerID, FunName(), AF8->AF8_PROJET, "PMSFILTRO")))
	EndIf
EndIf

If SuperGetMV('MV_PMSSPLN', .F., '2') == '1'
	LeExpand(@aExpand)
EndIf

SaveInter()

If ExistBlock("PMSAF8DLG")
	aCampos := ExecBlock("PMSAF8DLG",.F.,.F.,{aCampos})
	aAuxCps := aClone(aCampos)
EndIf

Processa({||PmsPlnField(aCampos)})

RegToMemory("AFA",.T.)
RegToMemory("AFB",.T.)

If ExistBlock("PMSAF802")
	cArquivo := ExecBlock("PMSAF802", .F., .F., {cArquivo})
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ ExecBlock para inclusao de botoes customizados       ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ExistBlock("PMSAF8BD")
	aBOD := ExecBlock("PMSAF8BD",.F.,.F.)
	For nx := 1 to Len(aBOD)
		aAdd(aMenu,{aBOD[nx,1],aBOD[nx,2],aBOD[nx,3],aBOD[nx,4]})
	Next
EndIf

For nx := 1 to Len(aCampos)
	dbSelectArea("SX3")
	dbSetOrder(2)
	If MsSeek(aCampos[nx,1])
		If aCampos[nx,1] == "AF9_TAREFA" .AND. TamSX3("AF9_TAREFA")[1] < TamSX3("AF9_PROJET")[1]
			nTamanho := TamSX3("AF9_PROJET")[1]
		Else
			nTamanho := X3_TAMANHO
		EndIf
		aAdd(aHeader,{If(Empty(aCampos[nx,5]),X3TITULO(),aCampos[nx,5]),"X"+Substr(X3_CAMPO,2,Len(X3_CAMPO)-1),X3_PICTURE,If(aCampos[nx,3]!=Nil,aCampos[nx,3],X3_TAMANHO),If(aCampos[nx,4]!=Nil,aCampos[nx,4],X3_DECIMAL),aCampos[nx,7]+"('"+aCampos[nx,1]+"','"+aCampos[nx,2]+"','"+cArquivo+"')",X3_USADO,X3_TIPO,cArquivo,X3_CONTEXT})
		aAdd(aStru,{"X"+Substr(X3_CAMPO,2,Len(X3_CAMPO)),X3_TIPO,nTamanho,X3_DECIMAL})
	ElseIf MsSeek(aCampos[nx,2])
		aAdd(aHeader,{If(Empty(aCampos[nx,5]),X3TITULO(),aCampos[nx,5]),"XF9"+Substr(X3_CAMPO,4,Len(X3_CAMPO)-1),X3_PICTURE,If(aCampos[nx,3]!=Nil,aCampos[nx,3],X3_TAMANHO),If(aCampos[nx,4]!=Nil,aCampos[nx,4],X3_DECIMAL),aCampos[nx,7]+"('"+aCampos[nx,1]+"','"+aCampos[nx,2]+"','"+cArquivo+"')",X3_USADO,X3_TIPO,cArquivo,X3_CONTEXT})
		aAdd(aStru,{"XF9"+Substr(X3_CAMPO,4,Len(X3_CAMPO)),X3_TIPO,X3_TAMANHO,X3_DECIMAL})
	ElseIf Substr(aCampos[nx,1],1,1) == "$"
		aAdd(aStru,aClone(&(Substr(aCampos[nx,1],2,Len(aCampos[nx,1])-1)+"(1)")))
	ElseIf Substr(aCampos[nx,1],1,1) == "%"
//%123456789012%C%99%2%12345678901234567890123456789012345%123456789012345678901234567890123456789012345678901234567890
		aAdd(aStru,{"FORM"+StrZero(nx,2,0),Substr(aCampos[nx,1],15,1),Val(Substr(aCampos[nx,1],17,2)),Val(Substr(aCampos[nx,1],20,2))})
	EndIf
Next
aAdd(aStru,{"CTRLNIV","C",1,0})
aAdd(aStru,{"L_I_XO","C",1,0})
aAdd(aStru,{"ALIAS","C",3,0})
aAdd(aStru,{"NIVTREE","N",3,0})
aAdd(aStru,{"RECNO","N",14,0})
aAdd(aStru,{"FLAG","L",1,0})
aAdd(aStru,{"RECIND","C",128,0})

// Projeto TDI - TDSIGY Filtro e identificacao de tarefas rejeitadas no gerenciamento de projetos
aAdd(aStru,{"REJEIT","L",1,0})

If _oPMSXFUN3 <> Nil
	_oPMSXFUN3:Delete()
	_oPMSXFUN3 := Nil
Endif

_oPMSXFUN3 := FWTemporaryTable():New( cArquivo )  
_oPMSXFUN3:SetFields(aStru)
_oPMSXFUN3:AddIndex("1", {"RECIND"})

//------------------
//Criação da tabela temporaria
//------------------
_oPMSXFUN3:Create()	

If Len(aExpand) == 0
	If  AF8->(ColumnPos("AF8_NMAX"))> 0
		nNivelMax := PmsAtuPlan(cRevisa,cArquivo,If(AF8->AF8_NMAX>0,AF8->AF8_NMAX,1),cUsrRev,,aExpand,aConfig,,,nIndent)
	Else
		nNivelMax := PmsAtuPlan(cRevisa,cArquivo,1000,cUsrRev,,aExpand,aConfig,,,nIndent)
	EndIf
Else
	nNivelMax := PmsAtuPlan(cRevisa,cArquivo,1,cUsrRev,,aExpand,aConfig,,,nIndent)
Endif

DEFINE FONT oFont NAME "Arial" SIZE 0, -10
DEFINE MSDIALOG oDlg TITLE cTitle OF oMainWnd PIXEL FROM nTop,nLeft TO nBottom,nRight //STYLE nOR(WS_VISIBLE,WS_POPUP)
oDlg:lMaximized := .T.

If SetMdiChild()

	For nx := 1 to Len(aMenu)
		AADD(aButtons, {aMenu[nx,3] , aMenu[nx,2], aMenu[nx,1]})
	Next

	AADD(aButtons, {BMP_PESQUISA	, {|| PmsStrPesq(cArquivo ,,"AF8") }, STR0316})
	AADD(aButtons, {BMP_EXCEL		, {|| PmsPlnExcel(aCampos,cUsrRev,nNivelMax,2,cArquivo)}, STR0315})
	AADD(aButtons, {BMP_IMPRIMIR	, {|| PMSR260(cArquivo,aCampos,cTitle) }, TIP_IMPRIMIR})
	AADD(aButtons, {BMP_INTERROGACAO, {|| HelProg() }, STR0135})
	lExibirOK := lConfirma<>Nil
	EnchoiceBar(oDlg,{|| (lConfirma:=.T.,oDlg:End()) },{|| oDlg:End()},,aButtons,,,,,.F.,lExibirOK)

Else
	oPanel := TPanel():New(0,0,'',oDlg, oDlg:oFont, .T., .T.,, ,1245,23,.T.,.T. )
	oPanel:Align := CONTROL_ALIGN_TOP
	@00,00 BITMAP oBmp1 RESNAME BMP_FAIXA_SUPERIOR SIZE 1200,50 NOBORDER PIXEL Of oPanel
	oBmp1:align:= CONTROL_ALIGN_TOP

	If !lFWGetVersao .or. GetVersao(.F.) == "P10"

		nCol := 2
		For nx := 1 to Len(aMenu)
			oBtn := TButton():New( 10, nCol,aMenu[nx,4],oPanel,aMenu[nx,2],24,12, , , ,.T.)
			oBtn:cToolTip := aMenu[nx,1]
			nCol += 24
		Next

		oBtn := TButton():New( 10, nCol,STR0316,oPanel,{||PmsStrPesq(cArquivo ,,"AF8")},24,12, , , ,.T.)
		oBtn:cToolTip := STR0316
		nCol += 24

		oBtn := TButton():New( 10, nCol,"Excel" ,oPanel,{||PmsPlnExcel(aCampos,cUsrRev,nNivelMax,2,cArquivo)},24,12, , , ,.T.)
		oBtn:cToolTip := STR0315 //"Exportar para o Microsoft Excel"
		nCol += 24


		oBtn := TButton():New( 10, nCol,TOOL_IMPRIMIR,oPanel,{|| PMSR260(cArquivo,aCampos,cTitle) },24,12, , , ,.T.)
		oBtn:cToolTip := TIP_IMPRIMIR
		nCol += 24

		oBtn := TButton():New( 10, nCol,STR0069,oPanel,{|| HelProg() },24,12, , , ,.T.)
		oBtn:cToolTip := STR0135
		nCol += 24

		If lConfirma<>Nil
			// OK
			oBtn := TButton():New( 10, nCol,STR0203,oPanel,{|| (lConfirma:=.T.,oDlg:End()) },24,12, , , ,.T.)
			oBtn:cToolTip := STR0203 + " < Ctrl-O >"
			nCol += 24
		EndIf

		// Sair
		oBtn := TButton():New( 10, nCol,STR0202,oPanel,{|| oDlg:End() },24,12, , , ,.T.)
		oBtn:cToolTip := STR0202+" < Ctrl-X >"
		nCol += 24

	Else
		For nx := 1 to Len(aMenu)
			AADD(aButtons, {aMenu[nx,3] , aMenu[nx,2], aMenu[nx,1]})
		Next

		AADD(aButtons, {BMP_PESQUISA	, {|| PmsStrPesq(cArquivo ,,"AF8") }, STR0316})
		AADD(aButtons, {BMP_EXCEL		, {|| PmsPlnExcel(aCampos,cUsrRev,nNivelMax,2,cArquivo)}, STR0315})
		AADD(aButtons, {BMP_IMPRIMIR	, {|| PMSR260(cArquivo,aCampos,cTitle) }, TIP_IMPRIMIR})
		AADD(aButtons, {BMP_INTERROGACAO, {|| HelProg() }, STR0135})
	    EnchoiceBar(oDlg,{|| (lConfirma:=.T.,oDlg:End()) },{|| oDlg:End()},,aButtons,,,,,.F.,lExibirOK)
	Endif

Endif

oPanelV := PmsPanelV(oDLg,!lChgVersao)
oPanelV:Align := CONTROL_ALIGN_TOP

dbSelectArea(cArquivo)
dbGotop()
nAlias	:= Select()
oBrowse := TcBrowse():New( 14, 1, (nRight/2)-2,(nBottom/2)-40, , , , oDlg, ,,,,{|| If(PmsPlnExp(cArquivo,aExpand,@nNivelMax),PmsAtuPlan(cRevisa,cArquivo,nNivelMax,cUsrRev,,aExpand,aConfig,,,nIndent),PmsAtuPln2(cRevisa,cArquivo,nNivelMax,cUsrRev,,aExpand,aConfig,,,nIndent,.F.)),oBrowse:Refresh() },,oFont,,,,, .F.,cArquivo, .T.,, .F., , ,.f. )
oBrowse:AddColumn( TCColumn():New( "",{ || If((cArquivo)->CTRLNIV=="-",oMenos,If((cArquivo)->CTRLNIV=="+",oMais,If((cArquivo)->CTRLNIV=="*",oAll,If((cArquivo)->CTRLNIV=="!",oCmp,Nil) )))},,,,"RIGHT" , 6, .T., .F.,,,, .T., ))

If ExistBlock("PMXBRCOL")
	ExecBlock("PMXBRCOL", .F., .F., {oBrowse, cArquivo})
EndIf

oBrowse:AddColumn( TCColumn():New( "",{ || PmsRetRes((cArquivo)->ALIAS,(cArquivo)->RECNO ) },,,, "LEFT", 15, .T., .F.,,,, .T., ))
oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
For nx := 1 to Len(aCampos)
	If Substr(aCampos[nx,1],1,1)=="$"
		aAuxRet := &(Substr(aCampos[nx,1],2,Len(aCampos[nx,1])-1)+"(2)")
		oBrowse:AddColumn( TCColumn():New( aAuxRet[1], FieldWBlock( aAuxRet[2] , nAlias ),AllTrim(aAuxRet[3]),,, if(aAuxRet[5]=="N","RIGHT","LEFT"), If(aCampos[nx,8]!=Nil,aCampos[nx,8],If(aAuxRet[4]>Len(aAuxRet[1]),(aAuxRet[4]*3),(LEN(aAuxRet[1])*3))), .F., .F.,,,, .F., ) )
	ElseIf Substr(aCampos[nx,1],1,1)=="%"
//%123456789012%C%99%2%12345678901234567890123456789012345%123456789012345678901234567890123456789012345678901234567890
		oBrowse:AddColumn( TCColumn():New( Trim(Substr(aCampos[nx,1],2,12)), FieldWBlock( "FORM"+StrZero(nx,2,0) , nAlias ) ,Substr(aCampos[nx,1],22,35),,, if(Substr(aCampos[nx,1],15,1)=="N","RIGHT","LEFT"), If(Val(Substr(aCampos[nx,1],17,2))>Len(AllTrim(Substr(aCampos[nx,1],2,12))),(Val(Substr(aCampos[nx,1],17,2))*3),(Len(AllTrim(Substr(aCampos[nx,1],2,12)))*3)), .F., .F.,,,, .F., ) )
	Else
		dbSelectArea("SX3")
		dbSetOrder(2)
		If MsSeek(aCampos[nx,1])
			oBrowse:AddColumn( TCColumn():New( Trim(x3titulo()), FieldWBlock( "X"+Substr(X3_CAMPO,2,Len(X3_CAMPO)), nAlias ),AllTrim(X3_PICTURE),,, if(X3_TIPO=="N","RIGHT","LEFT"), If(aCampos[nx,8]!=Nil,aCampos[nx,8],If(X3_TAMANHO>Len(X3_TITULO),(X3_TAMANHO*5),(LEN(X3_TITULO)*5))), .F., .F.,,,, .F., ) )
		ElseIf MsSeek(aCampos[nx,2])
			oBrowse:AddColumn( TCColumn():New( Trim(x3titulo()), FieldWBlock( "XF9"+Substr(X3_CAMPO,4,Len(X3_CAMPO)), nAlias ),AllTrim(X3_PICTURE),,, if(X3_TIPO=="N","RIGHT","LEFT"), If(aCampos[nx,8]!=Nil,aCampos[nx,8],If(X3_TAMANHO>Len(X3_TITULO),(X3_TAMANHO*4),(LEN(X3_TITULO)*4))), .F., .F.,,,, .F., ) )
		EndIf
	EndIf
Next
oBrowse:AddColumn( TCColumn():New( "",{|| " " },,,, "LEFT", 5, .T., .F.,,,, .T., ))
dbSelectArea(cArquivo)
If nFreze	<>	Nil
	oBrowse:nFreeze	:=	nFreze
Endif

oBrowse:Refresh()

ACTIVATE MSDIALOG oDlg

If Select(cArquivo) <> 0
	dbSelectArea(cArquivo)
	dbCloseArea()
EndIf

If _oPMSXFUN3 <> Nil
	_oPMSXFUN3:Delete()
	_oPMSXFUN3 := Nil
Endif

If aConfig # Nil
	If FindProfDef( __cUSerID, FunName(), AF8->AF8_PROJET, "PMSFILTRO" )
		WriteProfDef(__cUSerID, FunName(), AF8->AF8_PROJET, "PMSFILTRO", __cUSerID, FunName(), AF8->AF8_PROJET, "PMSFILTRO", Str(aConfig[1],1,0) )
	Else
		WriteNewProf( __cUSerID, FunName(), AF8->AF8_PROJET, "PMSFILTRO", Str(aConfig[1],1,0) )
	EndIf
EndIf


GravaExpand(@aExpand)
RestInter()

Return lConfirma


Function PmsPlnExp(cArquivo,aExpand,nNivelMax)
Local nPos
Local lTotal	:=	.F.
Local cRealName	:= ""

Do Case
	Case _oPMSXFUN1 <> Nil .And. _oPMSXFUN2 == Nil 
		cRealName := _oPMSXFUN1:GetRealName()
	Case _oPMSXFUN2 <> Nil
		cRealName := _oPMSXFUN2:GetRealName()
	Case _oPMSXFUN3 <> Nil
		cRealName := _oPMSXFUN3:GetRealName()
	Case _oPMSXFUN4 <> Nil
		cRealName := _oPMSXFUN4:GetRealName()
EndCase

If !Empty(aExpand).And. (nPos:=aScan(aExpand,{|x|x[1]==(cArquivo)->ALIAS+(cArquivo)->XF9_TAREFA})) > 0
	If (cArquivo)->CTRLNIV == "-"
		aExpand[nPos,2] := .F.
		If nNivelMax == 1000 .OR. nNivelMax == 2000
			If (cArquivo)->(ColumnPos("NIVTREE")) > 0
				If (cArquivo)->NIVTREE > 1
					nNivelMax := (cArquivo)->NIVTREE-1
				Else
					nNivelMax := (cArquivo)->NIVTREE
				EndIf
			EndIf
		Else
			If nNivelMax > 1
				nNivelMax--
			EndIf
		EndIf
	ElseIf (cArquivo)->CTRLNIV == "+"
		aExpand[nPos,2] := .T.
		If nNivelMax == 1000 .OR. nNivelMax == 2000
			If (cArquivo)->(ColumnPos("NIVTREE")) > 0
				nNivelMax := (cArquivo)->NIVTREE+1
			EndIf
		Else
			nNivelMax++
		EndIf
	ElseIf (cArquivo)->CTRLNIV == "*"
		lTotal	:=	.T.
		nNivelMax := 1000
		aExpand := {}
		dbSelectArea(cArquivo)
		dbGotop()
		If !InTransact()
			While !EOF()
				RecLock(cArquivo,.F.)
				DbDelete()
				MsUnLock()
				DbSkip()
			Enddo
			Pack
		Endif
	ElseIf (cArquivo)->CTRLNIV == "!"
		lTotal	:=	.T.
		nNivelMax := 2000
		aExpand := {}
	EndIf
Else
	If (cArquivo)->CTRLNIV == "-"
		aAdd(aExpand,{(cArquivo)->ALIAS+(cArquivo)->XF9_TAREFA,.F.})
	ElseIf (cArquivo)->CTRLNIV == "+"
		aAdd(aExpand,{(cArquivo)->ALIAS+(cArquivo)->XF9_TAREFA,.T.})
	ElseIf (cArquivo)->CTRLNIV == "*"
		lTotal	:=	.T.
		nNivelMax := 2000
		aExpand := {}
		dbSelectArea(cArquivo)
		dbGotop()
		If !InTransact()
			While !EOF()
				RecLock(cArquivo,.F.)
				DbDelete()
				MsUnLock()
				DbSkip()
			Enddo
			Pack
		Endif
	ElseIf (cArquivo)->CTRLNIV == "!"
		lTotal	:=	.T.
		nNivelMax := 1000
		aExpand := {}
	EndIf
EndIf

Return lTotal

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsStrPesq³ Autor ³ Edson Maricate        ³ Data ³ 05-01-2004 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de pesquisa na estrutura do orcamento                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³PMSXFUN                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsStrPesq(cArquivo ,bChange ,cAlias)

Local aAuxArea	 := (cArquivo)->(GetArea())
Local aParam	 := {}
Local nTam		 := 200
Local lText      := Type("cTxtPesq") <> "U"
Local cText		 := Space(nTam)
Local cTxtSearch := ""

DEFAULT cAlias := "AF8"

If lText
	cText := PadR(cTxtPesq,nTam)
Endif

If ParamBox( { { 1,STR0317 ,cText,"@" 	 ,""  ,""    ,"" ,120 ,.F. },;
				{5,STR0318,.F.,90,,.F.},;
				{5,STR0319,.F.,90,,.F.} }, STR0316, aParam )

	cText := aParam[1]
	If lText
		cTxtPesq := cText
	Endif

	cTxtSearch := AllTrim(aParam[1])

	dbSelectArea(cArquivo)

	// Pesquisa na estrutura do projeto
	If cAlias == "AF8"
		If aParam[2]
			If aParam[3]
				dbSkip()
				LOCATE REST FOR (cTxtSearch==XF9_DESCRI) .Or. (cTxtSearch==XF9_TAREFA)
			Else
				LOCATE FOR (cTxtSearch==XF9_DESCRI) .Or. (cTxtSearch==XF9_TAREFA)
			EndIf
		Else
			If aParam[3]
				dbSkip()
				LOCATE REST FOR (UPPER(cTxtSearch)$UPPER(XF9_DESCRI)) .Or. (UPPER(cTxtSearch)$UPPER(XF9_TAREFA))
			Else
				LOCATE FOR (UPPER(cTxtSearch)$UPPER(XF9_DESCRI)) .Or. (UPPER(cTxtSearch)$UPPER(XF9_TAREFA))
			EndIf
		EndIf

	// Pesquisa na estrutura do orcamento
	ElseIf cAlias == "AF1"
		If aParam[2]
			If aParam[3]
				dbSkip()
				LOCATE REST FOR (cTxtSearch==XF2_DESCRI) .Or. (cTxtSearch==XF2_TAREFA)
			Else
				LOCATE FOR (cTxtSearch==XF2_DESCRI) .Or. (cTxtSearch==XF2_TAREFA)
			EndIf
		Else
			If aParam[3]
				dbSkip()
				LOCATE REST FOR (UPPER(cTxtSearch)$UPPER(XF2_DESCRI)) .Or. (UPPER(cTxtSearch)$UPPER(XF2_TAREFA))
			Else
				LOCATE FOR (UPPER(cTxtSearch)$UPPER(XF2_DESCRI)) .Or. (UPPER(cTxtSearch)$UPPER(XF2_TAREFA))
			EndIf
		EndIf
	EndIf

	If !Found()
		Aviso(STR0320, STR0321,{STR0261},2) //"Nenhuma ocorrencia encontrada!"##"Nao foi encotrada nenhuma ocorrência para o texto solicitado! Verifique o texto informado e as configurações da pesquisa."
	EndIf

EndIf

If !Found()
	RestArea(aAuxArea)
ElseIf ValType(bChange) == "B"
	Eval(bChange)
EndIf

Return .T.

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³                                                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsRetRes(cAlias,nRecNo,lString)
Local oRet
Local nRecAtu	:=	0

DEFAULT lString := .F.

// corrige o erro quando a linha do projeto esta
// selecionada e foi selecionada a impressao
// correcao temporaria, necessario descobrir a origem do problema

If AllTrim(cAlias)==""
	Return
EndIf

If oBPMSTASK3==Nil
	oBPMSEDT1 := LoadBitmap( GetResources(), BMP_EDT1 )
	oBPMSEDT2 := LoadBitmap( GetResources(), BMP_EDT2 )
	oBPMSEDT3 := LoadBitmap( GetResources(), BMP_EDT3 )
	oBPMSEDT4 := LoadBitmap( GetResources(), BMP_EDT4 )
	oBPMSTASK1 := LoadBitmap( GetResources(), BMP_TASK1 )
	oBPMSTASK2 := LoadBitmap( GetResources(), BMP_TASK2 )
	oBPMSTASK3 := LoadBitmap( GetResources(), BMP_TASK3 )
	oBPMSTASK4 := LoadBitmap( GetResources(), BMP_TASK4 )
	oBPMSTASK5 := LoadBitmap( GetResources(), BMP_TASK5 ) // Projeto TDI - TDSIGY - Filtro e identificacao de tarefas rejeitadas
EndIf

dbSelectArea(cAlias)
nRecAtu	:=	Recno()
dbGoto(nRecNo)
If cAlias == "AFC"
	Do Case
		Case !Empty(AFC->AFC_DTATUF)
			If lString
				oRet := BMP_EDT4
			Else
				oRet := oBPMSEDT4
			EndIf
		//Inicio Atrasado (Vermelho)
		Case (dDataBase > AFC->AFC_START .Or. (dDataBase == AFC->AFC_START .And. Time() > AFC->AFC_HORAI)) ;
	 	     .And. Empty(AFC->AFC_DTATUI)
			If lString
				oRet := BMP_EDT1
			Else
				oRet := oBPMSEDT1
			EndIf
		//Fim atrasado
		Case (dDataBase > AFC->AFC_FINISH .Or.(dDataBase == AFC->AFC_FINISH .And. Time() > AFC->AFC_HORAF)) ;
		     .And. Empty(AFC->AFC_DTATUF)
			If lString
				oRet := BMP_EDT1
			Else
				oRet := oBPMSEDT1
			EndIf
		Case !Empty(AFC->AFC_DTATUI)
			If lString
				oRet := BMP_EDT2
			Else
				oRet := oBPMSEDT2
			EndIf
		Case dDataBase > AFC->AFC_START .Or.;
		    (dDataBase == AFC->AFC_START .And. Time() > AFC->AFC_HORAI)
			If lString
				oRet := BMP_EDT1
			Else
				oRet := oBPMSEDT1
			EndIf
		Otherwise
			If lString
				oRet := BMP_EDT3
			Else
				oRet := oBPMSEDT3
			EndIf
	EndCase
ElseIf cAlias == "AF9"
	Do Case

		// finalizado (100% confirmado) (cinza)
		Case !Empty(AF9->AF9_DTATUF) .And.;
		     IsConcluded(AF9->AF9_PROJET, AF9->AF9_REVISA, AF9->AF9_TAREFA)

			oRet := Iif(lString, BMP_TASK3, oBPMSTASK3)

		// finalizado (< 100% confirmado) (vermelho)
		Case !Empty(AF9->AF9_DTATUF) .And. AF9->AF9_DTATUF > AF9->AF9_FINISH .And.;
		     !IsConcluded(AF9->AF9_PROJET, AF9->AF9_REVISA, AF9->AF9_TAREFA)

			oRet := Iif(lString, BMP_TASK1, oBPMSTASK1)

		// inicio atrasado (vermelho)
		Case (dDataBase > AF9->AF9_START .Or.;
		     (dDataBase == AF9->AF9_START .And. Time() > AF9->AF9_HORAI)) ;
		     .And. Empty(AF9->AF9_DTATUI)

			oRet := Iif(lString, BMP_TASK1, oBPMSTASK1)

		// fim atrasado (vermelho)
		Case (dDataBase > AF9->AF9_FINISH .Or.;
		     (dDataBase == AF9->AF9_FINISH .And. Time() > AF9->AF9_HORAF) ) ;
		     .And. Empty(AF9->AF9_DTATUF)

			oRet := Iif(lString, BMP_TASK1, oBPMSTASK1)

		// iniciado e nao finalizado, mais ainda dentro do prazo (amarelo)
		Case !Empty(AF9->AF9_DTATUI) .And. Empty(AF9->AF9_DTATUF)

			oRet := Iif(lString, BMP_TASK2, oBPMSTASK2)

		// outro
		Otherwise

			oRet := Iif(lString, BMP_TASK4, oBPMSTASK4)

	EndCase
ElseIf cAlias == "AF8"
	If lString
		oRet := BMP_TABLE_PQ
	Else
		oRet := LoadBitmap( GetResources(), BMP_TABLE_PQ )
	EndIf
ElseIf cAlias == "AFV"
	If lString
		oRet := BMP_USER_PQ
	Else
		oRet := LoadBitmap( GetResources(), BMP_USER_PQ )
	EndIf
ElseIf cAlias == "AFX"
	If lString
		oRet := BMP_USER_PQ
	Else
		oRet := LoadBitmap( GetResources(), BMP_USER_PQ )
	EndIf
ElseIf cAlias == "AFD"
	If lString
		oRet := BMP_RELAC_DIREITA_PQ
	Else
		oRet := LoadBitmap( GetResources(), BMP_RELAC_DIREITA_PQ )
	EndIf
ElseIf cAlias == "ACB"
	If lString
		oRet := BMP_CLIPS_PQ
	Else
		oRet := LoadBitmap( GetResources(), BMP_CLIPS_PQ )
	EndIf
EndIf

If ExistBlock("PMSAF8RES")
	cResource := ExecBlock("PMSAF8RES",.F.,.F.,{cAlias,nRecNo})
	If !Empty(cResource)
		If lString
			oRet := cResource
		Else
			oRet := LoadBitmap( GetResources(), cResource )
		EndIf
	EndIf
EndIf

dbSelectArea(cAlias)
dbGoto(nRecAtu)
Return oRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSAtuPlan³ Autor ³ Edson Maricate        ³ Data ³ 11-03-2002 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Executa a atualizacao do arquivo de trabalho.                 ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsAtuPlan(cRevisa,cArquivo,nNivelMax,cUsrRev,lRecno,aExpand,aConfig,lZap,cFilhos,nIndent)
Local nNivelAtu		:= 1
Local aProcForm		:= {}
Local aArea			:= GetArea()
Local nPos := 0
Local nX := 0
Local cEDT := ""
Local cEDTPai := ""
Local cEDTExp := ""
Local cFilAFC		:= xFilial("AFC")
Local cRealName	:= ""

DEFAULT cRevisa   := AF8->AF8_REVISA
DEFAULT nNivelMax	:= 1
DEFAULT cUsrRev   := CriaVar("AF8_REVISA",.F.)
DEFAULT lRecNo    := .T.
DEFAULT aConfig   := {1, PMS_MIN_DATE, PMS_MAX_DATE}
DEFAULT lZap      := .T.
DEFAULT cFilhos   := "AFC/AF9"
DEFAULT nIndent   := PMS_SHEET_INDENT

If Type("aHEDTCPM") == "U" 
	Private aHEDTCPM:= {}
EndIf

Do Case
	Case _oPMSXFUN1 <> Nil .And. _oPMSXFUN2 == Nil
		cRealName := _oPMSXFUN1:GetRealName()
	Case _oPMSXFUN2 <> Nil
		cRealName := _oPMSXFUN2:GetRealName()
	Case _oPMSXFUN3 <> Nil
		cRealName := _oPMSXFUN3:GetRealName()
	Case _oPMSXFUN4 <> Nil
		cRealName := _oPMSXFUN4:GetRealName()
EndCase

CursorWait()
nTime := Seconds()

cRevisa := Padr(cRevisa,4)
cUsrRev	:= Padr(cUsrRev,4)

dbSelectArea(cArquivo)
cEDT := AllTrim((cArquivo)->XF9_TAREFA)

If lZap
	If (IsInCallStack('FINA050') .OR. IsInCallStack('FINA040') .OR. IsInCallStack('FINA100'))
		TcSqlExec(" Truncate Table "+ cRealName )
		DbCommitAll()
		TcRefresh(cRealName)
		dbgobottom()
		dbgotop()
	Else
		If cPaisLoc=="RUS" .and. _oPMSXFUN2 <> NIL
			tcsqLEXEC('DELETE FROM '+_oPMSXFUN2:GetRealName() )
		ElseIf !InTransact()
			dbGoTop()
			While !EOF()
				RecLock(cArquivo,.F.)
				DbDelete()
				MsUnLock()
				DbSkip()
			Enddo
			Pack
		EndIf
	EndIf
EndIf

RecLock(cArquivo,.T.)
(cArquivo)->XF9_TAREFA := AF8->AF8_PROJET
(cArquivo)->XF9_DESCRI := AF8->AF8_DESCRI

If lRecNo
	(cArquivo)->RECNO := AF8->(RecNo())
	(cArquivo)->ALIAS := "AF8"
	If (cArquivo)->(ColumnPos("NIVTREE"))>0
		(cArquivo)->NIVTREE := 0
	EndIf
EndIf
AFC->(dbSetOrder(3))
If AFC->(MsSeek(xFilial()+AF8->AF8_PROJET+cRevisa+"001"))
	aProcForm	:= {}
	For nx := 1 to Len(aAuxCps)
		If aAuxCps[nx,1]=="AF9_DESCRI"
			If AFC->(ColumnPos(aAuxCps[nx,2])) > 0
				FieldPut(ColumnPos("X"+Substr(aAuxCps[nx,1],2,Len(aAuxCps[nx,1])-1)),SPACE((VAL(AFC->AFC_NIVEL)-1)*nIndent)+AFC->(FieldGet(ColumnPos(aAuxCps[nx,2]))))
			Endif
		ElseIf Substr(aAuxCps[nx,1],1,1)=="%"
			aAdd(aProcForm,nx)
		Else
			If Substr(aAuxCps[nx,1],1,1)=="$"
				FieldPut(ColumnPos(Substr(aAuxCps[nx,1],2,Len(aAuxCps[nx,1])-1)),&(Substr(aAuxCps[nx,1],2,Len(aAuxCps[nx,1])-1)+"(3,'AFC',AFC->(RecNo()))"))
			Else
				If Substr(aAuxCps[nx,1],1,1)!="|"
					// se o campo existe na tabela AFC e se existe o campo na tabela "planilha" a qual vai ser gravado
					If AFC->(ColumnPos(aAuxCps[nx,2])) > 0 .and. ColumnPos("XF9"+Substr(aAuxCps[nx,2],4,Len(aAuxCps[nx,1])-1))>0
						FieldPut(ColumnPos("XF9"+Substr(aAuxCps[nx,2],4,Len(aAuxCps[nx,1])-1)),AFC->(FieldGet(ColumnPos(aAuxCps[nx,2]))))
					Endif
				EndIf
			Endif
		EndIf
	Next nX

	// efetua os calculos de campos e formulas
	If !PMSPlnCalc(@aProcForm, @aAuxCps, cArquivo)
		Return
	EndIf
EndIf

If nNivelMax == 2000
	(cArquivo)->CTRLNIV	:= "*"
	nNivelMax := 1
ElseIf nNivelMax == 1000
	(cArquivo)->CTRLNIV	:= "!"
	nNivelMax := If(AF8->AF8_NMAX > 0, AF8->AF8_NMAX, 1000)
Else
	(cArquivo)->CTRLNIV	:= "*"
EndIf

MsUnlock()

If aExpand != Nil
	If !Empty(aExpand).And. (nPos:=aScan(aExpand,{|x|x[1]==(cArquivo)->ALIAS+(cArquivo)->XF9_TAREFA})) >0
		aExpand[nPos,2] :=.T.
	Else
		aAdd(aExpand,{(cArquivo)->ALIAS+(cArquivo)->XF9_TAREFA,.T.})
	Endif
EndIf

dbSelectArea("AFC")
dbSetOrder(3)
MsSeek(xFilial()+AF8->AF8_PROJET+cRevisa+"001")
While !Eof() .And. AFC->AFC_FILIAL+AFC->AFC_PROJET+AFC->AFC_REVISA+;
					AFC->AFC_NIVEL==cFilAFC+AF8->AF8_PROJET+cRevisa+"001"
	PmsAddPlan(AFC->AFC_PROJET+AFC->AFC_REVISA+AFC->AFC_EDT,cArquivo,@nNivelAtu,nNivelMax,cUsrRev,lRecNo,@aExpand,aConfig,cFilhos,nIndent)
	dbSelectArea("AFC")
	dbSkip()
EndDo

CursorArrow()
If !Empty(cEDT)
	dbSelectArea(cArquivo)
	LOCATE FOR AllTrim(XF9_TAREFA) == cEDT
	// Testa se o registro existe no arquivo temporario no caso de exclusao da ultima EDT
	If (cArquivo)->(EoF())
		If aExpand != Nil .AND. !Empty(aExpand)
			For nX := 1 To Len(aExpand)
				cEDTExp := AllTrim(Right(aExpand[nX ,01],Len(aExpand[nX ,01])-3))
				If ((cEDTExp $ cEDT) .AND. (cEDTExp < cEDT)) .AND. (cEDTPai < cEDTExp)
					cEDTPai := cEDTExp
				EndIf
			Next nX
			// Na Exclusao de uma EDT com nivel 002, o sistema precisa encontra sua EDT PAI
			If ( cEDTPai = "" )
				cEDTPai := Alltrim( AF8->AF8_PROJET )
			EndIF
			LOCATE FOR AllTrim(XF9_TAREFA) == cEDTPai
		EndIf
	EndIf
EndIf
RestArea(aArea)

If ! IsinCallStack("PmsTskPad") // para não desposicionar consulta padrão
	(cArquivo)->(DbGoTop())
EndIf

Return nNivelAtu

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSAddPlan³ Autor ³ Edson Maricate        ³ Data ³ 11-03-2002 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Cria o registro no arquivo de trabalho.                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsAddPlan(cChave,cArquivo,nNivelAtu,nNivelMax,cUsrRev,lRecNo,aExpand,aConfig,cFilhos,nIndent,lEdtPos,cPai)
Local aArea	:= GetArea()
Local aAuxArea
Local aAreaAF9	:= AF9->(GetArea())
Local aAreaAFC	:= AFC->(GetArea())
Local aProcForm	:= {}
Local lAdiciona := .T.
Local lFilho 	:= .F.
Local aRecPai	:= {}
Local nPosS
Local nX := 0
Local aDocAFC	:= {}
Local aDocAF9	:= {}
Local lSeekFilho	 := .F.
Local nPos		:=	0
Local lEDT		:=	IIf(Len(aConfig)>=5,aConfig[5],.T.)
Local aNodes    := {}  // array utilizado na ordenacao de tarefas e EDTs
Local nNode     := 0   // contador utilizado para iteracao com aNodes
Local aRecAFC	:= {}
Local lAFVGrpUsr 	:= .T.
Local lAFXGrpUsr 	:= .T.
Local lRejeit    := .F.
Local lQNC030REJ := .F.
Local lRECIND := (cArquivo)->(ColumnPos("RECIND")) > 0
Local lNIVTREE := (cArquivo)->(ColumnPos("NIVTREE")) > 0
Local lCfgTaskRej := (Len(aConfig)>3) .AND. !Empty(aConfig[4])
Local n_NIVEL := 0
Local cFilAFV		:= xFilial("AFV")
Local cFilAFD		:= xFilial("AFD")
Local cFilAFX		:= xFilial("AFX")

Default nIndent	:= PMS_SHEET_INDENT
DEFAULT lEDTPos	:=	.T.
DEFAULT cPai   	:=	""

If Type("AHTASKCPM") == "U"
	PRIVATE aHTaskCPM	:= {} 
EndIf
// nota importante = o registro na tabela AF8 DEVE estar corretamente posicionado
If AF8->(ColumnPos("AF8_PAR002"))>0
	If AF8->AF8_PAR002$"1|2"
		lQNC030REJ := .T.
	EndIf
EndIf

n_NIVEL := Val(AFC->AFC_NIVEL)
If lEdtPos .And. (nNivelMax >= n_NIVEL .Or. (( nPosS:=aScan(aExpand,{|x| x[1]=="AFC"+AFC->AFC_EDTPAI } )) > 0 .And.aExpand[nPosS,2] ))
	If PmsChkUser(AFC->AFC_PROJET,,AFC->AFC_EDT,AFC->AFC_EDTPAI,1,"ESTRUT",cUsrRev)
		If 	(aConfig[1]==1) .Or.;
			(aConfig[1]==2 .And. !Empty(AFC->AFC_DTATUF)).Or.;
			(aConfig[1]==3 .And. Empty(AFC->AFC_DTATUF))
			If !(AFC->AFC_FINISH<aConfig[2].Or.AFC->AFC_START>aConfig[3]) .Or. Empty(AFC->AFC_START)
				If n_NIVEL > nNivelAtu
					nNivelAtu := n_NIVEL
				EndIf
				If lEDT
					RecLock(cArquivo,.T.)
					aRecPai := (cArquivo)->(GetArea())
					aProcForm	:= {}
					For nx := 1 to Len(aAuxCps)
						If aAuxCps[nx,1]=="AF9_DESCRI"
							If AFC->(ColumnPos(aAuxCps[nx,2])) > 0
								FieldPut(ColumnPos("X"+Substr(aAuxCps[nx,1],2,Len(aAuxCps[nx,1])-1)),SPACE((n_NIVEL-1)*nIndent)+AFC->(FieldGet(ColumnPos(aAuxCps[nx,2]))))
							Endif
						ElseIf Substr(aAuxCps[nx,1],1,1)=="%"
							aAdd(aProcForm,nx)
						Else
							If Substr(aAuxCps[nx,1],1,1)=="$"
								FieldPut(ColumnPos(Substr(aAuxCps[nx,1],2,Len(aAuxCps[nx,1])-1)),&(Substr(aAuxCps[nx,1],2,Len(aAuxCps[nx,1])-1)+"(3,'AFC',AFC->(RecNo()))"))
							Else
								If Substr(aAuxCps[nx,1],1,1)!="|"
									If AFC->(ColumnPos(aAuxCps[nx,2])) > 0
										FieldPut(ColumnPos("X"+Substr(aAuxCps[nx,1],2,Len(aAuxCps[nx,1])-1)),AFC->(FieldGet(ColumnPos(aAuxCps[nx,2]))))
									Endif
								Endif
							EndIf
						EndIf
					Next
				
					aRecAFC	:= AFC->(GetArea())
					(cArquivo)->CTRLNIV	:= "+"

					If lRecNo
						(cArquivo)->RECNO := AFC->(RecNo())
						(cArquivo)->ALIAS := "AFC"
						If lNIVTREE
							(cArquivo)->NIVTREE := nNivelAtu
						EndIf
					EndIf

					// efetua os calculos de campos e formulas
					If !PMSPlnCalc(aProcForm, aAuxCps, cArquivo)
						Return
					EndIf
					If lRECIND
						(cArquivo)->RECIND := cPai + Dec2Base63((cArquivo)->(RECNO()),4)
						cPai	:= rTrim((cArquivo)->RECIND)
					EndIf
					MsUnlock()
					//insere os usuarios do Projeto+Edt
					If "USR"$cFilhos
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Insere os usuarios do Projeto no Tree                   ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						dbSelectArea("AFX")
						dbSetOrder(1)
						MsSeek(cFilAFX+AFC->AFC_PROJET+Space(Len(AFC->AFC_REVISA))+AFC->AFC_EDT/*+cUsrRev*/)
						While AFX->(! Eof()) .And. AFX->AFX_FILIAL == cFilAFX .AND. AFX->AFX_PROJET == AFC->AFC_PROJET .AND. AFX->AFX_REVISA == Space(Len(AFC->AFC_REVISA)) .AND. AFX->AFX_EDT == AFC->AFC_EDT
							dbSelectArea(cArquivo)
							RecLock(cArquivo,.T.)
							If Empty(AFX->AFX_USER)
								If lAFXGrpUsr
									(cArquivo)->XF9_DESCRI	:= '[GRP]'+SPACE((n_NIVEL-1)*nIndent)+"["+AllTrim(GrpRetName(AFX->AFX_GRPUSR))+"]"
								EndIf
							Else
								(cArquivo)->XF9_DESCRI	:= '[USR]'+SPACE((n_NIVEL-1)*nIndent)+"["+FATPDObfuscate(AllTrim(UsrRetName(AFX->AFX_USER)),"AFX_NOME",,.T.)+"]"
							Endif
							If lRecNo
								(cArquivo)->RECNO := AFX->(RecNo())
								(cArquivo)->ALIAS := "AFX"
							EndIf
							If lRECIND
								(cArquivo)->RECIND := cPai + Dec2Base63((cArquivo)->(RECNO()),4)
							EndIf
							MsUnlock()
							dbSelectArea("AFX")
							dbSkip()
						EndDo
					EndIf

					If "ACB"$cFilhos .And. PmsChkUser(AFC->AFC_PROJET,,AFC->AFC_EDT,AFC->AFC_EDTPAI,2,"DOCUME",cUsrRev)
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Insere os documentos da EDT no Tree                     ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						aDocAFC	:= {}
						PMSDocTree("AFC", AFC->(RecNo()), @aDocAFC)
						For nx := 1 to Len(aDocAFC)
							ACB->(dbGoto(aDocAFC[nx]))
							dbSelectArea(cArquivo)
							RecLock(cArquivo,.T.)
							(cArquivo)->XF9_DESCRI	:= SPACE((n_NIVEL-1)*nIndent)+"["+AllTrim(Substr(ACB->ACB_DESCRI,1,50))+"]"
							If lRecNo
								(cArquivo)->RECNO := ACB->(RecNo())
								(cArquivo)->ALIAS := "ACB"
							EndIf
							If lRECIND
								(cArquivo)->RECIND := cPai + Dec2Base63((cArquivo)->(RECNO()),4)
							EndIf
							MsUnlock()
						Next
					EndIf

	     	   Endif
			Endif
		EndIf
	EndIf
EndIf

AFC->(dbSetOrder(2))
AF9->(dbSetOrder(2))
lSeekFilho := AFC->(MsSeek(xFilial()+cChave)) .Or. AF9->(MsSeek(xFilial()+cChave))

/*BEGINDOC
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Se nao for mostrar as EDTs tem que mostrar todas as tarefas, ³
//³independentemente da configurcao do aExpand.                 ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
//ENDDOC*/
If (!lEDT .Or. aExpand == Nil .Or.Empty(aExpand).Or.;
	 (( nPosS:=aScan(aExpand,{|x| x[1]==(cArquivo)->ALIAS+(cArquivo)->XF9_TAREFA} )) > 0 .And.aExpand[nPosS,2] )	.Or. nNivelMax<10000)

	DbSelectArea('AFC')
	aAreaAFC1	:=	GetArea()
	DbSetOrder(1)
	DbSeek(xFilial()+cChave)
	//Se o nivel do AFC ja e o maximo, nem consulto os filhos, a menos que esteja marcado como expandido.
	If (( nPosS:=aScan(aExpand,{|x| x[1]=="AFC"+AFC_EDT } )) > 0 .And.aExpand[nPosS,2] ) .Or. nNivelMax > Val(AFC_NIVEL)

		cChaveAlt	:=	cChave
		cPrjAF9		:=	Substr(cChaveAlt,1,Len(AF9->AF9_PROJET))
		cChaveAlt	:=	Substr(cChaveAlt,Len(AF9->AF9_PROJET)+1)
		cRevAF9		:=	Substr(cChaveAlt,1,Len(AF9->AF9_REVISA))
		cChaveAlt	:=	Substr(cChaveAlt,Len(AF9->AF9_REVISA)+1)
		cEDTPAF9	:=	cChaveAlt
		cQuery	:=	" SELECT AF9_PROJET,AF9_TAREFA,AF9_REVISA,AF9_EDTPAI,AF9_ORDEM, R_E_C_N_O_ AS RECAF9, "
		cQuery	+=	" AF9_FILIAL, AF9_ACAO, AF9_REVACA, AF9_TPACAO "
		cQuery	+=	" FROM "+RetSqlName('AF9')+" AF9 "
		cQuery	+=	" WHERE AF9_FILIAL = '"+xFilial('AF9')+"' "
		cQuery	+=	" AND AF9_PROJET = '"+cPrjAF9+"' "
		cQuery	+=	" AND AF9_REVISA = '"+cRevAF9+"' "
		cQuery	+=	" AND AF9_EDTPAI = '"+cEDTPAF9+"' "
		If 	(aConfig[1]==2)
			cQuery	+=	" AND AF9_DTATUF <> '' "
		ElseIf	(aConfig[1]==3)
			cQuery	+=	" AND AF9_DTATUF  = '' "
		Endif

		cQuery		+=	" AND ((AF9_FINISH >= '"+Dtos(aConfig[2])+"' AND  "
		cQuery		+=	"       AF9_FINISH <= '"+Dtos(aConfig[3])+"') OR  AF9_START = '' )"
		cQuery		+=	" AND D_E_L_E_T_ = ' ' "
		cQuery		+=	" ORDER BY AF9_PROJET,AF9_TAREFA,AF9_ORDEM"
		cQuery		:=	ChangeQuery(cQuery)
		cAliasAF9	:=	GetNextAlias()
		DbUseArea(.T.,"TOPCONN",TCGENQRY(,,cQuery),cAliasAF9,.F.,.T.)
		While !Eof()
			If PmsChkUser((cAliasAF9)->AF9_PROJET,(cAliasAF9)->AF9_TAREFA,,(cAliasAF9)->AF9_EDTPAI,1,"ESTRUT",cUsrRev)
				lSeekFilho	 := .T.
				lAdiciona := .T.
				lRejeit    := .F.

				If lCfgTaskRej
					lAdiciona := PmsHasRsrc((cAliasAF9)->AF9_PROJET, (cAliasAF9)->AF9_REVISA, (cAliasAF9)->AF9_TAREFA, aConfig[4])
				EndIf

				If lAdiciona .AND. lQNC030REJ
					AF9->(Dbgoto((cAliasAF9)->RECAF9))
					lRejeit := QNC030REJ((cAliasAF9)->AF9_FILIAL, (cAliasAF9)->AF9_ACAO, (cAliasAF9)->AF9_REVACA, (cAliasAF9)->AF9_TPACAO)
					// se passou pelo primeiro filtro e escolheu apenas as tarefas rejeitadas
					// mas a tarefa nao e rejeitada, nao deve incluir o registro
					if aConfig[1]==4 .and. ! lRejeit
						lAdiciona := .F.
					Endif
				Endif

				If lAdiciona
					aAdd(aNodes, {PMS_TASK,;
					              (cAliasAF9)->RECAF9,;
									IIf(Empty((cAliasAF9)->AF9_ORDEM), "000", (cAliasAF9)->AF9_ORDEM),;
					              (cAliasAF9)->AF9_TAREFA,;
									lRejeit })
				EndIf
			EndIf
			dbSelectArea(cAliasAF9)
			dbSkip()
		EndDo
		DbCloseArea()

		cQuery	:=	" SELECT AFC_PROJET,AFC_EDT,AFC_REVISA,AFC_EDTPAI,AFC_ORDEM, R_E_C_N_O_ AS RECAFC "
		cQuery	+=	" FROM "+RetSqlName('AFC')+" AFC "
		cQuery	+=	" WHERE AFC_FILIAL = '"+xFilial('AFC')+"' "
		cQuery	+=	" AND AFC_PROJET = '"+cPrjAF9+"' "
		cQuery	+=	" AND AFC_REVISA = '"+cRevAF9+"' "
		cQuery	+=	" AND AFC_EDTPAI = '"+cEDTPAF9+"' "
		cQuery		+=	" AND D_E_L_E_T_ = ' ' "
		cQuery		+=	" ORDER BY AFC_PROJET,AFC_EDT,AFC_ORDEM"
		cQuery		:=	ChangeQuery(cQuery)
		cAliasAFC	:=	GetNextAlias()
		DbUseArea(.T.,"TOPCONN",TCGENQRY(,,cQuery),cAliasAFC,.F.,.T.)
		If !Eof()
			lSeekFilho	 := .T.
			lFilho := .T.
			While !Eof()

				// adiciona a EDT em aNodes, para ser ordenado
				aAdd(aNodes, {PMS_WBS,;
								(cAliasAFC)->RecAFC,;
								IIf(Empty((cAliasAFC)->AFC_ORDEM), "000", (cAliasAFC)->AFC_ORDEM),;
								(cAliasAFC)->AFC_EDT, .T.})
				dbSelectArea(cAliasAFC)
				dbSkip()
			End
		EndIf
		DbCloseArea()
	Endif
	RestArea(aAreaAFC1)
	
	// ordenacao conjunta de tarefas e EDTs
	aSort(aNodes, , , {|x, y| x[3]+x[4] < y[3]+y[4]})

	For nNode := 1 To Len(aNodes)
		If aNodes[nNode,1] == PMS_TASK  // tarefa
			AF9->(dbGoto(aNodes[nNode,2]))
			n_Nivel := Val(AF9->AF9_NIVEL)
			If nNivelMax >= n_Nivel .Or. (( nPosS:=aScan(aExpand,{|x| x[1]=="AFC"+AF9->AF9_EDTPAI } )) > 0 .And.aExpand[nPosS,2] )
				If n_Nivel > nNivelAtu
					nNivelAtu := n_Nivel
				EndIf
				lFilho := .T.
				RecLock(cArquivo,.T.)
				aProcForm	:= {}
				For nx := 1 to Len(aAuxCps)
					If aAuxCps[nx,1]=="AF9_DESCRI"
				   		FieldPut(ColumnPos("X"+Substr(aAuxCps[nx,1],2,Len(aAuxCps[nx,1])-1)),SPACE((n_Nivel-1)*nIndent)+AF9->(FieldGet(ColumnPos(aAuxCps[nx,1]))))
					ElseIf Substr(aAuxCps[nx,1],1,1)=="%"
						aAdd(aProcForm,nx)
					Else
						If Substr(aAuxCps[nx,1],1,1)=="$"
							FieldPut(ColumnPos(Substr(aAuxCps[nx,1],2,Len(aAuxCps[nx,1])-1)),&(Substr(aAuxCps[nx,1],2,Len(aAuxCps[nx,1])-1)+"(3,'AF9',AF9->(RecNo()))"))
						Else
							If Substr(aAuxCps[nx,1],1,1)!="|"
								If AF9->(ColumnPos(aAuxCps[nx,1])) >0
									FieldPut(ColumnPos("X"+Substr(aAuxCps[nx,1],2,Len(aAuxCps[nx,1])-1)),AF9->(FieldGet(ColumnPos(aAuxCps[nx,1]))))
								EndIf
							Endif
						EndIf
					EndIf
				Next

				If lRecNo
					(cArquivo)->RECNO := AF9->(RecNo())
					(cArquivo)->ALIAS := "AF9"
				EndIf

				// efetua os calculos de campos e formulas
				If !PMSPlnCalc(@aProcForm, @aAuxCps, cArquivo)
					Return
				EndIf
				If lRECIND
					(cArquivo)->RECIND := cPai + Dec2Base63((cArquivo)->(RECNO()),4)
				EndIf
				MsUnlock()
				If "USR"$cFilhos
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Insere os usuarios do Projeto na Estrutura              ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					dbSelectArea("AFV")
					dbSetOrder(1)
					If MsSeek(cFilAFV+AF9->AF9_PROJET+cUsrRev+AF9->AF9_TAREFA)
						While !Eof() .And. AFV->AFV_FILIAL+AFV->AFV_PROJET+AFV->AFV_REVISA+AFV->AFV_TAREFA==cFilAFV+AF9->AF9_PROJET+cUsrRev+AF9->AF9_TAREFA
							dbSelectArea(cArquivo)
							RecLock(cArquivo,.T.)
							If Empty(AFV->AFV_USER)
								If lAFVGrpUsr
									(cArquivo)->XF9_DESCRI	:= '[GRP]'+SPACE((n_Nivel-1)*nIndent)+"["+AllTrim(GrpRetName(AFV->AFV_GRPUSR))+"]"
								EndIf
							Else
								(cArquivo)->XF9_DESCRI	:= '[USR]'+SPACE((n_Nivel-1)*nIndent)+"["+FATPDObfuscate(AllTrim(UsrRetName(AFV->AFV_USER)),"AFV_NOME",,.T.)+"]"
							Endif
							If lRecNo
								(cArquivo)->RECNO := AFV->(RecNo())
								(cArquivo)->ALIAS := "AFV"
							EndIf
							If lRECIND
								(cArquivo)->RECIND := cPai + Dec2Base63((cArquivo)->(RECNO()),4)
							EndIf
							MsUnlock()
							dbSelectArea("AFV")
							dbSkip()
						EndDo
					Endif
				EndIf
				If "ACB"$cFilhos .And. PmsChkUser(AF9->AF9_PROJET,AF9->AF9_TAREFA,,AF9->AF9_EDTPAI,2,"DOCUME",cUsrRev)
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Insere os documentos da Tarefa no Tree                  ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					aDocAF9:= {}
					PMSDocTree("AF9", AF9->(RecNo()), @aDocAF9)
					For nx := 1 to Len(aDocAF9)
						ACB->(dbGoto(aDocAF9[nx]))
						dbSelectArea(cArquivo)
						RecLock(cArquivo,.T.)
						(cArquivo)->XF9_DESCRI	:= SPACE((n_Nivel-1)*nIndent)+"["+AllTrim(Substr(ACB->ACB_DESCRI,1,50))+"]"
						If lRecNo
							(cArquivo)->RECNO := ACB->(RecNo())
							(cArquivo)->ALIAS := "ACB"
						EndIf
						If lRECIND
							(cArquivo)->RECIND := cPai + Dec2Base63((cArquivo)->(RECNO()),4)
						EndIf
						MsUnlock()
					Next
				EndIf
				If "AFD"$cFilhos
					//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
					//³ Insere os usuarios do Projeto na Estrutura              ³
					//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
					aAuxArea := AF9->(GetArea())
					cNivAux	 := AF9->AF9_NIVEL
					AF9->(dbSetOrder(1))
					dbSelectArea("AFD")
					dbSetOrder(1)
					MsSeek(cFilAFD+AF9->AF9_PROJET+cRevisa+AF9->AF9_TAREFA)
					While !Eof() .And. AFD->AFD_FILIAL+AFD->AFD_PROJET+AFD->AFD_REVISA+AFD->AFD_TAREFA==cFilAFD+AF9->AF9_PROJET+cRevisa+AF9->AF9_TAREFA
						AF9->(dbSetOrder(1))
						AF9->(MsSeek(xFilial()+AFD->AFD_PROJET+AFD->AFD_REVISA+AFD->AFD_PREDEC))
						dbSelectArea(cArquivo)
						RecLock(cArquivo,.T.)
						(cArquivo)->XF9_DESCRI	:= SPACE((VAL(cNivAux)-1)*nIndent)+"["+AllTrim(AF9->AF9_DESCRI)+"]"
						If lRecNo
							(cArquivo)->RECNO := AFD->(RecNo())
							(cArquivo)->ALIAS := "AFD"
						EndIf
						If lRECIND
							(cArquivo)->RECIND := cPai + Dec2Base63((cArquivo)->(RECNO()),4)
						EndIf
						MsUnlock()
						RestArea(aAuxArea)
						dbSelectArea("AFD")
						dbSkip()
					End
				EndIf
			EndIf

		Else
			AFC->(dbGoto(aNodes[nNode,2]))
			PmsAddPlan(AFC->AFC_PROJET+AFC->AFC_REVISA+AFC->AFC_EDT,cArquivo,@nNivelAtu,nNivelMax,cUsrRev,lRecNo,@aExpand,aConfig,cFilhos,nIndent,,cPai)
		EndIF
	Next

	If lFilho .And. !Empty(aRecPai)
		RestArea(aRecPai)
		RecLock(cArquivo,.F.)
		(cArquivo)->CTRLNIV	:= "-"
		MsUnlock()
		If aExpand != Nil
			If !Empty(aExpand).And. (nPos:=aScan(aExpand,{|x|x[1]==(cArquivo)->ALIAS+(cArquivo)->XF9_TAREFA})) >0
		      aExpand[nPos,2] :=.T.
			Else
				aAdd(aExpand,{(cArquivo)->ALIAS+(cArquivo)->XF9_TAREFA,.T.})
			Endif
		EndIf
	EndIf
EndIf

If !lSeekFilho	.And. !Empty(aRecAFC) .And. !("ACB"$cFilhos .Or.  "USR"$cFilhos)
	RestArea(aRecAFC)
	RecLock(cArquivo,.F.)
	(cArquivo)->CTRLNIV	:= " "
	MsUnlock()
EndIf

RestArea(aAreaAFC)
RestArea(aAreaAF9)
RestArea(aArea)
Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSPlanAF1³ Autor ³ Cristiano G. da Cunha ³ Data ³ 15.04.2002 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Monta uma planilha para visualizacao do orcamento             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³cTitle : Titulo da janela                                     ³±±
±±³          ³aCampos: Array contendo os campos a serem visualizados        ³±±
±±³          ³         [1] : Nome do campo AF2                              ³±±
±±³          ³         [2] : Nome do campo AF5                              ³±±
±±³          ³         [3] : Tamanho do campo ( opcional )                  ³±±
±±³          ³         [4] : Decimal do campo ( opcional )                  ³±±
±±³          ³         [5] : Titulo  do campo ( opcional )                  ³±±
±±³          ³         [6] : Permite edicao ( .T./.F. )                     ³±±
±±³          ³         [7] : Validacao                                      ³±±
±±³          ³cArquivo : Nome do arquivo temporario                         ³±±
±±³          ³aButtons : Botoes auxiliares                                  ³±±
±±³          ³         [1] : Titulo do Botao                                ³±±
±±³          ³         [2] : CodeBlock a ser executado                      ³±±
±±³          ³         [3] : Nome do recurso ( BITMAP )                     ³±±
±±³          ³nFreze   : Congelar colunas do Browse                         ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PmsPlanAF1(cTitle,aCampos,cArquivo,aButtons,nFreze,lConfirma,aMenu,oDlg,lExcel,nIndent)
Local aBOD      := {}
Local aAuxRet
Local aExpand	:= {}
Local nTop      := oMainWnd:nTop+35
Local nLeft     := oMainWnd:nLeft+10
Local nBottom   := oMainWnd:nBottom-12
Local nRight    := oMainWnd:nRight-10
Local oBrowse
Local oMais		:=	LoadBitmap( GetResources(), BMP_SHORTCUTPLUS )
Local oMenos	:= 	LoadBitmap( GetResources(), BMP_SHORTCUTMINUS )
Local oAll		:= 	LoadBitmap( GetResources(), BMP_EXPALL )
Local oCmp		:= 	LoadBitmap( GetResources(), BMP_EXPCMP )
Local nX        := 0
Local lFWGetVersao := .T.

PRIVATE aStru		:= {}
PRIVATE aHeader := {}
PRIVATE aAuxCps	:= aClone(aCampos)
PRIVATE bRefresh	:= {|| (PmsAtuPOrc(cArquivo,nNivelMax,,aExpand,nIndent),oBrowse:Refresh()) }
PRIVATE bRefreshAll	:= bRefresh //bRefreshAll - sem utilizacao

DEFAULT lExcel	:= .F.
DEFAULT nIndent := PMS_SHEET_INDENT
DEFAULT aButtons:= {}

RegToMemory("AF1",.F.)
RegToMemory("AF3",.T.)
RegToMemory("AF4",.T.)
RegToMemory("AF5",.F.)
RegToMemory("AF7",.F.)

If ExistBlock("PMSAF102")
	cArquivo := ExecBlock("PMSAF102", .F., .F., {cArquivo})
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ ExecBlock para inclusao de botoes customizados       ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If ExistBlock("PMSAF1BD")
	aBOD := ExecBlock("PMSAF1BD",.F.,.F.)
	For nx := 1 to Len(aBOD)
		aAdd(aMenu,{aBOD[nx,1],aBOD[nx,2],aBOD[nx,3],aBOD[nx,4]})
	Next nX
EndIf

For nx := 1 to Len(aCampos)
	dbSelectArea("SX3")
	dbSetOrder(2)
	If MsSeek(aCampos[nx,1])
		aAdd(aHeader,{If(Empty(aCampos[nx,5]),X3TITULO(),aCampos[nx,5]),"X"+Substr(X3_CAMPO,2,Len(X3_CAMPO)-1),X3_PICTURE,If(aCampos[nx,3]!=Nil,aCampos[nx,3],X3_TAMANHO),If(aCampos[nx,4]!=Nil,aCampos[nx,4],X3_DECIMAL),aCampos[nx,7]+"('"+aCampos[nx,1]+"','"+aCampos[nx,2]+"','"+cArquivo+"')",X3_USADO,X3_TIPO,cArquivo,X3_CONTEXT})
		aAdd(aStru,{"X"+Substr(X3_CAMPO,2,Len(X3_CAMPO)),X3_TIPO,X3_TAMANHO,X3_DECIMAL})
	ElseIf MsSeek(aCampos[nx,2])
		aAdd(aHeader,{If(Empty(aCampos[nx,5]),X3TITULO(),aCampos[nx,5]),"XF2"+Substr(X3_CAMPO,4,Len(X3_CAMPO)-1),X3_PICTURE,If(aCampos[nx,3]!=Nil,aCampos[nx,3],X3_TAMANHO),If(aCampos[nx,4]!=Nil,aCampos[nx,4],X3_DECIMAL),aCampos[nx,7]+"('"+aCampos[nx,1]+"','"+aCampos[nx,2]+"','"+cArquivo+"')",X3_USADO,X3_TIPO,cArquivo,X3_CONTEXT})
		aAdd(aStru,{"XF2"+Substr(X3_CAMPO,4,Len(X3_CAMPO)),X3_TIPO,X3_TAMANHO,X3_DECIMAL})
	ElseIf Substr(aCampos[nx,1],1,1) == "$"
		aAdd(aStru,aClone(&(Substr(aCampos[nx,1],2,Len(aCampos[nx,1])-1)+"(1)")))
	ElseIf Substr(aCampos[nx,1],1,1) == "%"
//%123456789012%C%99%2%12345678901234567890123456789012345%123456789012345678901234567890123456789012345678901234567890
		aAdd(aStru,{"FORM"+StrZero(nx,2,0),Substr(aCampos[nx,1],15,1),Val(Substr(aCampos[nx,1],17,2)),Val(Substr(aCampos[nx,1],20,2))})
	EndIf
Next
aAdd(aStru,{"CTRLNIV","C",1,0})
aAdd(aStru,{"L_I_XO","C",1,0})
aAdd(aStru,{"ALIAS","C",3,0})
aAdd(aStru,{"RECNO","N",14,0})
aAdd(aStru,{"FLAG","L",1,0})

If _oPMSXFUN4 <> Nil
	_oPMSXFUN4:Delete()
	_oPMSXFUN4 := Nil
Endif

_oPMSXFUN4 := FWTemporaryTable():New( cArquivo )  
_oPMSXFUN4:SetFields(aStru) 	

//------------------
//Criação da tabela temporaria
//------------------
_oPMSXFUN4:Create()	

nNivelMax := PmsAtuPOrc(cArquivo,If(AF1->AF1_NMAX>0,AF1->AF1_NMAX,1),,aExpand,nIndent)

DEFINE FONT oFont NAME "Arial" SIZE 0, -10
DEFINE MSDIALOG oDlg TITLE cTitle OF oMainWnd PIXEL FROM nTop,nLeft TO nBottom,nRight
oDlg:lMaximized := .T.

If SetMdiChild()

	For nx := 1 to Len(aMenu)
		AADD(aButtons, {aMenu[nx,3] , aMenu[nx,2], aMenu[nx,1]})
	Next
	AADD(aButtons, {BMP_EXCEL		, {|| PmsPlnExcel(aCampos,,nNivelMax,2,cArquivo)}, STR0315})
	AADD(aButtons, {BMP_IMPRIMIR	, {|| PMSR260(cArquivo,aCampos,cTitle) }, TIP_IMPRIMIR})
	AADD(aButtons, {BMP_INTERROGACAO, {|| HelProg() }, STR0135})
    lExibirOK := lConfirma<>Nil
	EnchoiceBar(oDlg,{|| (lConfirma:=.T.,oDlg:End()) },{|| oDlg:End()},,aButtons,,,,,.F.,lExibirOK)

Else
	oPanel := TPanel():New(0,0,'',oDlg, oDlg:oFont, .T., .T.,, ,1245,23,.T.,.T. )
	oPanel:Align := CONTROL_ALIGN_TOP
	@00,00 BITMAP oBmp1 RESNAME BMP_FAIXA_SUPERIOR SIZE 1200,50 NOBORDER PIXEL Of oPanel
	oBmp1:align:= CONTROL_ALIGN_TOP

	If !lFWGetVersao .or. GetVersao(.F.) == "P10"

		nCol := 2
		For nx := 1 to Len(aMenu)
			oBtn := TButton():New( 10, nCol,aMenu[nx,4],oPanel,aMenu[nx,2],24,12, , , ,.T.)
			oBtn:cToolTip := aMenu[nx,1]
			nCol += 24
		Next

		oBtn := TButton():New( 10, nCol,"Excel" ,oPanel,{||PmsPlnExcel(aCampos,,nNivelMax,2,cArquivo)},24,12, , , ,.T.)
		oBtn:cToolTip := STR0315 //"Exportar para o Microsoft Excel"
		nCol += 24

		oBtn := TButton():New( 10, nCol,TOOL_IMPRIMIR,oPanel,{|| PMSR260(cArquivo,aCampos,cTitle) },24,12, , , ,.T.)
		oBtn:cToolTip := TIP_IMPRIMIR
		nCol += 24

		oBtn := TButton():New( 10, nCol,STR0069,oPanel,{|| HelProg() },24,12, , , ,.T.)
		oBtn:cToolTip := STR0135
		nCol += 24

		If lConfirma<>Nil
			// OK
			oBtn := TButton():New( 10, nCol,STR0203,oPanel,{|| (lConfirma:=.T.,oDlg:End()) },24,12, , , ,.T.)
			oBtn:cToolTip := STR0203 + " < Ctrl-O >"
			nCol += 24
		EndIf

		// Sair
		oBtn := TButton():New( 10, nCol,STR0202,oPanel,{|| oDlg:End() },24,12, , , ,.T.)
		oBtn:cToolTip := STR0202+" < Ctrl-X >"
		nCol += 24

	Else
		For nx := 1 to Len(aMenu)
			AADD(aButtons, {aMenu[nx,3] , aMenu[nx,2], aMenu[nx,1]})
		Next

		AADD(aButtons, {BMP_EXCEL		, {|| PmsPlnExcel(aCampos,cUsrRev,nNivelMax,2,cArquivo)}, STR0315})
		AADD(aButtons, {BMP_IMPRIMIR	, {|| PMSR260(cArquivo,aCampos,cTitle) }, TIP_IMPRIMIR})
		AADD(aButtons, {BMP_INTERROGACAO, {|| HelProg() }, STR0135})
		lExibirOK := lConfirma<>Nil
		EnchoiceBar(oDlg,{|| (lConfirma:=.T.,oDlg:End()) },{|| oDlg:End()},,aButtons,,,,,.F.,lExibirOK)

		oBtn := FWFormBar():New(oDlg)

		// OK
		If lConfirma<>Nil
			oBtn:addOK( {|| (lConfirma:=.T.,oDlg:End()) }, STR0203 ) //"Confirmar"
		Else
			oBtn:addOK( {|| oDlg:End() }, STR0027) //"Confirmar aparente"
		Endif

		// SAIR
		oBtn:addClose( {|| oDlg:End() }, STR0202 ) //"Fechar"

		For Nx := 1 To Len(aButtons)
			oBtn:AddUserBtn( "", aButtons[nX,3],aButtons[nX,2],aButtons[nX,3])
		Next

		oBtn:AddHelp()
		oBtn:Activate()

	Endif
EndIf

dbSelectArea(cArquivo)
dbGotop()
nAlias	:= Select()
oBrowse := TcBrowse():New( 14, 1, (nRight/2)-2,(nBottom/2)-40, , , , oDlg, ,,,,{|| PmsExpOrc(cArquivo,aExpand,@nNivelMax),(PmsAtuPOrc(cArquivo,nNivelMax,,aExpand,nIndent),oBrowse:Refresh()) },,oFont,,,,, .F.,cArquivo, .T.,, .F., , ,.F. )
oBrowse:Align := CONTROL_ALIGN_ALLCLIENT
oBrowse:AddColumn( TCColumn():New( "",{ || If((cArquivo)->CTRLNIV=="-",oMenos,If((cArquivo)->CTRLNIV=="+",oMais,If((cArquivo)->CTRLNIV=="*",oAll,If((cArquivo)->CTRLNIV=="!",oCmp,Nil) )))},,,,"RIGHT" , 6, .T., .F.,,,, .T., ))
oBrowse:AddColumn( TCColumn():New( "",{ || PmsOrcBmp((cArquivo)->ALIAS,(cArquivo)->RECNO ) },,,, "LEFT", 15, .T., .F.,,,, .T., ))

For nx := 1 to Len(aCampos)
	If Substr(aCampos[nx,1],1,1)=="$"
		aAuxRet := &(Substr(aCampos[nx,1],2,Len(aCampos[nx,1])-1)+"(2)")
		oBrowse:AddColumn( TCColumn():New( aAuxRet[1], FieldWBlock( aAuxRet[2] , nAlias ),AllTrim(aAuxRet[3]),,, if(aAuxRet[5]=="N","RIGHT","LEFT"), If(aCampos[nx,8]!=Nil,aCampos[nx,8],If(aAuxRet[4]>Len(aAuxRet[1]),(aAuxRet[4]*3),(LEN(aAuxRet[1])*3))), .F., .F.,,,, .F., ) )
	ElseIf Substr(aCampos[nx,1],1,1)=="%"
//%123456789012%C%99%2%12345678901234567890123456789012345%123456789012345678901234567890123456789012345678901234567890
		oBrowse:AddColumn( TCColumn():New( Trim(Substr(aCampos[nx,1],2,12)), FieldWBlock( "FORM"+StrZero(nx,2,0) , nAlias ) ,Substr(aCampos[nx,1],22,35),,, if(Substr(aCampos[nx,1],15,1)=="N","RIGHT","LEFT"), If(Val(Substr(aCampos[nx,1],17,2))>Len(AllTrim(Substr(aCampos[nx,1],2,12))),(Val(Substr(aCampos[nx,1],17,2))*3),(Len(AllTrim(Substr(aCampos[nx,1],2,12)))*3)), .F., .F.,,,, .F., ) )
	Else
		dbSelectArea("SX3")
		dbSetOrder(2)
		If MsSeek(aCampos[nx,1])
			oBrowse:AddColumn( TCColumn():New( Trim(x3titulo()), FieldWBlock( "X"+Substr(X3_CAMPO,2,Len(X3_CAMPO)), nAlias ),AllTrim(X3_PICTURE),,, if(X3_TIPO=="N","RIGHT","LEFT"), If(aCampos[nx,8]!=Nil,aCampos[nx,8],If(X3_TAMANHO>Len(X3_TITULO),(X3_TAMANHO*5),(LEN(X3_TITULO)*5))), .F., .F.,,,, .F., ) )
		ElseIf MsSeek(aCampos[nx,2])
			oBrowse:AddColumn( TCColumn():New( Trim(x3titulo()), FieldWBlock( "XF2"+Substr(X3_CAMPO,4,Len(X3_CAMPO)), nAlias ),AllTrim(X3_PICTURE),,, if(X3_TIPO=="N","RIGHT","LEFT"), If(aCampos[nx,8]!=Nil,aCampos[nx,8],If(X3_TAMANHO>Len(X3_TITULO),(X3_TAMANHO*4),(LEN(X3_TITULO)*4))), .F., .F.,,,, .F., ) )
		EndIf
	EndIf
Next
oBrowse:AddColumn( TCColumn():New( "",{|| " " },,,, "LEFT", 5, .T., .F.,,,, .T., ))
dbSelectArea(cArquivo)
If nFreze	<>	Nil
	oBrowse:nFreeze	:=	nFreze
Endif

oBrowse:Refresh()
ACTIVATE MSDIALOG oDlg

dbSelectArea(cArquivo)
dbCloseArea()

If _oPMSXFUN4 <> Nil
	_oPMSXFUN4:Delete()
	_oPMSXFUN4 := Nil
Endif

Return lConfirma


Function PmsExpOrc(cArquivo,aExpand,nNivelMax)
Local nPos

If !Empty(aExpand).And. (nPos:=aScan(aExpand,{|x|x[1]==(cArquivo)->ALIAS+(cArquivo)->XF2_TAREFA})) >0
	If (cArquivo)->CTRLNIV == "-"
		aExpand[nPos,2] := .F.
	ElseIf (cArquivo)->CTRLNIV == "+"
		aExpand[nPos,2] := .T.
	ElseIf (cArquivo)->CTRLNIV == "*"
		nNivelMax := 2000
		aExpand := {}
		dbSelectArea(cArquivo)
		dbGotop()
		If !InTransact()
			Zap
			Pack
		Else
			While !EOF()
				RecLock(cArquivo,.F.)
				DbDelete()
				MsUnLock()
				DbSkip()
			Enddo
		Endif
	ElseIf (cArquivo)->CTRLNIV == "!"
		nNivelMax := 1000
		aExpand := {}
	EndIf
Else
	If (cArquivo)->CTRLNIV == "-"
		aAdd(aExpand,{(cArquivo)->ALIAS+(cArquivo)->XF2_TAREFA,.F.})
	ElseIf (cArquivo)->CTRLNIV == "+"
		aAdd(aExpand,{(cArquivo)->ALIAS+(cArquivo)->XF2_TAREFA,.T.})
	ElseIf (cArquivo)->CTRLNIV == "*"
		nNivelMax := 2000
		aExpand := {}
		dbSelectArea(cArquivo)
		dbGotop()
		If !InTransact()
			Zap
			Pack
		Else
			While !EOF()
				RecLock(cArquivo,.F.)
				DbDelete()
				MsUnLock()
				DbSkip()
			Enddo
		Endif
	ElseIf (cArquivo)->CTRLNIV == "!"
		nNivelMax := 1000
		aExpand := {}
	EndIf
EndIf

Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PMSDuraOrcºAutor  ³Marcelo Akama       º Data ³  19.03.2009 º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Retorna a duracao da EDT                                    º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                        º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PMSDuraOrc(cOrcame, cEDT)
	Local aArea    := GetArea()
	Local aAreaAF2 := AF2->(GetArea())
	Local aAreaAF5 := AF5->(GetArea())
	Local nDurac   := 0
	Local cFilAF2	:= xFilial("AF2")
	Local cFilAF5	:= xFilial("AF5")

	DEFAULT cEDT := space(TamSX3("AF5_EDT")[1])

	AF2->(dbSetOrder(2))
	AF2->(dbSeek(cFilAF2 + cOrcame + cEDT))
	Do While AF2->AF2_FILIAL==cFilAF2 .and. AF2->AF2_ORCAME==cOrcame .and. AF2->AF2_EDTPAI==cEDT .and. !AF2->(Eof())
		nDurac += AF2->AF2_HDURAC
		AF2->(dbSkip())
	EndDo

	AF5->(dbSetOrder(2))
	AF5->(dbSeek(cFilAF5 + cOrcame + cEDT))
	Do While AF5->AF5_FILIAL==cFilAF5 .and. AF5->AF5_ORCAME==cOrcame .and. AF5->AF5_EDTPAI==cEDT .and. !AF5->(Eof())
		nDurac += PMSDuraOrc(cOrcame, AF5->AF5_EDT)
		AF5->(dbSkip())
	EndDo

	RestArea(aAreaAF2)
	RestArea(aAreaAF5)
	RestArea(aArea)
Return nDurac

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSAtuPOrc³ Autor ³ Cristiano G. da Cunha ³ Data ³ 15.04.2002 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Executa a atualizacao do arquivo de trabalho.                 ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PmsAtuPOrc(cArquivo,nNivelMax,lRecno,aExpand,nIndent)
Local nNivelAtu		:= 1
Local aArea			:= GetArea()
Local aAreaTMP
Local aProcForm		:= {}
Local nX := 0
Local cFilAF5		:= xFilial("AF5")

DEFAULT nNivelMax	:= 1
DEFAULT lRecNo		:= .T.
DEFAULT nIndent		:= PMS_SHEET_INDENT

CursorWait()

dbSelectArea(cArquivo)
If LastRec() > 0
	nNivelMax := 10000
EndIf
aAreaTMP	:= GetArea()
If !InTransact()
	Zap
	Pack
Else
	While !EOF()
		RecLock(cArquivo,.F.)
		DbDelete()
		MsUnLock()
		DbSkip()
	Enddo
Endif

RecLock(cArquivo,.T.)
(cArquivo)->XF2_TAREFA := AF1->AF1_ORCAME
(cArquivo)->XF2_DESCRI := AF1->AF1_DESCRI
If lRecNo
	(cArquivo)->RECNO := AF1->(RecNo())
	(cArquivo)->ALIAS := "AF1"
EndIf
AF5->(dbSetOrder(3))
If AF5->(MsSeek(xFilial()+AF1->AF1_ORCAME+"001"))
	For nx := 1 to Len(aAuxCps)
		If aAuxCps[nx,1]=="AF2_DESCRI"
			If AF5->(ColumnPos(aAuxCps[nx,2])) > 0
				FieldPut(ColumnPos("X"+Substr(aAuxCps[nx,1],2,Len(aAuxCps[nx,1])-1)),SPACE((VAL(AF5->AF5_NIVEL)-1)*nIndent)+AF5->(FieldGet(ColumnPos(aAuxCps[nx,2]))))
			Endif
		ElseIf aAuxCps[nx,1]=="AF2_HDURAC"
			FieldPut(ColumnPos('XF2_HDURAC'), PMSDuraOrc(AF1->AF1_ORCAME) )
		ElseIf Substr(aAuxCps[nx,1],1,1)=="%"
			aAdd(aProcForm,nx)
		Else
			If Substr(aAuxCps[nx,1],1,1)=="$"
				FieldPut(ColumnPos(Substr(aAuxCps[nx,1],2,Len(aAuxCps[nx,1])-1)),&(Substr(aAuxCps[nx,1],2,Len(aAuxCps[nx,1])-1)+"(3,'AF5',AF5->(RecNo()))"))
			Else
				If Substr(aAuxCps[nx,1],1,1)!="|"
					// se o campo existe na tabela AF5 e se existe o campo na tabela "planilha" a qual vai ser gravado
					If AF5->(ColumnPos(aAuxCps[nx,2])) > 0 .and. ColumnPos("XF2"+Substr(aAuxCps[nX,2],4,Len(aAuxCps[nX,2])-1))>0
						FieldPut(ColumnPos("XF2"+Substr(aAuxCps[nX,2],4,Len(aAuxCps[nX,2])-1)),AF5->(FieldGet(ColumnPos(aAuxCps[nX,2]))))
					EndIf
				Endif
			Endif
		EndIf
	Next

	If !PMSPlnCalc(@aProcForm, @aAuxCps, cArquivo)
		Return
	EndIf
EndIf
If nNivelMax <> 2000
	(cArquivo)->CTRLNIV	:= "*"
Else
	(cArquivo)->CTRLNIV	:= "!"
EndIf
MsUnlock()
If aExpand != Nil
	aAdd(aExpand,{(cArquivo)->ALIAS+(cArquivo)->XF2_TAREFA,.T.})
EndIf

MsUnlock()

dbSelectArea("AF5")
dbSetOrder(3)
MsSeek(xFilial()+AF1->AF1_ORCAME+"001")
While !Eof() .And. AF5->AF5_FILIAL+AF5->AF5_ORCAME+AF5->AF5_NIVEL == ;
					cFilAF5+AF1->AF1_ORCAME+"001"
	PmsAddPOrc(AF5->AF5_ORCAME+AF5->AF5_EDT,cArquivo,@nNivelAtu,nNivelMax,lRecNo,aExpand,nIndent)
	dbSelectArea("AF5")
	dbSkip()
End

CursorArrow()

RestArea(aAreaTmp)
RestArea(aArea)
Return nNivelAtu

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSAddPOrc³ Autor ³ Cristiano G. da Cunha ³ Data ³ 15.04.2002 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Cria o registro no arquivo de trabalho.                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PmsAddPOrc(cChave,cArquivo,nNivelAtu,nNivelMax,lRecno,aExpand,nIndent)
Local aProcForm 	:= {}
Local aArea			:= GetArea()
Local aAreaAF2		:= AF2->(GetArea())
Local aAreaAF5		:= AF5->(GetArea())
Local lFilho 		:= .F.
Local aRecPai		:= {}
Local lSeekFilho 	:= .F.
Local nPosS
Local nX := 0
Local cFilAF2		:= xFilial("AF2")
Local cFilAF5		:= xFilial("AF5")

Local aNodes := {}
Local nNode  := 0

Default nIndent	:= PMS_SHEET_INDENT

If nNivelMax >= Val(AF5->AF5_NIVEL)
	If PmsOrcUser(AF5->AF5_ORCAME,,AF5->AF5_EDT,AF5->AF5_EDTPAI,1,"ESTRUT")
		If Val(AF5->AF5_NIVEL) > nNivelAtu
			nNivelAtu := Val(AF5->AF5_NIVEL)
		EndIf
		RecLock(cArquivo,.T.)
		aRecPai := (cArquivo)->(GetArea())
		For nx := 1 to Len(aAuxCps)
			If aAuxCps[nx,1]=="AF2_DESCRI"
				If AF5->(ColumnPos(aAuxCps[nx,2])) > 0
					FieldPut(ColumnPos("X"+Substr(aAuxCps[nx,1],2,Len(aAuxCps[nx,1])-1)),SPACE((VAL(AF5->AF5_NIVEL)-1)*nIndent)+AF5->(FieldGet(ColumnPos(aAuxCps[nx,2]))))
				Endif
			ElseIf aAuxCps[nx,1]=="AF2_HDURAC"
				FieldPut(ColumnPos('XF2_HDURAC'), PMSDuraOrc(AF5->AF5_ORCAME,AF5->AF5_EDT) )
			Else
				If Substr(aAuxCps[nx,1],1,1)=="$"
					FieldPut(ColumnPos(Substr(aAuxCps[nx,1],2,Len(aAuxCps[nx,1])-1)),&(Substr(aAuxCps[nx,1],2,Len(aAuxCps[nx,1])-1)+"(3,'AF5',AF5->(RecNo()))"))
				ElseIf Substr(aAuxCps[nx,1],1,1)=="%"
					aAdd(aProcForm,nx)
				Else
					If Substr(aAuxCps[nx,1],1,1)!="|"
						If AF5->(ColumnPos(aAuxCps[nx,2])) > 0
							FieldPut(ColumnPos("X"+Substr(aAuxCps[nx,1],2,Len(aAuxCps[nx,1])-1)),AF5->(FieldGet(ColumnPos(aAuxCps[nx,2]))))
						Endif
					Endif
				EndIf
			EndIf
		Next

		dbSelectArea(cArquivo)
		(cArquivo)->CTRLNIV	:= "+"
		If lRecNo
			(cArquivo)->RECNO := AF5->(RecNo())
			(cArquivo)->ALIAS := "AF5"
		EndIf

		If !PMSPlnCalc(@aProcForm, @aAuxCps, cArquivo)
			Return
		EndIf

		MsUnlock()
	EndIf
EndIf

AF2->(dbSetOrder(2))
AF5->(dbSetOrder(2))
lSeekFilho := AF2->(MsSeek(xFilial()+cChave)) .Or. AF5->(MsSeek(xFilial()+cChave))

If aExpand == Nil .Or. Empty(aExpand).Or.(nPosS := aScan(aExpand,{|x| x[1]==(cArquivo)->ALIAS+(cArquivo)->XF2_TAREFA} ) > 0 .And.;
	aExpand[aScan(aExpand,{|x| x[1]==(cArquivo)->ALIAS+(cArquivo)->XF2_TAREFA} ),2]) .Or. nNivelMax<10000
	dbSelectArea("AF2")
	dbSetOrder(2)
	MsSeek(xFilial()+cChave)
	While !Eof() .And. AF2->AF2_FILIAL+AF2->AF2_ORCAME+AF2->AF2_EDTPAI ==;
						cFilAF2+cChave
		If PmsOrcUser(AF2->AF2_ORCAME,AF2->AF2_TAREFA,,AF2->AF2_EDTPAI,1,"ESTRUT")
			lSeekFilho 	:= .T.
			If nNivelMax >= Val(AF2->AF2_NIVEL)
				If Val(AF2->AF2_NIVEL) > nNivelAtu
					nNivelAtu := Val(AF2->AF2_NIVEL)
				EndIf

				aAdd(aNodes, {PMS_TASK,;
				              AF2->(Recno()),;
				IIf(Empty(AF2->AF2_ORDEM), "000", AF2->AF2_ORDEM),;
				              AF2->AF2_TAREFA})
			EndIf
		EndIf
		dbSelectArea("AF2")
		dbSkip()
	End

	dbSelectArea("AF5")
	dbSetOrder(2)
	MsSeek(xFilial()+cChave)
	While !Eof() .And. AF5->AF5_FILIAL+AF5->AF5_ORCAME+AF5->AF5_EDTPAI ==;
						cFilAF5+cChave
		lSeekFilho 	:= .T.
		If nNivelMax >= Val(AF5->AF5_NIVEL)
			aAdd(aNodes, {PMS_WBS,;
			              AF5->(Recno()),;
			IIf(Empty(AF5->AF5_ORDEM), "000", AF5->AF5_ORDEM),;
			              AF5->AF5_EDT})
		EndIf

		dbSelectArea("AF5")
		dbSkip()
	End

	aSort(aNodes, , , {|x, y| x[3]+x[4] < y[3]+y[4]})

	For nNode := 1 To Len(aNodes)

		If aNodes[nNode,1] == PMS_TASK
			// Tarefa
			AF2->(dbGoto(aNodes[nNode,2]))

			lFilho := .T.
			RecLock(cArquivo,.T.)
			For nx := 1 to Len(aAuxCps)
				If aAuxCps[nx,1]=="AF2_DESCRI"
			   		FieldPut(ColumnPos("X"+Substr(aAuxCps[nx,1],2,Len(aAuxCps[nx,1])-1)),SPACE((VAL(AF2->AF2_NIVEL)-1)*nIndent)+AF2->(FieldGet(ColumnPos(aAuxCps[nx,1]))))
				Else
					If Substr(aAuxCps[nx,1],1,1)=="$"
						FieldPut(ColumnPos(Substr(aAuxCps[nx,1],2,Len(aAuxCps[nx,1])-1)),&(Substr(aAuxCps[nx,1],2,Len(aAuxCps[nx,1])-1)+"(3,'AF2',AF2->(RecNo()))"))
					ElseIf Substr(aAuxCps[nx,1],1,1)=="%"
						aAdd(aProcForm,nx)
					Else
						If Substr(aAuxCps[nx,1],1,1)!="|"
							If AF2->(ColumnPos(aAuxCps[nx,1]))>0
								FieldPut(ColumnPos("X"+Substr(aAuxCps[nx,1],2,Len(aAuxCps[nx,1])-1)),AF2->(FieldGet(ColumnPos(aAuxCps[nx,1]))))
							EndIf
						Endif
					EndIf
				EndIf
			Next

			dbSelectArea(cArquivo)
			If lRecNo
				(cArquivo)->RECNO := AF2->(RecNo())
				(cArquivo)->ALIAS := "AF2"
			EndIf

			If !PMSPlnCalc(@aProcForm, @aAuxCps, cArquivo)
				Return
			EndIf

			MsUnlock()

		Else
			// EDT
			AF5->(dbGoto(aNodes[nNode,2]))

			lFilho := .T.
			PmsAddPOrc(AF5->AF5_ORCAME+AF5->AF5_EDT,cArquivo,@nNivelAtu,nNivelMax,lRecno,aExpand,nIndent)
		EndIf
	Next

	If lFilho .And. !Empty(aRecPai)
		RestArea(aRecPai)
		RecLock(cArquivo,.F.)
		(cArquivo)->CTRLNIV	:= "-"
		MsUnlock()
		If aExpand != Nil
			aAdd(aExpand,{(cArquivo)->ALIAS+(cArquivo)->XF2_TAREFA,.T.})
		EndIf
	EndIf
EndIf

If !lSeekFilho	.And. !Empty(aRecPai)
	RestArea(aRecPai)
	RecLock(cArquivo,.F.)
	(cArquivo)->CTRLNIV	:= " "
	MsUnlock()
EndIf

RestArea(aAreaAF5)
RestArea(aAreaAF2)
RestArea(aArea)
Return

Function PmsOrcBmp(cAlias,nRecNo)
Local oRet

// corrige o erro quando a linha do projeto esta
// selecionada e foi selecionada a impressao correcao temporaria

If AllTrim(cAlias)==""
	Return
EndIf

dbSelectArea(cAlias)
dbGoto(nRecNo)
If cAlias == "AF5"
	oRet := LoadBitmap( GetResources(), BMP_EDT4  )
ElseIf cAlias == "AF2"
	oRet := LoadBitmap( GetResources(), BMP_TASK3 )
ElseIf cAlias == "AF1"
	oRet := LoadBitmap( GetResources(), BMP_TABLE_PQ )
EndIf

Return oRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsWriteCN³ Autor ³ Armando P Waiteman    ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Programa de gravacao de apontamentos chamado pela rotina de   ³±±
±±³          ³gravacao de Remitos de Saida.                                 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpN1 : Evento - [1] - Inclusao de Nota Fiscal de Saida       ³±±
±±³          ³                 [2] - Estorno de Nota Fiscal de Saida        ³±±
±±³          ³                 [3] - Exclusao de Nota Fiscal de Saida       ³±±
±±³          ³ExpC2 : Alias da tabela de Itens da NF de Saida               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³MATA461                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsWriteCN(nEvento,cAliasSCN)

//Mantida por compatibilidade
Return


/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³AF9AtuCCN³ Autor ³ Armando P. Waiteman    ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Programa de gravacao de apontamentos chamado pela rotina de   ³±±
±±³          ³gravacao de Notas Fiscais de Saida.                           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpA1 : Array contendo os custos a serem gravados.            ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³SIGAPMS, MATA461                                              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function AF9AtuCCN(nOpcao,aCusto)
//Mantida por compatibilidade
Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsPlnExcel³ Autor ³ Edson Maricate       ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Exporta a planilha de trabalho para o Excel.                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³SIGAPMS                                                       ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsPlnExcel(aCampos, cUsrRev, nNivelMax, nPrjOrc, cPlanilha)
Local cDirDocs  := MsDocPath()
Local aStru2		:= {}
Local cPath		  := AllTrim(GetTempPath())
Local aAreaPlan	:= (cPlanilha)->(GetArea())
Local nX        := 0
Local xValue    := ""
Local cBuffer   := ""
Local oExcelApp := Nil
Local nHandle   := 0
Local cArquivo  := CriaTrab(,.F.)
Local aAuxRet   := {}
Local cTitle    := ""
Local cBarra := If(issrvunix(), "/", "\")
Local lArqLocal := ExistBlock("DIRDOCLOC")

	If !VerSenha(168)
    	Help(" ",1,"SEMPERM")
		Return
	Endif

	If !ApOleClient("MsExcel")
		MsgStop(STR0322)  //"Microsoft Excel nao instalado."
		Return
	EndIf

	For nx := 1 To Len(aStru) - 5
		aAdd(aStru2, aStru[nx])
	Next

	// gera o arquivo em formato .CSV
	cArquivo += ".csv"

	If lArqLocal
		nHandle := FCreate(cPath + cBarra + cArquivo)
	Else
		nHandle := FCreate(cDirDocs + cBarra + cArquivo)
	Endif

	If nHandle == -1
	 MsgStop(STR0323) //"A planilha não pode ser exportada."
	 Return
	EndIf

	For nx := 1 To Len(aCampos)
		If Substr(aCampos[nx,1], 1, 1) == "$"
			aAuxRet := &(Substr(aCampos[nx,1], 2, Len(aCampos[nx,1]) - 1) + "(2)")
			cTitle  := aAuxRet[1]
		Else
			If Substr(aCampos[nx,1], 1, 1) == "%"
				cTitle := Substr(aCampos[nx,1], 2, 12)
			Else
				dbSelectArea("SX3")
				dbSetOrder(2)

				If MsSeek(aCampos[nx,1])
					cTitle := Trim(x3titulo())
				Else
					If MsSeek(aCampos[nx,2])
						cTitle := Trim(x3titulo())
					EndIf
				EndIf
			EndIf
		EndIf

  	If nx < Len(aCampos)
			cBuffer += ToXlsFormat(cTitle) + ";"
		Else
			cBuffer += ToXlsFormat(cTitle)
		EndIf
	Next

	FWrite(nHandle, cBuffer)
	FWrite(nHandle, CRLF)

	dbSelectArea(cPlanilha)
	(cPlanilha)->(dbGotop())
	While !(cPlanilha)->(Eof())
		cBuffer := ""

		For nx := 1 To Len(aStru2)
			xValue := (cPlanilha)->(FieldGet(ColumnPos(aStru2[nx,1])))

			If nx < Len(aStru2)
				cBuffer += ToXlsFormat(xValue) + ";"
			Else
				cBuffer += ToXlsFormat(xValue)
			EndIf
		Next

		FWrite(nHandle, cBuffer)
		FWrite(nHandle, CRLF)

		(cPlanilha)->(dbSkip())
	End

	FClose(nHandle)

	// copia o arquivo do servidor para o remote
	If !lArqLocal
		CpyS2T(cDirDocs + cBarra + cArquivo, cPath, .T.)
	Endif

	oExcelApp := MsExcel():New()
	oExcelApp:WorkBooks:Open(cPath + cArquivo)
	oExcelApp:SetVisible(.T.)
	oExcelApp:Destroy()

	RestArea(aAreaPlan)
Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³PMSCHKEXC ºAutor  ³Microsiga           º Data ³  01/08/09   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³                                                            º±±
±±º          ³                                                            º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsChkExc(dData,cProjeto,cRecurso,cAlocDay)
// 30/11/2009: Criada a funcao PmsChkExc2 no PMSXFUNA com o mesmo conteudo da PmsChkExc
//             e efetuado o desvio para contornar o limite de tamanho de arquivo do compilador
//             ( 2^20 - 100 = 1.048.476 bytes ). Passado esse limite, ocorre erro de compilacao
Return PmsChkExc2(dData,cProjeto,cRecurso,cAlocDay)

Function ChkTam(cCampo,nValor)
Local lRet := .T.

If "*"$STR(nValor,TamSX3(cCampo)[1],TamSX3(cCampo)[2])
	lRet := .F.
EndIf

Return lRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³RepVar     ³ Autor ³ Adriano Ueda         ³ Data ³ 15-10-2002 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Substitue as variaveis contidas em uma formula pelo valor     ³±±
±±³          ³correspondente (variavel e valor definidos pelo usuario       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpA1 : String de destino                                     ³±±
±±³          ³ExpA2 : String de origem                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³-1    : Variavel nao encontrada                               ³±±
±±³          ³0     : Nenhuma variavel substituida                          ³±±
±±³          ³1..n  : Numero de variaveis substituidas                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Obs.     ³ Essa funcao faz uso da variavel private cCmpPln              ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/

Function RepVar(cDest, cOrig)
Local cBuffer := ""
Local nStart := 0, nEnd := 0
Local nx := 0, ny := 0
Local cVarName := ""
Local lFound := .F.
Local nVarNum := 0
Local nLenAntes := 0
Local nPosSep := 0
Local aVars := {}
Local xBuffer

// caso nao exista a variavel private cCmpPln,
// nenhuma variavel global e substituida
If Type("cCmpPln")=="U"
	cDest := cOrig
	Return nVarNum
Else
	cBuffer := cCmpPln
EndIf

// Monta array com variaveis globais (aVars) a partir de cCmpPln
// cCmpPln declarado em PMSC200()
While At("#",cBuffer) <> 0
	nPosSep := At("#",cBuffer)

	If Substr(AllTrim(Substr(cBuffer, 2, nPosSep-2)),1,1)=="|"
		aAdd(aVars,{,,,,,,})
		aVars[Len(aVars),1] := Substr(AllTrim(Substr(cBuffer, 2, nPosSep-2)),02,10)  // nome
		aVars[Len(aVars),2] := Substr(AllTrim(Substr(cBuffer, 2, nPosSep-2)),13,25)  // titulo
		aVars[Len(aVars),3] := Substr(AllTrim(Substr(cBuffer, 2, nPosSep-2)),39,30)  // valor
		aVars[Len(aVars),4] := Substr(AllTrim(Substr(cBuffer, 2, nPosSep-2)),70,01)  // tipo
		aVars[Len(aVars),5] := Val(Substr(AllTrim(Substr(cBuffer, 2, nPosSep-2)),72,02))  // tamanhho
		aVars[Len(aVars),6] := Val(Substr(AllTrim(Substr(cBuffer, 2, nPosSep-2)),75,01))  // decimal
		aVars[Len(aVars),7] := Substr(AllTrim(Substr(cBuffer, 2, nPosSep-2)),77,61)	 // picture
	EndIf
	cBuffer := Substr(cBuffer,nPosSep+1,Len(cBuffer)-nPosSep)
End

cBuffer := cOrig

nx := 1

While nx <= Len(cBuffer)
	If Substr(cBuffer, nx, 1)=="<"
		nStart := nx
	EndIf

	If Substr(cBuffer, nx, 1)==">"
		If nStart <> 0
			nEnd := nx
			cVarName := Substr(cBuffer, nStart+1, nEnd - nStart -1)
			lFound := .F.

			For ny := 1 To Len(aVars)
				// se encontrou a variavel
				If Upper(AllTrim(aVars[ny,1]))==Upper(cVarName)
					nLenAntes = Len(cBuffer)
					Do Case
						Case aVars[ny,4]=="N"
							cBuffer := Stuff(Stuff(cBuffer, nStart, nEnd - nStart + 1, ""), nStart, 0, "(" + AllTrim(aVars[ny,3]) + ")")
						Case aVars[ny,4]=="D"
							cBuffer := Stuff(Stuff(cBuffer, nStart, nEnd - nStart + 1, ""), nStart, 0, "CToD("+Chr(34)+AllTrim(aVars[ny,3])+Chr(34)+")")
						Case aVars[ny,4]=="C"
							xBuffer := &(AllTrim(aVars[ny,3]))

							Do Case
								Case ValType(xBuffer)=="C"
									// nada
								Case ValType(xBuffer)=="D"
									xBuffer := DToC(xBuffer)

								Case ValType(xBuffer)=="N"
									xBuffer := "(" + Str(xBuffer) + ")"
							EndCase


							cBuffer := Stuff(Stuff(cBuffer, nStart, nEnd - nStart + 1, ""), nStart, 0, Chr(34) + xBuffer + Chr(34))

					EndCase
					nx+=(Len(cBuffer)-nLenAntes)
					nVarNum++
					lFound := .T.
					Exit
				EndIf
			Next

			If !lFound
				cDest := cOrig
				Return -1
			Endif

			nEnd := 0
			nStart := 0
		EndIf
	EndIf
	nx++
End

	cDest = cBuffer
Return nVarNum

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³SenhaBox³ Autor ³ Adriano Ueda            ³ Data ³ 28-10-2002 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Parambox modificada para exibir astericos no get              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpA1 : Array contendo os parametros                          ³±±
±±³          ³        [1] Tipo do parametro -                               ³±±
±±³          ³         1 - MsGet                                            ³±±
±±³          ³           [2] : Descricao                                    ³±±
±±³          ³           [3] : String contendo o inicializador do campo     ³±±
±±³          ³           [4] : String contendo a Picture do campo           ³±±
±±³          ³           [5] : String contendo a validacao                  ³±±
±±³          ³           [6] : Consulta F3                                  ³±±
±±³          ³           [7] : String contendo a validacao When             ³±±
±±³          ³           [8] : Tamanho do MsGet                             ³±±
±±³          ³           [9] : Flag .T./.F. Parametro Obrigatorio ?         ³±±
±±³          ³         2 - Combo                                            ³±±
±±³          ³           [2] : Descricao                                    ³±±
±±³          ³           [3] : Numerico contendo a opcao inicial do combo   ³±±
±±³          ³           [4] : Array contendo as opcoes do Combo            ³±±
±±³          ³           [5] : Tamanho do Combo                             ³±±
±±³          ³           [6] : Validacao                                    ³±±
±±³          ³           [7] : Flag .T./.F. Parametro Obrigatorio ?         ³±±
±±³          ³         3 - Radio                                            ³±±
±±³          ³           [2] : Descricao                                    ³±±
±±³          ³           [3] : Numerico contendo a opcao inicial do Radio   ³±±
±±³          ³           [4] : Array contendo as opcoes do Radio            ³±±
±±³          ³           [5] : Tamanho do Radio                             ³±±
±±³          ³           [6] : Validacao                                    ³±±
±±³          ³           [7] : Flag .T./.F. Parametro Obrigatorio ?         ³±±
±±³          ³         4 - CheckBox ( Com Say )                             ³±±
±±³          ³           [2] : Descricao                                    ³±±
±±³          ³           [3] : Indicador Logico contendo o inicial do Check ³±±
±±³          ³           [4] : Texto do CheckBox                            ³±±
±±³          ³           [5] : Tamanho do Radio                             ³±±
±±³          ³           [6] : Validacao                                    ³±±
±±³          ³           [7] : Flag .T./.F. Parametro Obrigatorio ?         ³±±
±±³          ³         5 - CheckBox ( linha inteira )                       ³±±
±±³          ³           [2] : Descricao                                    ³±±
±±³          ³           [3] : Indicador Logico contendo o inicial do Check ³±±
±±³          ³           [4] : Tamanho do Radio                             ³±±
±±³          ³           [5] : Validacao                                    ³±±
±±³          ³           [6] : Flag .T./.F. Parametro Obrigatorio ?         ³±±
±±³          ³         6 - File                                             ³±±
±±³          ³           [2] : Descricao                                    ³±±
±±³          ³           [3] : String contendo o inicializador do campo     ³±±
±±³          ³           [4] : String contendo a Picture do campo           ³±±
±±³          ³           [5] : String contendo a validacao                  ³±±
±±³          ³           [6] : String contendo a validacao When             ³±±
±±³          ³           [7] : Tamanho do MsGet                             ³±±
±±³          ³           [8] : Flag .T./.F. Parametro Obrigatorio ?         ³±±
±±³          ³           [9] : Texto contendo os tipos de arquivo           ³±±
±±³          ³                 Ex.: "Arquivos .CSV |*.CSV"                  ³±±
±±³          ³ExpC2  : Titulo da Janela                                     ³±±
±±³          ³ExpA3  : Array passado por referencia que contem o retorno    ³±±
±±³          ³         dos parametros.                                      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function SenhaBox(aParametros,cTitle,aRet,bOk,aButtons,lCentered,nPosx,nPosy)

Local nx
Local oDlg
Local oPanel
Local cTextSay
Local lOk			:= .F.
Local nLinha		:= 8
DEFAULT bOk			:= {|| (.T.)}
DEFAULT aButtons	:= {}
DEFAULT lCentered	:= .T.
DEFAULT nPosX		:= 0
DEFAULT nPosY		:= 0

DEFINE MSDIALOG oDlg TITLE cTitle FROM nPosX,nPosY TO nPosX+274,nPosY+445 OF oMainWnd Pixel

oPanel := TScrollBox():New( oDlg, 8,10,104,203)

For nx := 1 to Len(aParametros)
	Do Case
		Case aParametros[nx,1]==1 // SAY + GET
			SetPrvt("MV_PAR"+AllTrim(STRZERO(nx,2,0)))
			&("MV_PAR"+AllTrim(STRZERO(nx,2,0))) := aParametros[nx,3]
                        cTextSay:= "{||'"+STRTRAN(aParametros[nx,2],"'",'"')+" ? "+"'}"
			TSay():New( nLinha, 15 , MontaBlock(cTextSay) , oPanel , ,,,,,.T.,If(aParametros[nx,9],CLR_HBLUE,CLR_BLACK),,,,,,,,)
			cWhen	:= Iif(Empty(aParametros[nx,7]),".T.",aParametros[nx,7])
			cValid	:=Iif(Empty(aParametros[nx,5]),".T.",aParametros[nx,5])
			cF3		:=Iif(Empty(aParametros[nx,6]),NIL,aParametros[nx,6])
			cBlkGet := "{ | u | If( PCount() == 0, "+"MV_PAR"+AllTrim(STRZERO(nx,2,0))+","+"MV_PAR"+AllTrim(STRZERO(nx,2,0))+":= u ) }"
			cBlKVld := "{|| "+cValid+"}"
			cBlKWhen := "{|| "+cWhen+"}"
			TGet():New( nLinha,75 ,&cBlKGet,oPanel,aParametros[nx,8],,aParametros[nx,4], &(cBlkVld),,,, .T.,, .T.,, .T., &(cBlkWhen), .F., .F.,, .F., .T. ,cF3)
		Case aParametros[nx,1]==2 // SAY + COMBO
			SetPrvt("MV_PAR"+AllTrim(STRZERO(nx,2,0)))
			&("MV_PAR"+AllTrim(STRZERO(nx,2,0))) := aParametros[nx,3]
                        cTextSay:= "{||'"+STRTRAN(aParametros[nx,2],"'",'"')+" ? "+"'}"
			TSay():New( nLinha, 15 , MontaBlock(cTextSay) , oPanel , ,,,,,.T.,If(aParametros[nx,7],CLR_HBLUE,CLR_BLACK),,,,,,,,)
			cValid	:=Iif(Empty(aParametros[nx,6]),".T.",aParametros[nx,6])
			cBlKVld := "{|| "+cValid+"}"
			cBlkGet := "{ | u | If( PCount() == 0, "+"MV_PAR"+AllTrim(STRZERO(nx,2,0))+","+"MV_PAR"+AllTrim(STRZERO(nx,2,0))+":= u ) }"
			TComboBox():New( nLinha,75, &cBlkGet,aParametros[nx,4], aParametros[nx,5], 10, oPanel, ,,       ,,,.T.,,,.F.,,.T.,,)
		Case aParametros[nx,1]==3 // SAY + RADIO
			nLinha += 10
			SetPrvt("MV_PAR"+AllTrim(STRZERO(nx,2,0)))
			&("MV_PAR"+AllTrim(STRZERO(nx,2,0))) := aParametros[nx,3]
			cTextSay:= "{||'"+aParametros[nx,2]+" ? "+"'}"
			TGroup():New( nLinha-8,15, nLinha+(Len(aParametros[nx,4])*9)+7,170,aParametros[nx,2]+ " ? ",oPanel,If(aParametros[nx,7],CLR_HBLUE,CLR_BLACK),,.T.)
			cBlkGet := "{ | u | If( PCount() == 0, "+"MV_PAR"+AllTrim(STRZERO(nx,2,0))+","+"MV_PAR"+AllTrim(STRZERO(nx,2,0))+":= u ) }"
			TRadMenu():New( nLinha, 30, aParametros[nx,4],&cBlkGet, oPanel,,,,,,,,aParametros[nx,5],9, ,,,.T.)
			nLinha += (Len(aParametros[nx,4])*10)-5
		Case aParametros[nx,1]==4 // SAY + CheckBox
			SetPrvt("MV_PAR"+AllTrim(STRZERO(nx,2,0)))
			&("MV_PAR"+AllTrim(STRZERO(nx,2,0))) := aParametros[nx,3]
                        cTextSay:= "{||'"+aParametros[nx,2]+"  "+"'}"
			cBlkGet := "{ | u | If( PCount() == 0, "+"MV_PAR"+AllTrim(STRZERO(nx,2,0))+","+"MV_PAR"+AllTrim(STRZERO(nx,2,0))+":= u ) }"
			TSay():New( nLinha, 15 , MontaBlock(cTextSay) , oPanel , ,,,,,.T.,If(aParametros[nx,7],CLR_HBLUE,CLR_BLACK),,,,,,,,)
			TCheckBox():New(nLinha,75,aParametros[nx,4], &cBlkGet,oPanel, aParametros[nx,5],10,,,,,,,,.T.)
		Case aParametros[nx,1]==5 // CheckBox Linha Inteira
			SetPrvt("MV_PAR"+AllTrim(STRZERO(nx,2,0)))
			&("MV_PAR"+AllTrim(STRZERO(nx,2,0))) := aParametros[nx,3]
			cBlkGet := "{ | u | If( PCount() == 0, "+"MV_PAR"+AllTrim(STRZERO(nx,2,0))+","+"MV_PAR"+AllTrim(STRZERO(nx,2,0))+":= u ) }"
			TCheckBox():New(nLinha,15,aParametros[nx,2], &cBlkGet,oPanel, aParametros[nx,4],10,,,,,,,,.T.)
		Case aParametros[nx,1]==6 // File + Procura de Arquivo
			SetPrvt("MV_PAR"+AllTrim(STRZERO(nx,2,0)))
			&("MV_PAR"+AllTrim(STRZERO(nx,2,0))) := aParametros[nx,3]
                        cTextSay:= "{||'"+STRTRAN(aParametros[nx,2],"'",'"')+" ? "+"'}"
			TSay():New( nLinha, 15 , MontaBlock(cTextSay) , oPanel , ,,,,,.T.,If(aParametros[nx,8],CLR_HBLUE,CLR_BLACK),,,,,,,,)
			cWhen	:= Iif(Empty(aParametros[nx,6]),".T.",aParametros[nx,7])
			cValid	:=Iif(Empty(aParametros[nx,5]),".T.",aParametros[nx,5])
			cBlkGet := "{ | u | If( PCount() == 0, "+"MV_PAR"+AllTrim(STRZERO(nx,2,0))+","+"MV_PAR"+AllTrim(STRZERO(nx,2,0))+":= u ) }"
			cBlKVld := "{|| "+cValid+"}"
			cBlKWhen := "{|| "+cWhen+"}"
			cGetfile := "MV_PAR"+AllTrim(STRZERO(nx,2,0))
			cArquivos := aParametros[nx,9]
			TGet():New( nLinha,75 ,&cBlKGet,oPanel,aParametros[nx,7],,aParametros[nx,4], &(cBlkVld),,,, .T.,, .T.,, .T., &(cBlkWhen), .F., .F.,, .F., .F. ,)
			@ nLinha-2,75+aParametros[nx,7] BUTTON STR0175 SIZE 29 ,15   FONT oDlg:oFont ACTION  {||&cGetFile := cGetFile(cArquivos,; //"Procurar"
				STR0176,0,"",.T.,GETF_LOCALHARD+GETF_LOCALFLOPPY)  } OF oPanel PIXEL   //"Selecione o Arquivo"
	EndCase
	nLinha += 17
Next

For nx := 1 to Len(aButtons)
	SButton():New( 118, 147-(nx*33), aButtons[nx,1],aButtons[nx,2],oDlg,.T.,IIf(Len(aButtons[nx])==3,aButtons[nx,3],Nil),)
Next

DEFINE SBUTTON FROM 118, 147   TYPE 1 ENABLE OF oDlg ACTION (If(ParamOk(aParametros,@aRet).And.Eval(bOk),(oDlg:End(),lOk:=.T.),(lOk:=.F.)))
DEFINE SBUTTON FROM 118, 180   TYPE 2 ENABLE OF oDlg ACTION (lOk:=.F.,oDlg:End())

If lCentered
	ACTIVATE MSDIALOG oDlg CENTERED
Else
	ACTIVATE MSDIALOG oDlg
EndIf

Return lOk

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ RetNulos  ³ Autor ³ Adriano Ueda         ³ Data ³ 31-10-2002 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Retira caracteres nulos contidos em strings                  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ ExpC1 : String a ser processada                              ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±			
±±³Obs.      ³ Corrige problemas com string contendo nulos                  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function RetNulos(cStr)
Local cBuffer := ""
Local nx := 0

For nx := 1 To Len(cStr)
	If Substr(cStr,nx,1)==Chr(0)
		cBuffer += Chr(32)
	Else
		cBuffer += Substr(cStr, nx, 1)
	EndIf
Next
Return cBuffer

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ MaViewSH7 ³ Autor ³ Edson Maricate       ³ Data ³ 26-11-2002 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Funcao de visualizacao do calendario posicionado             ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Generico                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/

Function MaViewSH7()
SaveInter()

MATA780(2)

RestInter()
Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ PmsAtuDT  ³ Autor ³ Edson Maricate       ³ Data ³ 05-08-2003 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Funcao de atualizacao das datas reais da tarefa/EDT          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³ Generico                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PmsAtuDT(cProjeto,cTarefa,dDataI,dDataF,cAlias,cHoraI,cHoraF)
Local aArea		:= GetArea()
Local aAreaAF9	:= AF9->(GetArea())
Local aAreaAFC	:= AFC->(GetArea())
Local lField    := .F.
Local lTopConn	:= IIf(Type("__lTopConn") == "L",__lTopConn,IfDefTopCTB())
Local cRevisa	:= PMSAF8Ver(cProjeto)
Local cAliasQry	:= ""
Local cSQLAFC	:= ""
Local cSQLAF9	:= ""
Local cFilAF9	:= xFilial("AF9")
Local cFilAFC	:= xFilial("AFC")

If cAlias == "AF9"

	lField := AF9->(ColumnPos("AF9_HRATUI"))>0
	cSQLAF9	:= RetSqlNamE("AF9")

	aAreaAF9	:= AF9->(GetArea())
	If lTopConn

		cAliasQry := GetNextAlias()
		cQuery := " SELECT R_E_C_N_O_ RECNO_ FROM "+cSQLAF9
		cQuery += " WHERE AF9_FILIAL = '"+cFilAF9+"' "
		cQuery += " AND AF9_PROJET = '"+cProjeto+"' "
		cQuery += " AND AF9_REVISA = '"+cRevisa+"' "
		cQuery += " AND AF9_TAREFA = '"+cTarefa+"' "
		cQuery += " AND D_E_L_E_T_ = ' ' "
		cQuery += " AND ( "
		cQuery += " (AF9_DTATUI <> '"+DtoS(dDataI)+"' OR AF9_DTATUF <> '"+DtoS(dDataF)+"' ) "
		If lField
			cQuery += " OR "
			cQuery += " (AF9_HRATUI <> '"+cHoraI+"' OR AF9_HRATUF <> '"+cHoraF+"')"
			cQuery += " ) "
		Else
			cQuery += " ) "
		Endif
		dbUseArea(.T., "TOPCONN", TcGenQry(,,cQuery), cAliasQry , .T. , .T. )
		While (cAliasQry)->(!Eof())

			AF9->(DbGoTo((cAliasQry)->RECNO_))

			RecLock("AF9",.F.)
			AF9->AF9_DTATUI	:= dDataI
			AF9->AF9_DTATUF	:= dDataF
			If lField
				AF9->AF9_HRATUI	:= IIf(Empty(cHoraI),"00:00",cHoraI)
				AF9->AF9_HRATUF	:= IIf(Empty(cHoraF),"24:00",cHoraF)
			EndIf
			MsUnLock()
			(cAliasQry)->(dbSkip())

		EndDo
		(cAliasQry)->(dbCloseArea())

	Else

		dbSelectArea("AF9")
		dbSetOrder(5)
		dbSeek(cFilAF9+cProjeto+cTarefa)
		While !Eof() .And. cFilAF9+cProjeto+cTarefa==AF9_FILIAL+AF9_PROJET+AF9_TAREFA
		    // Se houve alteracao nas datas e/ou horas de realizacao, atualiza o registro
			If (AF9->AF9_DTATUI<>dDataI .OR. AF9->AF9_DTATUF<>dDataF) .OR. ;
			   (lField .AND. (AF9->AF9_HRATUI<>cHoraI .OR. AF9->AF9_HRATUF<>cHoraF))

				RecLock("AF9",.F.)
				AF9->AF9_DTATUI	:= dDataI
				AF9->AF9_DTATUF	:= dDataF
				If lField
					AF9->AF9_HRATUI	:= IIf(Empty(cHoraI),"00:00",cHoraI)
					AF9->AF9_HRATUF	:= IIf(Empty(cHoraF),"24:00",cHoraF)
				EndIf
				MsUnLock()

			EndIf
			AF9->( dbSkip() )
		EndDo
	Endif
	RestArea(aAreaAF9)

ElseIf cAlias == "AFC"

	lField := AFC->(ColumnPos("AFC_HRATUI"))>0
	cSQLAFC	:= RetSqlNamE("AFC")
	aAreaAFC	:= AFC->(GetArea())

	If lTopConn

		cAliasQry := GetNextAlias()
		cQuery := " SELECT R_E_C_N_O_ RECNO_ FROM "+cSQLAFC
		cQuery += " WHERE AFC_FILIAL = '"+cFilAFC+"' "
		cQuery += " AND AFC_PROJET = '"+cProjeto+"' "
		cQuery += " AND AFC_REVISA = '"+cRevisa+"' "
		cQuery += " AND AFC_EDT = '"+cTarefa+"' "
		cQuery += " AND D_E_L_E_T_ = ' ' "
		cQuery += " AND ( "
		cQuery += " (AFC_DTATUI <> '"+DtoS(dDataI)+"' OR AFC_DTATUF <> '"+DtoS(dDataF)+"' ) "
		If lField
			cQuery += " OR "
			cQuery += " (AFC_HRATUI <> '"+cHoraI+"' OR AFC_HRATUF <> '"+cHoraF+"')"
			cQuery += " ) "
		Else
			cQuery += " ) "
		Endif
		dbUseArea(.T., "TOPCONN", TcGenQry(,,cQuery), cAliasQry , .T. , .T. )

		(cAliasQry)->(dbGoTop())
		While (cAliasQry)->(!Eof())

			AFC->(DbGoTo((cAliasQry)->RECNO_))

			RecLock("AFC",.F.)
			AFC->AFC_DTATUI	:= dDataI
			AFC->AFC_DTATUF	:= dDataF
			If lField
				AFC->AFC_HRATUI	:= IIf(Empty(cHoraI),"00:00",cHoraI)
				AFC->AFC_HRATUF	:= IIf(Empty(cHoraF),"24:00",cHoraF)
			EndIf
			MsUnLock()
			(cAliasQry)->(dbSkip())

		EndDo
		(cAliasQry)->(dbCloseArea())

	Else

		dbSelectArea("AFC")
		dbSetOrder(4)
		dbSeek(cFilAFC+cProjeto+cTarefa)
		While !Eof() .And. cFilAFC+cProjeto+cTarefa==AFC_FILIAL+AFC_PROJET+AFC_EDT
		    // Se houve alteracao nas datas e/ou horas de realizacao, atualiza o registro
			If (AFC->AFC_DTATUI<>dDataI .OR. AFC->AFC_DTATUF<>dDataF) .OR. ;
			   (lField .AND. (AFC->AFC_HRATUI<>cHoraI .OR. AFC->AFC_HRATUF<>cHoraF))

				RecLock("AFC",.F.)
				AFC->AFC_DTATUI	:= dDataI
				AFC->AFC_DTATUF	:= dDataF
				If lField
					AFC->AFC_HRATUI	:= IIf(Empty(cHoraI),"00:00",cHoraI)
					AFC->AFC_HRATUF	:= IIf(Empty(cHoraF),"24:00",cHoraF)
				EndIf
				MsUnLock()

			EndIf
			AFC->( dbSkip() )
		EndDo

	EndIf
EndIf

RestArea(aAreaAFC)
RestArea(aArea)
Return


Function PmsPlnField(aCampos)

ProcRegua(11)

IncProc(STR0291) //"Calculando COTP..."
C200COTP(4,,,aCampos)
IncProc(STR0292) //"Calculando COTE..."
C200COTE(4,,,aCampos)
IncProc(STR0293) //"Calculando CRTE..."
C200CRTE(4,,,aCampos)
IncProc(STR0294) //"Calculando Custo Total Previsto..."
C200CP(4,,,aCampos)
IncProc(STR0295) //"Calculando Custo Total Realizado..."
C200CR(4,,,aCampos)
IncProc(STR0296) //"Calculando Quantidade Realizada..."
C200QR(4,,,aCampos)
IncProc(STR0297) //"Calculando Planilha financeira..."
C200VLPC(4,,,aCampos)
IncProc(STR0298) //"Calculando o caminho critico"
C200DIMC(4,,,aCampos) // Calculando Data Mais Cedo/Tarde
IncProc(STR0299) //"Calculando valores faturados"
C200VLFAT(4,,,aCampos) // Calculando Data Mais Cedo/Tarde
IncProc(STR0370)//"Calculando o Vlr.Empenhado OP"
C200CEMPOP(4,,,aCampos)
IncProc(STR0300) //"Carregando a Planilha..."


Return
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÉÍÍÍÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÑÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºPrograma  ³ConvCarEspºAutor  ³Paulo Carnelossi    º Data ³  07/10/03   º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÊÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºDesc.     ³Converte texto com caracteres especiais (acentos, etc)      º±±
±±º          ³retornando texto ja convertido                              º±±
±±º          ³ConvCarEsp(cTexto, lUpper)  onde lUpper = .T. RETORNA ASSIM º±±
±±ÌÍÍÍÍÍÍÍÍÍÍØÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¹±±
±±ºUso       ³ AP                                                         º±±
±±ÈÍÍÍÍÍÍÍÍÍÍÏÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ¼±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function ConvCarEsp(cTexto, lUpper)
Static aCarEsp := ;
{ {131, "ƒ", "a", "A"},;
{130, "‚", "e", "E"},;
{144, chr(65533), "e", "E"},;
{150, "–", "u", "U"},;
{132, "„", "a", "A"},;
{142, "Ž", "a", "A"},;
{140, "Œ", "i", "I"},;
{129, chr(65533), "u", "U"},;
{154, "š", "u", "U"},;
{133, "…", "a", "A"},;
{139, "‹", "i", "I"},;
{151, "—", "u", "U"},;
{147, "“", "o", "O"},;
{163, "£", "u", "U"},;
{134, "†", "a", "A"},;
{143, chr(65533), "a", "A"},;
{148, "”", "o", "O"},;
{153, "™", "o", "O"},;
{149, "•", "o", "O"},;
{135, "‡", "c", "C"},;
{128, "€", "c", "C"},;
{162, "¢", "o", "O"},;
{136, "ˆ", "e", "E"},;
{137, "‰", "e", "E"},;
{138, "Š", "e", "E"},;
{141, chr(65533), "i", "I"},;
{160, " ", "a", "a"},;
{161, "¡", "i", "I"} }
Static aCarInv := {;
{164, "nh", "NH"},;
{165, "nh", "NH"},;
{198, "a", "A"},;
{166, "a.", "a."},;
{167, "o.", "o."}}
Local nX

For nX := 1 TO Len(aCarEsp)
   If At(aCarEsp[nx,2], cTexto) > 0
   	cTexto := StrTran(cTexto, aCarEsp[nx,2], aCarEsp[nx,If(lUpper, 4, 3)])
   EndIf
Next

If lUpper
   cTexto := Upper(cTexto)
EndIf

For nX := 1 TO Len(aCarInv)
   If At(Chr(aCarInv[nx,1]), cTexto) > 0
   	cTexto := StrTran(cTexto, Chr(aCarInv[nx,1]), aCarInv[nx,If(lUpper, 3, 2)])
   EndIf
Next

Return(cTexto)

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsChkAJC³ Autor ³ Edson Maricate         ³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Verifica a existencia do arquivo AFU criado no SX3.           ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso      ³Generico                                                      ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsChkAJC(lAviso)
Local lRet := .F.
Local aArea	:= GetArea()

dbSelectArea("SX2")
dbSetOrder(1)
If MsSeek("AJC")
	lRet := .T.
Else
	If lAviso
		Aviso(STR0143,STR0225, {STR0006},2) // "Opcao nao disponivel nesta versao. Verifique a existecia do arquivio AJC no SX atual."
	EndIf
EndIf

RestArea(aArea)
Return lRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ PmsDlgRedistRec ³ Autor ³ Reynaldo T. Miyashita ³ Data ³ 25.09.2003 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Monta de tela de parametros para pesquisa de tarefas superalocadas  ³±±
±±³          ³ para os recursos                                                    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ cProjeto  : Codigo do projeto									   ³±±
±±³			 ³ cVersao   : no. da ultima versao									   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³                                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PmsDlgRedistRec( cProjeto ,cVersao )
Local aParam		:= {}
Local aOpcOrdem		:= {STR0234 ,STR0235}
Local aArea			:=	GetArea()
Local aAreaAF8		:=	AF8->(GetArea())
Local nTamRecurs	:= TamSX3( "AE8_RECURS" )[1]
Local nTamEquipe	:= TamSX3( "AE8_EQUIP" )[1]
Local aAux
Local nX

DEFAULT cProjeto	:= AF8->AF8_PROJET
DEFAULT cVersao		:= cRevisa
PRIVATE oProcess

If ExistBlock("PMSRDORD")
	aAux:=ExecBlock("PMSRDORD",.F.,.F.)
	If valtype(aAux)=='A'
		For nX:=1 to len(aAux)
			If valtype(aAux[nX])=='C'
				AADD(aOpcOrdem,aAux[nX])
			Else
				AADD(aOpcOrdem,' ')
			EndIf
		Next nX
	EndIf
EndIf

// parametros para a redistribuicao
If ParamBox( { { 1 ,STR0228 ,AF8->AF8_START					,"@!" 	 ,""  ,""    ,"" ,50 ,.F. } ; //"Data de"
			  ,{ 1 ,STR0229	,AF8->AF8_FINISH				,"@!" 	 ,""  ,""    ,"" ,50 ,.F. };  //"Data ate"
			  ,{ 1 ,STR0230	,Space( nTamRecurs )			,"@!" 	 ,""  ,"AE8" ,"" ,65 ,.F. };  //"Recurso de"
			  ,{ 1 ,STR0231	,Replicate( "Z", nTamRecurs )	,"@!" 	 ,""  ,"AE8" ,"" ,65 ,.F. };  //"Recurso ate"
			  ,{ 2 ,STR0232	,1								,aOpcOrdem ,120 ,""    ,.F.         };  //"Ordem por "
			  ,{ 1 ,STR0357,Space(nTamEquipe)				,"@!" 	 ,""  ,"AED" ,"" ,65 ,.F. };   // "Equipe de "
			  ,{ 1 ,STR0358,Replicate("Z",nTamEquipe) 		,"@!" 	 ,""  ,"AED" ,"" ,65 ,.F. };//"Equipe Ate"
           ,{5,STR0359 , .T., 160,,.F.}; // "Fixar datas previstas das tarefas em execução"
           	 }            ;
			,STR0233	  ;
			,@aParam )

	// se foi informado o periodo de pesquisa
	If ! (empty(aParam[1]) .AND. empty(aParam[2]))
		//
		// processa as informacoes fornecidas
		//
		oProcess:=	MsNewProcess():New({|| AuxRedistRec( aParam ,cProjeto ,cVersao )})
		oProcess:Activate()

		RestArea(aAreaAF8)
		RestArea(aArea)
	EndIf
EndIf

PMS200Rev()
Return( NIL )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ AuxRedistRec ³ Autor ³ Reynaldo T. Miyashita ³ Data ³ 25.09.2003    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Obtem e/ou verifica os recursos referentes ao projeto               ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ aParam    : Array contendo os parametros informados				   ³±±
±±³			 ³			   [1] - Data de Inicio									   ³±±
±±³			 ³			   [2] - Data de Fim									   ³±±
±±³			 ³			   [3] - Recurso Inicial								   ³±±
±±³			 ³			   [4] - Recurso Final									   ³±±
±±³			 ³			   [5] - Ordem de Redistribuicao						   ³±±
±±³			 ³ cProjeto  : Codigo do projeto									   ³±±
±±³			 ³ cVersao   : no. da ultima versao									   ³±±
±±³			 ³ lHelp     : Indica se deve avisar quando nao achou superalocacao    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³                                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function AuxRedistRec( aParam ,cProjeto ,cVersao,lHelp,aRecAval,aDadosSim )
Local aArea			:= GetArea()
Local aRecursos		:= {}
Local aAloc         := {}
Local lSuperAlocado := .F.
Local aAllTask      := {}
Local lPermiss		:= .F.
Local lSimula		:= ( aDadosSim <> Nil )
Local cFilAFA		:= xFilial("AFA")

DEFAULT lHelp		:=	.T.

DEFAULT cProjeto	:= AF8->AF8_PROJET
DEFAULT cVersao		:= AF8->AF8_REVISA

If !AF8ComAJT(AF8->AF8_PROJET)

	oProcess:SetRegua1(7)
	oProcess:IncRegua1(STR0301)  //"Verificando alocação dos recursos..."

	oProcess:IncRegua1(STR0301)  //"Verificando alocação dos recursos..."
	oProcess:SetRegua2(2)
	oProcess:IncRegua2()

	dbSelectArea("AFA")
	dbSetOrder(1)
	MsSeek(xFilial()+cProjeto+cVersao)

	While !Eof() .And. AFA->AFA_FILIAL+AFA->AFA_PROJET+AFA->AFA_REVISA==cFilAFA+cProjeto+cVersao
		If !Empty(AFA->AFA_RECURS) .And. ;
			( (aRecAval==Nil .And. AFA->AFA_RECURS >= aParam[3]  .AND.  AFA->AFA_RECURS <= aParam[4]  ) .Or.;
			 aScan(aRecAval , AFA->AFA_RECURS ) > 0)  .And. aScan(aRecursos , AFA->AFA_RECURS ) <=0

			AE8->(dbSetOrder(1))
			If AE8->(MsSeek(xFilial()+AFA->AFA_RECURS)) .And. ( aRecAval<>Nil .Or.( AE8->AE8_EQUIP >= aParam[6]  .AND.  AE8->AE8_EQUIP <= aParam[7]  ) )

				AF9->(dbSetOrder(1))
				AF9->(MsSeek(xFilial()+AFA->AFA_PROJET+AFA->AFA_REVISA+AFA->AFA_TAREFA))
				If PmsChkUser( AF9->AF9_PROJET ,AF9->AF9_TAREFA , ,AF9->AF9_EDTPAI ,2 ,"ESTRUT" ,AF9->AF9_REVISA )
					lPermiss := .T.

					// Gera o periodo da utilizacao do recurso e seu percentual somente tarefas a executar
					aAloc := PmsRetAloc( AFA->AFA_RECURS ,aParam[1] ,"00:00" ,aParam[2] ,"24:00" ,3 ,cProjeto,cVersao,,,aDadosSim )

					// Eh um recurso super-alocado
					If aScan( aAloc ,{|aPeriodo| aPeriodo[3] > AE8->AE8_UMAX}) > 0
						lSuperAlocado := .T.
					EndIf

					// obtem os recursos no intervalo informados
					aAdd(aRecursos ,AFA->AFA_RECURS )

				EndIf

			EndIf
		EndIf

		dbSelectArea("AFA")
		dbSkip()
	End

	oProcess:IncRegua2()
	restArea(aArea)

	If ! Empty(aRecursos) .AND. lSuperAlocado
		oProcess:IncRegua1(STR0302)	// "Carregando tarefas superalocadas..."
		// carrega todas as tarefas referentes ao periodo e recursos.
		oProcess:SetRegua2(2)
		oProcess:IncRegua2()
		aAllTask  := CargaTarRec( { aParam[1] ,aParam[2] } ,aRecursos ,cProjeto ,cVersao,aDadosSim ,aParam[8])
		oProcess:IncRegua2()

		oProcess:IncRegua1(STR0303)	 //"Calculando redistribuicao..."
		// executa a distribuicao dos recursos
		DistRecurso( aParam ,aAllTask,lHelp,lSimula )

	ElseIf lHelp
		//
		// Nao existe recursos para o projeto selecionado
		//
		If Empty(aRecursos)
			Aviso( STR0143 ,STR0368 ,{STR0006} ,2 ) //"Atencao"##"Nao existe superalocacao para os parametros solicitados."###"Fechar"
		Else
			If lPermiss
				Aviso( STR0143 ,STR0368 ,{STR0006} ,2 ) //"Atencao"###"Nao existe superalocacao para os parametros solicitados."###"Fechar"
			Else
				Aviso( STR0324,STR0369,{STR0006} ,2 )//"Usuário sem permissão" ### "O seu usuário não possui direitos de alteração para nenhuma tarefa da estrutura deste projeto. Verifique os direitos do usuário na estrutura do projeto."###"Fechar"
			EndIf
		Endif
	EndIf

Else

	aAloc := PmsRetAlCU(aParam,cProjeto,cVersao)
	PmsAppAlCu(aAloc)

EndIf

Return( NIL )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ CargaTarRec ³ Autor ³ Reynaldo T. Miyashita ³ Data ³ 25.09.2003     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ carrega as informacoes das tarefas e seus respectivos recursos      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ aPeriodo  : Array contendo os parametros de intervalo de datas      ³±±
±±³			 ³			   [1] - Data de Inicio									   ³±±
±±³			 ³			   [2] - Data de Fim Inicio								   ³±±
±±³			 ³ aRecursos : Array contendo todos os recursos do projeto			   ³±±
±±³			 ³ cProjeto  : Codigo do projeto									   ³±±
±±³			 ³ cVersao   : no. da ultima versao									   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso       ³                                                                     ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function CargaTarRec( aPeriodo ,aRecursos ,cProjeto ,cVersao,aDadosSim,lConsEmExe )

Local aArea     	:= GetArea()
Local aAFDArea  	:= AFD->(getArea())
Local aAFUArea  	:= AFU->(getArea())
Local nZ        	:= 0
Local nX        	:= 0
Local aAllTask  	:= {}
Local aPredec   	:= {}
Local lEmExecucao 	:= .F.
Local lExecutada	:= .F.
Local lPMSRDUSR 	:= ExistBlock("PMSRDUSR")
Local nPos      	:= 0
Local lSimula		:= (aDadosSim <> Nil)
Local cSQLAFA 		:= RetSqlName("AFA")
Local cSQLAF9 		:= RetSqlName("AF9")
Local cAliasAFA 	:= xFilial("AFA")
Local cFilAFD 		:= xFilial("AFD")
Local cFilAJ4 		:= xFilial("AJ4")
Local cTmpAFA		:= "REC"+getNextAlias()
Local cDataI		:= DtoS(aPeriodo[1])
Local cDataF		:= DtoS(aPeriodo[2])
Local aUserInfo
Local lTopConn	:= IIf(Type("__lTopConn") == "L",__lTopConn,IIF(FindFunction("IfDefTopCTB"),IfDefTopCTB(),.F.))

DEFAULT cProjeto	:= AF8->AF8_PROJET
DEFAULT cVersao  	:= cRevisa
DEFAULT lConsEmExe 	:= .T.

// busca todas as tarefas em que o(s) recurso(s) esta(ao) envolvido(s)
If lTopConn

	For nZ := 1 to Len(aRecursos)

		cQuery	:= "SELECT AFA.AFA_FILIAL, AFA.AFA_RECURS, AFA.AFA_PROJET, AFA.AFA_REVISA, AFA.AFA_TAREFA, AFA.AFA_ALOC, AFA.AFA_START , AFA.AFA_FINISH , AFA.AFA_HORAI, AFA.AFA_HORAF, "
		cQuery	+= " AF9.AF9_START ,AF9.AF9_HORAI ,AF9.AF9_FINISH ,AF9.AF9_HORAF ,AF9.AF9_DTATUI ,AF9.AF9_DTATUF , AF9.AF9_TAREFA, AF9.AF9_REVISA, AF9.AF9_PROJET, "
		cQuery	+= " AF9.AF9_PRIORI, AF9.AF9_CALEND , AF9.AF9_HUTEIS, AF9.AF9_DESCRI, AF9.AF9_QUANT , AF9.R_E_C_N_O_ AF9RECNO "
		cQuery	+= " FROM "+cSQLAFA+" AFA JOIN "+cSQLAF9+" AF9  ON "
		cQuery	+= " AFA.AFA_PROJET = AF9.AF9_PROJET AND AFA.AFA_REVISA = AF9.AF9_REVISA AND AFA.AFA_TAREFA = AF9.AF9_TAREFA "
		cQuery	+= " WHERE AFA.AFA_FILIAL = '"+cAliasAFA+"'"
		cQuery 	+= " AND AFA.AFA_RECURS = '"+aRecursos[nz]+"'"
		cQuery 	+= " AND AFA.AFA_PROJET = '"+cProjeto+"'"
		cQuery 	+= " AND AFA.AFA_REVISA = '"+cVersao+"'"
		cQuery 	+= " AND ( AF9.AF9_START >= '"+cDataI+"' AND  AF9.AF9_START <= '"+cDataF+"' ) "
		cQuery	+= " AND AF9.AF9_DTATUF = '' "
		cQuery	+= " AND AFA.D_E_L_E_T_ = ' ' "
		cQuery	+= " AND AF9.D_E_L_E_T_ = ' ' "

		cQuery	:= ChangeQuery(cQuery)
		dbUseArea(.T., "TOPCONN", TcGenQry(,,cQuery), cTmpAFA, .T., .T. )

		While (cTmpAFA)->(!Eof())

			//Verificar se foi enviado um simulado para esta tarefa para este recurso
			If !lSimula .Or. Ascan(aDadosSim,{|x| x[SIM_RECAF9]==(cTmpAFA)->(AF9RECNO) .And. (cTmpAFA)->AFA_RECURS== x[SIM_RECURS]})  == 0

				// ou confirmacao de porcentagem executado.
				lEmExecucao 	:= !Empty((cTmpAFA)->AF9_DTATUI) .And. lConsEmExe
				lExecutada		:= !Empty((cTmpAFA)->AF9_DTATUF)

				// verifica se a tarefa foi incluida
				nPos := aScan(aAllTask,{|aTask| aTask[1] == (cTmpAFA)->AFA_PROJET ;
				       	           	 	  .AND. aTask[2] == (cTmpAFA)->AFA_REVISA ;
									 	  .AND. aTask[3] == (cTmpAFA)->AFA_TAREFA ;
									   })
				If nPos <= 0
					aPredec := {}

					AFD->(dbSetOrder(1))
					If AFD->(MsSeek(cFilAFD+ (cTmpAFA)->(AFA_PROJET+AFA_REVISA+AFA_TAREFA) ))
						While ! AFD->(Eof()) .And. (AFD->AFD_FILIAL+AFD->AFD_PROJET+AFD->AFD_REVISA+AFD->AFD_TAREFA ;
												== cFilAFD+(cTmpAFA)->(AFA_PROJET+AFA_REVISA+AFA_TAREFA) )
							If aScan(aPredec, {|x| x[2] == AFD->AFD_PREDEC }) <= 0
								aAdd( aPredec ,{AFD->AFD_TIPO ,AFD->AFD_PREDEC ,AFD->AFD_HRETAR } )
							EndIF
							AFD->(dbSkip())

						EndDo
					Endif
					AJ4->(dbSetOrder(1))
					If AJ4->(MsSeek(cFilAJ4+(cTmpAFA)->(AFA_PROJET+AFA_REVISA+AFA_TAREFA) ))
						While ! AJ4->(Eof()) .And. (AJ4->AJ4_FILIAL+AJ4->AJ4_PROJET+AJ4->AJ4_REVISA+AJ4->AJ4_TAREFA ;
												== cFilAJ4+(cTmpAFA)->(AFA_PROJET+AFA_REVISA+AFA_TAREFA) )
							LoadPrdEDT(aPredec,AJ4->AJ4_PROJET+AJ4->AJ4_REVISA+AJ4->AJ4_PREDEC)

							AJ4->(dbSkip())
						EndDo
					Endif

					If lPMSRDUSR
						aUserInfo:=ExecBlock("PMSRDUSR",.F.,.F.)
					Else
						aUserInfo := {}
					EndIf
					// se a tarefa nao foi incluida, adiciona a tarefa e suas predecessoras.
					aAdd( aAllTask ,{ (cTmpAFA)->AFA_PROJET ; // 1
								 ,(cTmpAFA)->AFA_REVISA ; // 2
								 ,(cTmpAFA)->AF9_TAREFA ; // 3
								 ,IIf(lExecutada,StoD((cTmpAFA)->AF9_DTATUI),StoD((cTmpAFA)->AFA_START)) ; // 4
								 ,IIf(lExecutada,"00:00",(cTmpAFA)->AFA_HORAI)  ; // 5
								 ,IIf(lExecutada,IIf(Empty(StoD((cTmpAFA)->AF9_DTATUF)),MsDate(),StoD((cTmpAFA)->AF9_DTATUF)),StoD((cTmpAFA)->AFA_FINISH)) ; // 6
								 ,IIf(lExecutada,IIf(Empty(StoD((cTmpAFA)->AF9_DTATUF)),Substr(Time(),1,5),If(StoD((cTmpAFA)->AF9_DTATUF)==MsDate(),Substr(Time(),1,5),"24:00")),(cTmpAFA)->AFA_HORAF)  ; // 7
								 ,IIf(Len(aPredec)>0.And.(cTmpAFA)->AF9_PRIORI<1000,(cTmpAFA)->AF9_PRIORI-1000,(cTmpAFA)->AF9_PRIORI ); // 8
								 ,lEmExecucao     ; // 9
								 ,(cTmpAFA)->AF9_CALEND ; // 10
								 ,(cTmpAFA)->AF9_HUTEIS ; // 11
								 ,aPredec         ; // 12
								 ,{(cTmpAFA)->AFA_RECURS} ; // 13
								 ,AllTrim((cTmpAFA)->AFA_PROJET)+":"+Alltrim((cTmpAFA)->AF9_DESCRI)+"-"+AllTrim(TransForm((cTmpAFA)->AFA_ALOC,"@E 99999.99%")) + " POC :"+AllTrim(TransForm( PmsPOCAF9( (cTmpAFA)->AF9_PROJET ,(cTmpAFA)->AF9_REVISA ,(cTmpAFA)->AF9_TAREFA ,PMS_MAX_DATE ,(cTmpAFA)->AF9_QUANT ) ,"@E 999.99%" ))+" Prioridade : "+Str((cTmpAFA)->AF9_PRIORI,5,0) ;//14
				  				 ,StoD((cTmpAFA)->AFA_START)  ; // 15
								 ,(cTmpAFA)->AFA_HORAI  ; // 16
								 ,(cTmpAFA)->(AF9RECNO)  ; // 17
								 ,{(cTmpAFA)->AFA_ALOC} ; // 18
								 ,aUserInfo       ; // 19
					       		})
				ElseIf aScan(aAllTask[nPos,13] ,{|cCodRecurso| cCodRecurso == (cTmpAFA)->AFA_RECURS} ) <= 0
					aAdd(aAllTask[nPos,13] ,(cTmpAFA)->AFA_RECURS)
					aAdd(aAllTask[nPos,18] ,(cTmpAFA)->AFA_ALOC)
				EndIf
		 	EndIf

			(cTmpAFA)->(dbSkip())
		EndDo
		(cTmpAFA)->(dbCloseArea())
	Next nZ
	RestArea( aAFDArea )
Else
	For nZ := 1 to Len(aRecursos)
		dbSelectArea("AFA")
		dbSetOrder(3)
		MsSeek( xFilial()+aRecursos[nz] )
		While ! Eof() .And. (xFilial()+aRecursos[nz] == AFA_FILIAL+AFA_RECURS)

			// busca pelo projeto+versao+tarefa associada ao recurso.
			AF8->(dbSetOrder(1))
			AF8->(MsSeek(xFilial()+AFA->AFA_PROJET))

			AF9->(dbSetOrder(1))
			AF9->(MsSeek(xFilial()+AFA->AFA_PROJET+AFA->AFA_REVISA+AFA->AFA_TAREFA))

			If 	(cProjeto==AFA->AFA_PROJET .And. cVersao <> AFA->AFA_REVISA) .Or.;
				(cProjeto<>AFA->AFA_PROJET .And. AF8->AF8_REVISA <> AFA->AFA_REVISA )
				dbSkip()
				Loop
			EndIf

			//Verificar se foi enviado um simulado para esta tarefa para este recurso
			If !lSimula .Or. 	Ascan(aDadosSim,{|x| x[SIM_RECAF9]==AF9->(RECNO()) .And. AFA->AFA_RECURS== x[SIM_RECURS]})  == 0

				// se tarefa NAO inicia e termina antes ou depois do periodo escolhido
				// adiciona a tarefa.
				IF !( (aPeriodo[1] < 	AF9->AF9_START) .AND. (aPeriodo[2] < 	AF9->AF9_START)    ;
				  .OR. (aPeriodo[1] > 	AF9->AF9_START) .AND. (aPeriodo[1] > 	AF9->AF9_FINISH) ) ;
				  .AND. ( aRecursos[nZ] == AFA->AFA_RECURS ) .And. Empty(AF9->AF9_DTATUF)

					aAFUArea := GetArea("AFU")
					AFU->(dbSetOrder(5))

					// Verifica se o recurso jah foi apontado.
					AFU->(MsSeek(xFilial()+"1"+AFA->AFA_PROJET+AFA->AFA_REVISA+AFA->AFA_TAREFA))

					// ou confirmacao de porcentagem executado.
					lEmExecucao 	:= !Empty(AF9->AF9_DTATUI) .And. lConsEmExe
					lExecutada		:= !Empty(AF9->AF9_DTATUF)

					restArea(aAFUArea)

					// verifica se a tarefa foi incluida
					nPos := aScan(aAllTask,{|aTask| aTask[1] == AFA->AFA_PROJET ;
					       	           	 	  .AND. aTask[2] == AFA->AFA_REVISA ;
										 	  .AND. aTask[3] == AFA->AFA_TAREFA ;
										   })
					If nPos <= 0
						aPredec := {}
						aAFDArea  := getArea("AFD")
						AFD->(dbSetOrder(1))
						AFD->(MsSeek(xFilial()+AFA->AFA_PROJET+AFA->AFA_REVISA+AFA->AFA_TAREFA))
						While ! AFD->(Eof()) .And. (AFD->AFD_FILIAL+AFD->AFD_PROJET+AFD->AFD_REVISA+AFD->AFD_TAREFA ;
												== xFilial()+AFA->AFA_PROJET+AFA->AFA_REVISA+AF9->AF9_TAREFA )
							If aScan(aPredec,{|x| x[2] == AFD->AFD_PREDEC }) <= 0
								aAdd( aPredec ,{AFD->AFD_TIPO ,AFD->AFD_PREDEC ,AFD->AFD_HRETAR } )
							EndIF
							AFD->(dbSkip())

						EndDo
						AJ4->(dbSetOrder(1))
						AJ4->(MsSeek(xFilial()+AFA->AFA_PROJET+AFA->AFA_REVISA+AFA->AFA_TAREFA))
						While ! AJ4->(Eof()) .And. (AJ4->AJ4_FILIAL+AJ4->AJ4_PROJET+AJ4->AJ4_REVISA+AJ4->AJ4_TAREFA ;
												== xFilial()+AFA->AFA_PROJET+AFA->AFA_REVISA+AF9->AF9_TAREFA )
							LoadPrdEDT(aPredec,AJ4->AJ4_PROJET+AJ4->AJ4_REVISA+AJ4->AJ4_PREDEC)

							AJ4->(dbSkip())

						EndDo

						restArea( aAFDArea )

						If lPMSRDUSR
							aUserInfo:=ExecBlock("PMSRDUSR",.F.,.F.)
						Else
							aUserInfo := {}
						EndIf

						// se a tarefa nao foi incluida, adiciona a tarefa e suas predecessoras.

						aAdd( aAllTask ,{ AFA->AFA_PROJET ; // 1
									 ,AFA->AFA_REVISA ; // 2
									 ,AF9->AF9_TAREFA ; // 3
									 ,IIf(lExecutada,AF9->AF9_DTATUI,AFA->AFA_START) ; // 4
									 ,IIf(lExecutada,"00:00",AFA->AFA_HORAI)  ; // 5
									 ,IIf(lExecutada,IIf(Empty(AF9->AF9_DTATUF),MsDate(),AF9->AF9_DTATUF),AFA->AFA_FINISH) ; // 6
									 ,IIf(lExecutada,IIf(Empty(AF9->AF9_DTATUF),Substr(Time(),1,5),If(AF9->AF9_DTATUF==MsDate(),Substr(Time(),1,5),"24:00")),AFA->AFA_HORAF)  ; // 7
									 ,IIf(Len(aPredec)>0.And.AF9->AF9_PRIORI<1000,AF9->AF9_PRIORI-1000,AF9->AF9_PRIORI ); // 8
									 ,lEmExecucao     ; // 9
									 ,AF9->AF9_CALEND ; // 10
									 ,AF9->AF9_HUTEIS ; // 11
									 ,aPredec         ; // 12
									 ,{AFA->AFA_RECURS} ; // 13
									 ,AllTrim(AFA->AFA_PROJET)+":"+Alltrim(AF9->AF9_DESCRI)+"-"+AllTrim(TransForm(AFA->AFA_ALOC,"@E 99999.99%")) + " POC :"+AllTrim(TransForm( PmsPOCAF9( AF9->AF9_PROJET ,AF9->AF9_REVISA ,AF9->AF9_TAREFA ,PMS_MAX_DATE ,AF9->AF9_QUANT ) ,"@E 999.99%" ))+" Prioridade : "+Str(AF9->AF9_PRIORI,5,0) ;//14
					  				 ,AFA->AFA_START  ; // 15 Data de inicio do cadastro (nao pode ser modificado no array)
									 ,AFA->AFA_HORAI  ; // 16 Hora de inicio do cadastro (nao pode ser modificado no array)
									 ,AF9->(RecNo())  ; // 17 Recno da Tarefa AF9
									 ,{AFA->AFA_ALOC} ; // 18 Alocacao do recurso
									 ,aUserInfo       ; // 19 Informacoes do usuario
						       		})
					ElseIf aScan(aAllTask[nPos,13] ,{|cCodRecurso| cCodRecurso == AFA->AFA_RECURS} ) <= 0
						aAdd(aAllTask[nPos,13] ,AFA->AFA_RECURS)
						aAdd(aAllTask[nPos,18] ,AFA->AFA_ALOC)
					EndIf
				Endif
		 	EndIf

			dbSelectArea("AFA")
			dbSkip()

		EndDo
	Next nZ

Endif
If lSimula
	For nX:= 1 To Len(aDadosSim)
		If aDadosSim[nX,SIM_RECAF9]<>0
			AF9->(MsGoTo(aDadosSim[nX,SIM_RECAF9]))
		Endif
		nPos := aScan(aAllTask,{|aTask| aTask[1] == aDadosSim[nX,SIM_PROJETO] ;
		       	           	 	  .AND. aTask[2] == aDadosSim[nX,SIM_REVISA] ;
								 	  .AND. aTask[3] == aDadosSim[nX,SIM_TAREFA] ;
								   })
		If nPos <= 0
			aAdd( aAllTask ,{aDadosSim[nX,SIM_PROJETO] ; // 1
							 ,aDadosSim[nX,SIM_REVISA] ; // 2
							 ,aDadosSim[nX,SIM_TAREFA] ; // 3
			  				 ,aDadosSim[nX,SIM_START] ; // 4
							 ,aDadosSim[nX,SIM_HORAI]  ; // 5
							 ,aDadosSim[nX,SIM_FINISH] ; // 6
							 ,aDadosSim[nX,SIM_HORAF]  ; // 7
							 ,IIf(Len(aDadosSim[nX,SIM_PREDEC])>0.And.aDadosSim[nX,SIM_PRIORI]<1000,aDadosSim[nX,SIM_PRIORI]-1000,aDadosSim[nX,SIM_PRIORI]) ; // 8
							 ,IIf(aDadosSim[nX,SIM_RECAF9]==0,.F.,!Empty(AF9->AF9_DTATUI) )     ; // 9
							 ,aDadosSim[nX,SIM_CALEND] ; // 10
							 ,aDadosSim[nX,SIM_HDURAC] ; // 11
							 ,aDadosSim[nX,SIM_PREDEC] ; // 12
							 ,{aDadosSim[nX,SIM_RECURS]} ; // 13
							 ,AllTrim(aDadosSim[nX,SIM_PROJETO])+":"+Alltrim(aDadosSim[nX,SIM_DESCRI])+"-"+AllTrim(TransForm(aDadosSim[nX,SIM_ALOC],"@E 99999.99%")) + " POC :"+AllTrim(TransForm( PmsPOCAF9( aDadosSim[nX,SIM_PROJETO] ,aDadosSim[nX,SIM_REVISA] ,aDadosSim[nX,SIM_TAREFA] ,PMS_MAX_DATE ,aDadosSim[nX,SIM_QUANT] ) ,"@E 999.99%" ))+" Prioridade : "+Str(aDadosSim[nX,SIM_PRIORI],5,0) ;//14
			  				 ,aDadosSim[nX,SIM_START]  ; // 15 Data de inicio do cadastro (nao pode ser modificado no array)
							 ,aDadosSim[nX,SIM_HORAI]  ; // 16 Hora de inicio do cadastro (nao pode ser modificado no array)
							 ,aDadosSim[nX,SIM_RECAF9] ; // 17 Recno da Tarefa AF9
							 ,{aDadosSim[nX,SIM_ALOC]} ; // 18 Alocacao do recurso
							 ,aDadosSim[nX,SIM_USERINFO]; // 19 Informacoes do usuario
			       		})
		ElseIf aScan(aAllTask[nPos,13] ,{|cCodRecurso| cCodRecurso == aDadosSim[nX,SIM_RECURS]} ) <= 0
			aAdd(aAllTask[nPos,13] ,aDadosSim[nX,SIM_RECURS])
			aAdd(aAllTask[nPos,18] ,aDadosSim[nX,SIM_ALOC])
		EndIf
	Next nX
Endif
RestArea(aArea)

Return( aAllTask )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³ DistRecurso ³ Autor ³ Reynaldo T. Miyashita ³ Data ³ 25.09.2003		³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Faz a redistribuicao do recurso nas tarefas							³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ aParam	: Array contendo os parametros informados					³±±
±±³			 ³				[1] - Data de Inicio									³±±
±±³			 ³				[2] - Data de Fim										³±±
±±³			 ³				[3] - Recurso Inicial									³±±
±±³			 ³				[4] - Recurso Final										³±±
±±³			 ³				[5] - Ordem de Redistribuicao							³±±
±±³			 ³ aAllTask : Array contendo todas as tarefas no periodo informado		³±±
±±³			 ³			[ 1] - Projeto												³±±
±±³			 ³			[ 2] - Ultima revisao										³±±
±±³			 ³			[ 3] - Tarefa												³±±
±±³			 ³			[ 4] - Data de Inicio										³±±
±±³			 ³			[ 5] - Hora de Inicio										³±±
±±³			 ³			[ 6] - Data de Finalizacao									³±±
±±³			 ³			[ 7] - Hora de Finalizacao									³±±
±±³			 ³			[ 8] - Prioridade											³±±
±±³			 ³			[ 9] - Se a tarefa ja foi iniciada							³±±
±±³			 ³			[10] - Calendario											³±±
±±³			 ³			[11] - Horas Uteis											³±±
±±³			 ³			[12] - Predecessoras										³±±
±±³			 ³				[1..N,1] - Tipo de Predecessora						³±±
±±³			 ³					[2] - Tarefa Predecessora							³±±
±±³			 ³					[3] - Horas de Atraso								³±±
±±³			 ³			[13] - Recursos alocados									³±±
±±³			 ³				[1..N] - Recurso Alocado								³±±
±±³			 ³			[14] - Informacoes referente a tarefa						³±±
±±³			 ³			[15] - Data de Inicio (inalteravel)							³±±
±±³			 ³			[16] - Hora de Inicio (inalteravel)							³±±
±±³			 ³			[17] - Recno do AF9.										³±±
±±³			 ³			[18] - Alocacao do recurso									³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso		 ³																		³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßÜßßßßßß
/*/
Function DistRecurso( aParam ,aAllTask,lHelp,lSimula )
Local nOrdem  := 0
Local aAxTask := aClone(aAllTask)
DEFAULT lHelp	:=	.T.
If Len(aAllTask) <15
	aadd(aParam,aParam[4])
	aadd(aParam,aParam[5])
Endif
	If ! empty(aAllTask)
		nOrdem := val(transform( aParam[5] ,"@9"))
	    //
	    // redistribui as tarefas por recurso
	    //
		ProcTarefa( aAllTask ,nOrdem,lHelp )

		oProcess:IncRegua1(STR0304) //"Carregando grafico de Gantt..."
		oProcess:SetRegua2(1)
		oProcess:IncRegua2()

		// monta o grafico de gantt para melhor visualizacao
		ReDistrGantt( { aParam[1] ,aParam[2] } ,aAllTask,lSimula )

		//Tratamento de tarefas apos confirmacao do grafico de GANTT
		If ExistBlock("PMSXGANT")
			ExecBlock("PMSXGANT", .F., .F., {aAxTask,aAllTask})
		Endif
	ElseIf lHelp
		// nao tem existe superalocacao no periodo solicitado
		Aviso(STR0143 ,STR0226 ,{STR0006} ,2) //"Atencao"###"Nao existem recursos superalocados neste projeto."##"Fechar"
	EndIf

Return( NIL )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³ ProcTarefa ³ Autor ³ Reynaldo T. Miyashita  ³ Data ³ 25.09.2003		³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ faz a redistribuicao das tarefas seguindo a ordem : tarefa,recurso	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ aAllTask : Array contendo todas as tarefas no periodo informado		³±±
±±³			 ³			[ 1] - Projeto												³±±
±±³			 ³			[ 2] - Ultima revisao										³±±
±±³			 ³			[ 3] - Tarefa												³±±
±±³			 ³			[ 4] - Data de Inicio										³±±
±±³			 ³			[ 5] - Hora de Inicio										³±±
±±³			 ³			[ 6] - Data de Finalizacao									³±±
±±³			 ³			[ 7] - Hora de Finalizacao									³±±
±±³			 ³			[ 8] - Prioridade											³±±
±±³			 ³			[ 9] - Se a tarefa ja foi iniciada							³±±
±±³			 ³			[10] - Calendario											³±±
±±³			 ³			[11] - Horas Uteis											³±±
±±³			 ³			[12] - Predecessoras										³±±
±±³			 ³				[1..N,1] - Tipo de Predecessora						³±±
±±³			 ³					[2] - Tarefa Predecessora							³±±
±±³			 ³					[3] - Horas de Atraso								³±±
±±³			 ³			[13] - Recursos alocados									³±±
±±³			 ³				[1..N] - Recurso Alocado								³±±
±±³			 ³			[14] - Informacoes referente a tarefa						³±±
±±³			 ³			[15] - Data de Inicio (inalteravel)							³±±
±±³			 ³			[16] - Hora de Inicio (inalteravel)							³±±
±±³			 ³			[17] - Recno do AF9.										³±±
±±³			 ³			[18] - Alocacao do recurso									³±±
±±³			 ³ nOrdem : Codigo da ordem da redistribucao							³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso		 ³																		³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßÜßßßßßß
/*/
Function ProcTarefa( aAllTask ,nOrdem ,lHelp)

Local nRecurso    := 0
Local nTarefa     := 0
Local nNextTask   := 0
Local nPos        := 0
Local aNovPer     := {}
Local aOrdem      := {}
Local nPRec			:= 0

Local lReOrdena   := .F.
Local nTotRecurso := 0
Local nProc			:= 0

Local nTamTarefa 	:= 0
Local nTamPriori 	:= 0
Local aTmp 			:= {}

Local	lSupAloc		:=	.T.
Local	aAloc			:=	{}
Local	nPosIni	:=	-1
Local	lOk		:=	Nil
Local	lAloc		:=	Nil
Local	aSim		:=	{}
Local	dDataIni	:=	PMS_EMPTY_DATE
Local	cHoraIni	:=	""
Local nLoop	:=	0
Local aAuxTask
Local lPMSRDSRT := ExistBlock("PMSRDSRT")

DEFAULT lHelp	:=	.T.
DEFAULT nOrdem := 1

oProcess:SetRegua2(Len(aAllTask))

	If ! empty( aAllTask )
		aTmp := TamSX3("AF9_TAREFA")
		nTamTarefa := aTmp[1]+aTmp[2]
		aTmp := TamSX3("AF9_PRIORI")
		nTamPriori := aTmp[1]+aTmp[2]
		// reordena as tarefas por data,hora,tarefa,prioridade
		// se for ordem de prioridade e data
 		If nOrdem == 2
			aSort( aAllTask ,,,{|x,y|	strZero(1000-x[8] ,nTamPriori) + DTOS(x[4])+x[5] + padl(x[3] ,nTamTarefa)  ;
									< 	strZero(1000-y[8] ,nTamPriori) + DTOS(y[4])+y[5] + padl(y[3] ,nTamTarefa) ;
			  				})
		ElseIf nOrdem == 1
			aSort( aAllTask ,,,{|x,y|	DTOS(x[4])+x[5] + strZero(1000-x[8] ,nTamPriori) + padl(x[3] ,nTamTarefa)  ;
								< 		DTOS(y[4])+y[5] + strZero(1000-y[8] ,nTamPriori) + padl(y[3] ,nTamTarefa)  ;
			  				})
		Else
			If ExistBlock("PMSRDSRT")
				aAllTask := ExecBlock("PMSRDSRT",.F.,.F.,{nOrdem, aAllTask})
				If valtype(aAllTask)<>'A'
					Help( ,, 'HELP',, STR0412, 1, 0)
					Return .F.
				EndIf
			Else
				Help( ,, 'HELP',, STR0413, 1, 0)
				Return .F.
			EndIf
		EndIf

		// loop da tarefa principal
		nTarefa :=1
		While nTarefa < Len(aAllTask)

			If nTarefa > nProc
				oProcess:IncRegua2()
				nProc++
			EndIf
        	//
        	// loop do recurso que esta alocado para tarefa
        	nTotRecurso := len(aAllTask[nTarefa,13])
        	nRecurso := 1
        	While nRecurso <= nTotRecurso
			    //
			    // ordena os recursos da tarefa atual
				aSort(aAllTask[nTarefa,13] ,,,{|x,y|x < y })

        		aOrdem := {}

        		// PROCURA PELO PROXIMA TAREFA DESTE RECURSO
        		nPos := 0
        		nNextTask := nTarefa+1
				//Verifica se a primeira tarefa esta superalocada (problemas de calendario).
				If nTarefa == 1 .And. (aAllTask[1,8] < 1000 ) .AND. (!aAllTask[1,9] )
					aNovPer := PMSDTaskF(  aAllTask[1,4]		; // data inicial da tarefa
									  			 ,aAllTask[1,5]		; // hora final da tarefa
												 ,aAllTask[1,10]		; // calendario utilizado pelo recurso
												 ,aAllTask[1,11]		; // horas uteis da tarefa
												 ,aAllTask[1,1]		; // codigo do projeto
												 ,aAllTask[1,13,nRecurso]; // codigo do recurso
												)

					If 	((aAllTask[1,4] <> aNovPer[1]) .OR. (aAllTask[1,5] <> aNovPer[2])) ;
							.OR. ((aAllTask[1,6] <> aNovPer[3]) .OR. (aAllTask[1,7] <> aNovPer[4]))
						// atribui data e hora de inicio
						aAllTask[1,4] := aNovPer[1]
						aAllTask[1,5] := aNovPer[2]
						// atribui data e hora de Fim
						aAllTask[1,6] := aNovPer[3]
						aAllTask[1,7] := aNovPer[4]
						cPrimTar	:=	aAllTask[1,1]+aAllTask[1,2]+aAllTask[1,3]
						// se for ordem de prioridade e data
						//Reordena
				 		If nOrdem == 2
							aSort( aAllTask ,,,{|x,y|	strZero(1000-x[8] ,nTamPriori) + DTOS(x[4])+x[5] + padl(x[3] ,nTamTarefa)  ;
													< 	strZero(1000-y[8] ,nTamPriori) + DTOS(y[4])+y[5] + padl(y[3] ,nTamTarefa) ;
							  				})
						ElseIf nOrdem == 1
							aSort( aAllTask ,,,{|x,y|	DTOS(x[4])+x[5] + strZero(1000-x[8] ,nTamPriori) + padl(x[3] ,nTamTarefa)  ;
												< 		DTOS(y[4])+y[5] + strZero(1000-y[8] ,nTamPriori) + padl(y[3] ,nTamTarefa)  ;
							  				})
						Else
							If lPMSRDSRT
								aAllTask := ExecBlock("PMSRDSRT",.F.,.F.,{nOrdem, aAllTask})
								If valtype(aAllTask)<>'A'
									Help( ,, 'HELP',, STR0412, 1, 0)
									Return .F.
								EndIf
							Else
								Help( ,, 'HELP',, STR0413, 1, 0)
								Return .F.
							EndIf
						Endif
						//Se a primeira tarefa nao e mais a mesma, deve recomezar o cliclo para avaliar a superalocacao
						//por calendario
						If cPrimTar	<>	aAllTask[1,1]+aAllTask[1,2]+aAllTask[1,3]
							nTarefa	:=	1
							Loop
						Endif
					EndIf
				EndIf

				While (nNextTask <= Len(aAllTask))
        			nPos := aScan(aAllTask[nNextTask,13] ,{|cCodRecurso| cCodRecurso == aAllTask[nTarefa,13,nRecurso] })
					aOrdem := {}
        			If nPos > 0
						//
						// verifica se este recurso tem superalocao com a tarefa atual e a proxima.
						lSupAloc	:=	.F.
						AE8->(DbSetOrder(1))
						AE8->(MsSeek(xFilial()+aAllTask[nTarefa,13,nRecurso]))
						If !(( (DTOS(aAllTask[nTarefa,4]) + aAllTask[nTarefa,5] < DTOS(aAllTask[nNextTask,4]) + aAllTask[nNextTask,5])  ;
						 .AND. (DTOS(aAllTask[nTarefa,6]) + aAllTask[nTarefa,7] <= DTOS(aAllTask[nNextTask,4]) + aAllTask[nNextTask,5]) );
						 .OR.( (DTOS(aAllTask[nTarefa,4]) + aAllTask[nTarefa,5] >= DTOS(aAllTask[nNextTask,6]) + aAllTask[nNextTask,7])  ;
						 .AND. (DTOS(aAllTask[nTarefa,6]) + aAllTask[nTarefa,7] > DTOS(aAllTask[nNextTask,6]) + aAllTask[nNextTask,7]) ))
							If aAllTask[nTarefa,18,nRecurso] + aAllTask[nNextTask,18,nPos]  > AE8->AE8_UMAX
								lSupAloc	:=	.T.
								aAloc	:=	{}
							Else
								aSim	:=	AllTaskToSim(aAllTask,nNextTask,aAllTask[nTarefa,13,nRecurso])
								aAloc	:=	PmsRetAloc(aAllTask[nTarefa,13,nRecurso],aAllTask[nTarefa,4],aAllTask[nTarefa,5],aAllTask[nTarefa,6],aAllTask[nTarefa,7],3,,,,,aSim,{})
								If aScan( aAloc ,{|aPeriodo| aPeriodo[3] > AE8->AE8_UMAX}) > 0
									lSupAloc	:=	.T.
								Endif
							Endif
							If lSupAloc

							 	// se a proxima tarefa tiver prioridade inferior a 1000 e nao foi executado ainda.
							 	If ( aAllTask[nNextTask,8] < 1000 ) .AND. ( ! aAllTask[nNextTask,9] )
								 	// se a tarefa atual tiver prioridade inferior a 1000 e nao foi executado ainda.
								 	If ( aAllTask[nTarefa,8] < 1000 ) .AND. ( ! aAllTask[nTarefa,9] )
								 		// se for ordem de prioridade e data
								 		If nOrdem == 2
											// se a prioridade da proxima tarefa for superior da atual
											If aAllTask[nNextTask,8] > aAllTask[nTarefa,8]
												// adia a tarefa atual
												aOrdem := { nNextTask ,nTarefa }
											Else
												// adia a proxima tarefa
				    							aOrdem := { nTarefa ,nNextTask }
				    						Endif
								 		ElseIf nOrdem == 1
											// se datas de inicio forem iguais e prioridade da tarefa atual for inferior a proxima
											If ( (DTOS(aAllTask[nTarefa,4]) + aAllTask[nTarefa,5] == DTOS(aAllTask[nNextTask,4]) + aAllTask[nNextTask,5]) ;
				    							.AND. (aAllTask[nTarefa,8] < aAllTask[nNextTask,8]) )
												// adia a tarefa atual em relacao a proxima tarefa
				    							aOrdem := { nNextTask ,nTarefa }

											Else
												// adia a proxima tarefa em relacao a tarefa atual
				    							aOrdem := { nTarefa ,nNextTask }

											EndIf
										Else

											If lPMSRDSRT
												aAuxTask := { aAllTask[nNextTask], aAllTask[nTarefa] }
												AADD(aAuxTask[1], 1)
												AADD(aAuxTask[2], 2)
												aAuxTask := ExecBlock("PMSRDSRT",.F.,.F.,{nOrdem, aAuxTask})
												If valtype(aAuxTask)<>'A'
													Help( ,, 'HELP',, STR0412, 1, 0)
													Return .F.
												EndIf
											Else
												Help( ,, 'HELP',, STR0413, 1, 0)
												Return .F.
											EndIf
											If aAuxTask[1,len(aAuxTask[1])]==1
												// adia a tarefa atual
												aOrdem := { nNextTask ,nTarefa }
											Else
												// adia a proxima tarefa
				    							aOrdem := { nTarefa ,nNextTask }
				    						Endif
								 		Endif
								 	Else
										// adia a tarefa atual,
										// pois a proxima tarefa foi executada ou prioridade eh 1000
									 	If ( aAllTask[nNextTask,8] < 1000 ) .AND. ( ! aAllTask[nNextTask,9] )
											aOrdem := { nTarefa , nNextTask }
										EndIf
									EndIf

							 	Else
								 	// se a tarefa stual tiver prioridade inferior a 1000 e nao foi executado ainda.
								 	If ( aAllTask[nTarefa,8] < 1000 ) .AND. ( ! aAllTask[nTarefa,9] )
										// adia a proxima tarefa em relacao a tarefa atual
										aOrdem := { nNextTask ,nTarefa }
								 	EndIf
								Endif
						// nao tem superalocacao, vai somente ajustar as datas entre as tarefas.
							Endif
						Endif
						//
						// Ira redistribuir a tarefa
						//
			     		If ! empty(aOrdem)
							//
							// obtem o novo periodo para a tarefa a ser redistribuida
							//
							//Verifica se existem alguma parte do periodo da tarefa atual onde possa ser redistribuida a tarefa superalocada
							//Exemplo:
							//Precisso de alocacao de 10%, verificar se existe algum periodo onde a alocacao seja <= ao 90%, mesmo
							//que sobrepondo (em datas, e nao em alocacao) com a tarefa superalocada.
							nPosIni	:=	-1
							lOk		:=	Nil
							lAloc		:=	Nil //(Len(aAloc) > 0)
							If aOrdem[1] <> nNextTask
								aSim	:=	AllTaskToSim(aAllTask,aOrdem[1],aAllTask[aOrdem[1],13,nRecurso])
								aAloc	:=	PmsRetAloc(aAllTask[aOrdem[1],13,nRecurso],aAllTask[aOrdem[1],4],aAllTask[aOrdem[1],5],aAllTask[aOrdem[1],6],aAllTask[aOrdem[1],7],3,,,,,aSim,{})
							Endif
							If aOrdem[2]<>nNextTask
								nPRec := nRecurso
							Else
								nPRec := nPos
							EndIf
							While lAloc==Nil .And. nPosIni <> 0
								nPosIni++
								nPosIni	:= Max(nPosIni,1)
								//Achar a proxima data de inicio com alocacao disponivel
								nPosIni :=	Ascan(aAloc, {|aPeriodo| aPeriodo[3] + aAllTask[aOrdem[2],18,nPRec] <= AE8->AE8_UMAX },nPosIni)
								dDataIni	:=	PMS_EMPTY_DATE
								cHoraIni	:=	""
								If nPosIni > 0 .And. nPosIni < Len(aAloc)
									dDataIni	:=	Max(aAloc[nPosIni,1],aAllTask[aOrdem[2],4] )
									cHoraIni	:=	Iif(aAloc[nPosIni,2]>aAllTask[aOrdem[2],5],aAloc[nPosIni,2] ,aAllTask[aOrdem[2],5])
									//Verificar se data de inicio esta dentro da tareda superalocada, se nao estiver,
									//assumo o final da tarefa superalocacada.
									If !Empty(cHoraIni) .And. Dtos(dDataIni)+cHoraIni >Dtos(aAllTask[aOrdem[1],6])+aAllTask[aOrdem[1],7]
										lAloc	:=	.F.
									Else
										nLoop	:=	nPosIni+1
								  		aAuxRet	:= PMSDTaskF(dDataIni,cHoraIni,	aAllTask[aOrdem[2],10],@aAllTask[aOrdem[2],11],aAllTask[aOrdem[2],1],aAllTask[aOrdem[2],13,nPRec],,,.F.)
										dDataFim	:=	aAuxRet[3]
										cHoraFim	:=	aAuxRet[4]
										lOk	:=	Nil
										While lOk ==Nil .And. nLoop	<=	Len(aAloc)
											//Verifica se a alocacao que achei esta disponivel ate o fim do periodo de alocacao
											If Dtos(aAloc[nLoop,1])+aAloc[nLoop,2] > Dtos(dDataFim)+cHoraFim
												//OK, posso utilizar a alocacao escolhida
												lOk	:=	.T.
												lAloc	:=	.T.
											//Vetrifica se a alocacao que achei esta disponivel ate o fim do periodo de alocacao
											ElseIf aAloc[nLoop,3] +aAllTask[aOrdem[2],18,nPRec]  >  AE8->AE8_UMAX
												//Nao OK, nao posso utilzar a alocacao escolhida, pois ela acaba antes do tempo que precisso
												//Verificar a proxima alocacao disponivel
												lOk	:=	.F.
											Endif
											nLoop++
										Enddo
									Endif
								Endif
							Enddo
							//Se nao achei alocacao nas condicoes procuradas, continuo utilizando a data final da predecessora
							If  !lAloc	.Or. lOk == Nil .Or. !lOk
								dDataIni	:=	aAllTask[aOrdem[1],6]
								cHoraIni	:=	aAllTask[aOrdem[1],7]
							Endif
							aNovPer := PMSDTaskF( dDataIni		; // data inicial da alocacao disponivel
									  			 ,cHoraIni		; // hora inicial da alocacao disponivel
												 ,aAllTask[aOrdem[2],10]		; // calendario utilizado pelo recurso a ser redistribuida
												 ,aAllTask[aOrdem[2],11]		; // horas uteis da tarefa a ser redistribuida
												 ,aAllTask[aOrdem[2],1]		; // codigo do projeto a ser redistribuida
												 ,aAllTask[nNextTask,13,nPos]; // codigo do recurso
													)

							If 	((aAllTask[aOrdem[2],4] <> aNovPer[1]) .OR. (aAllTask[aOrdem[2],5] <> aNovPer[2])) ;
								.OR. ((aAllTask[aOrdem[2],6] <> aNovPer[3]) .OR. (aAllTask[aOrdem[2],7] <> aNovPer[4]))

								// atribui data e hora de inicio
								aAllTask[aOrdem[2],4] := aNovPer[1]
								aAllTask[aOrdem[2],5] := aNovPer[2]
								// atribui data e hora de Fim
								aAllTask[aOrdem[2],6] := aNovPer[3]
								aAllTask[aOrdem[2],7] := aNovPer[4]
								lReOrdena := .T.
								TrataPredesc( aOrdem[2] ,aAllTask )
							EndIf

						EndIf
					EndIf
    				nNextTask++
    			End

   			nRecurso := nRecurso + 1
        	End


			If lReOrdena
				// reordena as tarefas por data,hora,tarefa,prioridade

				// se for ordem de prioridade e data
		 		If nOrdem == 2
					aSort( aAllTask ,,,{|x,y|	strZero(1000-x[8] ,nTamPriori) + DTOS(x[4])+x[5] + padl(x[3] ,nTamTarefa)  ;
											< 	strZero(1000-y[8] ,nTamPriori) + DTOS(y[4])+y[5] + padl(y[3] ,nTamTarefa) ;
					  				})
				Else
					aSort( aAllTask ,,,{|x,y|	DTOS(x[4])+x[5] + strZero(1000-x[8] ,nTamPriori) + padl(x[3] ,nTamTarefa)  ;
										< 		DTOS(y[4])+y[5] + strZero(1000-y[8] ,nTamPriori) + padl(y[3] ,nTamTarefa)  ;
					  				})
				Endif

				// volta para a primeira tarefa e recurso
				lReOrdena := .F.
				nTarefa -= 1

			EndIf

			nTarefa := nTarefa +1
		End

		oProcess:IncRegua2()

	ElseIf lHelp
		// nao tem existe superalocacao no periodo solicitado
		Aviso(STR0143 ,STR0226 ,{STR0006} ,2) //"Atencao"###"Nao existem recursos superalocados neste projeto."##"Fechar"
	EndIf

Return( aAllTask )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³ TrataPredec   ³ Autor ³ Reynaldo T. Miyashita ³ Data ³ 10.10.2003	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Trata a tarefa passada como predecessora e se e utilizada por		³±±
±±³			 ³ alguma tarefa														³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ nTarefa  : Contem a posicao da tarefa predecessora no array			³±±
±±³			 ³				aAllTask para verificar nas tarefas que a utilizam		³±±
±±³			 ³ aAllTask : Array contendo todas as tarefas no periodo informado		³±±
±±³			 ³				[ 1] - Projeto											³±±
±±³			 ³				[ 2] - Ultima revisao									³±±
±±³			 ³				[ 3] - Tarefa											³±±
±±³			 ³				[ 4] - Data de Inicio									³±±
±±³			 ³				[ 5] - Hora de Inicio									³±±
±±³			 ³				[ 6] - Data de Finalizacao								³±±
±±³			 ³				[ 7] - Hora de Finalizacao								³±±
±±³			 ³				[ 8] - Prioridade										³±±
±±³			 ³				[ 9] - Se a tarefa ja foi iniciada						³±±
±±³			 ³				[10] - Calendario										³±±
±±³			 ³				[11] - Horas Uteis										³±±
±±³			 ³				[12] - Predecessoras									³±±
±±³			 ³					[1..N,1] - Tipo de Predecessora					³±±
±±³			 ³						[2] - Tarefa Predecessora						³±±
±±³			 ³						[3] - Horas de Atraso							³±±
±±³			 ³				[13] - Recursos alocados								³±±
±±³			 ³					[1..N] - Recurso Alocado							³±±
±±³			 ³				[14] - Informacoes referente a tarefa					³±±
±±³ÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso		 ³																		³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function TrataPredesc( nTarefa ,aAllTask )

Local nBusca := 0
Local nPredesc := 0
Local aTmpPer := {}
Local aNovPer := {}
Local lReOrdena := .F.

	//
	// Se a tarefa for predecessora de outra, analisar as horas de atraso.
	//
	For nBusca := 1 To len(aAllTask)
		//
		// se for prioridade 1000 ou em execucao nao deve mover
		If ( aAllTask[nBusca,8] < 1000 ) .AND. ( ! aAllTask[nBusca,9] )
			// procura se a tarefa atual e' precessora de outra tarefa
			nPredesc := aScan(aAllTask[nBusca,12],{|aPredesc| aAllTask[nBusca,1] == aAllTask[nTarefa,1] ;
														  .AND. aAllTask[nBusca,2] == aAllTask[nTarefa,2] ;
														  .AND. aPredesc[2]        	 == aAllTask[nTarefa,3] ;
													})

			If ( nTarefa <> nBusca ) .AND. ( nPredesc > 0 )
				aTmpPer := {}
				Do Case
					// Fim no inicio
					Case aAllTask[nBusca,12,nPredesc,1] == "1"
						// se a data final da predecessora for maior que a data de inicio da tarefa
						If DTOS(aAllTask[nTarefa,6])+aAllTask[nTarefa,7] > DTOS(aAllTask[nBusca,4])+aAllTask[nBusca,5]
							//
							// obtem o novo periodo para a tarefa a ser redistribuida
							//
							aNovPer := PMSDTaskF( aAllTask[nTarefa,6]	; // data final da tarefa antecessora
									  			 ,aAllTask[nTarefa,7]	; // hora final da tarefa antecessora
												 ,aAllTask[nBusca,10]	; // calendario utilizado pelo recurso a ser redistribuida
												 ,aAllTask[nBusca,11]	; // horas uteis da tarefa a ser redistribuida
												 ,aAllTask[nBusca,1]	; // codigo do projeto a ser redistribuida
												 ,aAllTask[nBusca,12,nPredesc,2] ; // codigo do recurso
												)
							aAllTask[nBusca,4] := aNovPer[1]
							aAllTask[nBusca,5] := aNovPer[2]
							aAllTask[nBusca,6] := aNovPer[3]
							aAllTask[nBusca,7] := aNovPer[4]

						EndIf

						// se informado as horas de atraso
						If !Empty( aAllTask[nBusca,12,nPredesc,3] )
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³ Aplica o retardo na predecessora de acordo com o calendario do PROJETO   ³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							aTmpPer := PMSADDHrs( aAllTask[nTarefa,6] ,aAllTask[nTarefa,7] ,aAllTask[nBusca,10] ,aAllTask[nBusca,11] ,aAllTask[nBusca,1] ,Nil )
							aTmpPer := PMSDTaskF( aTmpPer[1] ,aTmpPer[2] ,aAllTask[nBusca,10] ,aAllTask[nBusca,11] ,aAllTask[nBusca,1] ,Nil )

						Else
							aTmpPer := PMSDTaskF(aAllTask[nTarefa,6] ,aAllTask[nTarefa,7] ,aAllTask[nBusca,10] ,aAllTask[nBusca,11] ,Nil)

						EndIf

					// inicio no inicio
					Case aAllTask[nBusca,12,nPredesc,1] == "2"

						// se a data de inicio da predecessora for maior que a data de inicio da tarefa
						If DTOS(aAllTask[nTarefa,4])+aAllTask[nTarefa,5] > DTOS(aAllTask[nBusca,4])+aAllTask[nBusca,5]
							//
							// obtem o novo periodo para a tarefa a ser redistribuida
							//
							aNovPer := PMSDTaskF( aAllTask[nTarefa,6]	; // data final da tarefa antecessora
									  			 ,aAllTask[nTarefa,7]	; // hora final da tarefa antecessora
												 ,aAllTask[nBusca,10]	; // calendario utilizado pelo recurso a ser redistribuida
												 ,aAllTask[nBusca,11]	; // horas uteis da tarefa a ser redistribuida
												 ,aAllTask[nBusca,1]	; // codigo do projeto a ser redistribuida
												 ,aAllTask[nBusca,12,nPredesc,2] ; // codigo do recurso
												)
							aAllTask[nBusca,4] := aNovPer[1]
							aAllTask[nBusca,5] := aNovPer[2]
							aAllTask[nBusca,6] := aNovPer[3]
							aAllTask[nBusca,7] := aNovPer[4]

						EndIf

						// se informado as horas de atraso
						If !Empty( aAllTask[nBusca,12,nPredesc,3] )
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³ Aplica o retardo na predecessora de acordo com o calendario do PROJETO   ³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							aTmpPer := PMSADDHrs( aAllTask[nTarefa,4] ,aAllTask[nTarefa,5] ,aAllTask[nBusca,10] ,aAllTask[nBusca,11] ,aAllTask[nBusca,1] ,Nil )
							aTmpPer := PMSDTaskF( aTmpPer[1] ,aTmpPer[2] ,aAllTask[nBusca,10] ,aAllTask[nBusca,11] ,aAllTask[nBusca,1] ,Nil )
						Else
							aTmpPer := PMSDTaskF(aAllTask[nTarefa,4] ,aAllTask[nTarefa,5] ,aAllTask[nBusca,10] ,aAllTask[nBusca,11] ,Nil)

						EndIf

					// Fim no Fim
					Case aAllTask[nBusca,12,nPredesc,1] == "3"

						// se a data final da predecessora for maior que a data de final da tarefa
						If DTOS(aAllTask[nTarefa,6])+aAllTask[nTarefa,7] > DTOS(aAllTask[nBusca,6])+aAllTask[nBusca,7]
							//
							// obtem o novo periodo para a tarefa a ser redistribuida
							//
							aNovPer := PMSDTaskF( aAllTask[nTarefa,6]	; // data final da tarefa antecessora
									  			 ,aAllTask[nTarefa,7]	; // hora final da tarefa antecessora
												 ,aAllTask[nBusca,10]	; // calendario utilizado pelo recurso a ser redistribuida
												 ,aAllTask[nBusca,11]	; // horas uteis da tarefa a ser redistribuida
												 ,aAllTask[nBusca,1]		; // codigo do projeto a ser redistribuida
												 ,aAllTask[nBusca,12,nPredesc,2] ; // codigo do recurso
												)
							aAllTask[nBusca,4] := aNovPer[1]
							aAllTask[nBusca,5] := aNovPer[2]
							aAllTask[nBusca,6] := aNovPer[3]
							aAllTask[nBusca,7] := aNovPer[4]

						EndIf

						// se informado as horas de atraso
						If !Empty( aAllTask[nBusca,12,nPredesc,3] )
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³ Aplica o retardo na predecessora de acordo com o calendario do PROJETO   ³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							aTmpPer := PMSADDHrs(aAllTask[nTarefa,6] ,aAllTask[nTarefa,7] ,aAllTask[nBusca,10] ,aAllTask[nBusca,11] ,aAllTask[nBusca,1] ,Nil )
							aTmpPer := PMSDTaskI(aTmpPer[1] ,aTmpPer[2] ,aAllTask[nBusca,10] ,aAllTask[nBusca,11] ,aAllTask[nBusca,1] ,Nil )

						Else
							aTmpPer := PMSDTaskI(aAllTask[nTarefa,6] ,aAllTask[nTarefa,7] ,aAllTask[nBusca,10] ,aAllTask[nBusca,11] ,Nil)

						EndIf

					// Inicio no Fim
					Case aAllTask[nBusca,12,nPredesc,1] == "4"

						// se a data de inicio da predecessora for maior que a data de final da tarefa
						If DTOS(aAllTask[nTarefa,4])+aAllTask[nTarefa,5] > DTOS(aAllTask[nBusca,6])+aAllTask[nBusca,7]
							//
							// obtem o novo periodo para a tarefa a ser redistribuida
							//
							aNovPer := PMSDTaskF( aAllTask[nTarefa,6]	; // data final da tarefa antecessora
									  			 ,aAllTask[nTarefa,7]	; // hora final da tarefa antecessora
												 ,aAllTask[nBusca,10]	; // calendario utilizado pelo recurso a ser redistribuida
												 ,aAllTask[nBusca,11]	; // horas uteis da tarefa a ser redistribuida
												 ,aAllTask[nBusca,1]		; // codigo do projeto a ser redistribuida
												 ,aAllTask[nBusca,12,nPredesc,2] ; // codigo do recurso
												)
							aAllTask[nBusca,4] := aNovPer[1]
							aAllTask[nBusca,5] := aNovPer[2]
							aAllTask[nBusca,6] := aNovPer[3]
							aAllTask[nBusca,7] := aNovPer[4]

						EndIf
						// se informado as horas de atraso
						If !Empty( aAllTask[nBusca,12,nPredesc,3] )
							//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
							//³ Aplica o retardo na predecessora de acordo com o calendario do PROJETO   ³
							//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
							aTmpPer := PMSADDHrs(aAllTask[nTarefa,4] ,aAllTask[nTarefa,5] ,aAllTask[nBusca,10] ,aAllTask[nBusca,11] ,aAllTask[nBusca,1] ,Nil )
							aTmpPer := PMSDTaskI(aTmpPer[1] ,aTmpPer[2] ,aAllTask[nBusca,10] ,aAllTask[nBusca,11] ,aAllTask[nBusca,1] ,Nil )
						Else
							aTmpPer := PMSDTaskI(aAllTask[nTarefa,4] ,aAllTask[nTarefa,5],aAllTask[nBusca,10] ,aAllTask[nBusca,11] ,Nil)

						EndIf
				EndCase
				//
				// se a data calculada for maior q a data atual, deve atualizar.
	   			If (DTOS(aTmpPer[1])+aTmpPer[2] > DTOS(aAllTask[nBusca,4])+aAllTask[nBusca,5] )
					// atribui data e hora de inicio
					aAllTask[nBusca,4] := aTmpPer[1]
					aAllTask[nBusca,5] := aTmpPer[2]
					// atribui data e hora de Fim
					aAllTask[nBusca,6] := aTmpPer[3]
					aAllTask[nBusca,7] := aTmpPer[4]
					lReOrdena := .T.
				EndIf
			EndIf
		EndIf
	Next nBusca
Return( lReOrdena )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³ ReDistrGantt  ³ Autor ³ Reynaldo T. Miyashita ³ Data ³ 25.09.2003	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Apresenta o grafico de Gantt com os recursos e respeciva tarefas		³±±
±±³			 ³ apos a redistribuicao das mesmas										³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ aPeriodo : Array contendo os parametros de intervalo de datas		³±±
±±³			 ³				[1] - Data de Inicio									³±±
±±³			 ³				[2] - Data de Fim Inicio								³±±
±±³			 ³ aAllTask : Array contendo todas as tarefas no periodo informado		³±±
±±³			 ³				[ 1] - Projeto											³±±
±±³			 ³				[ 2] - Ultima revisao									³±±
±±³			 ³				[ 3] - Tarefa											³±±
±±³			 ³				[ 4] - Data de Inicio									³±±
±±³			 ³				[ 5] - Hora de Inicio									³±±
±±³			 ³				[ 6] - Data de Finalizacao								³±±
±±³			 ³				[ 7] - Hora de Finalizacao								³±±
±±³			 ³				[ 8] - Prioridade										³±±
±±³			 ³				[ 9] - Se a tarefa ja foi iniciada						³±±
±±³			 ³				[10] - Calendario										³±±
±±³			 ³				[11] - Horas Uteis										³±±
±±³			 ³				[12] - Predecessoras									³±±
±±³			 ³					[1..N,1] - Tipo de Predecessora					³±±
±±³			 ³						[2] - Tarefa Predecessora						³±±
±±³			 ³						[3] - Horas de Atraso							³±±
±±³			 ³				[13] - Recursos alocados								³±±
±±³			 ³					[1..N] - Recurso Alocado							³±±
±±³			 ³				[14] - Informacoes referente a tarefa					³±±
±±³ÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso		 ³																		³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function ReDistrGantt( aPeriodo ,aAllTask,lSimula )
Local oDlg ,oFont , oGantt
Local lLoop        := .T.
Local lGrava	   := .F.

Local aArea		   := GetArea()
Local aGantt       := {}
Local aTmp         := {}
Local aButton	   := {}
Local aCorBarras   := {}
Local aDependencia := {}
Local aConfig      := {6 ,.F. ,.T.,.T.,.T. }

Local nX       := 0
Local nz	   := 0
Local nTarefa  := 0
Local nTsk	   := 1
Local nTop	   := oMainWnd:nTop+23
Local nLeft	   := oMainWnd:nLeft+5
Local nBottom  := oMainWnd:nBottom-60
Local nRight   := oMainWnd:nRight-10

Local dCFGIni  := aPeriodo[1]

Local cRecurso := ""
Local cNomeRec := ""
Local cFilAE8	:= xFilial("AE8")
Local lPMSREDIS := ExistBlock('PMSREDIS')

DEFAULT lSimula	:= .F.
Private aAllTaskPrv
Private bRfshGantt

	////////////////////////////////////////////////////////////////
	// INICIO - montagem do array para processamento da funcao PmsGantt()
	////////////////////////////////////////////////////////////////

    // ordena por data e hora

	aSort(aAllTask ,,,{|x,y|DTOS(x[4])+x[5] < DTOS(y[4])+y[5] })

	For nTarefa := 1 to len(aAllTask)
		For nX := 1 to len(aAllTask[nTarefa,13])
			// existe o recurso ja no Gantt
			nPos := aScan(aTmp ,{|aRecurso| aRecurso[1] == aAllTask[nTarefa,13,nX] })
	  		If nPos <= 0
				aadd( aTmp ,{ aAllTask[nTarefa,13,nX] ;
							 ,{{aAllTask[nTarefa,4]    ; // start 4
							   ,aAllTask[nTarefa,5]    ; // ini   5
							   ,aAllTask[nTarefa,6]    ; //finish 6
							   ,aAllTask[nTarefa,7]    ; //fim    7
							   ,aAllTask[nTarefa,14]   ; // texto
							   ,aAllTask[nTarefa,9]   ; // Em execucao
							   ,aAllTask[nTarefa,17]   ; // Recno
							   ,aAllTask[nTarefa,8]   ; // Prioridade
							   ,aAllTask[nTarefa,12]   ; // Predecessoras
							   ,aAllTask[nTarefa,1]+aAllTask[nTarefa,2]   ; // Projeto+Versao
							   ,aAllTask[nTarefa,3]   ; // Tarefa
							  }}  ;
							})
			Else
				aadd( aTmp[nPos,2] ,{ aAllTask[nTarefa,4]  ; // start
									  	,aAllTask[nTarefa,5]  ; // ini   5
									  	,aAllTask[nTarefa,6]  ; //finish 6
									  	,aAllTask[nTarefa,7]  ; //fim    7
									  	,aAllTask[nTarefa,14] ; // texto
    									,aAllTask[nTarefa,9]   ; // Em execucao
									   ,aAllTask[nTarefa,17]   ; // Recno
							   		,aAllTask[nTarefa,8]   ; // Prioridade
									   ,aAllTask[nTarefa,12]   ; // Predecessoras
									   ,aAllTask[nTarefa,1]+aAllTask[nTarefa,2]   ; // Projeto+Versao
									   ,aAllTask[nTarefa,3]   ; // Tarefa
							   							         })
			    //
			    // ordena por data e hora
			    //
				aSort(aTmp[nPos,2],,,{|x,y|DTOS(x[1])+x[2] < DTOS(y[1])+y[2] })
			Endif

		Next nX
	Next nTarefa

    //
    // ordena por recurso
    //
	aSort(aTmp ,,,{|x,y| x[1] < y[1] })

	WHILE lLoop

		lLoop 	   := .F.
		aGantt 	   := {}
		aCorBarras := LoadCorBarra( "MV_PMSACOR" )

		For nX := 1 to len(aTmp)
			cRecurso := aTmp[nX,1]
			cNomeRec := Posicione("AE8",1,cFilAE8+cRecurso,"AE8_DESCRI")
			For nTarefa := 1 to len(aTmp[nX,2])
				If aTmp[nX,2,nTarefa,7] <> 0
					AF9->(MsGoto(aTmp[nX,2,nTarefa,7]))
				Endif
				If aTmp[nX,2,nTarefa,7] == 0 .Or. Empty(AF9->AF9_DTATUF)
					For nz := 1 to Len(aTmp[nX,2,nTarefa,9])
						If nz == 1
							nPos := aScan( aDependencia ,{|aTarefa| aTarefa[1] == aTmp[nX,2,nTarefa,10]+"/"+aTmp[nX,2,nTarefa,11]	})
						EndIf
						If nPos > 0
							aadd( aDependencia[nPos,2],{ aTmp[nX,2,nTarefa,10]+"/"+aTmp[nX,2,nTarefa,9,nz,2] ,aTmp[nX,2,nTarefa,9,nz,1] } )
						Else
							aadd( aDependencia ,{ aTmp[nX,2,nTarefa,10]+"/"+aTmp[nX,2,nTarefa,11]	 ,{ { aTmp[nX,2,nTarefa,10]+"/"+aTmp[nX,2,nTarefa,9,nz,2] ,aTmp[nX,2,nTarefa,9,nz,1] } }} )
						Endif
					Next nz
		    		// adiciona a tarefa
					aAdd(aGantt,{ { aTmp[nX,2,nTarefa,10]+"/"+aTmp[nX,2,nTarefa,11]	    ;
									,cRecurso    ;
						   		   	,cNomeRec      ;
								  	};
								 ,{{ aTmp[nX,2,nTarefa,1] ; // start
									,aTmp[nX,2,nTarefa,2] ; // ini
									,aTmp[nX,2,nTarefa,3] ; //finish
									,aTmp[nX,2,nTarefa,4] ; //fim
									,aTmp[nX,2,nTarefa,5] ; // texto
									,NIL                          ;
									,Iif(aTmp[nX,2,nTarefa,7] == 0,Nil,"PmsViewTask("+STR(aTmp[nX,2,nTarefa,7])+")");
									,1                            ;
									,If(aTmp[nX,2,nTarefa,6],CLR_BROWN,CLR_GREEN) ;
								  }}                              ;
								 ,RGB( (255-Int(MAx(aTmp[nX,2,nTarefa,8],100)/10*((255-ValorCorBarra( "3" ,aCorBarras,2 )[1])/100))) ,(255-Int(Max(aTmp[nX,2,nTarefa,8],100)/10*((255-ValorCorBarra( "3" ,aCorBarras,2 )[2])/100))) ,(255-Int(Max(aTmp[nX,2,nTarefa,8],100)/10*((255-ValorCorBarra( "3" ,aCorBarras,2 )[3])/100))) );
								 ,NIL                             ;
						    })
					cRecurso := ""
					cNomeRec := ""
				EndIf
			Next nTarefa
		Next nX

////////////////////////////////////////////////////////////////
// FIM - montagem do array para processamento da funcao PmsGantt()
////////////////////////////////////////////////////////////////
		If lPMSREDIS
			aButton	:=	ExecBlock('PMSREDIS',.F.,.F.,{1})
		Endif
		//Variavel privada para poder ser utilizada nos botoes incluidos por P.E.
		aAllTaskPrv	:= aClone(aAllTask)

		DEFINE FONT oFont NAME "Arial" SIZE 0, -10
		DEFINE MSDIALOG oDlg TITLE STR0227 OF oMainWnd PIXEL FROM nTop,nLeft TO nBottom,nRight //"Grafico de Gantt"
		oDlg:lMaximized := .T.

		If Empty(aButton)
			AADD(aButton, {BMP_OPCOES		 , {|| If(RedistCfg(cVersao,@oDlg,@aConfig,@dCfgIni,aGantt),(oDlg:End(),lLoop := .T.), Nil)}, TIP_OPCOES })
			AADD(aButton, {BMP_RETROCEDER_CAL, {|| (PmsPrvGnt(cVersao,@oDlg,@aConfig,@dCfgIni,aGantt,@nTsk)	,oDlg:End() ,lLoop := .T.) }, TIP_RETROCEDER_CAL})
			AADD(aButton, {BMP_AVANCAR_CAL	 , {|| (PmsNxtGnt(cVersao,@oDlg,@aConfig,@dCfgIni,aGantt,@nTsk)	,oDlg:End() ,lLoop := .T.) }, STR0276 })
			AADD(aButton, {BMP_CORES		 , {|| {lAtualiza := PMSColorGantt("MV_PMSACOR"),oDlg:End() ,lLoop := .T.} }, TIP_CORES})
			AADD(aButton, {BMP_INTERROGACAO	 , {|| HelProg() }, STR0135})
			AADD(aButton, {BMP_SALVAR		 , {|| (lGrava:=.T.,lLoop := .F.,oDlg:End()) }, STR0027 } )
	    EndIf

		oGantt := PmsGantt(aGantt,aConfig,@dCfgIni,,oDlg,{14,1,(nBottom/2)-40,(nRight/2)-4},{{STR0341,90},{STR0098,55},{STR0154,105}},@nTsk,aDependencia,STR0289+IIf(!lSimula,CRLF+STR0290,""),oGantt,,{1,2,3})  //"Codigo"###"Nome"###"Resultados da Redistribuicao"###"Confirma gravacao ?"

		ACTIVATE MSDIALOG oDlg CENTERED ON INIT EnchoiceBar(oDlg,{|| },{|| oDlg:End()},,aButton,,,,,.F.,.F.)

	EndDo

	If lGrava .And. !lSimula
		SalvaReDistr(aAllTask)
	EndIf

	RestArea(aArea)

Return( NIL )

Function RedistCfg(cVersao,oDlg,aConfig,dIni,aGantt)
Local lRet 		:= .F.
Local nSavCfg1	:= aConfig[1]

If ParamBox({	{3,STR0102,aConfig[1],{STR0103,STR0104,STR0105,STR0192,STR0193,STR0342},60,,.F.},; //"Escala de Tempo"###"Diario"###"Semanal"###"Mensal"###"Mensal (Zoom 30%)"###"Bimestral"
	   			{4,STR0106,aConfig[2],STR0341,70,,.F.},; //"Exibir detalhes :"###"Codigo" //"Codigo"
				{4,"",aConfig[3],STR0098,40,,.F.},; //"Recurso"
				{4,"",aConfig[3],STR0068,40,,.F.}; //"Nome"
				},STR0003,aConfig,,,.F.,120,3) //"Duracao"###"Configuracoes do Gantt" //"Exibir Tarefas"###"Parametros"

	If nSavCfg1 != aConfig[1]
		dIni := PMS_EMPTY_DATE
	EndIf
	lRet := .T.
EndIf

Return lRet

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³ SalvaReDistr ³ Autor ³ Reynaldo T. Miyashita ³ Data ³ 25.09.2003 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Salva as novas datas das tarefas nas tabelas						³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ aAllTask : Array contendo todas as tarefas no periodo informado	³±±
±±³			 ³				[ 1] - Projeto										³±±
±±³			 ³				[ 2] - Ultima revisao								³±±
±±³			 ³				[ 3] - Tarefa										³±±
±±³			 ³				[ 4] - Data de Inicio								³±±
±±³			 ³				[ 5] - Hora de Inicio								³±±
±±³			 ³				[ 6] - Data de Finalizacao							³±±
±±³			 ³				[ 7] - Hora de Finalizacao							³±±
±±³			 ³				[ 8] - Prioridade									³±±
±±³			 ³				[ 9] - Se a tarefa ja foi iniciada					³±±
±±³			 ³				[10] - Calendario									³±±
±±³			 ³				[11] - Horas Uteis									³±±
±±³			 ³				[12] - Predecessoras								³±±
±±³			 ³					[1..N,1] - Tipo de Predecessora				³±±
±±³			 ³						[2] - Tarefa Predecessora					³±±
±±³			 ³						[3] - Horas de Atraso						³±±
±±³			 ³				[13] - Recursos alocados							³±±
±±³			 ³					[1..N] - Recurso Alocado						³±±
±±³			 ³				[14] - Informacoes referente a tarefa				³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso		 ³																	³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function SalvaReDistr( aAllTask )

Local aArea   := GetArea()
Local nX      := 0
Local aAllEDT := {}

oProcess:IncRegua1(STR0305)	//"Gravando redistribuicao..."

oProcess:SetRegua2(len(aAllTask))

	// tarefa
	For nX := 1 to len(aAllTask)
		oProcess:IncRegua2()
			// tarefas do projeto
		dbSelectArea("AF9")
		dbSetOrder(1)
		// busca filial+projeto+ultima versao+tarefa
		MsSeek(xFilial()+aAllTask[nX,1]+aAllTask[nX,2] ;
		                +aAllTask[nX,3] )

		If ! AF9->(eof()) .And. ( aAllTask[nx,8] < 1000 ) .AND. ( ! aAllTask[nx,9] )

			If aScan(aAllEDT ,{|aEDT|aEDT[1] == AF9->AF9_EDTPAI } ) <= 0
				aAdd(aAllEDT ,{  AF9->AF9_EDTPAI ;
   								,aAllTask[nX,1] ; //projeto
   								,aAllTask[nX,2] ; //tarefa
							  })
			EndIf
			RecLock( "AF9" ,.F.)
			AF9->AF9_START  := aAllTask[nX,4]
			AF9->AF9_HORAI  := aAllTask[nX,5]
			AF9->AF9_FINISH := aAllTask[nX,6]
			AF9->AF9_HORAF  := aAllTask[nX,7]
			MsUnLock()

			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Efetua a atualizacao das datas dos recursos             ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			PmsAtuNec(AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_TAREFA)
		Endif
	Next nX
	RestArea(aArea)
	oProcess:IncRegua1(STR0306)	 //"Atualizando EDTs..."
	oProcess:SetRegua2(Len(aAllEDT))
	// atualiza das EDT's
	For nX := 1 to Len(aAllEDT)
		oProcess:IncRegua2()
		PmsAtuEDT(aAllEDT[nX,2] ,aAllEDT[nX,3] ,aAllEDT[nX,1],,,.F.)
	Next nX
Return( NIL )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³ PmsFilial ³ Autor ³ Edson Maricate		³ Data ³ 11-09-2003 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Verifica se a tabela de relacionamento possui o campo MSFIL	³±±
±±³			 ³ criado e passa para a funcao xFilial().						³±±
±±³			 ³ Este campo devera ser criado obrigatoriamente nos casos em	³±±
±±³			 ³ que os Projetos sao compartilhados e os movimentos exclusivos³±±
±±³			 ³ de cada filial.												³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Uso		 ³ Generico														³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PmsFilial(cTabOrig,cTabRelac,cMSFIL)

Local nPosCpo	:= 0
Local cRet		:= ''
DEFAULT cMSFil	:= cTabRelac+"_MSFIL"

nPosCpo := (cTabRelac)->(ColumnPos(cMSFil))

If  nPosCpo > 0
	cRet := xFilial(cTabOrig,(cTabRelac)->(FieldGet(nPosCpo)))
Else
	cRet :=  xFilial(cTabOrig)
EndIf
Return cRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³PmsDlgMB³ Autor ³ Edson Maricate			³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Esta funcao cria uma janela para configuracao e apontamentos  ³±±
±±³			 ³de Movimentos Bancarios do Projeto.							³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³																³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsDlgMB(nOpcao,cID,cHistor,cTipo)
Local bSavSetKey	:= SetKey(VK_F4,Nil)
Local bSavKeyF5     := SetKey(VK_F5,Nil)
Local bSavKeyF6     := SetKey(VK_F6,Nil)
Local bSavKeyF7     := SetKey(VK_F7,Nil)
Local bSavKeyF8     := SetKey(VK_F8,Nil)
Local bSavKeyF9     := SetKey(VK_F9,Nil)
Local bSavKeyF10    := SetKey(VK_F10,Nil)
Local oGetDados
Local lOk
Local oDlg,oBold
Local nPosRat		:= aScan(aRatAJE,{|x| x[1] == "01"})
Local lGetDados		:= .T.
Local aAreaSE5		:= SE5->(GetArea())
Local aArea			:= GetArea()
Local nY			:= 0
Local cUsado	:= ""
Local nLenHeader:= 0
Local nLenCols	:= 0

PRIVATE aCols	:= {}
PRIVATE aHeader	:= {}

If nOpcao == 3
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Montagem do aHeader                                          ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	dbSelectArea("SX3")
	dbSetOrder(1)
	MsSeek("AJE")
	While !EOF() .And. (x3_arquivo == "AJE")
		If cTipo == "P" .And. Alltrim(X3_CAMPO) == "AJE_EDT"
			dbSkip()
			Loop
		EndIf
		IF X3USO(x3_usado) .AND. cNivel >= x3_nivel
			AADD(aHeader,{ TRIM(x3titulo()), x3_campo, x3_picture,;
				x3_tamanho, x3_decimal, x3_valid,;
				x3_usado, x3_tipo, x3_arquivo,x3_context } )
		Endif
		dbSkip()
	End

	SX3->(dbSetOrder(2))
	SX3->(MsSeek("AJE_FILIAL"))

	cUsado := SX3->X3_USADO

	SX3->(dbSetOrder(1))

	AADD( aHeader, { "Alias WT","AJE_ALI_WT", "", 09, 0,, cUsado, "C", "AJE", "V"} )
	AADD( aHeader, { "Recno WT","AJE_REC_WT", "", 09, 0,, cUsado, "N", "AJE", "V"} )

	aHeaderAJE	:= aClone(aHeader)
	If nPosRat > 0
		aCols	:= aClone(aRatAJE[nPosRat,2])
	Else
		//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
		//³ Faz a montagem de uma linha em branco no aCols.              ³
		//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
		nLenHeader := Len(aHeader)
		aadd(aCols,Array(nLenHeader+1))
		For ny := 1 to nLenHeader
			If Trim(aHeader[ny,2]) == "AJE_ITEM"
				aCols[1,ny] := "01"
			ElseIf AllTrim(aHeader[ny,2]) $ "AJE_ALI_WT | AJE_REC_WT"
				If AllTrim(aHeader[ny,2]) == "AJE_ALI_WT"
					aCols[1,ny] := "AJE"
				ElseIf AllTrim(aHeader[ny,2]) == "AJE_REC_WT"
					aCols[1,ny] := 0
				EndIf
			Else
				aCols[1,ny] := CriaVar(aHeader[ny,2])
			EndIf
			aCols[1,nLenHeader+1] := .F.
		Next ny
	EndIf
Else
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Montagem do aHeader                                          ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	dbSelectArea("SX3")
	dbSetOrder(1)
	MsSeek("AJE")
	While !EOF() .And. (x3_arquivo == "AJE")
		If cTipo == "P" .And. Alltrim(X3_CAMPO) == "AJE_EDT"
			dbSkip()
			Loop
		EndIf
		IF X3USO(x3_usado) .AND. cNivel >= x3_nivel
			AADD(aHeader,{ TRIM(x3titulo()), x3_campo, x3_picture,;
				x3_tamanho, x3_decimal, x3_valid,;
				x3_usado, x3_tipo, x3_arquivo,x3_context } )
		Endif
		dbSkip()
	End

	SX3->(dbSetOrder(2))
	SX3->(MsSeek("AJE_FILIAL"))
	cUsado := SX3->X3_USADO
	SX3->(dbSetOrder(1))
	AADD( aHeader, { "Alias WT","AJE_ALI_WT", "", 09, 0,, cUsado, "C", "AJE", "V"} )
	AADD( aHeader, { "Recno WT","AJE_REC_WT", "", 09, 0,, cUsado, "N", "AJE", "V"} )
	aHeaderAJE	:= aClone(aHeader)
	dbSelectArea("AJE")
	dbSetOrder(3)
	If nPosRat == 0
		nLenHeader := Len(aHeader)
		If MsSeek(xFilial()+cID)
			While !Eof() .And. xFilial()+cID==AJE_FILIAL+AJE_ID
				If AJE->AJE_REVISA==PmsAF8Ver(AJE->AJE_PROJET)
					aADD(aCols,Array(nLenHeader+1))
					nLenCols := Len(aCols)
					For ny := 1 to nLenHeader
						If ( aHeader[ny,10] != "V")
							aCols[nLenCols,ny] := FieldGet(ColumnPos(aHeader[ny,2]))
						ElseIf AllTrim(aHeader[ny,2]) $ "AJE_ALI_WT | AJE_REC_WT"
							If AllTrim(aHeader[ny,2]) == "AJE_ALI_WT"
								aCols[1,ny] := "AJE"
							ElseIf AllTrim(aHeader[ny,2]) == "AJE_REC_WT"
								aCols[1,ny] := AJE->(Recno())
							EndIf
						Else
							aCols[nLenCols,ny] := CriaVar(aHeader[ny,2])
						EndIf
						aCols[nLenCols,nLenHeader+1] := .F.
					Next ny
				EndIf
				dbSkip()
			End
		EndIf
		If Empty(aCols)
			//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
			//³ Faz a montagem de uma linha em branco no aCols.              ³
			//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
			aadd(aCols,Array(nLenHeader+1))
			For ny := 1 to nLenHeader
				If Trim(aHeader[ny,2]) == "AJE_ITEM"
					aCols[1,ny] := "01"
				ElseIf AllTrim(aHeader[ny,2]) $ "AJE_ALI_WT | AJE_REC_WT"
					If AllTrim(aHeader[ny,2]) == "AJE_ALI_WT"
						aCols[1,ny] := "AJE"
					ElseIf AllTrim(aHeader[ny,2]) == "AJE_REC_WT"
						aCols[1,ny] := 0
					EndIf
				Else
					aCols[1,ny] := CriaVar(aHeader[ny,2])
				EndIf
				aCols[1,nLenHeader+1] := .F.
			Next ny
		EndIf
	Else
		aCols := aClone(aRatAJE[nPosRat,2])
	EndIf
EndIf

If lGetDados
	DEFINE FONT oBold NAME "Arial" SIZE 0, -13 BOLD
	DEFINE MSDIALOG oDlg FROM 88,22  TO 350,619 TITLE STR0273 Of oMainWnd PIXEL //'Assistente de Apontamentos : Gerenciamento de Projetos - Mov. Bancarios'
		@ 16 ,3   TO 18 ,310 LABEL '' OF oDlg PIXEL
		@ 6,10 SAY STR0035+cHistor SIZE 150,7 OF oDlg PIXEL //"Documento : "
		oGetDados := MSGetDados():New(23,3,112,296,nOpcao,'PMSAJELOK("'+cTipo+'")','PMSAJETOK','+AJE_ITEM',.T.,,,,100,'PMSAJEFOK')
		@ 118,249 BUTTON STR0027 SIZE 35 ,9   FONT oDlg:oFont ACTION {||If(oGetDados:TudoOk(),(lOk:=.T.,oDlg:End()),(lOk:=.F.))}  OF oDlg PIXEL  //'Confirma'
		@ 118,210 BUTTON STR0028 SIZE 35 ,9   FONT oDlg:oFont ACTION (oDlg:End())  OF oDlg PIXEL  //'Cancelar'
      If ExistBlock("PMSMBSCR")
         ExecBlock("PMSMBSCR",.F.,.F.,{oDlg,nOpcao})
      Endif
	ACTIVATE MSDIALOG oDlg
EndIf

If nOpcao <> 2 .And. lOk
	If nPosRat > 0
		aRatAJE[nPosRat,2]	:= aClone(aCols)
	Else
		aADD(aRatAJE,{"01",aClone(aCols)})
	EndIf

	If ExistBlock("PMSDLGMB")
		U_PMSDLGMB(aCols,aHeader)
	EndIf
EndIf

RestArea(aAreaSE5)
RestArea(aArea)
SetKey(VK_F4,bSavSetKey)
SetKey(VK_F5,bSavKeyF5)
SetKey(VK_F6,bSavKeyF6)
SetKey(VK_F7,bSavKeyF7)
SetKey(VK_F8,bSavKeyF8)
SetKey(VK_F9,bSavKeyF9)
SetKey(VK_F10,bSavKeyF10)

Return

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³PMSAJELOK³ Autor ³ Edson Maricate			³ Data ³ 29-10-2003 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de validacao LinOk da GetDados de rateio das Mov.Banc. ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ cTipo : tipo de mov. bancaria ("P"->Pagar  "R"->Receber		³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³PMSDLGMB,PMSXFUN												³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PMSAJELOK(cTipo)
Local lRet := .T.

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica os campos obrigatorios do SX3.              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
If !aCols[n,Len(aCols[n])]
	lRet := PmsVldFase("AF8",aCols[n,aScan(aHeader,{|x| Substr(x[2],4,7) =="_PROJET" })],"82")

	//verifica se o campo da EDT e tarefa estao vazios ou preenchidos
	//a movimentacao deve estar amarrada a EDT ou tarefa
	If (cTipo=="P" .And. Empty(aCols[n,3])) .Or.;
		(cTipo=="R" .And. Empty(aCols[n,3]) .And. Empty(aCols[n,4]))
		MsgAlert(STR0391,STR0143) //"A movimentação deve estar amarrada à uma EDT ou tarefa!" ,"Atencao"
		lRet := .F.
	EndIf

	If lRet
		lRet := MaCheckCols(aHeader,aCols,n)
	EndIf
EndIf
Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³PMSAJETOK³ Autor ³ Edson Maricate			³ Data ³ 29-10-2003 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de validacao TudOk da GetDados de rateio da Mov.Banc.	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³PMSDLGFI,PMSXFUN												³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PMSAJETOK()
Local nx
Local lRet			:= .T.
Local lUsaProj		:= .F.
Local nTotVal		:= 0
Local nPosProjet	:= aScan(aHeader,{|x|AllTrim(x[2])=="AJE_PROJET"})
Local nPosVal1		:= aScan(aHeader,{|x|AllTrim(x[2])=="AJE_VALOR"})
Local nTotTit		:= M->E5_VALOR

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica os campos obrigatorios do SX3.              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
For nx := 1 to Len(aCols)
	n	:= nx
	If !aCols[n,len(aCols[n])]
		If !Empty(aCols[n,nPosProjet])
			lUsaProj := .T.
			If !PMSAJELOK()
				lRet := .F.
				Exit
			EndIf
			nTotVal	+= aCols[n,nPosVal1]
		EndIf
	EndIf
Next

If ExistBlock("PMSTOKMB")
	nTotTit := ExecBlock("PMSTOKMB",.F.,.F.,{nTotTit, nTotVal})
EndIf

If lRet .And. lUsaProj
	If nTotVal > nTotTit
	   	Help("   ",1,"PMSVLFI")
   		lRet := .F.
	Endif
EndIf

If ExistBlock("PMSAJEMB")
	lRet := ExecBlock("PMSAJEMB", .F., .F.,{lRet})
EndIf
Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³PMSAJEFOK³ Autor ³ Edson Maricate			³ Data ³ 29-10-2003 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de validacao dos campos da GetDados de rateio do MB.	³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³PMSDLGMB,PMSXFUN												³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PMSAJEFOK()

Local cRevisa
Local lRet		:= .T.
Local cCampo	:= AllTrim(ReadVar())

Do Case
	Case cCampo == 'M->AJE_PROJET'
		lRet := PMSExistCPO("AF8") .And. PmsVldFase("AF8",M->AJE_PROJET,"82")
	Case cCampo == 'M->AJE_EDT'
		cProjeto := aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AJE_PROJET"})]
		cRevisa  := aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AJE_REVISA"})]
		lRet := ExistCpo("AFC",cProjeto+cRevisa+M->AJE_EDT,1)
	Case cCampo == 'M->AJE_TAREFA'
		cProjeto := aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AJE_PROJET"})]
		cRevisa  := aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="AJE_REVISA"})]
		lRet := ExistCpo("AF9",cProjeto+cRevisa+M->AJE_TAREFA,1)
EndCase

Return lRet

/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³PmsWriteMB³ Autor ³ Edson Maricate		³ Data ³ 29-10-2003 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Programa de gravacao de apontamentos chamado pela rotina de	³±±
±±³			 ³gravacao de Movimentos Bancarios								³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpN1 : Evento - [1] - Inclusao de Movimentos Bancarios		³±±
±±³			 ³				   [2] - Estorno de Movimentos Bancarios		³±±
±±³			 ³				   [3] - Exclusao de Movimentos Bancarios		³±±
±±³			 ³ExpC2 : Alias da tabela de Movimentos Bancarios				³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³																³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsWriteMB(nEvento,cAliasSE5)

Local nx
Local nz
Local ny
Local aArea		:= GetArea()
Local aRecAJE	:= {}
Local aTempCols	:= {}
Local aAreaSE5 := (cAliasSE5)->(GetArea())
Local cFilAJE		:= xFilial("AJE")

If Empty(aHeaderAJE)
	aHeaderAJE := {}
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³ Montagem do aHeaderAJE                                       ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	dbSelectArea("SX3")
	dbSetOrder(1)
	MsSeek("AJE")
	While !EOF() .And. (x3_arquivo == "AJE")
		IF X3USO(x3_usado) .AND. cNivel >= x3_nivel
			AADD(aHeaderAJE,{ TRIM(x3titulo()), x3_campo, x3_picture,;
				x3_tamanho, x3_decimal, x3_valid,;
				x3_usado, x3_tipo, x3_arquivo,x3_context } )
		Endif
		dbSkip()
	End
EndIf

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica o array de amarracao dos Contratos x Projetos    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
aRatAJE := If(Type('aRatAJE') = 'U', Nil, aRatAJE)

If aRatAJE<>Nil
	Do Case
		Case nEvento == 1
			nx	:= aScan(aRatAJE,{|x| x[1] == "01"})
			If nx == 0
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Verifica se o item ja possui itens gravados.              ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				dbSelectArea("AJE")
				dbSetOrder(3)
				If MsSeek(xFilial()+(cAliasSE5)->E5_PROJPMS)
					While !Eof() .And. xFilial()+(cAliasSE5)->E5_PROJPMS==	AJE_FILIAL+AJE_ID
						If AJE->AJE_REVISA==PmsAF8Ver(AJE->AJE_PROJET)
							aADD(aTempCols,Array(Len(aHeaderAJE)+1))
							For ny := 1 to Len(aHeaderAJE)
								If ( aHeaderAJE[ny,10] != "V")
									aTempCols[Len(aTempCols),ny] := FieldGet(ColumnPos(aHeaderAJE[ny,2]))
								Else
									aTempCols[Len(aTempCols),ny] := CriaVar(aHeaderAJE[ny,2])
								EndIf
								aTempCols[Len(aTempCols),Len(aHeaderAJE)+1] := .F.
							Next ny
						EndIf
						dbSkip()
					End
					aAdd(aRatAJE,{"01",aClone(aTempCols)})
					nx := Len(aRatAJE)
				EndIf
			EndIf
			If nx > 0
				dbSelectArea("AJE")
				dbSetOrder(3)
				MsSeek(xFilial()+(cAliasSE5)->E5_PROJPMS)
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Carrega no array os registros ja existentes.         ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				While !Eof() .And. xFilial()+(cAliasSE5)->E5_PROJPMS==	AJE_FILIAL+AJE_ID
					If AJE->AJE_REVISA==PmsAF8Ver(AJE->AJE_PROJET) .And. !Empty(AJE->AJE_ID)
						aAdd(aRecAJE,AJE->(RecNo()))
					EndIf
					dbSkip()
				End
		 		nRecNo	:= SE5->(RecNo())
		 		cID		:= STRZERO(SE5->(RecNo()),10)
		 		cStart	:= "AA"
		 		dbSelectArea("SE5")
		 		dbSetOrder(9)
		 		While dbSeek(xFilial()+cID)
		 			cID := STRZERO(nRecNo,8)+cStart
		 			cStart := SomaIt(cStart)
		 		End
		 		RestArea(aAreaSE5)
				dbSelectArea("AJE")
				For nz := 1 to Len(aRatAJE[nx,2])
					If !aRatAJE[nx,2,nz,Len(aRatAJE[nx,2,nz])]
						dbSelectArea('AJE')
					 	If nz <= Len(aRecAJE)
							RecLock('SE5',.F.)
							SE5->E5_PROJPMS	:= cId
							MsUnlock()
					 		AJE->(dbGoto(aRecAJE[nz]))
					 		RecLock('AJE',.F.)
							AJE->AJE_ID		:= cId
					 	Else
							RecLock('SE5',.F.)
							SE5->E5_PROJPMS	:= cId
							MsUnlock()
				 			RecLock('AJE',.T.)
							AJE->AJE_ID		:= cId
					 	EndIf
						//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
						//³ Atualiza os dados contidos na GetDados                   ³
						//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
						For ny := 1 to Len(aHeaderAJE)
							If aHeaderAJE[ny,10] # "V"
								cVar := Trim(aHeaderAJE[ny,2])
								Replace &cVar. With aRatAJE[nx,2,nz,ny]
							Endif
						Next
						AJE->AJE_FILIAL	:= cFilAJE
						AJE->AJE_DATA		:= SE5->E5_DATA
						AJE->AJE_HISTOR	:= If( IntePms() .And. !Empty(AJE->AJE_HISTOR), AJE->AJE_HISTOR, SE5->E5_HISTOR )
						MsUnlock()
						/////////////////////////////////////////////////////////////////
						// Integração com TOP, gera a apropriacao para o projeto.
						/////////////////////////////////////////////////////////////////
						SLMPMSCOST(0, "AJE", dDatabase, AJE->AJE_PROJET, AJE->AJE_TAREFA, "", 0, AJE->AJE_VALOR)
						/////////////////////////////////////////////////////////////////
					Else
						If nz <= Len(aRecAJE)
							MsGoto(aRecAJE[nz])
							/////////////////////////////////////////////////////////////////
							// Integração com TOP, gera a apropriacao para o projeto.
							/////////////////////////////////////////////////////////////////
							SLMPMSCOST(2, "AJE")
							/////////////////////////////////////////////////////////////////
							RecLock("AJE",.F.,.T.)
					        dbDelete()
							msUnLock()
						EndIf
					EndIf
				Next
				//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
				//³ Deleta os demais registros.                          ³
				//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
				If Len(aRecAJE) > Len(aRatAJE[nx,2])
					For nz := (Len(aRatAJE[nx,2])+1) to Len(aRecAJE)
						MsGoto(aRecAJE[nz])
						/////////////////////////////////////////////////////////////////
						// Integração com TOP, gera a apropriacao para o projeto.
						/////////////////////////////////////////////////////////////////
						SLMPMSCOST(2, "AJE")
						/////////////////////////////////////////////////////////////////
						RecLock("AJE",.F.,.T.)
				        dbDelete()
						msUnLock()
					Next nz
				EndIf
			EndIf
		Case nEvento == 2
			dbSelectArea("AJE")
			dbSetOrder(3)
			If MsSeek(xFilial()+(cAliasSE5)->E5_PROJPMS)
				While !Eof() .And. xFilial()+(cAliasSE5)->E5_PROJPMS==	AJE_FILIAL+AJE_ID
			   		dbSelectArea("AJE")
					dbSkip()
				End
			EndIf
		Case nEvento == 3
			dbSelectArea("AJE")
			dbSetOrder(3)
			If MsSeek(xFilial()+(cAliasSE5)->E5_PROJPMS)
				While !Eof() .And. xFilial()+(cAliasSE5)->E5_PROJPMS==	AJE_FILIAL+AJE_ID
					If AJE->AJE_REVISA==PmsAF8Ver(AJE->AJE_PROJET)
						/////////////////////////////////////////////////////////////////
						// Integração com TOP, gera a apropriacao para o projeto.
						/////////////////////////////////////////////////////////////////
						SLMPMSCOST(2, "AJE")
						/////////////////////////////////////////////////////////////////
						RecLock("AJE",.F.,.T.)
						dbDelete()
						MsUnlock()
					EndIf
					dbSkip()
				End
			EndIf
	EndCase
EndIf
RestArea(aArea)
Return

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³PmsChkAJE³ Autor ³ Edson Maricate			³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Verifica a existencia do arquivo AJE criado no SX3.			³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³Generico														³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsChkAJE(lAviso)
Local lRet := .F.
Local aArea	:= GetArea()

dbSelectArea("SX3")
dbSetOrder(2)
If MsSeek("AJE_PROJET")
	lRet := .T.
Else
	If lAviso
		Aviso(STR0143,STR0274,{STR0006},2) //"Opcao nao disponivel nesta versao. Verifique a existecia do arquivio AJE no SX atual."
	EndIf
EndIf
RestArea(aArea)
Return lRet

/*/ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 | TarefasDependentes³ Autor ³ Reynaldo T. Miyashita  ³ Data ³ 19-11-2003 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ obtem as tarefas que tem relacionamento e quais sao as tarefas		  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ cProjeto - Codigo do projeto											  ³±±
±±³			 ³ cRevisa - no. da revisao do projeto									  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³Generico																  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function TarefasDependentes( cProjeto ,cRevisa )
Local nPos  := 0
Local aDependencia := {}
Local aArea	:= GetArea()
Local cFilAFD	:= xFilial("AFD")

	dbSelectArea("AFD")
	dbSetOrder(1)

	If MsSeek(cFilAFD+cProjeto+cRevisa)
		While ! AFD->(EOF()) .AND. (AFD->AFD_FILIAL == cFilAFD .AND. (AFD->AFD_PROJET == cProjeto .AND. AFD->AFD_REVISA == cRevisa))
			nPos := aScan( aDependencia ,{|aTarefa| aTarefa[1] == AFD->AFD_TAREFA})
			If nPos > 0
				aadd( aDependencia[nPos,2],{ AFD->AFD_PREDEC ,AFD->AFD_TIPO } )
			Else
				aadd( aDependencia ,{ AFD->AFD_TAREFA ,{ {AFD->AFD_PREDEC ,AFD->AFD_TIPO} }} )
			Endif
			AFD->(dbSkip())
		End
	EndIf
	restArea(aArea)
Return( aDependencia )
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSColorGantt³ Autor ³ Reynaldo T. Miyashita ³ Data ³ 09-12-2003    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡ao ³Permite visualizar/alterar as cores das barras do Grafico de Gantt. ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³																	  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PMSColorGantt( cChave )
Local aItens := {}
Local nX     := 0
Local lOk    := .F.
Local oPanel
Local oList
Local cBlock
Local nY     := 0
Private nRed   := 0
Private nGreen := 0
Private nBlue  := 0
Private oDlg

	// carrega os tipos de barras e as respectivas cores
	aItens := LoadCorBarra( cChave )

    // monta a tela
	DEFINE MSDIALOG oDlg FROM 0,0  TO 350,520 TITLE STR0281 Of oMainWnd PIXEL  //"Configuracao de Cor"
		// monta o browse com os tipos de barras
		oList := TWBrowse():New( 15,15,170,60,,{" " ,STR0068 ,"R" ,"G" ,"B"},{10,90,20,20,20},oDlg,,,,,,,,,,,,.F.,,.T.,,.F.,,, ) //Descricao
		oList:SetArray(aItens)
		oList:bLine := {|| aItens[oList:nAT] }
		oList:bChange := {||MostraCor( 1, aItens[oList:nAT,3] ,aItens[oList:nAT,4] ,aItens[oList:nAT,5] ,oDlg )}

		// monta quadros de cores
		MostraCor( 1 ,aItens[oList:nAT,3] ,aItens[oList:nAT,4] ,aItens[oList:nAT,5] ,oDlg )
		MostraCor( 2 ,nRed ,nGreen ,nBlue ,oDLG )

		// monta o box para "juntar" os objetos para definicao de cores.
		@  80 ,15 TO 155,185 Label "" Of oDlg PIXEL

		For ny := 1 to 255 STEP 20
			For nx := 1 to 255 STEP 20
				oPanel := tPanel():New( 90+(4*ny/20),30+(4*(nx/20)),"",oDlg,,.T.,.T.,,RGB(nx ,ny , 255-((nx+ny)/2)) ,4,4,.F.,.F.)
				cBlock:= "{|| nRed:="+Str(nx)+",nGreen:="+Str(ny)+",nBlue:="+STR(255-((nx+ny)/2))+",MostraCor( 2, nRed ,nGreen ,nBlue ,oDLG ) }"
				oPanel:bLClicked := MontaBlock(cBlock)
			Next
		Next ny

		For ny := 1 to 255 STEP 20
			oPanel := tPanel():New( 90+(4*ny/20),90,"",oDlg,,.T.,.T.,,RGB(ny ,ny , ny ) ,4,4,.F.,.F.)
			cBlock:= "{|| nRed:=nRed+((255-nRed)/255)*"+Str(ny)+",nGreen:=nGreen+((255-nGreen)/255)*"+Str(ny)+",nBlue:=nBlue+((255-nBlue)/255)*"+Str(ny)+",MostraCor( 2, NoROund(nRed,0) ,NoRound(nGreen,0) ,NoRound(nBlue,0) ,oDLG ) }"
			oPanel:bLClicked := MontaBlock(cBlock)
		Next ny

		@  90 ,100 SAY STR0282 Of oDlg PIXEL SIZE 30 ,8
		@  90 ,132 MSGET nRed Picture "@E 999" VALID {nRed:=iif(nRed>255,255,iif(nRed<0,0,nRed)) ,MostraCor( 2, nRed ,nGreen ,nBlue ,oDLG )}  PIXEL SIZE 15,8
		@ 104 ,100 SAY STR0283 Of oDlg PIXEL SIZE 30 ,8
		@ 104 ,132 MSGET nGreen Picture "@E 999" VALID {nGreen:=iif(nGreen>255,255,iif(nGreen<0,0,nGreen)) ,MostraCor( 2, nRed ,nGreen ,nBlue ,oDLG ) } PIXEL SIZE 15,8
		@ 118 ,100 SAY STR0284 Of oDlg PIXEL SIZE 30 ,8
		@ 118 ,132 MSGET nBlue Picture "@E 999" VALID {nBlue:=iif(nBlue>255,255,iif(nBlue<0,0,nBlue)) ,MostraCor( 2, nRed ,nGreen ,nBlue ,oDLG ) } PIXEL SIZE 15,8

		@ 130 ,100 BUTTON STR0280 SIZE 75 ,13 FONT oDlg:oFont ACTION {||{ aItens[oList:nAT,3] := nRed               ;	 // "Substituir Cor"
																			   	  ,aItens[oList:nAT,4] := nGreen             ;
																				  ,aItens[oList:nAT,5] := nBlue              ;
																				  ,MostraCor( 1 ,nRed ,nGreen ,nBlue ,oDLG )} ;
																				} OF oDlg PIXEL

		@ 100 ,193 BUTTON STR0203  SIZE 50 ,20 FONT oDlg:oFont ACTION {||SalvaCorBarra( cChave ,aItens ) ,lOk := .T. ,oDlg:End()} OF oDlg PIXEL // "OK"
		@ 125 ,193 BUTTON STR0028  SIZE 50 ,20 FONT oDlg:oFont ACTION {||oDlg:End()}  OF oDlg PIXEL // "Cancelar"

	ACTIVATE MSDIALOG oDlg CENTERED
PMSFreeObj(oList)
PMSFreeObj(oPanel)
PMSFreeObj(oDlg)
Return( lOk )
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³MostraCor ³ Autor ³ Reynaldo T. Miyashita ³ Data ³ 09-12-2003    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡ao ³ mostra no panel a cor definida no RBG.                          ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³      nPainel - 1 = Painel da barra                              ³±±
±±³          ³      		senao painel de formulacao da cor	               ³±±
±±³          ³      nRed - valor da cor vermelha (0 a 255 )                    ³±±
±±³          ³      nGreen - valor da cor verde (0 a 255 )                     ³±±
±±³          ³      nBlue - valor da cor azul (0 a 255 )                       ³±±
±±³          ³      oDlg - objeto MSDialog                                     ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³																   ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function MostraCor( nPainel ,nRed ,nGreen ,nBlue ,oDLG )
Local oPanel
Local nY := 0

	If nPainel == 1
		// quadro da cor atual da barra
		oPanel := tPanel():New( 15,190,"",oDlg,,.T.,.T.,,RGB(nRed ,nGreen ,nBlue) ,60,60,.T.,.T.)
	Else
		// quadro secundario de cor selecionada
		oPanel := tPanel():New(  90,153,"",oDlg,,.T.,.T.,,RGB(nRed ,nGreen ,nBlue) ,20,20,.T.,.T.)

		If nPainel == 2

			For ny := 1 to 255 STEP 20
				If ny > 230
					oPanel := tPanel():New( 90+(4*ny/20),90,"",oDlg,,.T.,.T.,,RGB(255,255,255 ) ,4,4,.F.,.F.)
					cBlock:= "{|| nRed:=255,nGreen:=255,nBlue:=255,MostraCor( 3, NoROund(nRed,0) ,NoRound(nGreen,0) ,NoRound(nBlue,0) ,oDLG ) }"
					oPanel:bLClicked := MontaBlock(cBlock)
				Else
					If ny<126
						oPanel := tPanel():New( 90+(4*ny/20),90,"",oDlg,,.T.,.T.,,RGB( NoRound((nRed/126)*ny,0),NoRound((nGreen/126)*ny,0) ,NoRound((nBlue/126)*ny,0)) ,4,4,.F.,.F.)
						cBlock:= "{|| nRed:="+Str(NoRound((nRed/126)*ny,0) )+",nGreen:="+Str(NoRound((nGreen/126)*ny,0))+",nBlue:="+Str(NoRound((nBlue/126)*ny,0) )+",MostraCor( 3, NoROund(nRed,0) ,NoRound(nGreen,0) ,NoRound(nBlue,0) ,oDLG ) }"
						oPanel:bLClicked := MontaBlock(cBlock)
					Else
						oPanel := tPanel():New( 90+(4*ny/20),90,"",oDlg,,.T.,.T.,,RGB( NoRound(nRed+((255-nRed)/126)*(ny-126),0),NoRound(nGreen+((255-nGreen)/126)*(ny-126),0) ,NoRound(nBlue+((255-nBlue)/126)*(ny-126),0)) ,4,4,.F.,.F.)
						cBlock:= "{|| nRed:="+Str(NoRound(nRed+((255-nRed)/126)*(ny-126),0) )+",nGreen:="+Str(NoRound(nGreen+((255-nGreen)/126)*(ny-126),0))+",nBlue:="+Str(NoRound(nBlue+((255-nBlue)/126)*(ny-126),0) )+",MostraCor( 3, NoROund(nRed,0) ,NoRound(nGreen,0) ,NoRound(nBlue,0) ,oDLG ) }"
						oPanel:bLClicked := MontaBlock(cBlock)
					EndIf
				EndIf
			Next ny
		EndIf
	Endif
Return( NIL )
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³LoadCorBarra ³ Autor ³ Reynaldo T. Miyashita ³ Data ³ 09-12-2003    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡ao ³Carrega as cores que sao utilizadas nas barras do Grafico de Gantt. ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³																	  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function LoadCorBarra( cChave )
Local cParametro := ""
Local cConteudo  := LeCor(cChave)
local cTipo      := ""
local cCor       := ""
local aRGB       := {}
Local aItens     := {}

If Empty(cConteudo)
	cConteudo	:=alltrim(GetMV(cChave))
EndIf

	// se estiver vazia usa valores padrao.
	If empty(cConteudo)
		// carrega os tipos de barra com as cores padrao
		aItens := { {"1",STR0029  ,000,000,000} ; //"EDT"
				   ,{"2",STR0030  ,000,000,128} ; //"Tarefa"
				   ,{"3",STR0145  ,000,000,255} ; //"Recurso "
					}
	Else
		// caso o ultimo caracter nao for ";" deve adicionar.
		If Right(cConteudo ,1) != ";"
			cConteudo += ";"
		EndIf

		While ! empty(cConteudo)
			cParametro := SubStr(cConteudo ,1 ,(At( ";" ,cConteudo )-1))
			cConteudo := alltrim(SubStr(cConteudo ,(At( ";" ,cConteudo )+1)))

			cTipo := alltrim(left(cParametro ,(At( "=" ,cParametro )-1)))
			cCor  := alltrim(SubStr(cParametro ,(At( "=" ,cParametro )+1)))
			aRGB := convRGB( val(cCor) )

			Do Case
				Case cChave == "MV_PMSGCOR"
					do case
						case cTipo == "1"
							cDescricao := STR0029 //"EDT"
						case cTipo == "2"
							cDescricao := STR0030 //"Tarefa"
						case cTipo == "3"
							cDescricao := STR0145 //"Recurso"
						otherwise
							cDescricao := ""
					End Case

				Case cChave == "MV_PMSACOR"
					do case
						case cTipo == "1"
							cDescricao := STR0366 //"Recurso superalocado"
						case cTipo == "2"
							cDescricao := STR0367 //"Recurso alocado"
						case cTipo == "3"
							cDescricao := STR0030 //"Tarefa"
						otherwise
							cDescricao := ""
					End Case
			EndCase
			aAdd( aItens ,{cTipo, cDescricao ,aRGB[1],aRGB[2],aRGB[3] } )
		End
	EndIf
Return( aItens )
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³SalvaCorBarra³ Autor ³ Reynaldo T. Miyashita ³ Data ³ 09-12-2003    ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡ao ³Salva as cores que serao utilizadas nas barras do Grafico de Gantt. ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³		cChave - Nome do parametro para qual tela do grafico de gantt ³±±
±±³			 ³		aItens - cores de cada barra que serao salvas				  ³±±
±±³			 ³			[n,1] - codigo de cadastro da barra					  ³±±
±±³			 ³			[n,2] - descricao da barra, em q processo eh utilizado	  ³±±
±±³			 ³			[n,3] - Valor da cor Vermelha (0-255)					  ³±±
±±³			 ³			[n,4] - Valor da cor Verde (0-255)						  ³±±
±±³			 ³			[n,5] - Valor da cor Azul (0-255)						  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³																	  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function SalvaCorBarra( cChave ,aItens )
Local cConteudo := ""
Local nCount := 0
	// montar a string para ser salva na tabela
	For nCount := 1 To len(aItens)
		cConteudo += aItens[nCount,1] + "=" + alltrim(str(RGB(aItens[nCount,3],aItens[nCount,4],aItens[nCount,5])))+" ; "
	Next nCount
	// salva as Corers
	GravaCor(cChave, cConteudo)
Return( NIL )
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³ValorCorBarra³ Autor ³ Reynaldo T. Miyashita ³ Data ³ 09-12-2003	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡ao ³ Retorna somente o numero da cor conforme parametro informado.	  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ nParametro - codigo do tipo de barra.							  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³																	  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function ValorCorBarra( cParametro ,aItens ,nTipo )

Local nPos := 0
Local uCor := NIL

DEFAULT nTipo := 1

	// procura pelo parametro informado
	nPos := aScan( aItens,{|aItem| aItem[1] == cParametro})
	If nPos > 0
		If nTipo == 1
			// recebe o "valor" da cor
			uCor := RGB(aItens[nPos,3],aItens[nPos,4],aItens[nPos,5])
		ElseIf nTipo == 2
			uCor := {aItens[nPos,3],aItens[nPos,4],aItens[nPos,5]}
		Endif
	Else
		If nTipo == 1
			// assume preto
			uCor := 0
		ElseIf nTipo == 2
			// assume preto
			uCor := { 0 ,0 ,0 }
		EndIf
	Endif

Return( uCor )

/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 | PMSPlnCalc	³ Autor ³ Adriano Ueda			 ³ Data ³ 06-04-2004 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Realiza o calculo de campos e formulas da planilha				 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ aProcForm -														 ³±±
±±³			 ³ aAuxCps   -														 ³±±
±±³			 ³ cArquivo  -														 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ Uso restrito a funcao PMSAddPlan()                                ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PMSPlnCalc(aProcForm, aAuxCps, cArquivo)
	Local nCntLet := 0
	Local nCount  := 0
	Local cBlock  := ""
	Local nx      := 0
	Local ny      := 0
	Local bBlock  := ErrorBlock({|e| ChecErro(e)}) // salva o manipulador de erro padrao

	For nx := 1 to Len(aProcForm)
		nCntLet := 0
		nCount := 0

		For ny := 1 to Len(aAuxCps)
			If Substr(aAuxCps[ny,1], 1, 1) # "|"
				nCntLet++
				If nCntLet > 26
					nCntLet	:= 1
					nCount++
				EndIf
				If nCount > 0
					If Upper(AllTrim((cArquivo)->(FieldName(1))))=="CTRLNIV"
						&(Chr(64+nCntLet)+Chr(48+nCount)) := (cArquivo)->(FieldGet(ny+1))
					Else
						&(Chr(64+nCntLet)+Chr(48+nCount)) := (cArquivo)->(FieldGet(ny))
					EndIf
				Else
					If Upper(AllTrim((cArquivo)->(FieldName(1))))=="CTRLNIV"
						&(Chr(64+nCntLet)) := (cArquivo)->(FieldGet(ny+1))
					Else
						&(Chr(64+nCntLet)) := (cArquivo)->(FieldGet(ny))
					EndIf
				EndIf
			EndIf
		Next

		If RepVar(@cBlock, Substr(aAuxCps[aProcForm[nx],1],58,60))==-1
			Alert(STR0271 + Substr(aAuxCps[aProcForm[nx],1],2,12)+;//"Erro processando o campo "
			"="+cBlock)
			Return .F.
		EndIf

		Begin Sequence
			FieldPut(ColumnPos("FORM"+StrZero(aProcForm[nx],2,0)), &(cBlock))

			// recalcula as formulas anteriores (somente as formulas)
			// este recalculo e necessario para formulas que utilizam
			// formulas ainda nao calculadas

			// o recalculo deve ser feito apos o calculo da formula atual
			cBlock := ""
			nCntLet := 0
			nCount := 0

			For ny := 1 to Len(aAuxCps)
				If Substr(aAuxCps[ny,1], 1, 1) # "|"
					nCntLet++
					If nCntLet > 26
						nCntLet	:= 1
						nCount++
					EndIf

					If Substr(aAuxCps[ny,1],1,1)=="%"
						If RepVar(@cBlock, Substr(aAuxCps[ny,1],58,60))==-1
							Alert(STR0271 + Substr(aAuxCps[ny,1],2,12)+"="+cBlock)//"Erro processando o campo "
							MsUnlock()
							Return .F.
						EndIf
					Else
						Loop
					EndIf

					If nCount > 0
						&(Chr(64+nCntLet)+Chr(48+nCount)) := &(cBlock)
					Else
						&(Chr(64+nCntLet)) := &(cBlock)
					EndIf
					FieldPut(ColumnPos("FORM"+StrZero(ny,2,0)), &(cBlock))
				EndIf
			Next
		Recover
			ErrorBlock(bBlock)
			Return .F.
		End Sequence
	Next
	// restaura o manipulador de erros padrao
	ErrorBlock(bBlock)
Return .T.

Function PmsPanelV(oDlg,lVisual)
Local oPanel
Local oBold
Local oItalic
Local cBlkGet
Local cAuxR := cRevisa

DEFAULT lVisual := .T.

	DEFINE FONT oBold NAME "Arial" SIZE 0, -14 BOLD
	DEFINE FONT oItalic NAME "Arial" SIZE 0, -13 BOLD ITALIC

	oPanel := TPanel():New(0,0,'',oDlg, oDlg:oFont, .T., .T.,, ,1400,15,.T.,.T. )

	@ 03,04 SAY STR0124 + " " + AllTrim(AF8->AF8_PROJET)+"-"+AllTrim(AF8->AF8_DESCRI) Of ;
	  oPanel PIXEL SIZE 285, 9 FONT oBold //"Projeto : "

	If lVisual
		@ 03,290 SAY STR0288 + " " + cRevisa Of oPanel PIXEL SIZE 285 ,9 FONT oBold //"Versao :"
	Else
		@ 03,290 SAY STR0288 Of oPanel PIXEL SIZE 40, 9 FONT oBold //"Versao :"

		cBlkGet := "{ | u | If( PCount() == 0, "+"cRevisa"+","+"cRevisa"+":= u ) }"
		TGet():New( 02,340 ,&cBlKGet ,oPanel,35,9,PesqPict('AF8','AF8_REVISA'), {|| ExistCpo("AFE",AF8->AF8_PROJET+cRevisa) .And. If(cAuxR<>cRevisa,Eval(bRefreshAll),.T.) },,,oItalic, .T.,, .T.,, .T., {|| If(lVisual,.F.,(M->AJB_PROJET:=AF8->AF8_PROJET,cAuxR:=cRevisa)) }, .F., .F.,, .F., .F. ,"AFE1",,,,,.T.)
		@ 10000,10000 BUTTON "" SIZE 1,1   ACTION {|| Nil }  OF oPanel PIXEL
	EndIf

Return oPanel

Static Function GravaExpand(aExp)
Local cProfExChave   := AF8->AF8_PROJET
Local n
Local cList := ""
psworder(1)
PswSeek(__cUSerID)
aRet      := PswRet(1)
cUsrName := aRet[1,2]

For n:=1 to Len(aExp)
    cList += aExp[n,1]+"|"+Iif(aExp[n,2],"T","F")+CRLF // string do conteudo do aExpand a ser gravado no memo do Profile.usr
Next

If FindProfDef( cUsrName, FunName(), cProfExChave, "PMSTREE" )
	WriteProfDef(cUsrName, FunName(), cProfExChave, "PMSTREE", cUsrName, FunName(), cProfExChave, "PMSTREE", cList )
Else
	WriteNewProf( cUsrName, FunName(), cProfExChave, "PMSTREE", cList )
Endif
Return


Static Function LeExpand(aExpand)
Local cProfExChave   := AF8->AF8_PROJET
Local nX
Local cMemoProf:=""
Local nElem1	:=	0
Local nElem2	:=	0
Local nPos		:=	0
Local nTamMemo	:=	0
psworder(1)
PswSeek(__cUSerID)
aRet      := PswRet(1)
cUsrName := aRet[1,2]

//Carrega profile do usuario (expansao da arvore do projeto)
If FindProfDef( cUsrName, FunName(), cProfExChave, "PMSTREE" )
	cMemoProf := RetProfDef(cUsrName,FunName() ,cProfExChave, "PMSTREE")
	nTamMemo  := MLCount(cMemoProf,20)
	For nX := 1 To nTamMemo
		nPos := At ("|",MemoLine(cMemoProf,20,nX))
      If nPos > 0
			nElem1 := Left(MemoLine(cMemoProf,20,nX),nPos-1 )
			nElem2 := Substr(MemoLine(cMemoProf,20,nX),nPos+1,1 )
			aAdd(aExpand,{ nElem1, Iif ( nElem2 == "T",.T.,.F. ) })
		Endif
	Next nX
Endif
Return
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSc1TrfWhen³ Autor ³ Daniel Sobreira     ³ Data ³ 24-05-2005 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de posicionamento da AF8 para preench. campo tarefa.   ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³PMSDLGSC,PMSXFUN												³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmSC1TrfWhen()
Local lRet	:=.F.

If IntePms()
	AF8->(DbSetOrder(1))
	AF8->(DbGoTop())
	lRet := (AF8->(dbSeek(xFilial()+aCols[n,aScan(aHeader,{|x|AllTrim(x[2])=="C1_PROJET"})])))
	If lRet
		cEofF3AF9 := aCols[n,aScan(aHeader,{|x|AllTrim(x[2])=="C1_PROJET"})]+;
					 aCols[n,aScan(aHeader,{|x|AllTrim(x[2])=="C1_REVISA"})]
	EndIf
EndIf
Return (lRet)
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSc1TrfVAl³ Autor ³ Daniel Sobreira      ³ Data ³ 24-05-2005 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de verificacao do AF9 para preench. campo tarefa.      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³PMSDLGSC,PMSXFUN												³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmSC1TrfVal()
Local cProjeto	:= aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="C1_PROJET"})]
Local cRevisa	:= aCols[n,aScan(aHeader,{|x|Alltrim(x[2])=="C1_REVISA"})]
Local nPosTRT	:= aScan(aHeader,{|x|Alltrim(x[2])=="C1_TRT"})
Local lRet		:=.F.
Local lGerEmp	:= .F.
Local cTRT		:= aCols[n,nPosTrt]

lRet := ExistCpo("AF9",cProjeto+cRevisa+M->C1_Tarefa,1)

If lRet .And. !Empty(cProjeto) .And. Empty(cTRT) .And. !Empty(M->C1_TAREFA)
	// parametro que determina se gera empenho direto sem perguntar nada (.T.)
  	lGerEmp := GetNewPar("MV_PMSSCGE",.F.)
	If lGerEmp  // gera empenho direto sem perguntar nada
   	aCols[n,nPosTrt]	 := PmsPrxEmp(cProjeto,cRevisa,M->C1_TAREFA)
	ElseIf GetMV("MV_PMSBXEM") .And. Aviso(STR0254,STR0255,{STR0179,STR0180},2)==1  //"Gerenciamento de Projetos"##"Voce deseja gerar um empenho deste item ao projeto ?"
		aCols[n,nPosTrt]	 := PmsPrxEmp(cProjeto,cRevisa,M->C1_TAREFA)
	Else
		aCols[n,nPosTrt]	 :=	SPACE(LEN(AFG->AFG_TRT))
	EndIf
EndIf

Return lRet
Return(lRet)
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PMSc1PrjVld³ Autor ³ Bruno Sobieski       ³ Data ³ 24-05-2005 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao para validar o projeto informado no C1_PROJET.         ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³PMSDLGSC,PMSXFUN												³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmSC1PrjVld()
Local lRet		:= .T.
Local cItemSC  :=	acols[n,aScan(aHeader,{|x| Alltrim(x[2]) == "C1_ITEM"})]
Local nPosRat	:=	0
Local	aHelpEsp	:=	{"Este item tiene ya esta vinculado a","uno o mas tareas/proyectos."	,"Verifique en el boton para vinculo con","proyectos."}
Local	aHelpPor	:=	{"Este item ja esta amarrado a uma ou ","mais tarefas/projetos."		,"Verifique no botao para amarracao com ","projetos."}
Local	aHelpEng	:=	{"This item is already linked with one","or more tasks/projects."		,"Check the project toolbar button."}
Local nX	:=	0
If IntePms() .And. Type("aRatAFG")=="A" .And. Len(aRatAFG)>0 .And. (nPosRat		:= aScan(aRatAFG,{|x| x[1] == cItemSC}) )> 0
	For nX := 1 To Len(aRatAFG[nPosRat,2])
		If !aRatAFG[nPosRat,2,nX,Len(aRatAFG[nPosRat,2,nX])]
			lRet	:=	.F.
			Exit
		Endif
	Next
EndIf
If !lRet
	PutHelp("PMTA110PRJ",aHelpPor,aHelpEng,aHelpEsp,.F.)
	Help(" ",1,"MTA110PRJ")
Endif
Return (lRet)
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³PmsTrtSC1³ Autor ³ Bruno Sobieski         ³ Data ³ 01-06-2005 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de validacao da sequencia de empenho do projeto.       ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³SIGAPMS														³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsTrtSC1()
Return Vazio().Or. ExistChav("AFJ",aCols[n,aScan(aHeader,{|x|AllTrim(x[2])=="C1_PROJET"})]+aCols[n,aScan(aHeader,{|x|AllTrim(x[2])=="C1_TAREFA"})]+M->C1_TRT,3)
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³AlltaskToSim³ Autor ³ Bruno Sobieski      ³ Data ³ 01-06-2005 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Converte do array do alltask para o formato do simulado.      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³SIGAPMS														³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function AllTaskToSim(aAlltask,nTarefa,cRecurso)
Local aDadosSim	:=	{}
Local nX,nY,nZ
For nX:=1 To nTarefa //Len(aAllTask)
	For nZ	:=	1	To Len(aAlltask[nX,13])
		If cRecurso == aAllTask[nX,13,nZ]
			AAdd(aDadosSim,Array(SIM_QTDELEM))
			aDadosSim[Len(aDadosSim),SIM_PROJETO]:=	aAllTask[nX,1]
			aDadosSim[Len(aDadosSim),SIM_REVISA]:= 	aAllTask[nX,2]
			aDadosSim[Len(aDadosSim),SIM_TAREFA]:=	aAllTask[nX,3]
			aDadosSim[Len(aDadosSim),SIM_START	]:=	aAllTask[nX,4]
			aDadosSim[Len(aDadosSim),SIM_HORAI ]:= 	aAllTask[nX,5]
			aDadosSim[Len(aDadosSim),SIM_FINISH]:= 	aAllTask[nX,6]
			aDadosSim[Len(aDadosSim),SIM_HORAF ]:= 	aAllTask[nX,7]
			aDadosSim[Len(aDadosSim),SIM_RECURS]:= 	aAllTask[nX,13,nZ]
			aDadosSim[Len(aDadosSim),SIM_PRIORI]:= 	aAllTask[nX,8]
			aDadosSim[Len(aDadosSim),SIM_HDURAC]:= 	0
			aDadosSim[Len(aDadosSim),SIM_CALEND]:=	aAllTask[nX,10]
			aDadosSim[Len(aDadosSim),SIM_QUANT ]:= 	aAllTask[nX,11]
			aDadosSim[Len(aDadosSim),SIM_DESCRI]:=	""
			aDadosSim[Len(aDadosSim),SIM_RECAF9]:=	aAllTask[nX,17]
			aDadosSim[Len(aDadosSim),SIM_ALOC  ]:= 	aAllTask[nX,18,nZ]
			aDadosSim[Len(aDadosSim),SIM_PREDEC]:=	{}
			For nY	:=	1	To Len(aAllTask[nX,12])
				If !Empty(aAllTask[nX,12,nY,1])
					AAdd(aDadosSim[Len(aDadosSim),SIM_PREDEC],{aAllTask[nX,12,nY,1],aAllTask[nX,12,nY,2],aAllTask[nX,12,nY,3]})
				Endif
			Next
		EndIf
	Next
Next
Return aDadosSim
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o    ³GravaCor    ³ Autor ³ Daniel Sobreira     ³ Data ³ 04-07-2005 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Salva a configuracao das cores do Gantt por usuario.		      ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³SIGAPMS														³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function GravaCor(cChave, cConteudo)
Local cProfExChave   := cChave
Local cList
Local aRet
Local cUsrName

psworder(1)
PswSeek(__cUSerID)
aRet      := PswRet(1)
cUsrName := aRet[1,2]
cList	:=	Substr(cConteudo,1,(len(cConteudo)-2))

If FindProfDef( cUsrName, FunName(), cProfExChave, "PMSGANTCOR" )
	WriteProfDef( cUsrName, FunName(), cProfExChave, "PMSGANTCOR", cUsrName, FunName(), cProfExChave, "PMSGANTCOR", cList )
Else
	WriteNewProf( cUsrName, FunName(), cProfExChave, "PMSGANTCOR", cList )
Endif
Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³LeCor		  ³ Autor ³ Daniel Sobreira	³ Data ³ 04-07-2005 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Le a configuracao das cores do Gantt por usuario.				³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³SIGAPMS														³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function LeCor(cChave)
Local cProfExChave   := cChave
Local aAreaAF8 := GetArea("AF8")
Local cCores	:=	""
Local aRet
Local cUsrName

psworder(1)
PswSeek(__cUSerID)
aRet      := PswRet(1)
cUsrName := aRet[1,2]

//Carrega profile do usuario (Cores do Gantt)
If FindProfDef( cUsrName, FunName(), cProfExChave, "PMSGANTCOR" )
	cCores	:=	RetProfDef(cUsrName,FunName() ,cProfExChave, "PMSGANTCOR")
Endif
RestArea(aAreaAF8)
Return cCores
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao	 ³PmsJobRlz ³ Autor ³Edson Maricate			³ Data ³19.07.2005³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Job de calculo do PMS										  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno	 ³Nenhum													  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpO1: Objeto XML											  ³±±
±±³			 ³ExpN2: ID do JOB											  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA   ³ Programador   ³Manutencao Efetuada						  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³			 ³				 ³											  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PmsJobRlz(cCodEmp,cCodFil,cProjeto,cRevisa,cEDT,dDataRef)

Local lContinua := .F.

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Preparando o ambiente para execucao                                     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
RpcSetType ( 3 )
PREPARE ENVIRONMENT EMPRESA cCodEmp FILIAL cCodFil MODULO "PMS"

While !lContinua .And. !KillApp()
	lContinua  :=  LockByName("PMSJOBRLZ"+cCodEmp+cCodFil+cProjeto+cRevisa+cEDT,.T.,.T.,.T.)
	Sleep(800)
End
If lContinua
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Pesquisa o Pedido de Venda solicitado                                   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
//	ConOut("PMSJOBRLZ("+cProjeto+cRevisa+cEDT+"): "+STR0257) //"Job PmsJobRlz em execução. Aguarde finalização do Job..."
	AuxAtuRlz(cProjeto,cRevisa,cEDT,dDataRef)
//	ConOut("PMSJOBRLZ("+cProjeto+cRevisa+cEDT+"): "+STR0270)//"Job PmsJobRlz executado com sucesso."
EndIf
UnLockByName("PMSJOBRLZ"+cCodEmp+cCodFil+cProjeto+cRevisa+cEDT,.T.,.T.,.T.)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Finalisando o ambiente para execucao                                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
RESET ENVIRONMENT

Return(.T.)
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³PmsEmpSC6³ Autor ³ Bruno Sobieski			³ Data ³ 30-07-2005 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao para selecao da sequencia de empenho do projeto.		³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³SIGAPMS														³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsEmpSC6()
Local cProjeto	:=	aCols[n,aScan(aHeader,{|x|AllTrim(x[2])=="C6_PROJPMS"})]
Local cTarefa	:=	aCols[n,aScan(aHeader,{|x|AllTrim(x[2])=="C6_TASKPMS"})]
Local cProduto	:=	aCols[n,aScan(aHeader,{|x|AllTrim(x[2])=="C6_PRODUTO"})]
Local cLocal	:=	aCols[n,aScan(aHeader,{|x|AllTrim(x[2])=="C6_LOCAL"})]
Local cTes		:=	aCols[n,aScan(aHeader,{|x|AllTrim(x[2])=="C6_TES"})]
Local nPosTrt	:=	aScan(aHeader,{|x|AllTrim(x[2])=="C6_TRT"})
Local cTrt		:=	SPACE(LEN(SC6->C6_TRT))
If nPosTrt	> 0 .And. !Empty(cTes).And. !Empty(cTarefa) .And. Empty(aCols[n,nPosTrt])
	If SF4->F4_MOVPRJ $ "25"
		If GetMV("MV_PMSBXEM") .And. Aviso(STR0268,STR0269,{STR0179, STR0180},2)==1  //"Empenhos do projeto"###"Voce deseja selecionar um empenho para efetuar a baixa ?"###"Sim"###"Nao"
			cTrt	:=	PmsSelEmp(cProjeto,cTarefa,aHeader,aCols,cProduto,cLocal)
		EndIf
	Endif
Endif
Return cTrt
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 |PmsChkAFV³ Autor ³ Daniel Sobreira			 ³ Data ³ 25-08-2005 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Verifica a existencia do filial+prj+revisao+edt+usuario na tab.AFV³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ cUser - Usuario a ser verificado									 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³Generico															 ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsChkAFV(cUser)
Local lRet:= .T.

AFV->(DbSetOrder(1))
If AFV->(DbSeek(xFilial()+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA+cUser)) .or. AFV->(DbSeek(xFilial()+AF9->AF9_PROJET+CriaVar("AFV_REVISA",.F.)+AF9->AF9_TAREFA+cUser))
	Aviso(STR0365,STR0364,{STR0203},2) //"Usuario Ja Cadastrado"##"Este Usuario nao podera ser incluido."
	lRet:=.F.
EndIf
Return lRet
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 |PmsChkAFX³ Autor ³ Daniel Sobreira			 ³ Data ³ 25-08-2005 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Verifica a existencia do filial+prj+revisao+edt+usuario na tab.AFX³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ cUser - Usuario a ser verificado									 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³Generico															 ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsChkAFX(cUser)
Local lRet:= .T.

AFX->(DbSetOrder(1))
If AFX->(DbSeek(xFilial()+AFC->AFC_PROJET+AFC->AFC_REVISA+AFC->AFC_EDT+cUser)) .or. AFX->(DbSeek(xFilial()+AFC->AFC_PROJET+CriaVar("AFX_REVISA",.F.)+AFC->AFC_EDT+cUser))
	Aviso(STR0365,STR0364,{STR0203},2) //"Usuario Ja Cadastrado"##"Este Usuario nao podera ser incluido."
	lRet:=.F.
EndIf
Return lRet
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Funcao	 ³PmsJobRlz ³ Autor ³Edson Maricate			³ Data ³19.07.2005³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Job de calculo do PMS										  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Retorno   ³Nenhum													  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Parametros³ExpO1: Objeto XML											  ³±±
±±³			 ³ExpN2: ID do JOB											  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³   DATA	 ³ Programador	 ³Manutencao Efetuada						  ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³			 ³				 ³											  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PmsJobEDT(cCodEmp,cCodFil,cProjeto,cRevisa,cEDTPai)
Local lContinua := .F.

//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Preparando o ambiente para execucao                                     ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
RpcSetType ( 3 )
PREPARE ENVIRONMENT EMPRESA cCodEmp FILIAL cCodFil MODULO "PMS"

While !lContinua .And. !KillApp()
	lContinua  :=  LockByName("PMSJOBEDT"+cCodEmp+cCodFil+cProjeto+cRevisa+cEDTPai,.T.,.T.,.T.)
	Sleep(800)
End
If lContinua
	//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
	//³Pesquisa o Pedido de Venda solicitado                                   ³
	//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
	AuxAtuEDT(cProjeto,cRevisa,cEDTPai)
EndIf
UnLockByName("PMSJOBEDT"+cCodEmp+cCodFil+cProjeto+cRevisa+cEDTPai,.T.,.T.,.T.)
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³Finalisando o ambiente para execucao                                    ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
RESET ENVIRONMENT

Return(.T.)
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Function PmsRedeRel(oTree,cArquivo)
Local nTop      := oMainWnd:nTop+35
Local nLeft     := oMainWnd:nLeft+10
Local nBottom   := oMainWnd:nBottom-12
Local nRight    := oMainWnd:nRight-10
Local dIni
Local nx
Local oDlg
Local lRet := .T.
Local lAtualiza := .F.
Local oGantt
Local oBold
Local aGant		:= {}
Local cAlias
Local aAllTrf	:= {}
Local aConfig	:= {99}
Local nTsk	:= 1
Local aDep	:= {}
Local aEDTPai	:= {}
Local aButtons	:= {}

If ParamBox({	{1,"Niveis do Gantt",aConfig[1],"@E 99","","","",20 ,.T. }	},"Rede de Relacionamentos",aConfig)

	If oTree!= Nil
		cAlias	:= SubStr(oTree:GetCargo(),1,3)
		nRecAlias	:= Val(SubStr(oTree:GetCargo(),4,12))
	ElseIf cArquivo <> Nil
		cAlias := (cArquivo)->ALIAS
		nRecAlias := (cArquivo)->RECNO
	EndIf

	DEFINE FONT oBold NAME "Arial" SIZE 0, -11 BOLD
	IncProc("Carregando Tarefas...")
	If cAlias == "AF8"
		dbSelectArea("AF8")
		dbGoto(nRecAlias)
		dbSelectArea("AFC")
		dbSetOrder(1)
		dbSeek(xFilial()+AF8->AF8_PROJET+cRevisa+Padr(AF8->AF8_PROJET,Len(AFC->AFC_EDT)))
		PmsLoadTask(AFC->AFC_PROJET+AFC->AFC_REVISA+AFC->AFC_EDT,aAllTrf)
	ElseIf cAlias == "AFC"
		dbSelectArea("AFC")
		dbGoto(nRecAlias)
		PmsLoadTask(AFC->AFC_PROJET+AFC->AFC_REVISA+AFC->AFC_EDT,aAllTrf)
	ElseIf cAlias == "AF9"
		dbSelectArea("AF9")
		dbGoto(nRecAlias)
		PmsLoadTask(AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA,aAllTrf,.T.)
	Endif

	ProcRegua(Len(aAllTrf))

	nRede := 1
	For nx := 1 to Len(aAllTrf)
		IncProc(STR0249)//"Processando Redes.Aguarde..."
		AF9->(dbGoto(aAllTrf[nx]))
		dbSelectArea("AFD")
		AFD->(dbSetOrder(2))
		If MsSeek(xFilial()+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA) // Se for uma predecessora
			If PmsRedeTrf(aAllTrf[nx],aGant,oBold,aDep,aEDTPai,,aConfig[1])
				aAdd(aGant,{{StrZero(nRede,4),STR0250+StrZero(nRede,4),"","",""},{{PMS_EMPTY_DATE,"  :  ",PMS_EMPTY_DATE,"  :  ","",,,1,CLR_WHITE}},CLR_WHITE,})//"Final da Rede "
				nRede++
			EndIf
		EndIf
	Next

	While lRet

		lRet := .F.

		DEFINE MSDIALOG oDlg TITLE STR0256 OF oMainWnd PIXEL FROM nTop,nLeft TO nBottom,nRight  //"Redes de relacionamentos"
		oDlg:lMaximized := .T.
		aAuxCfg := {6,.T.,.T.,.T.,.T.,.T.,.T.,"1"}

		AADD(aButtons, {BMP_RETROCEDER_CAL	, {|| (PmsPrvGnt(cVersao,@oDlg,aConfig,@dIni,aGant,@nTsk),oDlg:End(),lRet := .T.) }, TIP_RETROCEDER_CAL})
		AADD(aButtons, {BMP_AVANCAR_CAL		, {|| (PmsNxtGnt(cVersao,@oDlg,aConfig,@dIni,aGant,@nTsk),oDlg:End(),lRet := .T.) }, STR0276 })
		AADD(aButtons, {BMP_CORES			, {|| {PMSColorGantt("MV_PMSGCOR") ,oDlg:End() ,lRet := .T. ,lAtualiza := .T.} }, TIP_CORES})
		EnchoiceBar(oDlg,{|| oDlg:End()},{|| oDlg:End()},,aButtons,,,,,.F.,.F.)
		oGantt := PmsGantt(aGant,aAuxCfg,@dIni,,oDlg,{14,1,(nBottom/2)-40,(nRight/2)-4},{{STR0098,35},{STR0068,105},{STR0099,28},{STR0100,28},{STR0101,28}},@nTsk ,aDep,"Redes de relacionamentos ")
		aConfig[1] := aAuxCfg[1]
		ACTIVATE MSDIALOG oDlg
	EndDo
EndIf
Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³          ³               ³                                            ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
/*/
Static Function PmsLoadTask(cChave,aTrfs,lTarefa)
Local aArea:= GetArea()
Local aAreaAFA := AFA->(GetArea())
Local aAreaAFC := AFC->(GetArea())
Local aAreaAF9 := AF9->(GetArea())
Local cFilAF9	:= xFilial("AF9")
Local cFilAFC	:= xFilial("AFC")
DEFAULT lTarefa := .F.

If lTarefa
	aAdd(aTrfs,AF9->(RecNo()))
Else
	dbSelecTArea("AF9")
	dbSetOrder(2)
	MsSeek(cFilAF9+cChave)
	While !Eof() .And. AF9->AF9_FILIAL+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_EDTPAI==;
					cFilAF9+cChave
		aAdd(aTrfs,AF9->(RecNo()))
		dbSelecTArea("AF9")
		dbSkip()
	End
	dbSelectArea("AFC")
	dbSetOrder(2)
	MsSeek(xFilial()+cChave)
	While !Eof() .And. AFC->AFC_FILIAL+AFC->AFC_PROJET+AFC->AFC_REVISA+;
						AFC->AFC_EDTPAI==cFilAFC+cChave
		PmsLoadTask(AFC->AFC_PROJET+AFC->AFC_REVISA+AFC->AFC_EDT,aTrfs)
		dbSkip()
	End
EndIf

RestArea(aAreaAF9)
RestArea(aAreaAFC)
RestArea(aAreaAFA)
RestArea(aArea)
Return
/*/
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³			 ³				 ³											  ³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
/*/
Function PmsRedeTrf(nRecAF9,aGant,oBold,aTarefasDep,aTrfs,nNivel,nMaxNiveis,aEDTPai)
Local lRet 			:= .F.
Local nRealEspaco := (VAL(AF9->AF9_NIVEL)-1)
Local nEspaco := nRealEspaco*3
Local cDescri	:= ""
Local aArea := GetArea()
Local aAreaAFC := AFC->(GetArea())
Local aAreaAF9 := AF9->(GetArea())
Local aAreaAFD := AFD->(GetArea())
Local aAreaAJ4 := AJ4->(GetArea())
Local aAuxAreaAF9
Local aCorBarras := LoadCorBarra( "MV_PMSGCOR" )
Local nx
Local cFilAFD		:= xFilial("AFD")
Local cFilAJ4		:= xFilial("AJ4")

DEFAULT nNivel		:= 1
DEFAULT aEDTPai	:= {}

If nNivel <= nMaxNiveis
	dbSelectArea("AF9")
	MsGoto(nRecAF9)

	If aScan(aTrfs,AF9->AF9_TAREFA) <= 0
		aAdd(aTrfs,AF9->AF9_TAREFA)
		dbSelectArea("AFD")
		dbSetOrder(1)

		If MsSeek(cFilAFD+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA)
			While !AFD->(EOF()) .And.  cFilAFD+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA== AFD->AFD_FILIAL+AFD->AFD_PROJET+AFD->AFD_REVISA+AFD->AFD_TAREFA
				nPos := aScan( aTarefasDep ,{|aTarefa| aTarefa[1] == AFD->AFD_TAREFA})
				If nPos > 0
					aadd( aTarefasDep[nPos,2],{ AFD->AFD_PREDEC ,AFD->AFD_TIPO } )
				Else
					aadd( aTarefasDep ,{ AFD->AFD_TAREFA ,{ {AFD->AFD_PREDEC ,AFD->AFD_TIPO} }} )
				Endif
				AFD->(dbSkip())
			EndDo
		EndIf

		dbSelectArea("AJ4")
		dbSetOrder(1)
		If MsSeek(cFilAJ4+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA)
			While !AJ4->(EOF()) .And.  cFilAJ4+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA== AJ4->AJ4_FILIAL+AJ4->AJ4_PROJET+AJ4->AJ4_REVISA+AJ4->AJ4_TAREFA
				nPos := aScan( aTarefasDep ,{|aTarefa| aTarefa[1] == AJ4->AJ4_TAREFA})
				If nPos > 0
					aadd( aTarefasDep[nPos,2],{ AJ4->AJ4_PREDEC ,AJ4->AJ4_TIPO } )
				Else
					aadd( aTarefasDep ,{ AJ4->AJ4_TAREFA ,{ {AJ4->AJ4_PREDEC ,AJ4->AJ4_TIPO} }} )
				Endif
				AJ4->(dbSkip())
			End
		EndIf

		If Len(AllTrim( AF9->AF9_DESCRI )) <= (34-(nRealEspaco))
			cDescri := SPACE(nEspaco)+Substr( AF9->AF9_DESCRI,1,34-(nRealEspaco) )
		Else
			cDescri := SPACE(nEspaco)+Substr( AF9->AF9_DESCRI,1,31-(nRealEspaco) )+"..."
		EndIf
		lRet 			:= .T.
		Do Case
			Case !Empty(AF9->AF9_DTATUF)
				aAdd(aGant,{{AF9->AF9_TAREFA,cDescri,DTOC(AF9->AF9_START),DTOC(AF9->AF9_FINISH),Transform(AF9->AF9_HDURAC,"@E 99999.99h"),SPACE(nEspaco)+Alltrim(AF9->AF9_DESCRI)},{{AF9->AF9_START,AF9->AF9_HORAI,AF9->AF9_FINISH,AF9->AF9_HORAF,STR0139+AllTrim(TransForm(PmsPOCAF9(AF9->AF9_PROJET, AF9->AF9_REVISA,AF9->AF9_TAREFA,PMS_MAX_DATE,AF9->AF9_QUANT),"@E 999.99%")),,"PmsViewTask("+STR(AF9->(RecNo()))+")",1,CLR_GRAY}},ValorCorBarra( "2" ,aCorBarras ),}) //"POC:"
			Case !Empty(AF9->AF9_DTATUI)
				aAdd(aGant,{{AF9->AF9_TAREFA,cDescri,DTOC(AF9->AF9_START),DTOC(AF9->AF9_FINISH),Transform(AF9->AF9_HDURAC,"@E 99999.99h"),SPACE(nEspaco)+Alltrim(AF9->AF9_DESCRI)},{{AF9->AF9_START,AF9->AF9_HORAI,AF9->AF9_FINISH,AF9->AF9_HORAF,STR0139+AllTrim(TransForm(PmsPOCAF9(AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_TAREFA,PMS_MAX_DATE,AF9->AF9_QUANT),"@E 999.99%")),,"PmsViewTask("+STR(AF9->(RecNo()))+")",1,CLR_BROWN}},ValorCorBarra( "2" ,aCorBarras ),}) //"POC:"
			Case dDataBase > AF9->AF9_START
				aAdd(aGant,{{AF9->AF9_TAREFA,cDescri,DTOC(AF9->AF9_START),DTOC(AF9->AF9_FINISH),Transform(AF9->AF9_HDURAC,"@E 99999.99h"),SPACE(nEspaco)+Alltrim(AF9->AF9_DESCRI)},{{AF9->AF9_START,AF9->AF9_HORAI,AF9->AF9_FINISH,AF9->AF9_HORAF,STR0139+AllTrim(TransForm(PmsPOCAF9(AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_TAREFA,PMS_MAX_DATE,AF9->AF9_QUANT),"@E 999.99%")),,"PmsViewTask("+STR(AF9->(RecNo()))+")",1,CLR_HRED}},ValorCorBarra( "2" ,aCorBarras ),}) //"POC:"
			OtherWise
				aAdd(aGant,{{AF9->AF9_TAREFA,cDescri,DTOC(AF9->AF9_START),DTOC(AF9->AF9_FINISH),Transform(AF9->AF9_HDURAC,"@E 99999.99h"),SPACE(nEspaco)+Alltrim(AF9->AF9_DESCRI)},{{AF9->AF9_START,AF9->AF9_HORAI,AF9->AF9_FINISH,AF9->AF9_HORAF,STR0139+AllTrim(TransForm(PmsPOCAF9(AF9->AF9_PROJET,AF9->AF9_REVISA,AF9->AF9_TAREFA,PMS_MAX_DATE,AF9->AF9_QUANT),"@E 999.99%")),,"PmsViewTask("+STR(AF9->(RecNo()))+")",1,CLR_GREEN}},ValorCorBarra( "2" ,aCorBarras ),}) //"POC:"
		EndCase

		dbSelectArea("AFD")
		dbSetOrder(2)
		dbSeek(xFilial()+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA)
		While !Eof() .And.xFilial()+AF9->AF9_PROJET+AF9->AF9_REVISA+AF9->AF9_TAREFA== ;
						AFD_FILIAL+AFD_PROJET+AFD_REVISA+AFD_PREDEC
			aAuxAreaAF9 := AF9->(GetArea())
			dbSelectArea("AF9")
			dbSetOrder(1)
			If dbSeek(xFilial()+AFD->AFD_PROJET+AFD->AFD_REVISA+AFD->AFD_TAREFA)
				PmsRedeTrf(AF9->(RecNo()),aGant,oBold,aTarefasDep,aTrfs,nNivel+1,nMaxNiveis,aEDTPai)
			EndIf
			RestArea(aAuxAreaAF9)
			dbSelectArea("AFD")
			dbSkip()
		End
		If nNivel == 1
			For nx := 1 to Len(aEDTPai)
				PmsRedeEDT(AF9->AF9_PROJET,AF9->AF9_REVISA,aEDTPai[nx],aGant,oBold,aTarefasDep,aEDTPai,nNivel,nMaxNiveis)
			Next
		EndIf
	EndIf
EndIf

RestArea(aAreaAFC)
RestArea(aAreaAJ4)
RestArea(aAreaAFD)
RestArea(aAreaAF9)
RestArea(aArea)
Return lRet

Function PmsRedeEDT(cProjeto,cRevisa,cEDTPai,aGant,oBold,aTarefasDep,aEDTPai,nNivel,nMaxNiveis)
Local aArea		:= GetArea()
Local aAreaAFC := AFC->(GetArea())
Local aAreaAF9 := AF9->(GetArea())
Local aAreaAFD := AFD->(GetArea())
Local aAreaAJ4 := AJ4->(GetArea())
Local aCorBarras := LoadCorBarra( "MV_PMSGCOR" )

	If aScan(aEDTPai,cEDTPai) <= 0
		aAdd(aEDTPai,cEDTPai)
		dbSelectArea("AJ4")
		dbSetOrder(2)
		dbSeek(xFilial()+cProjeto+cRevisa+cEDTPai)
		While !Eof() .And.xFilial()+cProjeto+cRevisa+cEDTPai== ;
						AJ4_FILIAL+AJ4_PROJET+AJ4_REVISA+AJ4_PREDEC

			dbSelectArea("AFC")
			dbSetOrder(1)
			dbSeek(xFilial()+cProjeto+cRevisa+cEDTPai)
			nRealEspaco := (VAL(AFC->AFC_NIVEL)-1)
			nEspaco := nRealEspaco*3
			If Len(AllTrim( AFC->AFC_DESCRI )) <= (31-(nRealEspaco))
				cDescri := SPACE(nEspaco)+Substr( AFC->AFC_DESCRI,1,31-(nRealEspaco) )
			Else
				cDescri := SPACE(nEspaco)+Substr( AFC->AFC_DESCRI,1,28-(nRealEspaco) )+ "..."
			EndIf
			Do Case
				Case !Empty(AFC->AFC_DTATUF)
					aAdd(aGant,{{AFC->AFC_EDT,cDescri,DTOC(AFC->AFC_START),DTOC(AFC->AFC_FINISH),Transform(AFC->AFC_HDURAC,"@E 99999.99h")},{{AFC->AFC_START,AFC->AFC_HORAI,AFC->AFC_FINISH,AFC->AFC_HORAF,STR0139+AllTrim(TransForm(PmsPOCAFC(AFC->AFC_PROJET,AFC->AFC_REVISA,AFC->AFC_EDT,PMS_MAX_DATE),"@E 999.99%")),,"PmsViewEDT("+STR(AFC->(RecNo()))+")",1,CLR_GRAY}},ValorCorBarra( "1" ,aCorBarras ) ,oBold}) //"POC:"
				Case !Empty(AFC->AFC_DTATUI)
					aAdd(aGant,{{AFC->AFC_EDT,cDescri,DTOC(AFC->AFC_START),DTOC(AFC->AFC_FINISH),Transform(AFC->AFC_HDURAC,"@E 99999.99h")},{{AFC->AFC_START,AFC->AFC_HORAI,AFC->AFC_FINISH,AFC->AFC_HORAF,STR0139+AllTrim(TransForm(PmsPOCAFC(AFC->AFC_PROJET,AFC->AFC_REVISA,AFC->AFC_EDT,PMS_MAX_DATE),"@E 999.99%")),,"PmsViewEDT("+STR(AFC->(RecNo()))+")",1,CLR_BROWN}},ValorCorBarra( "1" ,aCorBarras ) ,oBold}) //"POC:"
				Case dDataBase > AFC->AFC_START
					aAdd(aGant,{{AFC->AFC_EDT,cDescri,DTOC(AFC->AFC_START),DTOC(AFC->AFC_FINISH),Transform(AFC->AFC_HDURAC,"@E 99999.99h")},{{AFC->AFC_START,AFC->AFC_HORAI,AFC->AFC_FINISH,AFC->AFC_HORAF,STR0139+AllTrim(TransForm(PmsPOCAFC(AFC->AFC_PROJET,AFC->AFC_REVISA,AFC->AFC_EDT,PMS_MAX_DATE),"@E 999.99%")),,"PmsViewEDT("+STR(AFC->(RecNo()))+")",1,CLR_HRED}},ValorCorBarra( "1" ,aCorBarras ) ,oBold}) //"POC:"
				OtherWise
					aAdd(aGant,{{AFC->AFC_EDT,cDescri,DTOC(AFC->AFC_START),DTOC(AFC->AFC_FINISH),Transform(AFC->AFC_HDURAC,"@E 99999.99h")},{{AFC->AFC_START,AFC->AFC_HORAI,AFC->AFC_FINISH,AFC->AFC_HORAF,STR0139+AllTrim(TransForm(PmsPOCAFC(AFC->AFC_PROJET,AFC->AFC_REVISA,AFC->AFC_EDT,PMS_MAX_DATE),"@E 999.99%")),,"PmsViewEDT("+STR(AFC->(RecNo()))+")",1,CLR_GREEN}},ValorCorBarra( "1" ,aCorBarras ) ,oBold}) //"POC:"
			EndCase
			lRet := .T.

			aAuxAreaAF9 := AF9->(GetArea())
			dbSelectArea("AF9")
			dbSetOrder(1)
			If dbSeek(xFilial()+AJ4->AJ4_PROJET+AJ4->AJ4_REVISA+AJ4->AJ4_TAREFA)
				PmsRedeTrf(AF9->(RecNo()),aGant,oBold,aTarefasDep,aEDTPai,nNivel+1,nMaxNiveis)
			EndIf
			RestArea(aAuxAreaAF9)
			dbSelectArea("AJ4")
			dbSkip()
		End
	EndIf

	dbSelectArea("AFC")
	dbSetOrder(1)
	If dbSeek(xFilial()+cProjeto+cRevisa+cEDTPai) .And. !Empty(AFC->AFC_EDTPAI)
		PmsRedeEDT(cProjeto,cRevisa,AFC->AFC_EDTPAI,aGant,oBold,aTarefasDep,aEDTPai,nNivel,nMaxNiveis)
	EndIf

RestArea(aAreaAFC)
RestArea(aAreaAJ4)
RestArea(aAreaAFD)
RestArea(aAreaAF9)
RestArea(aArea)
Return

Function LoadPrdEDT(aPredec,cChaveEDT)
Local aArea	:= GetArea()
Local aAreaAF9	:= AF9->(GetArea())
Local aAreaAFC	:= AFC->(GetArea())
Local aAreaAFD	:= AF9->(GetArea())
Local cFilAF9		:= xFilial("AF9")
Local cFilAFC		:= xFilial("AFC")

dbSelectArea("AF9")
dbSetOrder(2)
dbSeek(xFilial()+cChaveEDT)
While !Eof() .And. cFilAF9+cChaveEDT==AF9_FILIAL+AF9_PROJET+AF9_REVISA+AF9_EDTPAI
	If aScan(aPredec,{|x| x[2] == AF9->AF9_TAREFA }) <= 0
		aAdd( aPredec ,{AJ4->AJ4_TIPO ,AF9->AF9_TAREFA ,AJ4->AJ4_HRETAR } )
	EndIF
	dbSkip()
End

dbSelectArea("AFC")
dbSetOrder(2)
dbSeek(xFilial()+cChaveEDT)
While !Eof() .And. cFilAFC+cChaveEDT==AFC_FILIAL+AFC_PROJET+AFC_REVISA+AFC_EDTPAI
	LoadPrdEDT(aPredec,AFC->AFC_PROJET+AFC->AFC_REVISA+AFC->AFC_EDT)
	dbSkip()
End

RestArea(aAreaAF9)
RestArea(aAreaAFC)
RestArea(aAreaAFD)
RestArea(aArea)
Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³PmsIniCRTE³ Autor ³ Edson Maricate		³ Data ³ 04-07-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Inicializa as funcoes de calculo de Custos de Projetos		³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³Generico														³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PmsIniCEMP(cProjeto,cRevisa,dDataRef,cTrfDe,cTrfAte,lAcumulado,lFilProd,cProdDe,cProdAte,aArrayTrb)
Local aArea		:= GetArea()
Local aAreaAF9	:= AF9->(GetArea())
Local aAreaAF8	:= AF8->(GetArea())
Local cTrfAtu	:= ''
Local cAliasQry	:= ""
Local cChaveAFM := ""
Local cDbType	:= TCGetDB()
Local cFilAFM	:= xFilial("AFM")
Local cFilSB1	:= xFilial("SB1")
Local cFilAF9	:= xFilial("AF9")
Local cFilSD4AFM:= PmsFilial("SD4","AFM")
Local lTopConn	:= IIf(Type("__lTopConn") == "L",__lTopConn,IfDefTopCTB())
Local lContinua := .T.
Local nPosTrf	:= 0
Local nTamC2Num	:= 0
Local cTamC2Num	:= ""

DEFAULT aArrayTrb	:= {}
DEFAULT cTrfDe		:= ""
DEFAULT cTrfAte		:= "zzzzzzzzzzzz"
DEFAULT cProdDe		:= ""
DEFAULT cProdAte		:= "zzzzzzzzzzzzzzz"
DEFAULT lFilProd 	  := .F.
DEFAULT lAcumulado  := .T.

If AF8->(ColumnPos("AF8_CUSOPE"))>0
	dbSelectArea("AFM")
	dbSetOrder(1)
	MsSeek(cFilAFM+cProjeto+cRevisa+cTrfDe,.T.)
	While !Eof().And.AFM_FILIAL+AFM_PROJET+AFM_REVISA==;
					cFilAFM+cProjeto+cRevisa .And. AFM->AFM_TAREFA <= cTrfAte
		// Considera a data de Inicio previsto da producao da OP
		If AF8->AF8_CUSOPE == "1"
			dbSelectArea("SB1")
			dbSetOrder(1)
			dbSelectArea("SD4")
			dbSetOrder(2) //D4_FILIAL+D4_OP+D4_COD+D4_LOCAL
			If lTopConn
				cAliasQry := "CEMP"+GetNextAlias()
				cQuery := " SELECT D4_DATA,D4_COD,D4_QUANT FROM "+RetSQLName("SD4")
				cQuery += " WHERE D4_FILIAL = '"+cFilSD4AFM+"' "
				cQuery += " AND D4_OP = '"+AFM->AFM_NUMOP+"' "
				cQuery += " AND D4_LOCAL = '"+AFM->AFM_ITEMOP+"' "
				cQuery += " AND D4_OPORIG <> '' "
				If lAcumulado
					cQuery += " AND D4_DATA <= '"+DtoS(dDataRef)+"' "
				Else
					cQuery += " AND D4_DATA = '"+DtoS(dDataRef)+"' "
				Endif
				If lFilProd
					cQuery += " AND ( D4_COD >= '"+cProdDe+"' AND D4_COD <= '"+cProdAte+"' ) "
				Endif
				cQuery += " AND D_E_L_E_T_ = ' ' "
				dbUseArea(.T., "TOPCONN", TcGenQry(,,cQuery), cAliasQry , .T. , .T. )
				While (cAliasQry)->(!Eof())
					If cTrfAtu!=AFM->AFM_TAREFA
						nPosTrf := aScan(aArrayTrb,{|x|x[1]==AFM->AFM_TAREFA})
						If nPosTrf <= 0
							aAdd(aArrayTrb,{AFM->AFM_TAREFA,,{0,0,0,0,0,{}}})
							nPosTrf := Len(aArrayTrb)
						EndIf
						cTrfAtu	:= AFM->AFM_TAREFA
					EndIf
					If SB1->(MsSeek(cFilSB1+(cAliasQry)->D4_COD))
						AF9->(MsSeek(cFilAF9+AF8->AF8_PROJET+AF8->AF8_REVISA+AFM->AFM_TAREFA))
						aArrayTrb[nPosTrf,3,1] += (cAliasQry)->D4_QUANT*SB1->B1_CUSTD
						aArrayTrb[nPosTrf,3,2] += 0
						aArrayTrb[nPosTrf,3,3] += 0
						aArrayTrb[nPosTrf,3,4] += 0
						aArrayTrb[nPosTrf,3,5] += 0
						AddCRTEEDT(@aArrayTrb,{(cAliasQry)->D4_QUANT*SB1->B1_CUSTD,0,0,0,0},cProjeto,cRevisa,AF9->AF9_EDTPAI)
					EndIf
					(cAliasQry)->(dbSkip())
				EndDo

				(cAliasQry)->(dbCloseArea())

			Else

				MsSeek(cFilSD4AFM+AFM->AFM_NUMOP+AFM->AFM_ITEMOP)
				While !Eof() .And. cFilSD4AFM+AFM->AFM_NUMOP+AFM->AFM_ITEMOP==SD4->D4_FILIAL+Substr(SD4->D4_OP,1,8)
					If Empty(SD4->D4_OPORIG) .and. SD4->D4_DATA <= dDataRef
						If !lFilProd .Or. ( lFilProd .And. SD4->D4_COD >= cProdDe .And. SD4->D4_COD <= cProdAte )
							If lAcumulado
								lContinua := (SD4->D4_DATA <= dDataRef)
							Else
								lContinua := SD4->D4_DATA == dDataRef
							EndIf
							If lContinua
								If cTrfAtu!=AFM->AFM_TAREFA
									nPosTrf := aScan(aArrayTrb,{|x|x[1]==AFM->AFM_TAREFA})
									If nPosTrf <= 0
										aAdd(aArrayTrb,{AFM->AFM_TAREFA,,{0,0,0,0,0,{}}})
										nPosTrf := Len(aArrayTrb)
									EndIf
									cTrfAtu	:= AFM->AFM_TAREFA
								EndIf
								If SB1->(MsSeek(cFilSB1+SD4->D4_COD))
									AF9->(MsSeek(cFilAF9+AF8->AF8_PROJET+AF8->AF8_REVISA+AFM->AFM_TAREFA))
									aArrayTrb[nPosTrf,3,1] += SD4->D4_QUANT*RetFldProd(SB1->B1_COD,"B1_CUSTD")
									aArrayTrb[nPosTrf,3,2] += 0
									aArrayTrb[nPosTrf,3,3] += 0
									aArrayTrb[nPosTrf,3,4] += 0
									aArrayTrb[nPosTrf,3,5] += 0
									AddCRTEEDT(@aArrayTrb,{SD4->D4_QUANT*RetFldProd(SB1->B1_COD,"B1_CUSTD"),0,0,0,0},cProjeto,cRevisa,AF9->AF9_EDTPAI)
								EndIf
							EndIf
						EndIf
					EndIf
					SD4->(dbSkip())
				EndDo

			Endif
		EndIf

		// Considera a data de emissao da OP
		If AF8->AF8_CUSOPE == "0"
			dbSelectArea("SB1")
			dbSetOrder(1)
			dbSelectArea("SD4")
			dbSetOrder(2) //D4_FILIAL+D4_OP+D4_COD+D4_LOCAL

			If lTopConn
				cChaveAFM := AFM->(AFM_NUMOP+AFM_ITEMOP)
				nTamC2Num := TamSx3("C2_NUM")[1]
				cTamC2Num := Alltrim(STR(nTamC2Num))

				cAliasQry := "CEMP"+GetNextAlias()
				cQuery := " SELECT SD4.D4_DATA,SD4.D4_COD,SD4.D4_QUANT,SD4.D4_OP, SC2.C2_EMISSAO, SC2.C2_NUM FROM "+RetSQLName("SD4")+" SD4 "
				cQuery += " INNER JOIN "+RetSQLName("SC2")+" SC2 "
				If cDbType $ "DB2/POSTGRES/ORACLE"
					cQuery += " ON SUBSTR(SD4.D4_OP,1,"+cTamC2Num+") = SC2.C2_NUM "
				Else
					cQuery += " ON SUBSTRING(SD4.D4_OP,1,"+cTamC2Num+") = SC2.C2_NUM "
				Endif

				cQuery += " WHERE SD4.D4_FILIAL = '"+cFilSD4AFM+"' "

				If cDbType $ "DB2/POSTGRES/ORACLE"
					cQuery += " AND SUBSTR(SD4.D4_OP,1,"+cTamC2Num+") = '"+AFM->AFM_NUMOP+"' "
				Else
					cQuery += " AND SUBSTRING(SD4.D4_OP,1,"+cTamC2Num+") = '"+AFM->AFM_NUMOP+"' "
				Endif

				cQuery += " AND SD4.D4_LOCAL = '"+AFM->AFM_ITEMOP+"' "
				cQuery += " AND SD4.D4_OPORIG = '' "

				If lAcumulado
					cQuery += " AND SC2.C2_EMISSAO <= '" +DtoS(dDataRef)+ "' "
				Else
					cQuery += " AND SC2.C2_EMISSAO = '" +DtoS(dDataRef)+ "' "
				EndIf

				cQuery += " AND SD4.D_E_L_E_T_ = ' ' "

				dbUseArea(.T., "TOPCONN", TcGenQry(,,cQuery), cAliasQry , .T. , .T. )
				While (cAliasQry)->(!Eof())
					If cTrfAtu!=AFM->AFM_TAREFA
						nPosTrf := aScan(aArrayTrb,{|x|x[1]==AFM->AFM_TAREFA})
						If nPosTrf <= 0
							aAdd(aArrayTrb,{AFM->AFM_TAREFA,,{0,0,0,0,0,{}}})
							nPosTrf := Len(aArrayTrb)
						EndIf
						cTrfAtu	:= AFM->AFM_TAREFA
					EndIf
					If SB1->(MsSeek(cFilSB1+(cAliasQry)->D4_COD))
						AF9->(MsSeek(cFilAF9+AF8->AF8_PROJET+AF8->AF8_REVISA+AFM->AFM_TAREFA))
						aArrayTrb[nPosTrf,3,1] += (cAliasQry)->D4_QUANT*SB1->B1_CUSTD
						aArrayTrb[nPosTrf,3,2] += 0
						aArrayTrb[nPosTrf,3,3] += 0
						aArrayTrb[nPosTrf,3,4] += 0
						aArrayTrb[nPosTrf,3,5] += 0
						AddCRTEEDT(@aArrayTrb,{(cAliasQry)->D4_QUANT*SB1->B1_CUSTD,0,0,0,0},cProjeto,cRevisa,AF9->AF9_EDTPAI)
					EndIf
					(cAliasQry)->(dbSkip())
				EndDo

				(cAliasQry)->(dbCloseArea())

			Else

				MsSeek(cFilSD4AFM+AFM->AFM_NUMOP+AFM->AFM_ITEMOP)
				While !Eof() .And. cFilSD4AFM+AFM->AFM_NUMOP+AFM->AFM_ITEMOP==SD4->D4_FILIAL+Substr(SD4->D4_OP,1,8)
					If Empty(SD4->D4_OPORIG) .and. (!lFilProd .Or. ( lFilProd .And. SD4->D4_COD >= cProdDe .And. SD4->D4_COD <= cProdAte ))
						dbSelectArea("SC2")
						dbSetOrder(1)
						If dbSeek( PmsFilial("SC2","SD4")+SD4->D4_OP )
							If SC2->C2_EMISSAO <= dDataRef
								If lAcumulado
									lContinua := (SC2->C2_EMISSAO <= dDataRef)
								Else
									lContinua := SC2->C2_EMISSAO == dDataRef
								EndIf
								If lContinua
									If cTrfAtu!=AFM->AFM_TAREFA
										nPosTrf := aScan(aArrayTrb,{|x|x[1]==AFM->AFM_TAREFA})
										If nPosTrf <= 0
											aAdd(aArrayTrb,{AFM->AFM_TAREFA,,{0,0,0,0,0,{}}})
											nPosTrf := Len(aArrayTrb)
										EndIf
										cTrfAtu	:= AFM->AFM_TAREFA
									EndIf
									If SB1->(MsSeek(cFilSB1+SD4->D4_COD))
										AF9->(MsSeek(cFilAF9+AF8->AF8_PROJET+AF8->AF8_REVISA+AFM->AFM_TAREFA))
										aArrayTrb[nPosTrf,3,1] += SD4->D4_QUANT*SB1->B1_CUSTD
										aArrayTrb[nPosTrf,3,2] += 0
										aArrayTrb[nPosTrf,3,3] += 0
										aArrayTrb[nPosTrf,3,4] += 0
										aArrayTrb[nPosTrf,3,5] += 0
										AddCRTEEDT(@aArrayTrb,{SD4->D4_QUANT*SB1->B1_CUSTD,0,0,0,0},cProjeto,cRevisa,AF9->AF9_EDTPAI)
									EndIf
								EndIf
							EndIf
						EndIf
					EndIf
					SD4->(dbSkip())
				EndDo
			Endif
		EndIf
		dbSelectArea("AFM")
		dbSkip()
	EndDo
EndIf

RestArea( aAreaAF8 )
RestArea( aAreaAF9 )
RestArea( aArea )
Return aArrayTrb

Function CrteFilIni()
SetKey( VK_F8 , { || CrteFilDlg() } )
Return

Function CrteFilDlg()
Local aRet := {}
If ParamBox( { {5, STR0347, aCrteProc[1], 160,,.F.},;
					{5, STR0348, aCrteProc[2], 160,,.F.},;
					{5, STR0349,aCrteProc[3], 160,,.F.},;
					{5, STR0350, aCrteProc[4], 160,,.F.},;
					{5, STR0351,aCrteProc[5], 160,,.F.},;
					{5, STR0352, aCrteProc[6], 160,,.F.},;
					{5, STR0361, aCrteProc[7], 160,,.F.},; // "Considerar Remessas"
					{7,STR0353,"AF9",cCrteFAF9},;
					{7,STR0354,"SB1",cCrteFSB1},;
					{7,STR0355,"AE8",cCrteFAE8}  }, STR0356, aRet )

	aCrteProc := {aRet[1],aRet[2],aRet[3],aRet[4],aRet[5],aRet[6],aRet[7]}
	cCrteFAF9 := aRet[8]
	cCrteFSB1 := aRet[9]
	cCrteFAE8 := aRet[10]
EndIf
Return

Function CrteFilEnd()
cCrteFAF9 := ""
cCrteFSB1 := ""
cCrteFAE8 := ""
aCrteProc := {}
SetKey( VK_F8 , { || Nil } )

Return
/*/
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³FilHdrAFN³ Autor ³ Cristiano Denardi		³ Data ³ 18-05-2006 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Alimenta aHeader de AFN para uso na NF						³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³Mata103														³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function FilHdrAFN()
Local aArea := GetArea()
Local aHdr  := {}

dbSelectArea("SX3")
dbSetOrder(1)
MsSeek("AFN")
While !EOF() .And. (x3_arquivo == "AFN")
	IF X3USO(x3_usado) .AND. cNivel >= x3_nivel
		AADD(	aHdr,	{	TRIM(x3titulo()), x3_campo, x3_picture,x3_tamanho, x3_decimal, x3_valid,x3_usado, x3_tipo, x3_arquivo,x3_context})
	Endif
	dbSkip()
End
RestArea( aArea )
Return( aHdr )
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³DecBase63 ³ Autor ³ Bruno Sobieski		³ Data ³ 16-11-2006 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Converte um numero decimal para base 63						³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Static Function Dec2Base63(nNum,nTam)
Local aDigitos	:=	{" ","0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S","T","U","V","W","X","Y","Z"}
Local nBase	:=	Len(aDigitos)
Local cRes	:=	''
While nNum >= nBase
   nMod	:= Mod(nNum,nBase)
   nNum	:= Int(nNum/nBase)
	cRes	:=	aDigitos[nMod+1]+cRes
Enddo
cRes	:=	PadL(aDigitos[nNum+1]+cRes,nTam)

Return cRes
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³PMSRange	  ³ Autor ³ Bruno Sobieski		³ Data ³ 23-01-2007 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Monta a interface de Range.									³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PMSRange(cTitulo,cF3,nWidth,cDefault,cTipo,nSize)
Local nX:=0
Local oDlg
Local aSays	:=	{}
Local aGets	:=	{}
Local nOpcao := 0
Local bAdd	:=	{|| If(AddRange(aMV_PAR,cTipo,nSize),(nOpcao := 0, oDlg:End()),Nil) }
Local cRet	:=	""
Local aButtons	:= {}
DEFAULT cDefault:=	""
DEFAULT cTipo	:=	"C"
DEFAULT nWidth  :=	20
DEFAULT cF3     :=	""
DEFAULT nSize   :=	20
DEFAULT cTitulo   :=	""
Private aMV_PAR	:=	MontaMV_PAR(cDefault,nSize)
Private nPosExc := 0
cRet	:=	cDefault
While nOpcao == 0
	aSays:={}
	aGets:={}
	oDlg := MSDIALOG():Create()
	oDlg:cName 		:= "oDlg"
	oDlg:cCaption 	:= STR0382+cTitulo //"Range de "
	oDlg:nLeft 		:= 0
	oDlg:nTop 		:= 0
	oDlg:nWidth 	:= Max(114+(nWidth*2)+16,230) //213
	oDlg:nHeight 	:= 100 + (Len(aMV_PAR)) * 25 + 7
	oDlg:lShowHint 	:= .F.
	oDlg:lCentered 	:= .T.
	EnchoiceBar(oDlg,{|| nOpcao := 1, oDlg:End()},{|| nOpcao := 2, oDlg:End() },,aButtons,,,,,.F.)
	oGeral := TGROUP():Create(oDlg)
	oGeral:cName 	:= "oGeral"
	oGeral:cCaption := ""
	oGeral:nLeft 	:= 7
	oGeral:nTop 	:= 25
	oGeral:nWidth 	:= Max(114+(nWidth*2),216)//37(Margem)+2*nWidth(de e ate)+30(ate)+30(espaco)
	oGeral:nHeight 	:= (Len(aMV_PAR) * 25) + 6
	//Monta os gets e says
	MontaLinhas(oDlg,nWidth,@aSays,@aGets,cF3,bAdd)
	aGets[Len(aGets),1]:SetFocus()
	oDlg:bValid:={|| nOpcao	:=	2 , .T.}
	oDlg:Activate()
	If nOpcao == 0 .And. nPosExc <> 0
		ADel(aMV_PAR,nPosExc)
		ASize(aMV_PAR,Len(aMV_PAR)-1)
	ElseIf ValType(aMV_PAR[Len(aMV_PAR),1]) == "U" .Or. ValType(aMV_PAR[Len(aMV_PAR),2]) == "U"
		aMV_PAR	:=	MontaMV_PAR(cDefault,nSize)
	Endif
	nPosExc := 0
Enddo
If nOpcao == 1
	cRet	:=	""
	For nX:=1 To Len(aMV_PAR)
		If !Empty(aMV_PAR[nX,1]) .Or. !Empty(aMV_PAR[nX,2])
			cRet	+=	aMV_PAR[nX,1] + ".." + aMV_PAR[nX,2] + ";"
		Endif
	Next
Endif
Return cRet
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³MontaLinhas ³ Autor ³ Bruno Sobieski		³ Data ³ 23-01-2007 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Monta as linhas para o Range									³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
*/
Static Function MontaLinhas(oDlg,nWidth,aSays,aGets,cF3,bAdd)
Local nX	:=	0

For nX := 1 To Len(aMV_PAR)
	AAdd(aSays,{TSAY():Create(oDlg),TSAY():Create(oDlg)})
	AAdd(aGets,{TGET():Create(oDlg),TGET():Create(oDlg)})
	nPos	:=	Len(aSays)
	//SAY "DE:"
	aSays[nPos,1]:cName 	:= "oDe"
	aSays[nPos,1]:cCaption := STR0383 //"De:"
	aSays[nPos,1]:nLeft 	:= 16
	aSays[nPos,1]:nTop 		:= 36+(nPos-1)*25
	aSays[nPos,1]:nWidth 	:= 30
	aSays[nPos,1]:nHeight 	:= 17
	aSays[nPos,1]:lShowHint := .F.

	aGets[nPos,1]:cF3 		:= cF3
	aGets[nPos,1]:cName 	:= aMV_PAR[nPos,1]
	aGets[nPos,1]:cCaption := Str(nPos)
	aGets[nPos,1]:cVariable:= "'"+&("aMV_PAR["+Str(nPos)+",1]")+"'"
	aGets[nPos,1]:bSetGet 	:= &("{|u| If(PCount()>0,aMV_PAR["+Str(nPos)+",1]:=u,aMV_PAR["+Str(nPos)+",1]) }")

	aGets[nPos,1]:nLeft 	:= 37
	aGets[nPos,1]:nTop 		:= 33+(nPos-1)*25
	aGets[nPos,1]:nWidth 	:= nWidth
	aGets[nPos,1]:nHeight 	:= 19
	aGets[nPos,1]:lHasButton:= .T.
	//SAY "ATE:"
	aSays[nPos,2]:cName 	:= "oAte"
	aSays[nPos,2]:cCaption := STR0379 //"Ate:"
	aSays[nPos,2]:nLeft 	:= 56+nWidth //16(margem)+30(de)+nWidth(get)+10(espaco)
	aSays[nPos,2]:nTop 		:= 36+(nPos-1)*25
	aSays[nPos,2]:nWidth 	:= 30
	aSays[nPos,2]:nHeight 	:= 17

	aGets[nPos,2]:cF3 		:= cF3
	aGets[nPos,2]:cName 	:= "GetAte"
	aGets[nPos,2]:cCaption := Str(nPos)
	aGets[nPos,2]:cVariable:= "'"+&("aMV_PAR["+Str(nPos)+",2]")+"'"
	aGets[nPos,2]:bSetGet 	:= &("{|u| If(PCount()>0,aMV_PAR["+Str(nPos)+",2]:=u,aMV_PAR["+Str(nPos)+",2]) }")
	aGets[nPos,2]:nLeft 	:= 77+nWidth //37(Margem)+nWidth(de)+30(ate)+10(espaco)
	aGets[nPos,2]:nTop 		:= 33+(nPos-1)*25
	aGets[nPos,2]:nWidth 	:= nWidth
	aGets[nPos,2]:nHeight 	:= 19
	aGets[nPos,2]:lHasButton:= .T.
	If nX == Len(aMV_PAR)
		aGets[nPos,2]:bValid 	:= bAdd
	Endif
	If nX > 1
  		TButton():New(aGets[nPos,2]:nTop/2 ,(aGets[nPos,2]:nLeft+nWidth)/2 + 11, "-",;
  				 oDlg, &("{ || nPosExc := "+Str(nPos)+",nOpcao := 0, oDlg:End()}"), 10, 10,/* <nHelpId>*/,/* <oFont>*/,/* <.default.>*/,;
			    .T., /*<.design.>*/, STR0380, /*<.update.>*/, /*<{WhenFunc}>*/,; //"Excluir range"
			    /*<{uValid}>*/,/* <.lCancel.> */)
	Endif
Next
Return
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³MontaMV_PAR ³ Autor ³ Bruno Sobieski		³ Data ³ 23-01-2007 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Monta os dados da expressa ode range no arrau aMV_PAR			³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
*/
Static Function MontaMV_PAR(cDefault,nSize)
Local aRet	:=	{}
//Formato fixo cDe..cAte;cDe2..cAte2; com cDe e cAte com tamanho fixo
If Empty(cDefault)
	aRet := {{Space(nSize),Space(nSize)}}
Else
	While !Empty(cDefault)
		cDe		:=	Substr(cDefault,1,nSize)
		cAte	:=	Substr(cDefault,nSize+2+1,nSize)
		Aadd(aRet,{cDe,cAte})
		cDefault	:=	Substr(cDefault,(nSize*2)+2+1+1)
	Enddo
Endif
Return	aRet

Function PmsAFHVal(cNumSa, cItemSa, aRatAFH)
	Local lContinua := .T.

	If PmsAFHExists(cNumSa, cItemSa) .And. Len(aRatAFH) == 0
		If IsIntegTop(,.T.)
			Aviso("SIGAPMS",STR0438,{"OK"}) //"A solicitação ao armazém esta associada aos projetos (integração RM TOP x Protheus), porém não foram informadas as quantidades a baixar"
			lContinua := .F.
		Else
			lContinua := (Aviso("SIGAPMS", STR0388, {STR0244, STR0245}) == 1)
			//"A solicitação ao armazém está associada aos projetos, porém não foram informadas as quantidades a baixar. Deseja continuar?"
		Endif
	EndIf
Return lContinua
/*
ÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜÜ
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³AddRange	³ Autor ³ Bruno Sobieski		³ Data ³ 23-01-2007 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Inclui mais um linha no range.								³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
*/
Static Function AddRange(aMV_PAR,cTipo,nSize)
Local nUltimo := Len(aMV_PAR)
Local lRet	:=	.F.
If &(ReadVar()) == aMV_PAR[nUltimo,2]
	lRet	:=	.F.
ElseIf !Empty(aMV_PAR[nUltimo,2])
	If cTipo == "C"
		AAdd(aMV_PAR,{Space(nSize),Space(nSize)})
	ElseIf cTipo == "D"
		AAdd(aMV_PAR,{ctod(''),ctod('')})
	Endif
	lRet	:=	.T.
Endif
Return lRet


/*
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³PMSAFGTOK³ Autor ³ Edson Maricate			³ Data ³ 09-02-2001 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Funcao de validacao TudOk da GetDados de rateio da SC.		³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³PMSDLGSC,PMSXFUN												³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
ßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßßß
*/
Function PMSAFGTOK()
Local nx			:= 0
Local nTotQuant		:= 0
Local nPosReg		:= 0
Local lRet			:= .T.
Local nPosProjet	:= aScan(aHeader,{|x|AllTrim(x[2])=="AFG_PROJET"})
Local nPosQuant		:= aScan(aHeader,{|x|AllTrim(x[2])=="AFG_QUANT"})
Local nPosTarefa	:= aScan(aHeader,{|x|AllTrim(x[2])=="AFG_TAREFA"})
Local nPosTRT		:= aScan(aHeader,{|x|AllTrim(x[2])=="AFG_TRT"})
Local lContinua		:= (nPosProjet>0) .and. (nPosQuant>0) .and. (nPosTarefa>0) .and. (nPosTRT>0)
Local nSavN			:= n
Local lPMSAFGMB 	:= ExistBlock("PMSAFGMB")
//ÚÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ¿
//³ Verifica os campos obrigatorios do SX3.              ³
//ÀÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ
For nx := 1 to Len(aCols)
	n	:= nx
	If !aCols[n,len(aCols[n])]
		If lContinua
			nPosReg := aScan(aCols, {|x| x[nPosProjet]==aCols[nx,nPosProjet] .and. x[nPosTarefa]==aCols[nx,nPosTarefa] .and. x[nPosTRT]==aCols[nx,nPosTRT] .and. !x[Len(aHeader)+1]} )
			If (nPosReg > 0) .and. (nPosReg <> nx)
				if l110Auto
					Help(,,"PMSDUPIT",,STR410)
				else
					MsgAlert(STR0410) //"Não é permitido existir 2 itens de amarração com a mesma chave (Projeto+Tarefa+Seq.Empenho). Verificar os itens."
				endif
				lRet := .F.
				Exit
			EndIf
		Endif

		If !Empty(aCols[n,nPosProjet])
			If !PMSAFGLOK()
				lRet := .F.
				Exit
			EndIf
			nTotQuant+=aCols[n,nPosQuant]
		EndIf
	EndIf
Next

If (nTotQuant > nQtMaxSC) .and. lRet
	Help("   ",1,"PMSQTSC")
	lRet := .F.
EndIf

If lPMSAFGMB
	lRet := ExecBlock("PMSAFGMB", .F., .F., {lRet})
EndIf
n := nSavN

Return lRet
/*/
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³PmsGetFrt³ Autor ³ Rodrigo Antonio		³ Data ³ 16-09-2006 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³Retorna a frente atual										³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³Template de CCTR												³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
*/
Function PmsGetFrt()
Return PADR(cCCTRFrente, 15, Space(1))
/*/
±±ÚÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÂÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÄÄÄÄ¿±±
±±³Fun‡…o	 ³ParBGetSize³ Autor ³ Clovis Magenta		  ³ Data ³ 18/06/10 ³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³Descri‡…o ³ Função para calcular automaticamente o tamanho da get		³±±
±±³			 ³ quando parambox utilizada em WIZARD							³±±
±±ÃÄÄÄÄÄÄÄÄÄÄÅÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄ´±±
±±³ Uso		 ³ PARAMBOX()													³±±
±±ÀÄÄÄÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÄÙ±±
*/
Function ParBGetSize(cType,aParametros,cF3,nx)
Local nWidth := 0
DEFAULT cType := "C"
DEFAULT aParametros := {}
DEFAULT cF3 := ""

If Len(aParametros)>0
	If cType == "C"
		nWidth	:= CalcFieldSize(cType,Len(aParametros[nx,3]),,aParametros[nx,4],"") + 10 + If(!Empty(cF3),10,0)
	ElseIf cType == "N"
		nWidth	:= CalcFieldSize(cType,,,aParametros[nx,4],"") + 10
	Else
		nWidth	:= 50
	EndIf
Endif

If	nWidth < 30
	nWidth := 30
Endif
Return nWidth


/*/{Protheus.doc} PmsGrpUser

Função para validar se o codigo do usuario ou do grupo de usuario foi preenchido

@author (desconhecido)

@since desconhecido

@version P11

@param lExclui,  	logico, .T. se trata de exclusão do cadastro de usuario/grupo
@param cAlias, 	caracter, Alias da tabela de usuario por EDT ou a tabela de usuario por tarefa

@return logico,

/*/
Function PmsGrpUser(lExclui, cAlias)
Local lOk := .F.
Local lCpoGrpUsr := (cAlias)->(ColumnPos(cAlias+"_GRPUSR")) > 0

If !lExclui .AND. lCpoGrpUsr
	If cAlias == "AFV"
		lOk := Empty(M->AFV_GRPUSR) .and. Empty(M->AFV_USER)
	Else
		lOk := Empty(M->AFX_GRPUSR) .and. Empty(M->AFX_USER)
	Endif
	If lOk
		MSGALERT(STR0427)
	Endif
Endif

Return !lOk


//-------------------------------------------------------------------
/*/{Protheus.doc} PMSVldGrusr
Valida a existia do grupo de usuario

@Param cGrUser - Código do grupo de usuario do sistema

@Return lRet - retorna Verdadeiro se o grupo de usuario existe, caso contrario retorna falso.

@author Reynaldo Tetsu Miyashita
@since 23/09/2013
@version 1.0
/*/
//-------------------------------------------------------------------
Function PMSVldGrUsr(cGrUser)
Local  lRet := .F.

PswOrder(1)
If PswSeek(cGrUser, .F.)
	lRet := .T.
Else
	Help(" ",1,"REGNOIS")
EndIf

Return lRet


/*/{Protheus.doc} PMSTipNFE
Valida o tipo de Nota Fiscal de entrada (documento de entrada)

@Param cTipo - Tipo de Nota Fiscal de entrada (documento de entrada)

@Return lRet - trata-se de uma nota de complemento

@author Reynaldo Tetsu Miyashita
@since 12/12/2013
@version 1.0
/*/
Static Function PMSTipNFE(cTipo)
Local lNFEFrete := .F.

DEFAULT cTipo := ""

	// A chamada é proveniente do MATA103
	If FUNNAME() == "MATA103"
		// Se cTipo igual a "C" - Trata-se de uma nota fiscal de entrada de complemento de preco/frete
		// Se cTipo igual a "I" - Trata-se de uma nota fiscal de entrada de complemento de ICMS
		If cTipo == "C" .OR. cTipo == "I"
			lNFEFrete := .T.
		EndIf
	EndIf

Return lNFEFrete

/*/{Protheus.doc} NFVldQnt
Valida as quantidades na Nota Fiscal de entrada (documento de entrada)

@Param cDoc - Número da Nota Fiscal de entrada (documento de entrada)
		cSerie - Serie da Nota Fiscal de entrada (documento de entrada)
		cFornece - Fornecedor da Nota Fiscal de entrada (documento de entrada)
		cLoja - Loja do fornecedor da Nota Fiscal de entrada (documento de entrada)
		cItem - Item da Nota Fiscal de entrada (documento de entrada)
		nQtdSD1 - Quantidade do item da Nota Fiscal de entrada (documento de entrada)
		
@Return lRet - quantidades estão validas

@author William Pianheri
@since 29/09/2016
@version 1.0
/*/

Function NFVldQnt(cDoc,cSerie,cFornece,cLoja,cItem,nQtdSD1)

Local lRet			:= .T.
Local cAliasTot	:= GetNextAlias()
Local nPosQtd		:= 0
Local nX			:= 0
Local nY			:= 0
Local nQtdAFN		:= 0

Default cDoc := ""
Default cSerie := ""
Default cFornece := ""
Default cLoja := ""
Default cItem := ""
Default nQuant := 0

If Empty(aRatAFN) .OR. Empty(aHeaderAFN)
	If !(Empty(cDoc) .AND. Empty(cSerie) .AND. Empty(cFornece) .AND. Empty(cLoja) .AND. Empty(cItem)) 
	
		BeginSQL Alias cAliasTot
			
			SELECT SUM(AFN_QUANT) TOTAL 
			FROM %Table:AFN% AFN
			WHERE AFN.AFN_DOC = %Exp:cDoc% AND 
				AFN.AFN_SERIE = %Exp:cSerie% AND
				AFN.AFN_FORNEC = %Exp:cFornece% AND
				AFN.AFN_LOJA = %Exp:cLoja% AND
				AFN.AFN_ITEM = %Exp:cItem% AND
				AFN.%NotDel%
					
		EndSql
		
		If (cAliasTot)->(TOTAL) > nQtdSD1
			Help("   ",1,"PMSQTNF")
			lRet := .F.
		EndIf
		
		(cAliasTot)->(dbCloseArea())
	
	EndIf
Else
	nPosQtd := aScan(aHeaderAFN, {|x| Alltrim(x[2]) == "AFN_QUANT"})
	For nX := 1 to Len(aRatAFN)
		If aRatAFN [nX][1] == cItem
			For nY := 1 to Len(aRatAFN[nX][2])
				nQtdAFN += aRatAFN[nX][2][nY][nPosQtd]
			Next nY
		EndIf
	Next nX
	If nQtdAFN > nQtdSD1
		Help("   ",1,"PMSQTNF")
		lRet := .F.
	EndIf
EndIf

Return lRet

//------------------------------------------------------------------------------
/*/{Protheus.doc} PMSDocTree
Realiza o controle das documentações da EDT/Tarefa no Tree de acordo com a configuração do FLUIG e/ou ECM
@Param cAliasTab - Alias da tabela
@Param nRecnoTab - Registro da Tabela
@Param aDoctos   - Array documentos
@Return NIL
@author CRM/Faturamento
@since Ago/2019
@version 1.0
/*/
//------------------------------------------------------------------------------
Static Function PMSDocTree(cAliasTab, nRecnoTab, aDoctos)

Local lMostraHlp	:= .T.

Default	cAliasTab	:= ""
Default nRecnoTab	:= 0
Default aDoctos		:= {}

Static lKBFluig		:= NIL
Static lECMDisp		:= NIL
Static lUsaECM		:= NIL

If ValType(lECMDisp) == "L"
	lMostraHlp := lECMDisp  //Deve apresentar o Help apenas uma vez caso o ECM não esteja respondendo.
EndIf

lKBFluig	:= IIf( ValType(lKBFluig) <> "L" .AND. lKBFluig == NIL, SuperGetMv("MV_KBFLUIG",,.F.), lKBFluig)
lUsaECM		:= IIf( ValType(lUsaECM)  <> "L" .AND. lUsaECM  == NIL .AND. lKBFluig .AND. SuperGetMv("MV_ECMWS",.F.," ",) <> " ", .T., .F.)
lECMDisp	:= IIf( ValType(lECMDisp) <> "L" .AND. lECMDisp == NIL .AND. lUsaECM, IIf(lKBFluig, (FwGedRootFld() > 0), .F.), lECMDisp)

If lKBFluig //Verifica se a integração com fluig esta ativa
	If lUsaECM
		If lECMDisp //Verifica se a integração com ECM esta ativa
			aDoctos := FWGedFindId((cAliasTab)->(&(FWX2Unico(cAliasTab))), FWGetIdParent(cAliasTab))
		Else
			If lMostraHlp
				Help("", 1, "ECM", ,STR0439, 1,0) //"ECM não disponível"
			EndIf
		EndIf
	EndIf
Else
	MsDocument(cAliasTab, nRecnoTab, 3, , 4, @aDoctos)
EndIf

Return NIL

//-----------------------------------------------------------------------------
/*/{Protheus.doc} PmsInt
    @description
    Verifica se o projeto está finalizado para validar se o mesmo pode ser
	integrado com o documento de entrada através de um pedido de compra
	no módulo do SIGACOM (02)

   	@type  Function
    @sample PmsInt(cPed)
    @author Squad CRM & Faturamento
    @since 03/04/2020
    @version P12
    @param cPed, Caracter, Pedido que será buscado na tabela de amarração entre Projeto x Pedido de Compra

    @return lRet, Logico, Retorna se o projeto pode ser utilizado na integração. 
/*/
//-----------------------------------------------------------------------------
Function PmsInt( cPed, cItemPed )
Local lRet    	:= .T.
Local aArea		:= GetArea()
Local aAJ7Area	:= AJ7->( GetArea() )
Local aSC7Area	:= SC7->( GetArea() )
Local bSeekAJ7	:= Nil
Local bWhileAJ7	:= Nil

Local aRows   := FWSaveRows()
Local cFilAJ7 := FWxFilial( 'AJ7' )
Local cFilSC7 := FWxFilial( 'SC7' )

Default cPed  	:= CriaVar( 'C7_NUM' , .F. )
Default cItemPed:= CriaVar( 'C7_ITEM', .F. )

dbSelectArea("SC7")
dbsetOrder(1) //C7_FILIAL, C7_NUM, C7_ITEM, C7_SEQUEN

dbSelectArea("AJ7")
dbsetOrder(2) //AJ7_FILIAL, AJ7_NUMPC, AJ7_ITEMPC, AJ7_PROJET, AJ7_REVISA, AJ7_TAREFA
bSeekAJ7  := IIf( Empty( cItemPed ), { || AJ7->( dbSeek( cFilAJ7 + cPed ) ) }, { || AJ7->( dbSeek( cFilAJ7 + cPed + cItemPed ) ) } )
bWhileAJ7 := IIf( Empty( cItemPed ), { || AJ7->( !Eof() ) .And. AJ7->AJ7_FILIAL == cFilAJ7 .And. AJ7->AJ7_NUMPC == cPed  } ,{ || AJ7->( !Eof() ) .And. AJ7->AJ7_FILIAL == cFilAJ7 .And. AJ7->AJ7_NUMPC == cPed .And. AJ7->AJ7_ITEMPC == cItemPed } )

If Eval( bSeekAJ7 )
	While Eval( bWhileAJ7 ) 
		If SC7->( dbSeek( cFilSC7 + AJ7->AJ7_NUMPC + AJ7->AJ7_ITEMPC ) ) .And. SC7->( C7_QUANT - C7_QUJE - C7_QTDACLA ) > 0
			If !PmsVldFase("AF8",AJ7->AJ7_PROJET,"83")
				lRet := .F.
				Exit
			EndIf
		EndIf

		AJ7->( dbSkip() )
	EndDo
EndIf

FWRestRows(aRows)
RestArea(aSC7Area)
RestArea(aAJ7Area)
RestArea(aArea)
Return lRet

//-----------------------------------------------------------------------------
/*/{Protheus.doc} FATPDObfuscate
    @description
    Realiza ofuscamento de uma variavel ou de um campo protegido.
	Remover essa função quando não houver releases menor que 12.1.27

    @type  Function
    @sample FATPDObfuscate("999999999","U5_CEL")
    @author Squad CRM & Faturamento
    @since 04/12/2019
    @version P12
    @param xValue, (caracter,numerico,data), Valor que sera ofuscado.
    @param cField, caracter , Campo que sera verificado.
    @param cSource, Caractere, Nome do recurso que buscar dados protegidos.
    @param lLoad, Logico, Efetua a carga automatica do campo informado

    @return xValue, retorna o valor ofuscado.
/*/
//-----------------------------------------------------------------------------
Static Function FATPDObfuscate(xValue, cField, cSource, lLoad)
    
    If FATPDActive()
		xValue := FTPDObfuscate(xValue, cField, cSource, lLoad)
    EndIf

Return xValue

//-----------------------------------------------------------------------------
/*/{Protheus.doc} FATPDLogUser
    @description
    Realiza o log dos dados acessados, de acordo com as informações enviadas, 
    quando a regra de auditoria de rotinas com campos sensíveis ou pessoais estiver habilitada
	Remover essa função quando não houver releases menor que 12.1.27

   @type  Function
    @sample FATPDLogUser(cFunction, nOpc)
    @author Squad CRM & Faturamento
    @since 06/01/2020
    @version P12
    @param cFunction, Caracter, Rotina que será utilizada no log das tabelas
    @param nOpc, Numerico, Opção atribuída a função em execução - Default=0

    @return lRet, Logico, Retorna se o log dos dados foi executado. 
    Caso o log esteja desligado ou a melhoria não esteja aplicada, também retorna falso.

/*/
//-----------------------------------------------------------------------------
Static Function FATPDLogUser(cFunction, nOpc)

	Local lRet := .F.

	If FATPDActive()
		lRet := FTPDLogUser(cFunction, nOpc)
	EndIf 

Return lRet 

//-----------------------------------------------------------------------------
/*/{Protheus.doc} FATPDActive
    @description
    Função que verifica se a melhoria de Dados Protegidos existe.

    @type  Function
    @sample FATPDActive()
    @author Squad CRM & Faturamento
    @since 17/12/2019
    @version P12    
    @return lRet, Logico, Indica se o sistema trabalha com Dados Protegidos
/*/
//-----------------------------------------------------------------------------
Static Function FATPDActive()

    Static _lFTPDActive := Nil
  
    If _lFTPDActive == Nil
        _lFTPDActive := ( GetRpoRelease() >= "12.1.027" .Or. !Empty(GetApoInfo("FATCRMPD.PRW")) )  
    Endif

Return _lFTPDActive
